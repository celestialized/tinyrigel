// This crate feature is required only for the macro-expansion of winrt::include_bindings!() to compile -- specifically when using rust_analyzer for code completion (see below).
// 
// In normal compilations it is unnecessary.
#![feature(fmt_internals)]

// In normal compilation contexts with the need for code completion, we can simply let the include_bindings macro do its job.
// 
// This prevents rust-analyzer from providing code completion, however. The solution is to give rust-analyzer the fully-expanded code. See more notes on this below.
#[cfg(not(rust_analyzer))]
winrt::include_bindings!();

// Recursive expansion of include_bindings! macro
// ===============================================
//
// This is a manually-fixed version of what the "winrt::include_bindings!()" macro outputs, so that rust_analyzer can provide code completion when using the auto-generated winrt rust bindings. It is brittle -- upgrading to a new version of winrt, or declaring new modules for bindings-winrt to generate from the winrt crate, may invalidate this copy and require it to be regenerated (and re-fixed).
//
// This expansion was generated via Rust Analyzer's "recursively expand macro" option, which as of writing (2021-01-14) has some bugs where some tokens are missing spaces between them, requiring some manual intervention via find/replace.
//
// Only compile this outermost module (and everything in it) if we're in a rust_analyzer context for code-completion purposes.
#[cfg(rust_analyzer)]

#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod windows {
  #[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod application_model {
    #[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod background {
      #[repr(transparent)]pub struct IBackgroundTrigger(::winrt::Object);
      impl::std::clone::Clone for IBackgroundTrigger {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IBackgroundTrigger {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IBackgroundTrigger {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IBackgroundTrigger{}
      impl IBackgroundTrigger{}
      unsafe impl::winrt::Interface for IBackgroundTrigger {
        type Vtable = IBackgroundTrigger_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2226364504,24615,19335,[151,144,189,243,247,87,219,215],);
        
      }#[repr(C)]pub struct IBackgroundTrigger_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IBackgroundTrigger {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{84b3a058-6027-4b87-9790-bdf3f757dbd7}")
        };
        
      }impl::std::convert::From<IBackgroundTrigger>for::winrt::Object {
        fn from(value:IBackgroundTrigger) -> Self {
          value.0
        }
      }impl::std::convert::From<&IBackgroundTrigger>for::winrt::Object {
        fn from(value: &IBackgroundTrigger) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IBackgroundTrigger {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IBackgroundTrigger {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IDeviceWatcherTrigger(::winrt::Object);
      impl::std::clone::Clone for IDeviceWatcherTrigger {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceWatcherTrigger {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceWatcherTrigger {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceWatcherTrigger{}
      impl IDeviceWatcherTrigger{}
      unsafe impl::winrt::Interface for IDeviceWatcherTrigger {
        type Vtable = IDeviceWatcherTrigger_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2757853149,34163,16992,[190,252,91,236,137,203,105,61],);
        
      }#[repr(C)]pub struct IDeviceWatcherTrigger_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceWatcherTrigger {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{a4617fdd-8573-4260-befc-5bec89cb693d}")
        };
        
      }impl::std::convert::From<IDeviceWatcherTrigger>for::winrt::Object {
        fn from(value:IDeviceWatcherTrigger) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceWatcherTrigger>for::winrt::Object {
        fn from(value: &IDeviceWatcherTrigger) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceWatcherTrigger {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceWatcherTrigger {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IDeviceWatcherTrigger>for IBackgroundTrigger {
        fn from(value:IDeviceWatcherTrigger) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IDeviceWatcherTrigger>for IBackgroundTrigger {
        fn from(value: &IDeviceWatcherTrigger) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IBackgroundTrigger>>for IDeviceWatcherTrigger {
        fn into(self) ->  ::winrt::Param< 'a ,IBackgroundTrigger>{
          ::winrt::Param::Owned(::std::convert::Into::<IBackgroundTrigger>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IBackgroundTrigger>>for& 'a IDeviceWatcherTrigger {
        fn into(self) ->  ::winrt::Param< 'a ,IBackgroundTrigger>{
          ::winrt::Param::Owned(::std::convert::Into::<IBackgroundTrigger>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DeviceWatcherTrigger(::winrt::Object);
      impl DeviceWatcherTrigger{}
      impl::std::clone::Clone for DeviceWatcherTrigger {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DeviceWatcherTrigger {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceWatcherTrigger{}
      impl::std::fmt::Debug for DeviceWatcherTrigger {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DeviceWatcherTrigger {
        const NAME: & 'static str = "Windows.ApplicationModel.Background.DeviceWatcherTrigger";
        
      }unsafe impl::winrt::Interface for DeviceWatcherTrigger {
        type Vtable = IDeviceWatcherTrigger_abi;
        const IID: ::winrt::Guid =  <IDeviceWatcherTrigger as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DeviceWatcherTrigger {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.ApplicationModel.Background.DeviceWatcherTrigger;{a4617fdd-8573-4260-befc-5bec89cb693d})");
        
      }impl::std::convert::From<DeviceWatcherTrigger>for::winrt::Object {
        fn from(value:DeviceWatcherTrigger) -> Self {
          value.0
        }
      }impl::std::convert::From<&DeviceWatcherTrigger>for::winrt::Object {
        fn from(value: &DeviceWatcherTrigger) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DeviceWatcherTrigger {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DeviceWatcherTrigger {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceWatcherTrigger>for IBackgroundTrigger {
        fn from(value:DeviceWatcherTrigger) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&DeviceWatcherTrigger>for IBackgroundTrigger {
        fn from(value: &DeviceWatcherTrigger) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IBackgroundTrigger>>for DeviceWatcherTrigger {
        fn into(self) ->  ::winrt::Param< 'a ,IBackgroundTrigger>{
          ::winrt::Param::Owned(::std::convert::Into::<IBackgroundTrigger>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IBackgroundTrigger>>for& 'a DeviceWatcherTrigger {
        fn into(self) ->  ::winrt::Param< 'a ,IBackgroundTrigger>{
          ::winrt::Param::Owned(::std::convert::Into::<IBackgroundTrigger>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceWatcherTrigger>for IDeviceWatcherTrigger {
        fn from(value:DeviceWatcherTrigger) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DeviceWatcherTrigger>for IDeviceWatcherTrigger {
        fn from(value: &DeviceWatcherTrigger) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceWatcherTrigger>>for DeviceWatcherTrigger {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceWatcherTrigger>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceWatcherTrigger>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceWatcherTrigger>>for& 'a DeviceWatcherTrigger {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceWatcherTrigger>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceWatcherTrigger>::into(::std::clone::Clone::clone(self),))
        }
      }
    }
  }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod data {
    #[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod text {
      #[repr(C)]#[allow(non_snake_case)]pub struct TextSegment {
        pub start_position:u32,pub length:u32,
      }#[repr(C)]pub struct TextSegment_abi(u32,u32);
      unsafe impl::winrt::Abi for TextSegment {
        type Abi = TextSegment_abi;
        
      }impl::std::default::Default for TextSegment {
        fn default() -> Self {
          Self {
            start_position:0,length:0,
          }
        }
      }impl::std::fmt::Debug for TextSegment {
        fn fmt(&self,fmt: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          fmt.debug_struct("TextSegment").field("start_position", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.start_position),std::fmt::Display::fmt),])).field("length", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.length),std::fmt::Display::fmt),])).finish()
        }
      }impl::std::clone::Clone for TextSegment {
        fn clone(&self) -> Self {
          Self {
            start_position:self.start_position,length:self.length,
          }
        }
      }impl::std::cmp::PartialEq for TextSegment {
        fn eq(&self,other: &Self) -> bool {
          self.start_position==other.start_position&&self.length==other.length
        }
      }impl::std::cmp::Eq for TextSegment{}
      unsafe impl::winrt::RuntimeType for TextSegment {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"struct(Windows.Data.Text.TextSegment;u4;u4)",);
        
      }
    }
  }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod devices {
    #[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod enumeration {
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct DeviceAccessStatus(i32);
      impl::std::convert::From<i32>for DeviceAccessStatus {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for DeviceAccessStatus {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for DeviceAccessStatus {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for DeviceAccessStatus {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for DeviceAccessStatus {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceAccessStatus{}
      impl::std::marker::Copy for DeviceAccessStatus{}
      impl DeviceAccessStatus {
        #![allow(non_upper_case_globals)]pub const Unspecified:Self = Self(0i32);
        pub const Allowed:Self = Self(1i32);
        pub const DeniedByUser:Self = Self(2i32);
        pub const DeniedBySystem:Self = Self(3i32);
        
      }unsafe impl::winrt::Abi for DeviceAccessStatus {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for DeviceAccessStatus {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Devices.Enumeration.DeviceAccessStatus;i4)",);
        
      }#[repr(transparent)]pub struct IDeviceAccessChangedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IDeviceAccessChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceAccessChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceAccessChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceAccessChangedEventArgs{}
      impl IDeviceAccessChangedEventArgs {
        pub fn status(&self) ->  ::winrt::Result<DeviceAccessStatus>{
          let this = self;
          unsafe {
            let mut result__: <DeviceAccessStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceAccessStatus>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceAccessChangedEventArgs {
        type Vtable = IDeviceAccessChangedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3738831820,20381,20312,[157,186,169,188,128,4,8,213],);
        
      }#[repr(C)]pub struct IDeviceAccessChangedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut DeviceAccessStatus,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceAccessChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{deda0bcc-4f9d-4f58-9dba-a9bc800408d5}")
        };
        
      }impl::std::convert::From<IDeviceAccessChangedEventArgs>for::winrt::Object {
        fn from(value:IDeviceAccessChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceAccessChangedEventArgs>for::winrt::Object {
        fn from(value: &IDeviceAccessChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceAccessChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceAccessChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IDeviceAccessChangedEventArgs2(::winrt::Object);
      impl::std::clone::Clone for IDeviceAccessChangedEventArgs2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceAccessChangedEventArgs2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceAccessChangedEventArgs2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceAccessChangedEventArgs2{}
      impl IDeviceAccessChangedEventArgs2 {
        pub fn status(&self) ->  ::winrt::Result<DeviceAccessStatus>{
          let this =  &::winrt::Interface::cast::<IDeviceAccessChangedEventArgs>(self).unwrap();
          unsafe {
            let mut result__: <DeviceAccessStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceAccessStatus>(result__)
          }
        }pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceAccessChangedEventArgs2 {
        type Vtable = IDeviceAccessChangedEventArgs2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2186424930,37707,19248,[161,120,173,195,159,47,43,227],);
        
      }#[repr(C)]pub struct IDeviceAccessChangedEventArgs2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceAccessChangedEventArgs2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{82523262-934b-4b30-a178-adc39f2f2be3}")
        };
        
      }impl::std::convert::From<IDeviceAccessChangedEventArgs2>for::winrt::Object {
        fn from(value:IDeviceAccessChangedEventArgs2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceAccessChangedEventArgs2>for::winrt::Object {
        fn from(value: &IDeviceAccessChangedEventArgs2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceAccessChangedEventArgs2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceAccessChangedEventArgs2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IDeviceAccessChangedEventArgs2>for IDeviceAccessChangedEventArgs {
        fn from(value:IDeviceAccessChangedEventArgs2) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IDeviceAccessChangedEventArgs2>for IDeviceAccessChangedEventArgs {
        fn from(value: &IDeviceAccessChangedEventArgs2) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceAccessChangedEventArgs>>for IDeviceAccessChangedEventArgs2 {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceAccessChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceAccessChangedEventArgs>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceAccessChangedEventArgs>>for& 'a IDeviceAccessChangedEventArgs2 {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceAccessChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceAccessChangedEventArgs>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct DeviceAccessChangedEventArgs(::winrt::Object);
      impl DeviceAccessChangedEventArgs {
        pub fn status(&self) ->  ::winrt::Result<DeviceAccessStatus>{
          let this = self;
          unsafe {
            let mut result__: <DeviceAccessStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceAccessStatus>(result__)
          }
        }pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IDeviceAccessChangedEventArgs2>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }
      }impl::std::clone::Clone for DeviceAccessChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DeviceAccessChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceAccessChangedEventArgs{}
      impl::std::fmt::Debug for DeviceAccessChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DeviceAccessChangedEventArgs {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DeviceAccessChangedEventArgs";
        
      }unsafe impl::winrt::Interface for DeviceAccessChangedEventArgs {
        type Vtable = IDeviceAccessChangedEventArgs_abi;
        const IID: ::winrt::Guid =  <IDeviceAccessChangedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DeviceAccessChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DeviceAccessChangedEventArgs;{deda0bcc-4f9d-4f58-9dba-a9bc800408d5})");
        
      }impl::std::convert::From<DeviceAccessChangedEventArgs>for::winrt::Object {
        fn from(value:DeviceAccessChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&DeviceAccessChangedEventArgs>for::winrt::Object {
        fn from(value: &DeviceAccessChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DeviceAccessChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DeviceAccessChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceAccessChangedEventArgs>for IDeviceAccessChangedEventArgs {
        fn from(value:DeviceAccessChangedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DeviceAccessChangedEventArgs>for IDeviceAccessChangedEventArgs {
        fn from(value: &DeviceAccessChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceAccessChangedEventArgs>>for DeviceAccessChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceAccessChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceAccessChangedEventArgs>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceAccessChangedEventArgs>>for& 'a DeviceAccessChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceAccessChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceAccessChangedEventArgs>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<DeviceAccessChangedEventArgs>for IDeviceAccessChangedEventArgs2 {
        fn from(value:DeviceAccessChangedEventArgs) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&DeviceAccessChangedEventArgs>for IDeviceAccessChangedEventArgs2 {
        fn from(value: &DeviceAccessChangedEventArgs) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceAccessChangedEventArgs2>>for DeviceAccessChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceAccessChangedEventArgs2>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceAccessChangedEventArgs2>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceAccessChangedEventArgs2>>for& 'a DeviceAccessChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceAccessChangedEventArgs2>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceAccessChangedEventArgs2>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for DeviceAccessChangedEventArgs{}
      unsafe impl::std::marker::Sync for DeviceAccessChangedEventArgs{}
      #[repr(transparent)]pub struct IDeviceAccessInformation(::winrt::Object);
      impl::std::clone::Clone for IDeviceAccessInformation {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceAccessInformation {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceAccessInformation {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceAccessInformation{}
      impl IDeviceAccessInformation {
        pub fn access_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DeviceAccessInformation,DeviceAccessChangedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_access_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,cookie:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),cookie.into().abi(),).ok()
          }
        }pub fn current_status(&self) ->  ::winrt::Result<DeviceAccessStatus>{
          let this = self;
          unsafe {
            let mut result__: <DeviceAccessStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceAccessStatus>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceAccessInformation {
        type Vtable = IDeviceAccessInformation_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(195730035,28133,18709,[141,221,154,5,84,166,245,69],);
        
      }#[repr(C)]pub struct IDeviceAccessInformation_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,cookie:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut DeviceAccessStatus,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceAccessInformation {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{0baa9a73-6de5-4915-8ddd-9a0554a6f545}")
        };
        
      }impl::std::convert::From<IDeviceAccessInformation>for::winrt::Object {
        fn from(value:IDeviceAccessInformation) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceAccessInformation>for::winrt::Object {
        fn from(value: &IDeviceAccessInformation) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceAccessInformation {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceAccessInformation {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct DeviceClass(i32);
      impl::std::convert::From<i32>for DeviceClass {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for DeviceClass {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for DeviceClass {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for DeviceClass {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for DeviceClass {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceClass{}
      impl::std::marker::Copy for DeviceClass{}
      impl DeviceClass {
        #![allow(non_upper_case_globals)]pub const All:Self = Self(0i32);
        pub const AudioCapture:Self = Self(1i32);
        pub const AudioRender:Self = Self(2i32);
        pub const PortableStorageDevice:Self = Self(3i32);
        pub const VideoCapture:Self = Self(4i32);
        pub const ImageScanner:Self = Self(5i32);
        pub const Location:Self = Self(6i32);
        
      }unsafe impl::winrt::Abi for DeviceClass {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for DeviceClass {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Devices.Enumeration.DeviceClass;i4)",);
        
      }#[repr(transparent)]pub struct IDeviceAccessInformationStatics(::winrt::Object);
      impl::std::clone::Clone for IDeviceAccessInformationStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceAccessInformationStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceAccessInformationStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceAccessInformationStatics{}
      impl IDeviceAccessInformationStatics {
        pub fn create_from_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,device_id:T0__,) ->  ::winrt::Result<DeviceAccessInformation>{
          let this = self;
          unsafe {
            let mut result__: <DeviceAccessInformation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),device_id.into().abi(), &mut result__,).from_abi::<DeviceAccessInformation>(result__)
          }
        }pub fn create_from_device_class_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Guid>>, >(&self,device_class_id:T0__,) ->  ::winrt::Result<DeviceAccessInformation>{
          let this = self;
          unsafe {
            let mut result__: <DeviceAccessInformation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),device_class_id.into().abi(), &mut result__,).from_abi::<DeviceAccessInformation>(result__)
          }
        }pub fn create_from_device_class(&self,device_class:DeviceClass,) ->  ::winrt::Result<DeviceAccessInformation>{
          let this = self;
          unsafe {
            let mut result__: <DeviceAccessInformation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),device_class, &mut result__,).from_abi::<DeviceAccessInformation>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceAccessInformationStatics {
        type Vtable = IDeviceAccessInformationStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1464587219,24368,17869,[138,148,114,79,229,151,48,132],);
        
      }#[repr(C)]pub struct IDeviceAccessInformationStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,device_id: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,device_class_id: ::winrt::Guid,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,device_class:DeviceClass,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceAccessInformationStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{574bd3d3-5f30-45cd-8a94-724fe5973084}")
        };
        
      }impl::std::convert::From<IDeviceAccessInformationStatics>for::winrt::Object {
        fn from(value:IDeviceAccessInformationStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceAccessInformationStatics>for::winrt::Object {
        fn from(value: &IDeviceAccessInformationStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceAccessInformationStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceAccessInformationStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DeviceAccessInformation(::winrt::Object);
      impl DeviceAccessInformation {
        pub fn access_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DeviceAccessInformation,DeviceAccessChangedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_access_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,cookie:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),cookie.into().abi(),).ok()
          }
        }pub fn current_status(&self) ->  ::winrt::Result<DeviceAccessStatus>{
          let this = self;
          unsafe {
            let mut result__: <DeviceAccessStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceAccessStatus>(result__)
          }
        }pub fn create_from_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(device_id:T0__,) ->  ::winrt::Result<DeviceAccessInformation>{
          Self::IDeviceAccessInformationStatics(|this|unsafe {
            let mut result__: <DeviceAccessInformation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),device_id.into().abi(), &mut result__,).from_abi::<DeviceAccessInformation>(result__)
          })
        }pub fn create_from_device_class_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Guid>>, >(device_class_id:T0__,) ->  ::winrt::Result<DeviceAccessInformation>{
          Self::IDeviceAccessInformationStatics(|this|unsafe {
            let mut result__: <DeviceAccessInformation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),device_class_id.into().abi(), &mut result__,).from_abi::<DeviceAccessInformation>(result__)
          })
        }pub fn create_from_device_class(device_class:DeviceClass,) ->  ::winrt::Result<DeviceAccessInformation>{
          Self::IDeviceAccessInformationStatics(|this|unsafe {
            let mut result__: <DeviceAccessInformation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),device_class, &mut result__,).from_abi::<DeviceAccessInformation>(result__)
          })
        }#[allow(non_snake_case)]fn IDeviceAccessInformationStatics<R,F:FnOnce(&IDeviceAccessInformationStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<DeviceAccessInformation,IDeviceAccessInformationStatics, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for DeviceAccessInformation {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DeviceAccessInformation {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceAccessInformation{}
      impl::std::fmt::Debug for DeviceAccessInformation {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DeviceAccessInformation {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DeviceAccessInformation";
        
      }unsafe impl::winrt::Interface for DeviceAccessInformation {
        type Vtable = IDeviceAccessInformation_abi;
        const IID: ::winrt::Guid =  <IDeviceAccessInformation as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DeviceAccessInformation {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DeviceAccessInformation;{0baa9a73-6de5-4915-8ddd-9a0554a6f545})");
        
      }impl::std::convert::From<DeviceAccessInformation>for::winrt::Object {
        fn from(value:DeviceAccessInformation) -> Self {
          value.0
        }
      }impl::std::convert::From<&DeviceAccessInformation>for::winrt::Object {
        fn from(value: &DeviceAccessInformation) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DeviceAccessInformation {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DeviceAccessInformation {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceAccessInformation>for IDeviceAccessInformation {
        fn from(value:DeviceAccessInformation) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DeviceAccessInformation>for IDeviceAccessInformation {
        fn from(value: &DeviceAccessInformation) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceAccessInformation>>for DeviceAccessInformation {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceAccessInformation>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceAccessInformation>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceAccessInformation>>for& 'a DeviceAccessInformation {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceAccessInformation>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceAccessInformation>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for DeviceAccessInformation{}
      unsafe impl::std::marker::Sync for DeviceAccessInformation{}
      #[repr(transparent)]pub struct IDeviceConnectionChangeTriggerDetails(::winrt::Object);
      impl::std::clone::Clone for IDeviceConnectionChangeTriggerDetails {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceConnectionChangeTriggerDetails {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceConnectionChangeTriggerDetails {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceConnectionChangeTriggerDetails{}
      impl IDeviceConnectionChangeTriggerDetails {
        pub fn device_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceConnectionChangeTriggerDetails {
        type Vtable = IDeviceConnectionChangeTriggerDetails_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3092745228,48065,18507,[191,250,123,49,220,194,0,178],);
        
      }#[repr(C)]pub struct IDeviceConnectionChangeTriggerDetails_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceConnectionChangeTriggerDetails {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{b8578c0c-bbc1-484b-bffa-7b31dcc200b2}")
        };
        
      }impl::std::convert::From<IDeviceConnectionChangeTriggerDetails>for::winrt::Object {
        fn from(value:IDeviceConnectionChangeTriggerDetails) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceConnectionChangeTriggerDetails>for::winrt::Object {
        fn from(value: &IDeviceConnectionChangeTriggerDetails) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceConnectionChangeTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceConnectionChangeTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DeviceConnectionChangeTriggerDetails(::winrt::Object);
      impl DeviceConnectionChangeTriggerDetails {
        pub fn device_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }
      }impl::std::clone::Clone for DeviceConnectionChangeTriggerDetails {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DeviceConnectionChangeTriggerDetails {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceConnectionChangeTriggerDetails{}
      impl::std::fmt::Debug for DeviceConnectionChangeTriggerDetails {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DeviceConnectionChangeTriggerDetails {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails";
        
      }unsafe impl::winrt::Interface for DeviceConnectionChangeTriggerDetails {
        type Vtable = IDeviceConnectionChangeTriggerDetails_abi;
        const IID: ::winrt::Guid =  <IDeviceConnectionChangeTriggerDetails as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DeviceConnectionChangeTriggerDetails {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails;{b8578c0c-bbc1-484b-bffa-7b31dcc200b2})");
        
      }impl::std::convert::From<DeviceConnectionChangeTriggerDetails>for::winrt::Object {
        fn from(value:DeviceConnectionChangeTriggerDetails) -> Self {
          value.0
        }
      }impl::std::convert::From<&DeviceConnectionChangeTriggerDetails>for::winrt::Object {
        fn from(value: &DeviceConnectionChangeTriggerDetails) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DeviceConnectionChangeTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DeviceConnectionChangeTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceConnectionChangeTriggerDetails>for IDeviceConnectionChangeTriggerDetails {
        fn from(value:DeviceConnectionChangeTriggerDetails) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DeviceConnectionChangeTriggerDetails>for IDeviceConnectionChangeTriggerDetails {
        fn from(value: &DeviceConnectionChangeTriggerDetails) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceConnectionChangeTriggerDetails>>for DeviceConnectionChangeTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceConnectionChangeTriggerDetails>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceConnectionChangeTriggerDetails, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceConnectionChangeTriggerDetails>>for& 'a DeviceConnectionChangeTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceConnectionChangeTriggerDetails>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceConnectionChangeTriggerDetails, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for DeviceConnectionChangeTriggerDetails{}
      unsafe impl::std::marker::Sync for DeviceConnectionChangeTriggerDetails{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct Panel(i32);
      impl::std::convert::From<i32>for Panel {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for Panel {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for Panel {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for Panel {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for Panel {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for Panel{}
      impl::std::marker::Copy for Panel{}
      impl Panel {
        #![allow(non_upper_case_globals)]pub const Unknown:Self = Self(0i32);
        pub const Front:Self = Self(1i32);
        pub const Back:Self = Self(2i32);
        pub const Top:Self = Self(3i32);
        pub const Bottom:Self = Self(4i32);
        pub const Left:Self = Self(5i32);
        pub const Right:Self = Self(6i32);
        
      }unsafe impl::winrt::Abi for Panel {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for Panel {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Devices.Enumeration.Panel;i4)");
        
      }#[repr(transparent)]pub struct IEnclosureLocation(::winrt::Object);
      impl::std::clone::Clone for IEnclosureLocation {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IEnclosureLocation {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IEnclosureLocation {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IEnclosureLocation{}
      impl IEnclosureLocation {
        pub fn in_dock(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn in_lid(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn panel(&self) ->  ::winrt::Result<Panel>{
          let this = self;
          unsafe {
            let mut result__: <Panel as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<Panel>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IEnclosureLocation {
        type Vtable = IEnclosureLocation_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1110706727,22544,17820,[170,187,198,94,31,129,62,207],);
        
      }#[repr(C)]pub struct IEnclosureLocation_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut Panel,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IEnclosureLocation {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{42340a27-5810-459c-aabb-c65e1f813ecf}")
        };
        
      }impl::std::convert::From<IEnclosureLocation>for::winrt::Object {
        fn from(value:IEnclosureLocation) -> Self {
          value.0
        }
      }impl::std::convert::From<&IEnclosureLocation>for::winrt::Object {
        fn from(value: &IEnclosureLocation) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IEnclosureLocation {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IEnclosureLocation {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IEnclosureLocation2(::winrt::Object);
      impl::std::clone::Clone for IEnclosureLocation2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IEnclosureLocation2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IEnclosureLocation2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IEnclosureLocation2{}
      impl IEnclosureLocation2 {
        pub fn in_dock(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IEnclosureLocation>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn in_lid(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IEnclosureLocation>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn panel(&self) ->  ::winrt::Result<Panel>{
          let this =  &::winrt::Interface::cast::<IEnclosureLocation>(self).unwrap();
          unsafe {
            let mut result__: <Panel as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<Panel>(result__)
          }
        }pub fn rotation_angle_in_degrees_clockwise(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IEnclosureLocation2 {
        type Vtable = IEnclosureLocation2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(679844187,57469,18525,[138,158,189,242,154,239,79,102],);
        
      }#[repr(C)]pub struct IEnclosureLocation2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IEnclosureLocation2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{2885995b-e07d-485d-8a9e-bdf29aef4f66}")
        };
        
      }impl::std::convert::From<IEnclosureLocation2>for::winrt::Object {
        fn from(value:IEnclosureLocation2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IEnclosureLocation2>for::winrt::Object {
        fn from(value: &IEnclosureLocation2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IEnclosureLocation2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IEnclosureLocation2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IEnclosureLocation2>for IEnclosureLocation {
        fn from(value:IEnclosureLocation2) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IEnclosureLocation2>for IEnclosureLocation {
        fn from(value: &IEnclosureLocation2) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IEnclosureLocation>>for IEnclosureLocation2 {
        fn into(self) ->  ::winrt::Param< 'a ,IEnclosureLocation>{
          ::winrt::Param::Owned(::std::convert::Into::<IEnclosureLocation>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IEnclosureLocation>>for& 'a IEnclosureLocation2 {
        fn into(self) ->  ::winrt::Param< 'a ,IEnclosureLocation>{
          ::winrt::Param::Owned(::std::convert::Into::<IEnclosureLocation>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct EnclosureLocation(::winrt::Object);
      impl EnclosureLocation {
        pub fn in_dock(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn in_lid(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn panel(&self) ->  ::winrt::Result<Panel>{
          let this = self;
          unsafe {
            let mut result__: <Panel as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<Panel>(result__)
          }
        }pub fn rotation_angle_in_degrees_clockwise(&self) ->  ::winrt::Result<u32>{
          let this =  &::winrt::Interface::cast::<IEnclosureLocation2>(self).unwrap();
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }impl::std::clone::Clone for EnclosureLocation {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for EnclosureLocation {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for EnclosureLocation{}
      impl::std::fmt::Debug for EnclosureLocation {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for EnclosureLocation {
        const NAME: & 'static str = "Windows.Devices.Enumeration.EnclosureLocation";
        
      }unsafe impl::winrt::Interface for EnclosureLocation {
        type Vtable = IEnclosureLocation_abi;
        const IID: ::winrt::Guid =  <IEnclosureLocation as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for EnclosureLocation {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.EnclosureLocation;{42340a27-5810-459c-aabb-c65e1f813ecf})");
        
      }impl::std::convert::From<EnclosureLocation>for::winrt::Object {
        fn from(value:EnclosureLocation) -> Self {
          value.0
        }
      }impl::std::convert::From<&EnclosureLocation>for::winrt::Object {
        fn from(value: &EnclosureLocation) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for EnclosureLocation {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a EnclosureLocation {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<EnclosureLocation>for IEnclosureLocation {
        fn from(value:EnclosureLocation) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&EnclosureLocation>for IEnclosureLocation {
        fn from(value: &EnclosureLocation) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IEnclosureLocation>>for EnclosureLocation {
        fn into(self) ->  ::winrt::Param< 'a ,IEnclosureLocation>{
          ::winrt::Param::Owned(::std::convert::Into::<IEnclosureLocation>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IEnclosureLocation>>for& 'a EnclosureLocation {
        fn into(self) ->  ::winrt::Param< 'a ,IEnclosureLocation>{
          ::winrt::Param::Owned(::std::convert::Into::<IEnclosureLocation>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<EnclosureLocation>for IEnclosureLocation2 {
        fn from(value:EnclosureLocation) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&EnclosureLocation>for IEnclosureLocation2 {
        fn from(value: &EnclosureLocation) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IEnclosureLocation2>>for EnclosureLocation {
        fn into(self) ->  ::winrt::Param< 'a ,IEnclosureLocation2>{
          ::winrt::Param::Owned(::std::convert::Into::<IEnclosureLocation2>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IEnclosureLocation2>>for& 'a EnclosureLocation {
        fn into(self) ->  ::winrt::Param< 'a ,IEnclosureLocation2>{
          ::winrt::Param::Owned(::std::convert::Into::<IEnclosureLocation2>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for EnclosureLocation{}
      unsafe impl::std::marker::Sync for EnclosureLocation{}
      #[repr(transparent)]pub struct IDeviceInformationUpdate(::winrt::Object);
      impl::std::clone::Clone for IDeviceInformationUpdate {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceInformationUpdate {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceInformationUpdate {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceInformationUpdate{}
      impl IDeviceInformationUpdate {
        pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn properties(&self,) ->  ::winrt::Result<super::super::foundation::collections::IMapView< ::winrt::HString, ::winrt::Object, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IMapView< ::winrt::HString, ::winrt::Object, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IMapView< ::winrt::HString, ::winrt::Object, >>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceInformationUpdate {
        type Vtable = IDeviceInformationUpdate_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2402374405,55666,17591,[163,126,158,130,44,120,33,59],);
        
      }#[repr(C)]pub struct IDeviceInformationUpdate_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceInformationUpdate {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{8f315305-d972-44b7-a37e-9e822c78213b}")
        };
        
      }impl::std::convert::From<IDeviceInformationUpdate>for::winrt::Object {
        fn from(value:IDeviceInformationUpdate) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceInformationUpdate>for::winrt::Object {
        fn from(value: &IDeviceInformationUpdate) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceInformationUpdate {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceInformationUpdate {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct DeviceInformationKind(i32);
      impl::std::convert::From<i32>for DeviceInformationKind {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for DeviceInformationKind {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for DeviceInformationKind {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for DeviceInformationKind {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for DeviceInformationKind {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceInformationKind{}
      impl::std::marker::Copy for DeviceInformationKind{}
      impl DeviceInformationKind {
        #![allow(non_upper_case_globals)]pub const Unknown:Self = Self(0i32);
        pub const DeviceInterface:Self = Self(1i32);
        pub const DeviceContainer:Self = Self(2i32);
        pub const Device:Self = Self(3i32);
        pub const DeviceInterfaceClass:Self = Self(4i32);
        pub const AssociationEndpoint:Self = Self(5i32);
        pub const AssociationEndpointContainer:Self = Self(6i32);
        pub const AssociationEndpointService:Self = Self(7i32);
        pub const DevicePanel:Self = Self(8i32);
        
      }unsafe impl::winrt::Abi for DeviceInformationKind {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for DeviceInformationKind {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Devices.Enumeration.DeviceInformationKind;i4)",);
        
      }#[repr(transparent)]pub struct IDeviceInformationUpdate2(::winrt::Object);
      impl::std::clone::Clone for IDeviceInformationUpdate2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceInformationUpdate2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceInformationUpdate2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceInformationUpdate2{}
      impl IDeviceInformationUpdate2 {
        pub fn kind(&self) ->  ::winrt::Result<DeviceInformationKind>{
          let this = self;
          unsafe {
            let mut result__: <DeviceInformationKind as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformationKind>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceInformationUpdate2 {
        type Vtable = IDeviceInformationUpdate2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1570575500,43123,18526,[186,166,170,98,7,136,227,204],);
        
      }#[repr(C)]pub struct IDeviceInformationUpdate2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut DeviceInformationKind,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceInformationUpdate2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{5d9d148c-a873-485e-baa6-aa620788e3cc}")
        };
        
      }impl::std::convert::From<IDeviceInformationUpdate2>for::winrt::Object {
        fn from(value:IDeviceInformationUpdate2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceInformationUpdate2>for::winrt::Object {
        fn from(value: &IDeviceInformationUpdate2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceInformationUpdate2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceInformationUpdate2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DeviceInformationUpdate(::winrt::Object);
      impl DeviceInformationUpdate {
        pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn properties(&self,) ->  ::winrt::Result<super::super::foundation::collections::IMapView< ::winrt::HString, ::winrt::Object, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IMapView< ::winrt::HString, ::winrt::Object, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IMapView< ::winrt::HString, ::winrt::Object, >>(result__)
          }
        }pub fn kind(&self) ->  ::winrt::Result<DeviceInformationKind>{
          let this =  &::winrt::Interface::cast::<IDeviceInformationUpdate2>(self).unwrap();
          unsafe {
            let mut result__: <DeviceInformationKind as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformationKind>(result__)
          }
        }
      }impl::std::clone::Clone for DeviceInformationUpdate {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DeviceInformationUpdate {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceInformationUpdate{}
      impl::std::fmt::Debug for DeviceInformationUpdate {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DeviceInformationUpdate {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DeviceInformationUpdate";
        
      }unsafe impl::winrt::Interface for DeviceInformationUpdate {
        type Vtable = IDeviceInformationUpdate_abi;
        const IID: ::winrt::Guid =  <IDeviceInformationUpdate as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DeviceInformationUpdate {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DeviceInformationUpdate;{8f315305-d972-44b7-a37e-9e822c78213b})");
        
      }impl::std::convert::From<DeviceInformationUpdate>for::winrt::Object {
        fn from(value:DeviceInformationUpdate) -> Self {
          value.0
        }
      }impl::std::convert::From<&DeviceInformationUpdate>for::winrt::Object {
        fn from(value: &DeviceInformationUpdate) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DeviceInformationUpdate {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DeviceInformationUpdate {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceInformationUpdate>for IDeviceInformationUpdate {
        fn from(value:DeviceInformationUpdate) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DeviceInformationUpdate>for IDeviceInformationUpdate {
        fn from(value: &DeviceInformationUpdate) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceInformationUpdate>>for DeviceInformationUpdate {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceInformationUpdate>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceInformationUpdate>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceInformationUpdate>>for& 'a DeviceInformationUpdate {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceInformationUpdate>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceInformationUpdate>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceInformationUpdate>for IDeviceInformationUpdate2 {
        fn from(value:DeviceInformationUpdate) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&DeviceInformationUpdate>for IDeviceInformationUpdate2 {
        fn from(value: &DeviceInformationUpdate) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceInformationUpdate2>>for DeviceInformationUpdate {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceInformationUpdate2>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceInformationUpdate2>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceInformationUpdate2>>for& 'a DeviceInformationUpdate {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceInformationUpdate2>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceInformationUpdate2>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for DeviceInformationUpdate{}
      unsafe impl::std::marker::Sync for DeviceInformationUpdate{}
      #[repr(transparent)]pub struct DeviceThumbnail(::winrt::Object);
      impl DeviceThumbnail {
        pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn content_type(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IContentTypeProvider, >(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn read_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IBuffer>, >, >(&self,buffer:T0__,count:u32,options:super::super::storage::streams::InputStreamOptions,) ->  ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<super::super::storage::streams::IBuffer,u32, >, >{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IInputStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperationWithProgress<super::super::storage::streams::IBuffer,u32, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),buffer.into().abi(),count,options, &mut result__,).from_abi::<super::super::foundation::IAsyncOperationWithProgress<super::super::storage::streams::IBuffer,u32, >>(result__)
          }
        }pub fn write_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IBuffer>, >, >(&self,buffer:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<u32,u32>>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IOutputStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperationWithProgress<u32,u32, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),buffer.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperationWithProgress:: <u32,u32> >(result__)
          }
        }pub fn flush_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<bool>>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IOutputStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <bool>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<bool>>(result__)
          }
        }pub fn size(&self) ->  ::winrt::Result<u64>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u64>(result__)
          }
        }pub fn set_size(&self,value:u64) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn get_input_stream_at(&self,position:u64,) ->  ::winrt::Result<super::super::storage::streams::IInputStream>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::storage::streams::IInputStream as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),position, &mut result__,).from_abi::<super::super::storage::streams::IInputStream>(result__)
          }
        }pub fn get_output_stream_at(&self,position:u64,) ->  ::winrt::Result<super::super::storage::streams::IOutputStream>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::storage::streams::IOutputStream as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),position, &mut result__,).from_abi::<super::super::storage::streams::IOutputStream>(result__)
          }
        }pub fn position(&self) ->  ::winrt::Result<u64>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u64>(result__)
          }
        }pub fn seek(&self,position:u64) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),position).ok()
          }
        }pub fn clone_stream(&self,) ->  ::winrt::Result<super::super::storage::streams::IRandomAccessStream>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::storage::streams::IRandomAccessStream as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::storage::streams::IRandomAccessStream>(result__)
          }
        }pub fn can_read(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn can_write(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }
      }impl::std::clone::Clone for DeviceThumbnail {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DeviceThumbnail {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceThumbnail{}
      impl::std::fmt::Debug for DeviceThumbnail {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DeviceThumbnail {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DeviceThumbnail";
        
      }unsafe impl::winrt::Interface for DeviceThumbnail {
        type Vtable = super::super::storage::streams::IRandomAccessStreamWithContentType_abi;
        const IID: ::winrt::Guid =  <super::super::storage::streams::IRandomAccessStreamWithContentType as::winrt::Interface> ::IID;
        
      }unsafe impl::winrt::RuntimeType for DeviceThumbnail {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DeviceThumbnail;{cc254827-4b3d-438f-9232-10c76bc7e038})");
        
      }impl::std::convert::From<DeviceThumbnail>for::winrt::Object {
        fn from(value:DeviceThumbnail) -> Self {
          value.0
        }
      }impl::std::convert::From<&DeviceThumbnail>for::winrt::Object {
        fn from(value: &DeviceThumbnail) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DeviceThumbnail {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DeviceThumbnail {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceThumbnail>for super::super::foundation::IClosable {
        fn from(value:DeviceThumbnail) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&DeviceThumbnail>for super::super::foundation::IClosable {
        fn from(value: &DeviceThumbnail) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for DeviceThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a DeviceThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<DeviceThumbnail>for super::super::storage::streams::IContentTypeProvider {
        fn from(value:DeviceThumbnail) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&DeviceThumbnail>for super::super::storage::streams::IContentTypeProvider {
        fn from(value: &DeviceThumbnail) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IContentTypeProvider>, >for DeviceThumbnail {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IContentTypeProvider>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IContentTypeProvider, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IContentTypeProvider>, >for& 'a DeviceThumbnail {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IContentTypeProvider>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IContentTypeProvider, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<DeviceThumbnail>for super::super::storage::streams::IInputStream {
        fn from(value:DeviceThumbnail) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&DeviceThumbnail>for super::super::storage::streams::IInputStream {
        fn from(value: &DeviceThumbnail) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IInputStream>, >for DeviceThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::storage::streams::IInputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IInputStream, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IInputStream>, >for& 'a DeviceThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::storage::streams::IInputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IInputStream, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<DeviceThumbnail>for super::super::storage::streams::IOutputStream {
        fn from(value:DeviceThumbnail) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&DeviceThumbnail>for super::super::storage::streams::IOutputStream {
        fn from(value: &DeviceThumbnail) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IOutputStream>, >for DeviceThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::storage::streams::IOutputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IOutputStream, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IOutputStream>, >for& 'a DeviceThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::storage::streams::IOutputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IOutputStream, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<DeviceThumbnail>for super::super::storage::streams::IRandomAccessStream {
        fn from(value:DeviceThumbnail) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&DeviceThumbnail>for super::super::storage::streams::IRandomAccessStream {
        fn from(value: &DeviceThumbnail) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>, >for DeviceThumbnail {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IRandomAccessStream, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>, >for& 'a DeviceThumbnail {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IRandomAccessStream, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<DeviceThumbnail>for super::super::storage::streams::IRandomAccessStreamWithContentType {
        fn from(value:DeviceThumbnail) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DeviceThumbnail>for super::super::storage::streams::IRandomAccessStreamWithContentType {
        fn from(value: &DeviceThumbnail) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStreamWithContentType, >, >for DeviceThumbnail {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStreamWithContentType, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IRandomAccessStreamWithContentType, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStreamWithContentType, >, >for& 'a DeviceThumbnail {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStreamWithContentType, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IRandomAccessStreamWithContentType, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for DeviceThumbnail{}
      unsafe impl::std::marker::Sync for DeviceThumbnail{}
      #[repr(transparent)]pub struct IDeviceInformation(::winrt::Object);
      impl::std::clone::Clone for IDeviceInformation {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceInformation {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceInformation {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceInformation{}
      impl IDeviceInformation {
        pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn is_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn is_default(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn enclosure_location(&self) ->  ::winrt::Result<EnclosureLocation>{
          let this = self;
          unsafe {
            let mut result__: <EnclosureLocation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<EnclosureLocation>(result__)
          }
        }pub fn properties(&self,) ->  ::winrt::Result<super::super::foundation::collections::IMapView< ::winrt::HString, ::winrt::Object, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IMapView< ::winrt::HString, ::winrt::Object, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::collections::IMapView< ::winrt::HString, ::winrt::Object, >>(result__)
          }
        }pub fn update< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,DeviceInformationUpdate>>, >(&self,update_info:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),update_info.into().abi(),).ok()
          }
        }pub fn get_thumbnail_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceThumbnail>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DeviceThumbnail>>(result__,)
          }
        }pub fn get_glyph_thumbnail_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceThumbnail>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DeviceThumbnail>>(result__,)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceInformation {
        type Vtable = IDeviceInformation_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2879454101,17304,18589,[142,68,230,19,9,39,1,31],);
        
      }#[repr(C)]pub struct IDeviceInformation_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,update_info: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceInformation {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{aba0fb95-4398-489d-8e44-e6130927011f}")
        };
        
      }impl::std::convert::From<IDeviceInformation>for::winrt::Object {
        fn from(value:IDeviceInformation) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceInformation>for::winrt::Object {
        fn from(value: &IDeviceInformation) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceInformation {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceInformation {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct DevicePairingResultStatus(i32);
      impl::std::convert::From<i32>for DevicePairingResultStatus {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for DevicePairingResultStatus {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for DevicePairingResultStatus {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for DevicePairingResultStatus {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for DevicePairingResultStatus {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DevicePairingResultStatus{}
      impl::std::marker::Copy for DevicePairingResultStatus{}
      impl DevicePairingResultStatus {
        #![allow(non_upper_case_globals)]pub const Paired:Self = Self(0i32);
        pub const NotReadyToPair:Self = Self(1i32);
        pub const NotPaired:Self = Self(2i32);
        pub const AlreadyPaired:Self = Self(3i32);
        pub const ConnectionRejected:Self = Self(4i32);
        pub const TooManyConnections:Self = Self(5i32);
        pub const HardwareFailure:Self = Self(6i32);
        pub const AuthenticationTimeout:Self = Self(7i32);
        pub const AuthenticationNotAllowed:Self = Self(8i32);
        pub const AuthenticationFailure:Self = Self(9i32);
        pub const NoSupportedProfiles:Self = Self(10i32);
        pub const ProtectionLevelCouldNotBeMet:Self = Self(11i32);
        pub const AccessDenied:Self = Self(12i32);
        pub const InvalidCeremonyData:Self = Self(13i32);
        pub const PairingCanceled:Self = Self(14i32);
        pub const OperationAlreadyInProgress:Self = Self(15i32);
        pub const RequiredHandlerNotRegistered:Self = Self(16i32);
        pub const RejectedByHandler:Self = Self(17i32);
        pub const RemoteDeviceHasAssociation:Self = Self(18i32);
        pub const Failed:Self = Self(19i32);
        
      }unsafe impl::winrt::Abi for DevicePairingResultStatus {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for DevicePairingResultStatus {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Devices.Enumeration.DevicePairingResultStatus;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct DevicePairingProtectionLevel(i32);
      impl::std::convert::From<i32>for DevicePairingProtectionLevel {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for DevicePairingProtectionLevel {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for DevicePairingProtectionLevel {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for DevicePairingProtectionLevel {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for DevicePairingProtectionLevel {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DevicePairingProtectionLevel{}
      impl::std::marker::Copy for DevicePairingProtectionLevel{}
      impl DevicePairingProtectionLevel {
        #![allow(non_upper_case_globals)]pub const Default:Self = Self(0i32);
        pub const None:Self = Self(1i32);
        pub const Encryption:Self = Self(2i32);
        pub const EncryptionAndAuthentication:Self = Self(3i32);
        
      }unsafe impl::winrt::Abi for DevicePairingProtectionLevel {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for DevicePairingProtectionLevel {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Devices.Enumeration.DevicePairingProtectionLevel;i4)",);
        
      }#[repr(transparent)]pub struct IDevicePairingResult(::winrt::Object);
      impl::std::clone::Clone for IDevicePairingResult {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDevicePairingResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDevicePairingResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDevicePairingResult{}
      impl IDevicePairingResult {
        pub fn status(&self) ->  ::winrt::Result<DevicePairingResultStatus>{
          let this = self;
          unsafe {
            let mut result__: <DevicePairingResultStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DevicePairingResultStatus>(result__)
          }
        }pub fn protection_level_used(&self,) ->  ::winrt::Result<DevicePairingProtectionLevel>{
          let this = self;
          unsafe {
            let mut result__: <DevicePairingProtectionLevel as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<DevicePairingProtectionLevel>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDevicePairingResult {
        type Vtable = IDevicePairingResult_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(120259263,56725,16421,[155,55,222,81,173,186,55,183],);
        
      }#[repr(C)]pub struct IDevicePairingResult_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut DevicePairingResultStatus,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut DevicePairingProtectionLevel,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDevicePairingResult {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{072b02bf-dd95-4025-9b37-de51adba37b7}")
        };
        
      }impl::std::convert::From<IDevicePairingResult>for::winrt::Object {
        fn from(value:IDevicePairingResult) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDevicePairingResult>for::winrt::Object {
        fn from(value: &IDevicePairingResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDevicePairingResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDevicePairingResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DevicePairingResult(::winrt::Object);
      impl DevicePairingResult {
        pub fn status(&self) ->  ::winrt::Result<DevicePairingResultStatus>{
          let this = self;
          unsafe {
            let mut result__: <DevicePairingResultStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DevicePairingResultStatus>(result__)
          }
        }pub fn protection_level_used(&self,) ->  ::winrt::Result<DevicePairingProtectionLevel>{
          let this = self;
          unsafe {
            let mut result__: <DevicePairingProtectionLevel as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<DevicePairingProtectionLevel>(result__)
          }
        }
      }impl::std::clone::Clone for DevicePairingResult {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DevicePairingResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DevicePairingResult{}
      impl::std::fmt::Debug for DevicePairingResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DevicePairingResult {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DevicePairingResult";
        
      }unsafe impl::winrt::Interface for DevicePairingResult {
        type Vtable = IDevicePairingResult_abi;
        const IID: ::winrt::Guid =  <IDevicePairingResult as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DevicePairingResult {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DevicePairingResult;{072b02bf-dd95-4025-9b37-de51adba37b7})");
        
      }impl::std::convert::From<DevicePairingResult>for::winrt::Object {
        fn from(value:DevicePairingResult) -> Self {
          value.0
        }
      }impl::std::convert::From<&DevicePairingResult>for::winrt::Object {
        fn from(value: &DevicePairingResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DevicePairingResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DevicePairingResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DevicePairingResult>for IDevicePairingResult {
        fn from(value:DevicePairingResult) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DevicePairingResult>for IDevicePairingResult {
        fn from(value: &DevicePairingResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDevicePairingResult>>for DevicePairingResult {
        fn into(self) ->  ::winrt::Param< 'a ,IDevicePairingResult>{
          ::winrt::Param::Owned(::std::convert::Into::<IDevicePairingResult>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDevicePairingResult>>for& 'a DevicePairingResult {
        fn into(self) ->  ::winrt::Param< 'a ,IDevicePairingResult>{
          ::winrt::Param::Owned(::std::convert::Into::<IDevicePairingResult>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for DevicePairingResult{}
      unsafe impl::std::marker::Sync for DevicePairingResult{}
      #[repr(transparent)]pub struct IDeviceInformationPairing(::winrt::Object);
      impl::std::clone::Clone for IDeviceInformationPairing {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceInformationPairing {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceInformationPairing {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceInformationPairing{}
      impl IDeviceInformationPairing {
        pub fn is_paired(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn can_pair(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn pair_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DevicePairingResult>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DevicePairingResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <DevicePairingResult> >(result__)
          }
        }pub fn pair_with_protection_level_async(&self,min_protection_level:DevicePairingProtectionLevel,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DevicePairingResult>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DevicePairingResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),min_protection_level, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DevicePairingResult>>(result__,)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceInformationPairing {
        type Vtable = IDeviceInformationPairing_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(742877685,63108,16597,[132,105,232,219,170,183,4,133],);
        
      }#[repr(C)]pub struct IDeviceInformationPairing_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,min_protection_level:DevicePairingProtectionLevel,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceInformationPairing {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{2c4769f5-f684-40d5-8469-e8dbaab70485}")
        };
        
      }impl::std::convert::From<IDeviceInformationPairing>for::winrt::Object {
        fn from(value:IDeviceInformationPairing) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceInformationPairing>for::winrt::Object {
        fn from(value: &IDeviceInformationPairing) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceInformationPairing {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceInformationPairing {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct DevicePairingKinds(u32);
      impl::std::convert::From<u32>for DevicePairingKinds {
        fn from(value:u32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for DevicePairingKinds {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for DevicePairingKinds {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for DevicePairingKinds {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for DevicePairingKinds {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DevicePairingKinds{}
      impl::std::marker::Copy for DevicePairingKinds{}
      impl DevicePairingKinds {
        #![allow(non_upper_case_globals)]pub const None:Self = Self(0u32);
        pub const ConfirmOnly:Self = Self(1u32);
        pub const DisplayPin:Self = Self(2u32);
        pub const ProvidePin:Self = Self(4u32);
        pub const ConfirmPinMatch:Self = Self(8u32);
        pub const ProvidePasswordCredential:Self = Self(16u32);
        
      }unsafe impl::winrt::Abi for DevicePairingKinds {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for DevicePairingKinds {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Devices.Enumeration.DevicePairingKinds;u4)",);
        
      }impl::std::ops::BitOr for DevicePairingKinds {
        type Output = Self;
        fn bitor(self,rhs:Self) -> Self {
          Self(self.0|rhs.0)
        }
      }impl::std::ops::BitAnd for DevicePairingKinds {
        type Output = Self;
        fn bitand(self,rhs:Self) -> Self {
          Self(self.0&rhs.0)
        }
      }#[repr(transparent)]pub struct IDevicePairingSettings(::winrt::Object);
      impl::std::clone::Clone for IDevicePairingSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDevicePairingSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDevicePairingSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDevicePairingSettings{}
      impl IDevicePairingSettings{}
      unsafe impl::winrt::Interface for IDevicePairingSettings {
        type Vtable = IDevicePairingSettings_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1210888828,33723,16910,[190,81,102,2,178,34,222,84],);
        
      }#[repr(C)]pub struct IDevicePairingSettings_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDevicePairingSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{482cb27c-83bb-420e-be51-6602b222de54}")
        };
        
      }impl::std::convert::From<IDevicePairingSettings>for::winrt::Object {
        fn from(value:IDevicePairingSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDevicePairingSettings>for::winrt::Object {
        fn from(value: &IDevicePairingSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDevicePairingSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDevicePairingSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IDevicePairingRequestedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IDevicePairingRequestedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDevicePairingRequestedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDevicePairingRequestedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDevicePairingRequestedEventArgs{}
      impl IDevicePairingRequestedEventArgs {
        pub fn device_information(&self) ->  ::winrt::Result<DeviceInformation>{
          let this = self;
          unsafe {
            let mut result__: <DeviceInformation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformation>(result__)
          }
        }pub fn pairing_kind(&self) ->  ::winrt::Result<DevicePairingKinds>{
          let this = self;
          unsafe {
            let mut result__: <DevicePairingKinds as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<DevicePairingKinds>(result__)
          }
        }pub fn pin(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn accept(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn accept_with_pin< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,pin:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),pin.into().abi(),).ok()
          }
        }pub fn get_deferral(&self) ->  ::winrt::Result<super::super::foundation::Deferral>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Deferral as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::Deferral>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDevicePairingRequestedEventArgs {
        type Vtable = IDevicePairingRequestedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4145544278,56939,18559,[131,118,1,128,172,166,153,99],);
        
      }#[repr(C)]pub struct IDevicePairingRequestedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut DevicePairingKinds,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,pin: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDevicePairingRequestedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{f717fc56-de6b-487f-8376-0180aca69963}")
        };
        
      }impl::std::convert::From<IDevicePairingRequestedEventArgs>for::winrt::Object {
        fn from(value:IDevicePairingRequestedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDevicePairingRequestedEventArgs>for::winrt::Object {
        fn from(value: &IDevicePairingRequestedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDevicePairingRequestedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDevicePairingRequestedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IDevicePairingRequestedEventArgs2(::winrt::Object);
      impl::std::clone::Clone for IDevicePairingRequestedEventArgs2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDevicePairingRequestedEventArgs2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDevicePairingRequestedEventArgs2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDevicePairingRequestedEventArgs2{}
      impl IDevicePairingRequestedEventArgs2 {
        pub fn accept_with_password_credential< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::security::credentials::PasswordCredential>, >, >(&self,password_credential:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),password_credential.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IDevicePairingRequestedEventArgs2 {
        type Vtable = IDevicePairingRequestedEventArgs2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3359068889,58579,19888,[163,96,161,5,228,55,219,220],);
        
      }#[repr(C)]pub struct IDevicePairingRequestedEventArgs2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,password_credential: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDevicePairingRequestedEventArgs2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c83752d9-e4d3-4db0-a360-a105e437dbdc}")
        };
        
      }impl::std::convert::From<IDevicePairingRequestedEventArgs2>for::winrt::Object {
        fn from(value:IDevicePairingRequestedEventArgs2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDevicePairingRequestedEventArgs2>for::winrt::Object {
        fn from(value: &IDevicePairingRequestedEventArgs2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDevicePairingRequestedEventArgs2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDevicePairingRequestedEventArgs2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DevicePairingRequestedEventArgs(::winrt::Object);
      impl DevicePairingRequestedEventArgs {
        pub fn device_information(&self) ->  ::winrt::Result<DeviceInformation>{
          let this = self;
          unsafe {
            let mut result__: <DeviceInformation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformation>(result__)
          }
        }pub fn pairing_kind(&self) ->  ::winrt::Result<DevicePairingKinds>{
          let this = self;
          unsafe {
            let mut result__: <DevicePairingKinds as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<DevicePairingKinds>(result__)
          }
        }pub fn pin(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn accept(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn accept_with_pin< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,pin:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),pin.into().abi(),).ok()
          }
        }pub fn get_deferral(&self) ->  ::winrt::Result<super::super::foundation::Deferral>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Deferral as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::Deferral>(result__)
          }
        }pub fn accept_with_password_credential< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::security::credentials::PasswordCredential>, >, >(&self,password_credential:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IDevicePairingRequestedEventArgs2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),password_credential.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for DevicePairingRequestedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DevicePairingRequestedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DevicePairingRequestedEventArgs{}
      impl::std::fmt::Debug for DevicePairingRequestedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DevicePairingRequestedEventArgs {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DevicePairingRequestedEventArgs";
        
      }unsafe impl::winrt::Interface for DevicePairingRequestedEventArgs {
        type Vtable = IDevicePairingRequestedEventArgs_abi;
        const IID: ::winrt::Guid =  <IDevicePairingRequestedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DevicePairingRequestedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DevicePairingRequestedEventArgs;{f717fc56-de6b-487f-8376-0180aca69963})");
        
      }impl::std::convert::From<DevicePairingRequestedEventArgs>for::winrt::Object {
        fn from(value:DevicePairingRequestedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&DevicePairingRequestedEventArgs>for::winrt::Object {
        fn from(value: &DevicePairingRequestedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DevicePairingRequestedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DevicePairingRequestedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DevicePairingRequestedEventArgs>for IDevicePairingRequestedEventArgs {
        fn from(value:DevicePairingRequestedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DevicePairingRequestedEventArgs>for IDevicePairingRequestedEventArgs {
        fn from(value: &DevicePairingRequestedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDevicePairingRequestedEventArgs>>for DevicePairingRequestedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IDevicePairingRequestedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IDevicePairingRequestedEventArgs>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDevicePairingRequestedEventArgs>>for& 'a DevicePairingRequestedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IDevicePairingRequestedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IDevicePairingRequestedEventArgs>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<DevicePairingRequestedEventArgs>for IDevicePairingRequestedEventArgs2 {
        fn from(value:DevicePairingRequestedEventArgs) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&DevicePairingRequestedEventArgs>for IDevicePairingRequestedEventArgs2 {
        fn from(value: &DevicePairingRequestedEventArgs) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDevicePairingRequestedEventArgs2>>for DevicePairingRequestedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IDevicePairingRequestedEventArgs2>{
          ::winrt::Param::Owned(::std::convert::Into::<IDevicePairingRequestedEventArgs2>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDevicePairingRequestedEventArgs2>>for& 'a DevicePairingRequestedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IDevicePairingRequestedEventArgs2>{
          ::winrt::Param::Owned(::std::convert::Into::<IDevicePairingRequestedEventArgs2>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for DevicePairingRequestedEventArgs{}
      unsafe impl::std::marker::Sync for DevicePairingRequestedEventArgs{}
      #[repr(transparent)]pub struct IDeviceInformationCustomPairing(::winrt::Object);
      impl::std::clone::Clone for IDeviceInformationCustomPairing {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceInformationCustomPairing {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceInformationCustomPairing {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceInformationCustomPairing{}
      impl IDeviceInformationCustomPairing {
        pub fn pair_async(&self,pairing_kinds_supported:DevicePairingKinds,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DevicePairingResult>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DevicePairingResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),pairing_kinds_supported, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DevicePairingResult>>(result__,)
          }
        }pub fn pair_with_protection_level_async(&self,pairing_kinds_supported:DevicePairingKinds,min_protection_level:DevicePairingProtectionLevel,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DevicePairingResult>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DevicePairingResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),pairing_kinds_supported,min_protection_level, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DevicePairingResult>>(result__,)
          }
        }pub fn pair_with_protection_level_and_settings_async< 'a ,T2__: ::std::convert::Into<::winrt::Param< 'a ,IDevicePairingSettings>>, >(&self,pairing_kinds_supported:DevicePairingKinds,min_protection_level:DevicePairingProtectionLevel,device_pairing_settings:T2__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DevicePairingResult>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DevicePairingResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),pairing_kinds_supported,min_protection_level,device_pairing_settings.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DevicePairingResult>>(result__,)
          }
        }pub fn pairing_requested< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DeviceInformationCustomPairing,DevicePairingRequestedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_pairing_requested< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IDeviceInformationCustomPairing {
        type Vtable = IDeviceInformationCustomPairing_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2232650754,20198,18708,[131,112,16,122,57,20,76,14],);
        
      }#[repr(C)]pub struct IDeviceInformationCustomPairing_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,pairing_kinds_supported:DevicePairingKinds,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,pairing_kinds_supported:DevicePairingKinds,min_protection_level:DevicePairingProtectionLevel,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,pairing_kinds_supported:DevicePairingKinds,min_protection_level:DevicePairingProtectionLevel,device_pairing_settings: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceInformationCustomPairing {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{85138c02-4ee6-4914-8370-107a39144c0e}")
        };
        
      }impl::std::convert::From<IDeviceInformationCustomPairing>for::winrt::Object {
        fn from(value:IDeviceInformationCustomPairing) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceInformationCustomPairing>for::winrt::Object {
        fn from(value: &IDeviceInformationCustomPairing) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceInformationCustomPairing {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceInformationCustomPairing {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DeviceInformationCustomPairing(::winrt::Object);
      impl DeviceInformationCustomPairing {
        pub fn pair_async(&self,pairing_kinds_supported:DevicePairingKinds,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DevicePairingResult>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DevicePairingResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),pairing_kinds_supported, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DevicePairingResult>>(result__,)
          }
        }pub fn pair_with_protection_level_async(&self,pairing_kinds_supported:DevicePairingKinds,min_protection_level:DevicePairingProtectionLevel,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DevicePairingResult>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DevicePairingResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),pairing_kinds_supported,min_protection_level, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DevicePairingResult>>(result__,)
          }
        }pub fn pair_with_protection_level_and_settings_async< 'a ,T2__: ::std::convert::Into<::winrt::Param< 'a ,IDevicePairingSettings>>, >(&self,pairing_kinds_supported:DevicePairingKinds,min_protection_level:DevicePairingProtectionLevel,device_pairing_settings:T2__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DevicePairingResult>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DevicePairingResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),pairing_kinds_supported,min_protection_level,device_pairing_settings.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DevicePairingResult>>(result__,)
          }
        }pub fn pairing_requested< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DeviceInformationCustomPairing,DevicePairingRequestedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_pairing_requested< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for DeviceInformationCustomPairing {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DeviceInformationCustomPairing {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceInformationCustomPairing{}
      impl::std::fmt::Debug for DeviceInformationCustomPairing {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DeviceInformationCustomPairing {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DeviceInformationCustomPairing";
        
      }unsafe impl::winrt::Interface for DeviceInformationCustomPairing {
        type Vtable = IDeviceInformationCustomPairing_abi;
        const IID: ::winrt::Guid =  <IDeviceInformationCustomPairing as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DeviceInformationCustomPairing {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DeviceInformationCustomPairing;{85138c02-4ee6-4914-8370-107a39144c0e})");
        
      }impl::std::convert::From<DeviceInformationCustomPairing>for::winrt::Object {
        fn from(value:DeviceInformationCustomPairing) -> Self {
          value.0
        }
      }impl::std::convert::From<&DeviceInformationCustomPairing>for::winrt::Object {
        fn from(value: &DeviceInformationCustomPairing) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DeviceInformationCustomPairing {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DeviceInformationCustomPairing {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceInformationCustomPairing>for IDeviceInformationCustomPairing {
        fn from(value:DeviceInformationCustomPairing) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DeviceInformationCustomPairing>for IDeviceInformationCustomPairing {
        fn from(value: &DeviceInformationCustomPairing) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceInformationCustomPairing>>for DeviceInformationCustomPairing {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceInformationCustomPairing>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceInformationCustomPairing>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceInformationCustomPairing>>for& 'a DeviceInformationCustomPairing {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceInformationCustomPairing>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceInformationCustomPairing>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for DeviceInformationCustomPairing{}
      unsafe impl::std::marker::Sync for DeviceInformationCustomPairing{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct DeviceUnpairingResultStatus(i32);
      impl::std::convert::From<i32>for DeviceUnpairingResultStatus {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for DeviceUnpairingResultStatus {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for DeviceUnpairingResultStatus {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for DeviceUnpairingResultStatus {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for DeviceUnpairingResultStatus {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceUnpairingResultStatus{}
      impl::std::marker::Copy for DeviceUnpairingResultStatus{}
      impl DeviceUnpairingResultStatus {
        #![allow(non_upper_case_globals)]pub const Unpaired:Self = Self(0i32);
        pub const AlreadyUnpaired:Self = Self(1i32);
        pub const OperationAlreadyInProgress:Self = Self(2i32);
        pub const AccessDenied:Self = Self(3i32);
        pub const Failed:Self = Self(4i32);
        
      }unsafe impl::winrt::Abi for DeviceUnpairingResultStatus {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for DeviceUnpairingResultStatus {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Devices.Enumeration.DeviceUnpairingResultStatus;i4)",);
        
      }#[repr(transparent)]pub struct IDeviceUnpairingResult(::winrt::Object);
      impl::std::clone::Clone for IDeviceUnpairingResult {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceUnpairingResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceUnpairingResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceUnpairingResult{}
      impl IDeviceUnpairingResult {
        pub fn status(&self) ->  ::winrt::Result<DeviceUnpairingResultStatus>{
          let this = self;
          unsafe {
            let mut result__: <DeviceUnpairingResultStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceUnpairingResultStatus>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceUnpairingResult {
        type Vtable = IDeviceUnpairingResult_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1727285971,31193,17483,[146,207,169,46,247,37,113,199],);
        
      }#[repr(C)]pub struct IDeviceUnpairingResult_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut DeviceUnpairingResultStatus,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceUnpairingResult {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{66f44ad3-79d9-444b-92cf-a92ef72571c7}")
        };
        
      }impl::std::convert::From<IDeviceUnpairingResult>for::winrt::Object {
        fn from(value:IDeviceUnpairingResult) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceUnpairingResult>for::winrt::Object {
        fn from(value: &IDeviceUnpairingResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceUnpairingResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceUnpairingResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DeviceUnpairingResult(::winrt::Object);
      impl DeviceUnpairingResult {
        pub fn status(&self) ->  ::winrt::Result<DeviceUnpairingResultStatus>{
          let this = self;
          unsafe {
            let mut result__: <DeviceUnpairingResultStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceUnpairingResultStatus>(result__)
          }
        }
      }impl::std::clone::Clone for DeviceUnpairingResult {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DeviceUnpairingResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceUnpairingResult{}
      impl::std::fmt::Debug for DeviceUnpairingResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DeviceUnpairingResult {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DeviceUnpairingResult";
        
      }unsafe impl::winrt::Interface for DeviceUnpairingResult {
        type Vtable = IDeviceUnpairingResult_abi;
        const IID: ::winrt::Guid =  <IDeviceUnpairingResult as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DeviceUnpairingResult {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DeviceUnpairingResult;{66f44ad3-79d9-444b-92cf-a92ef72571c7})");
        
      }impl::std::convert::From<DeviceUnpairingResult>for::winrt::Object {
        fn from(value:DeviceUnpairingResult) -> Self {
          value.0
        }
      }impl::std::convert::From<&DeviceUnpairingResult>for::winrt::Object {
        fn from(value: &DeviceUnpairingResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DeviceUnpairingResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DeviceUnpairingResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceUnpairingResult>for IDeviceUnpairingResult {
        fn from(value:DeviceUnpairingResult) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DeviceUnpairingResult>for IDeviceUnpairingResult {
        fn from(value: &DeviceUnpairingResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceUnpairingResult>>for DeviceUnpairingResult {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceUnpairingResult>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceUnpairingResult>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceUnpairingResult>>for& 'a DeviceUnpairingResult {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceUnpairingResult>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceUnpairingResult>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for DeviceUnpairingResult{}
      unsafe impl::std::marker::Sync for DeviceUnpairingResult{}
      #[repr(transparent)]pub struct IDeviceInformationPairing2(::winrt::Object);
      impl::std::clone::Clone for IDeviceInformationPairing2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceInformationPairing2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceInformationPairing2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceInformationPairing2{}
      impl IDeviceInformationPairing2 {
        pub fn protection_level(&self) ->  ::winrt::Result<DevicePairingProtectionLevel>{
          let this = self;
          unsafe {
            let mut result__: <DevicePairingProtectionLevel as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DevicePairingProtectionLevel>(result__)
          }
        }pub fn custom(&self) ->  ::winrt::Result<DeviceInformationCustomPairing>{
          let this = self;
          unsafe {
            let mut result__: <DeviceInformationCustomPairing as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformationCustomPairing>(result__)
          }
        }pub fn pair_with_protection_level_and_settings_async< 'a ,T1__: ::std::convert::Into<::winrt::Param< 'a ,IDevicePairingSettings>>, >(&self,min_protection_level:DevicePairingProtectionLevel,device_pairing_settings:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DevicePairingResult>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DevicePairingResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),min_protection_level,device_pairing_settings.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DevicePairingResult>>(result__,)
          }
        }pub fn unpair_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceUnpairingResult>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceUnpairingResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <DeviceUnpairingResult> >(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceInformationPairing2 {
        type Vtable = IDeviceInformationPairing2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4135981821,2798,17192,[133,204,28,116,43,177,121,13],);
        
      }#[repr(C)]pub struct IDeviceInformationPairing2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut DevicePairingProtectionLevel,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,min_protection_level:DevicePairingProtectionLevel,device_pairing_settings: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceInformationPairing2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{f68612fd-0aee-4328-85cc-1c742bb1790d}")
        };
        
      }impl::std::convert::From<IDeviceInformationPairing2>for::winrt::Object {
        fn from(value:IDeviceInformationPairing2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceInformationPairing2>for::winrt::Object {
        fn from(value: &IDeviceInformationPairing2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceInformationPairing2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceInformationPairing2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IDeviceInformationPairingStatics(::winrt::Object);
      impl::std::clone::Clone for IDeviceInformationPairingStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceInformationPairingStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceInformationPairingStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceInformationPairingStatics{}
      impl IDeviceInformationPairingStatics {
        pub fn try_register_for_all_inbound_pairing_requests(&self,pairing_kinds_supported:DevicePairingKinds,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),pairing_kinds_supported, &mut result__,).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceInformationPairingStatics {
        type Vtable = IDeviceInformationPairingStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3910517768,14036,18849,[191,19,81,65,115,121,155,107],);
        
      }#[repr(C)]pub struct IDeviceInformationPairingStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,pairing_kinds_supported:DevicePairingKinds,result__: *mut bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceInformationPairingStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{e915c408-36d4-49a1-bf13-514173799b6b}")
        };
        
      }impl::std::convert::From<IDeviceInformationPairingStatics>for::winrt::Object {
        fn from(value:IDeviceInformationPairingStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceInformationPairingStatics>for::winrt::Object {
        fn from(value: &IDeviceInformationPairingStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceInformationPairingStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceInformationPairingStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IDeviceInformationPairingStatics2(::winrt::Object);
      impl::std::clone::Clone for IDeviceInformationPairingStatics2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceInformationPairingStatics2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceInformationPairingStatics2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceInformationPairingStatics2{}
      impl IDeviceInformationPairingStatics2 {
        pub fn try_register_for_all_inbound_pairing_requests_with_protection_level(&self,pairing_kinds_supported:DevicePairingKinds,min_protection_level:DevicePairingProtectionLevel,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),pairing_kinds_supported,min_protection_level, &mut result__,).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceInformationPairingStatics2 {
        type Vtable = IDeviceInformationPairingStatics2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(81679218,47031,18283,[167,79,197,131,106,112,77,152],);
        
      }#[repr(C)]pub struct IDeviceInformationPairingStatics2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,pairing_kinds_supported:DevicePairingKinds,min_protection_level:DevicePairingProtectionLevel,result__: *mut bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceInformationPairingStatics2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{04de5372-b7b7-476b-a74f-c5836a704d98}")
        };
        
      }impl::std::convert::From<IDeviceInformationPairingStatics2>for::winrt::Object {
        fn from(value:IDeviceInformationPairingStatics2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceInformationPairingStatics2>for::winrt::Object {
        fn from(value: &IDeviceInformationPairingStatics2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceInformationPairingStatics2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceInformationPairingStatics2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DeviceInformationPairing(::winrt::Object);
      impl DeviceInformationPairing {
        pub fn is_paired(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn can_pair(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn pair_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DevicePairingResult>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DevicePairingResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <DevicePairingResult> >(result__)
          }
        }pub fn pair_with_protection_level_async(&self,min_protection_level:DevicePairingProtectionLevel,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DevicePairingResult>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DevicePairingResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),min_protection_level, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DevicePairingResult>>(result__,)
          }
        }pub fn protection_level(&self) ->  ::winrt::Result<DevicePairingProtectionLevel>{
          let this =  &::winrt::Interface::cast::<IDeviceInformationPairing2>(self).unwrap();
          unsafe {
            let mut result__: <DevicePairingProtectionLevel as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DevicePairingProtectionLevel>(result__)
          }
        }pub fn custom(&self) ->  ::winrt::Result<DeviceInformationCustomPairing>{
          let this =  &::winrt::Interface::cast::<IDeviceInformationPairing2>(self).unwrap();
          unsafe {
            let mut result__: <DeviceInformationCustomPairing as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformationCustomPairing>(result__)
          }
        }pub fn pair_with_protection_level_and_settings_async< 'a ,T1__: ::std::convert::Into<::winrt::Param< 'a ,IDevicePairingSettings>>, >(&self,min_protection_level:DevicePairingProtectionLevel,device_pairing_settings:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DevicePairingResult>>{
          let this =  &::winrt::Interface::cast::<IDeviceInformationPairing2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DevicePairingResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),min_protection_level,device_pairing_settings.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DevicePairingResult>>(result__,)
          }
        }pub fn unpair_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceUnpairingResult>>{
          let this =  &::winrt::Interface::cast::<IDeviceInformationPairing2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceUnpairingResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <DeviceUnpairingResult> >(result__)
          }
        }pub fn try_register_for_all_inbound_pairing_requests(pairing_kinds_supported:DevicePairingKinds,) ->  ::winrt::Result<bool>{
          Self::IDeviceInformationPairingStatics(|this|unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),pairing_kinds_supported, &mut result__,).from_abi::<bool>(result__)
          })
        }pub fn try_register_for_all_inbound_pairing_requests_with_protection_level(pairing_kinds_supported:DevicePairingKinds,min_protection_level:DevicePairingProtectionLevel,) ->  ::winrt::Result<bool>{
          Self::IDeviceInformationPairingStatics2(|this|unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),pairing_kinds_supported,min_protection_level, &mut result__,).from_abi::<bool>(result__)
          })
        }#[allow(non_snake_case)]fn IDeviceInformationPairingStatics<R,F:FnOnce(&IDeviceInformationPairingStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<DeviceInformationPairing,IDeviceInformationPairingStatics, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn IDeviceInformationPairingStatics2<R,F:FnOnce(&IDeviceInformationPairingStatics2) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<DeviceInformationPairing,IDeviceInformationPairingStatics2, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for DeviceInformationPairing {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DeviceInformationPairing {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceInformationPairing{}
      impl::std::fmt::Debug for DeviceInformationPairing {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DeviceInformationPairing {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DeviceInformationPairing";
        
      }unsafe impl::winrt::Interface for DeviceInformationPairing {
        type Vtable = IDeviceInformationPairing_abi;
        const IID: ::winrt::Guid =  <IDeviceInformationPairing as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DeviceInformationPairing {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DeviceInformationPairing;{2c4769f5-f684-40d5-8469-e8dbaab70485})");
        
      }impl::std::convert::From<DeviceInformationPairing>for::winrt::Object {
        fn from(value:DeviceInformationPairing) -> Self {
          value.0
        }
      }impl::std::convert::From<&DeviceInformationPairing>for::winrt::Object {
        fn from(value: &DeviceInformationPairing) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DeviceInformationPairing {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DeviceInformationPairing {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceInformationPairing>for IDeviceInformationPairing {
        fn from(value:DeviceInformationPairing) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DeviceInformationPairing>for IDeviceInformationPairing {
        fn from(value: &DeviceInformationPairing) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceInformationPairing>>for DeviceInformationPairing {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceInformationPairing>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceInformationPairing>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceInformationPairing>>for& 'a DeviceInformationPairing {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceInformationPairing>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceInformationPairing>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceInformationPairing>for IDeviceInformationPairing2 {
        fn from(value:DeviceInformationPairing) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&DeviceInformationPairing>for IDeviceInformationPairing2 {
        fn from(value: &DeviceInformationPairing) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceInformationPairing2>>for DeviceInformationPairing {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceInformationPairing2>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceInformationPairing2>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceInformationPairing2>>for& 'a DeviceInformationPairing {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceInformationPairing2>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceInformationPairing2>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for DeviceInformationPairing{}
      unsafe impl::std::marker::Sync for DeviceInformationPairing{}
      #[repr(transparent)]pub struct IDeviceInformation2(::winrt::Object);
      impl::std::clone::Clone for IDeviceInformation2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceInformation2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceInformation2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceInformation2{}
      impl IDeviceInformation2 {
        pub fn kind(&self) ->  ::winrt::Result<DeviceInformationKind>{
          let this = self;
          unsafe {
            let mut result__: <DeviceInformationKind as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformationKind>(result__)
          }
        }pub fn pairing(&self) ->  ::winrt::Result<DeviceInformationPairing>{
          let this = self;
          unsafe {
            let mut result__: <DeviceInformationPairing as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformationPairing>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceInformation2 {
        type Vtable = IDeviceInformation2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4048987704,31127,18649,[161,12,38,157,70,83,63,72],);
        
      }#[repr(C)]pub struct IDeviceInformation2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut DeviceInformationKind,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceInformation2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{f156a638-7997-48d9-a10c-269d46533f48}")
        };
        
      }impl::std::convert::From<IDeviceInformation2>for::winrt::Object {
        fn from(value:IDeviceInformation2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceInformation2>for::winrt::Object {
        fn from(value: &IDeviceInformation2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceInformation2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceInformation2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DeviceInformationCollection(::winrt::Object);
      impl DeviceInformationCollection {
        pub fn first(&self,) ->  ::winrt::Result<super::super::foundation::collections::IIterator<DeviceInformation>, >{
          let this =  &::winrt::Interface::cast::<super::super::foundation::collections::IIterable<DeviceInformation>, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IIterator<DeviceInformation, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IIterator:: <DeviceInformation> >(result__)
          }
        }pub fn get_at(&self,index:u32) ->  ::winrt::Result<DeviceInformation>{
          let this = self;
          unsafe {
            let mut result__: <DeviceInformation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),index, &mut result__,).from_abi::<DeviceInformation>(result__)
          }
        }pub fn size(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn index_of< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,DeviceInformation>>, >(&self,value:T0__,index: &mut u32,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),index, &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn get_many(&self,start_index:u32,items: &mut[<DeviceInformation as::winrt::RuntimeType>::DefaultType],) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),start_index,items.len()as u32, ::std::mem::transmute_copy(&items), &mut result__,).from_abi::<u32>(result__)
          }
        }
      }impl::std::clone::Clone for DeviceInformationCollection {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DeviceInformationCollection {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceInformationCollection{}
      impl::std::fmt::Debug for DeviceInformationCollection {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DeviceInformationCollection {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DeviceInformationCollection";
        
      }unsafe impl::winrt::Interface for DeviceInformationCollection {
        type Vtable = super::super::foundation::collections::IVectorView_abi<DeviceInformation>;
        const IID: ::winrt::Guid =  <super::super::foundation::collections::IVectorView<DeviceInformation, >as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DeviceInformationCollection {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DeviceInformationCollection;pinterface({bbe1fa4c-b0e3-4583-baef-1f1b2e483e56};rc(Windows.Devices.Enumeration.DeviceInformation;{aba0fb95-4398-489d-8e44-e6130927011f})))");
        
      }impl::std::convert::From<DeviceInformationCollection>for::winrt::Object {
        fn from(value:DeviceInformationCollection) -> Self {
          value.0
        }
      }impl::std::convert::From<&DeviceInformationCollection>for::winrt::Object {
        fn from(value: &DeviceInformationCollection) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DeviceInformationCollection {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DeviceInformationCollection {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceInformationCollection>for super::super::foundation::collections::IIterable<DeviceInformation>{
        fn from(value:DeviceInformationCollection) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&DeviceInformationCollection>for super::super::foundation::collections::IIterable<DeviceInformation>{
        fn from(value: &DeviceInformationCollection) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<DeviceInformation>, >, >for DeviceInformationCollection {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<DeviceInformation>, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::collections::IIterable<DeviceInformation>, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<DeviceInformation>, >, >for& 'a DeviceInformationCollection {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<DeviceInformation>, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::collections::IIterable<DeviceInformation>, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<DeviceInformationCollection>for super::super::foundation::collections::IVectorView<DeviceInformation>{
        fn from(value:DeviceInformationCollection) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DeviceInformationCollection>for super::super::foundation::collections::IVectorView<DeviceInformation>{
        fn from(value: &DeviceInformationCollection) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IVectorView<DeviceInformation>, >, >for DeviceInformationCollection {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::foundation::collections::IVectorView<DeviceInformation>, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::collections::IVectorView<DeviceInformation>, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IVectorView<DeviceInformation>, >, >for& 'a DeviceInformationCollection {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::foundation::collections::IVectorView<DeviceInformation>, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::collections::IVectorView<DeviceInformation>, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::iter::IntoIterator for DeviceInformationCollection {
        type Item = DeviceInformation;
        type IntoIter = super::super::foundation::collections::VectorViewIterator<Self::Item>;
        fn into_iter(self) -> Self::IntoIter {
          super::super::foundation::collections::VectorViewIterator::new(self.into())
        }
      }impl< 'a > ::std::iter::IntoIterator for& 'a DeviceInformationCollection {
        type Item = DeviceInformation;
        type IntoIter = super::super::foundation::collections::VectorViewIterator<Self::Item>;
        fn into_iter(self) -> Self::IntoIter {
          super::super::foundation::collections::VectorViewIterator::new(self.into())
        }
      }unsafe impl::std::marker::Send for DeviceInformationCollection{}
      unsafe impl::std::marker::Sync for DeviceInformationCollection{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct DeviceWatcherStatus(i32);
      impl::std::convert::From<i32>for DeviceWatcherStatus {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for DeviceWatcherStatus {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for DeviceWatcherStatus {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for DeviceWatcherStatus {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for DeviceWatcherStatus {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceWatcherStatus{}
      impl::std::marker::Copy for DeviceWatcherStatus{}
      impl DeviceWatcherStatus {
        #![allow(non_upper_case_globals)]pub const Created:Self = Self(0i32);
        pub const Started:Self = Self(1i32);
        pub const EnumerationCompleted:Self = Self(2i32);
        pub const Stopping:Self = Self(3i32);
        pub const Stopped:Self = Self(4i32);
        pub const Aborted:Self = Self(5i32);
        
      }unsafe impl::winrt::Abi for DeviceWatcherStatus {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for DeviceWatcherStatus {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Devices.Enumeration.DeviceWatcherStatus;i4)",);
        
      }#[repr(transparent)]pub struct IDeviceWatcher(::winrt::Object);
      impl::std::clone::Clone for IDeviceWatcher {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceWatcher {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceWatcher {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceWatcher{}
      impl IDeviceWatcher {
        pub fn added< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DeviceWatcher,DeviceInformation, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_added< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn updated< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DeviceWatcher,DeviceInformationUpdate, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_updated< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn removed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DeviceWatcher,DeviceInformationUpdate, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_removed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn enumeration_completed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DeviceWatcher, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_enumeration_completed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn stopped< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DeviceWatcher, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_stopped< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn status(&self) ->  ::winrt::Result<DeviceWatcherStatus>{
          let this = self;
          unsafe {
            let mut result__: <DeviceWatcherStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<DeviceWatcherStatus>(result__)
          }
        }pub fn start(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn stop(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this)).ok()
          }
        }
      }unsafe impl::winrt::Interface for IDeviceWatcher {
        type Vtable = IDeviceWatcher_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3387603325,36715,20374,[169,244,171,200,20,226,34,113],);
        
      }#[repr(C)]pub struct IDeviceWatcher_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut DeviceWatcherStatus,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceWatcher {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c9eab97d-8f6b-4f96-a9f4-abc814e22271}")
        };
        
      }impl::std::convert::From<IDeviceWatcher>for::winrt::Object {
        fn from(value:IDeviceWatcher) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceWatcher>for::winrt::Object {
        fn from(value: &IDeviceWatcher) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceWatcher {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceWatcher {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct DeviceWatcherEventKind(i32);
      impl::std::convert::From<i32>for DeviceWatcherEventKind {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for DeviceWatcherEventKind {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for DeviceWatcherEventKind {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for DeviceWatcherEventKind {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for DeviceWatcherEventKind {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceWatcherEventKind{}
      impl::std::marker::Copy for DeviceWatcherEventKind{}
      impl DeviceWatcherEventKind {
        #![allow(non_upper_case_globals)]pub const Add:Self = Self(0i32);
        pub const Update:Self = Self(1i32);
        pub const Remove:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for DeviceWatcherEventKind {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for DeviceWatcherEventKind {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Devices.Enumeration.DeviceWatcherEventKind;i4)",);
        
      }#[repr(transparent)]pub struct IDeviceWatcher2(::winrt::Object);
      impl::std::clone::Clone for IDeviceWatcher2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceWatcher2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceWatcher2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceWatcher2{}
      impl IDeviceWatcher2 {
        pub fn get_background_trigger< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<DeviceWatcherEventKind, >, >, >, >(&self,requested_event_kinds:T0__,) ->  ::winrt::Result<super::super::application_model::background::DeviceWatcherTrigger, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::application_model::background::DeviceWatcherTrigger as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),requested_event_kinds.into().abi(), &mut result__).from_abi:: <super::super::application_model::background::DeviceWatcherTrigger>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceWatcher2 {
        type Vtable = IDeviceWatcher2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4278732142,60692,18921,[154,105,129,23,197,74,233,113],);
        
      }#[repr(C)]pub struct IDeviceWatcher2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,requested_event_kinds: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceWatcher2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{ff08456e-ed14-49e9-9a69-8117c54ae971}")
        };
        
      }impl::std::convert::From<IDeviceWatcher2>for::winrt::Object {
        fn from(value:IDeviceWatcher2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceWatcher2>for::winrt::Object {
        fn from(value: &IDeviceWatcher2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceWatcher2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceWatcher2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DeviceWatcher(::winrt::Object);
      impl DeviceWatcher {
        pub fn added< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DeviceWatcher,DeviceInformation, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_added< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn updated< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DeviceWatcher,DeviceInformationUpdate, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_updated< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn removed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DeviceWatcher,DeviceInformationUpdate, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_removed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn enumeration_completed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DeviceWatcher, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_enumeration_completed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn stopped< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DeviceWatcher, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_stopped< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn status(&self) ->  ::winrt::Result<DeviceWatcherStatus>{
          let this = self;
          unsafe {
            let mut result__: <DeviceWatcherStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<DeviceWatcherStatus>(result__)
          }
        }pub fn start(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn stop(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn get_background_trigger< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<DeviceWatcherEventKind, >, >, >, >(&self,requested_event_kinds:T0__,) ->  ::winrt::Result<super::super::application_model::background::DeviceWatcherTrigger, >{
          let this =  &::winrt::Interface::cast::<IDeviceWatcher2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::application_model::background::DeviceWatcherTrigger as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),requested_event_kinds.into().abi(), &mut result__).from_abi:: <super::super::application_model::background::DeviceWatcherTrigger>(result__)
          }
        }
      }impl::std::clone::Clone for DeviceWatcher {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DeviceWatcher {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceWatcher{}
      impl::std::fmt::Debug for DeviceWatcher {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DeviceWatcher {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DeviceWatcher";
        
      }unsafe impl::winrt::Interface for DeviceWatcher {
        type Vtable = IDeviceWatcher_abi;
        const IID: ::winrt::Guid =  <IDeviceWatcher as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DeviceWatcher {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DeviceWatcher;{c9eab97d-8f6b-4f96-a9f4-abc814e22271})");
        
      }impl::std::convert::From<DeviceWatcher>for::winrt::Object {
        fn from(value:DeviceWatcher) -> Self {
          value.0
        }
      }impl::std::convert::From<&DeviceWatcher>for::winrt::Object {
        fn from(value: &DeviceWatcher) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DeviceWatcher {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DeviceWatcher {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceWatcher>for IDeviceWatcher {
        fn from(value:DeviceWatcher) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DeviceWatcher>for IDeviceWatcher {
        fn from(value: &DeviceWatcher) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceWatcher>>for DeviceWatcher {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceWatcher>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceWatcher>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceWatcher>>for& 'a DeviceWatcher {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceWatcher>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceWatcher>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceWatcher>for IDeviceWatcher2 {
        fn from(value:DeviceWatcher) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&DeviceWatcher>for IDeviceWatcher2 {
        fn from(value: &DeviceWatcher) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceWatcher2>>for DeviceWatcher {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceWatcher2>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceWatcher2>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceWatcher2>>for& 'a DeviceWatcher {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceWatcher2>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceWatcher2>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for DeviceWatcher{}
      unsafe impl::std::marker::Sync for DeviceWatcher{}
      #[repr(transparent)]pub struct IDeviceInformationStatics(::winrt::Object);
      impl::std::clone::Clone for IDeviceInformationStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceInformationStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceInformationStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceInformationStatics{}
      impl IDeviceInformationStatics {
        pub fn create_from_id_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,device_id:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformation>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformation, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),device_id.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DeviceInformation>>(result__,)
          }
        }pub fn create_from_id_async_additional_properties< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,device_id:T0__,additional_properties:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformation>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformation, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),device_id.into().abi(),additional_properties.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DeviceInformation>>(result__,)
          }
        }pub fn find_all_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformationCollection>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformationCollection, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <DeviceInformationCollection> >(result__)
          }
        }pub fn find_all_async_device_class(&self,device_class:DeviceClass,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformationCollection>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformationCollection, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),device_class, &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <DeviceInformationCollection> >(result__)
          }
        }pub fn find_all_async_aqs_filter< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,aqs_filter:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformationCollection>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformationCollection, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),aqs_filter.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <DeviceInformationCollection> >(result__)
          }
        }pub fn find_all_async_aqs_filter_and_additional_properties< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,aqs_filter:T0__,additional_properties:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformationCollection>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformationCollection, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),aqs_filter.into().abi(),additional_properties.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <DeviceInformationCollection> >(result__)
          }
        }pub fn create_watcher(&self) ->  ::winrt::Result<DeviceWatcher>{
          let this = self;
          unsafe {
            let mut result__: <DeviceWatcher as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<DeviceWatcher>(result__)
          }
        }pub fn create_watcher_device_class(&self,device_class:DeviceClass,) ->  ::winrt::Result<DeviceWatcher>{
          let this = self;
          unsafe {
            let mut result__: <DeviceWatcher as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),device_class, &mut result__,).from_abi::<DeviceWatcher>(result__)
          }
        }pub fn create_watcher_aqs_filter< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,aqs_filter:T0__,) ->  ::winrt::Result<DeviceWatcher>{
          let this = self;
          unsafe {
            let mut result__: <DeviceWatcher as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),aqs_filter.into().abi(), &mut result__,).from_abi::<DeviceWatcher>(result__)
          }
        }pub fn create_watcher_aqs_filter_and_additional_properties< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,aqs_filter:T0__,additional_properties:T1__,) ->  ::winrt::Result<DeviceWatcher>{
          let this = self;
          unsafe {
            let mut result__: <DeviceWatcher as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),aqs_filter.into().abi(),additional_properties.into().abi(), &mut result__,).from_abi::<DeviceWatcher>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceInformationStatics {
        type Vtable = IDeviceInformationStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3246329870,14918,19064,[128,19,118,157,201,185,115,144],);
        
      }#[repr(C)]pub struct IDeviceInformationStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,device_id: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,device_id: ::winrt::RawPtr,additional_properties: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,device_class:DeviceClass,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,aqs_filter: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,aqs_filter: ::winrt::RawPtr,additional_properties: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,device_class:DeviceClass,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,aqs_filter: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,aqs_filter: ::winrt::RawPtr,additional_properties: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceInformationStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c17f100e-3a46-4a78-8013-769dc9b97390}")
        };
        
      }impl::std::convert::From<IDeviceInformationStatics>for::winrt::Object {
        fn from(value:IDeviceInformationStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceInformationStatics>for::winrt::Object {
        fn from(value: &IDeviceInformationStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceInformationStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceInformationStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IDeviceInformationStatics2(::winrt::Object);
      impl::std::clone::Clone for IDeviceInformationStatics2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceInformationStatics2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceInformationStatics2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceInformationStatics2{}
      impl IDeviceInformationStatics2 {
        pub fn get_aqs_filter_from_device_class(&self,device_class:DeviceClass,) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),device_class, &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn create_from_id_async_with_kind_and_additional_properties< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,device_id:T0__,additional_properties:T1__,kind:DeviceInformationKind,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformation>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformation, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),device_id.into().abi(),additional_properties.into().abi(),kind, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DeviceInformation>>(result__,)
          }
        }pub fn find_all_async_with_kind_aqs_filter_and_additional_properties< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,aqs_filter:T0__,additional_properties:T1__,kind:DeviceInformationKind,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformationCollection>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformationCollection, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),aqs_filter.into().abi(),additional_properties.into().abi(),kind, &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <DeviceInformationCollection> >(result__)
          }
        }pub fn create_watcher_with_kind_aqs_filter_and_additional_properties< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,aqs_filter:T0__,additional_properties:T1__,kind:DeviceInformationKind,) ->  ::winrt::Result<DeviceWatcher>{
          let this = self;
          unsafe {
            let mut result__: <DeviceWatcher as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),aqs_filter.into().abi(),additional_properties.into().abi(),kind, &mut result__,).from_abi::<DeviceWatcher>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceInformationStatics2 {
        type Vtable = IDeviceInformationStatics2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1228623668,43087,17917,[145,103,21,209,203,27,209,249],);
        
      }#[repr(C)]pub struct IDeviceInformationStatics2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,device_class:DeviceClass,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,device_id: ::winrt::RawPtr,additional_properties: ::winrt::RawPtr,kind:DeviceInformationKind,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,aqs_filter: ::winrt::RawPtr,additional_properties: ::winrt::RawPtr,kind:DeviceInformationKind,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,aqs_filter: ::winrt::RawPtr,additional_properties: ::winrt::RawPtr,kind:DeviceInformationKind,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceInformationStatics2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{493b4f34-a84f-45fd-9167-15d1cb1bd1f9}")
        };
        
      }impl::std::convert::From<IDeviceInformationStatics2>for::winrt::Object {
        fn from(value:IDeviceInformationStatics2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceInformationStatics2>for::winrt::Object {
        fn from(value: &IDeviceInformationStatics2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceInformationStatics2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceInformationStatics2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DeviceInformation(::winrt::Object);
      impl DeviceInformation {
        pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn is_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn is_default(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn enclosure_location(&self) ->  ::winrt::Result<EnclosureLocation>{
          let this = self;
          unsafe {
            let mut result__: <EnclosureLocation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<EnclosureLocation>(result__)
          }
        }pub fn properties(&self,) ->  ::winrt::Result<super::super::foundation::collections::IMapView< ::winrt::HString, ::winrt::Object, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IMapView< ::winrt::HString, ::winrt::Object, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::collections::IMapView< ::winrt::HString, ::winrt::Object, >>(result__)
          }
        }pub fn update< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,DeviceInformationUpdate>>, >(&self,update_info:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),update_info.into().abi(),).ok()
          }
        }pub fn get_thumbnail_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceThumbnail>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DeviceThumbnail>>(result__,)
          }
        }pub fn get_glyph_thumbnail_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceThumbnail>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DeviceThumbnail>>(result__,)
          }
        }pub fn kind(&self) ->  ::winrt::Result<DeviceInformationKind>{
          let this =  &::winrt::Interface::cast::<IDeviceInformation2>(self).unwrap();
          unsafe {
            let mut result__: <DeviceInformationKind as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformationKind>(result__)
          }
        }pub fn pairing(&self) ->  ::winrt::Result<DeviceInformationPairing>{
          let this =  &::winrt::Interface::cast::<IDeviceInformation2>(self).unwrap();
          unsafe {
            let mut result__: <DeviceInformationPairing as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformationPairing>(result__)
          }
        }pub fn create_from_id_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(device_id:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformation>>{
          Self::IDeviceInformationStatics(|this|unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformation, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),device_id.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DeviceInformation>>(result__,)
          })
        }pub fn create_from_id_async_additional_properties< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(device_id:T0__,additional_properties:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformation>>{
          Self::IDeviceInformationStatics(|this|unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformation, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),device_id.into().abi(),additional_properties.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DeviceInformation>>(result__,)
          })
        }pub fn find_all_async() ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformationCollection>, >{
          Self::IDeviceInformationStatics(|this|unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformationCollection, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <DeviceInformationCollection> >(result__)
          })
        }pub fn find_all_async_device_class(device_class:DeviceClass,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformationCollection>, >{
          Self::IDeviceInformationStatics(|this|unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformationCollection, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),device_class, &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <DeviceInformationCollection> >(result__)
          })
        }pub fn find_all_async_aqs_filter< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(aqs_filter:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformationCollection>, >{
          Self::IDeviceInformationStatics(|this|unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformationCollection, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),aqs_filter.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <DeviceInformationCollection> >(result__)
          })
        }pub fn find_all_async_aqs_filter_and_additional_properties< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(aqs_filter:T0__,additional_properties:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformationCollection>, >{
          Self::IDeviceInformationStatics(|this|unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformationCollection, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),aqs_filter.into().abi(),additional_properties.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <DeviceInformationCollection> >(result__)
          })
        }pub fn create_watcher() ->  ::winrt::Result<DeviceWatcher>{
          Self::IDeviceInformationStatics(|this|unsafe {
            let mut result__: <DeviceWatcher as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<DeviceWatcher>(result__)
          })
        }pub fn create_watcher_device_class(device_class:DeviceClass,) ->  ::winrt::Result<DeviceWatcher>{
          Self::IDeviceInformationStatics(|this|unsafe {
            let mut result__: <DeviceWatcher as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),device_class, &mut result__,).from_abi::<DeviceWatcher>(result__)
          })
        }pub fn create_watcher_aqs_filter< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(aqs_filter:T0__,) ->  ::winrt::Result<DeviceWatcher>{
          Self::IDeviceInformationStatics(|this|unsafe {
            let mut result__: <DeviceWatcher as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),aqs_filter.into().abi(), &mut result__,).from_abi::<DeviceWatcher>(result__)
          })
        }pub fn create_watcher_aqs_filter_and_additional_properties< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(aqs_filter:T0__,additional_properties:T1__,) ->  ::winrt::Result<DeviceWatcher>{
          Self::IDeviceInformationStatics(|this|unsafe {
            let mut result__: <DeviceWatcher as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),aqs_filter.into().abi(),additional_properties.into().abi(), &mut result__,).from_abi::<DeviceWatcher>(result__)
          })
        }pub fn get_aqs_filter_from_device_class(device_class:DeviceClass,) ->  ::winrt::Result<::winrt::HString>{
          Self::IDeviceInformationStatics2(|this|unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),device_class, &mut result__,).from_abi::<::winrt::HString>(result__)
          })
        }pub fn create_from_id_async_with_kind_and_additional_properties< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(device_id:T0__,additional_properties:T1__,kind:DeviceInformationKind,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformation>>{
          Self::IDeviceInformationStatics2(|this|unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformation, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),device_id.into().abi(),additional_properties.into().abi(),kind, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DeviceInformation>>(result__,)
          })
        }pub fn find_all_async_with_kind_aqs_filter_and_additional_properties< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(aqs_filter:T0__,additional_properties:T1__,kind:DeviceInformationKind,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformationCollection>, >{
          Self::IDeviceInformationStatics2(|this|unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformationCollection, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),aqs_filter.into().abi(),additional_properties.into().abi(),kind, &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <DeviceInformationCollection> >(result__)
          })
        }pub fn create_watcher_with_kind_aqs_filter_and_additional_properties< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(aqs_filter:T0__,additional_properties:T1__,kind:DeviceInformationKind,) ->  ::winrt::Result<DeviceWatcher>{
          Self::IDeviceInformationStatics2(|this|unsafe {
            let mut result__: <DeviceWatcher as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),aqs_filter.into().abi(),additional_properties.into().abi(),kind, &mut result__,).from_abi::<DeviceWatcher>(result__)
          })
        }#[allow(non_snake_case)]fn IDeviceInformationStatics<R,F:FnOnce(&IDeviceInformationStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<DeviceInformation,IDeviceInformationStatics, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn IDeviceInformationStatics2<R,F:FnOnce(&IDeviceInformationStatics2) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<DeviceInformation,IDeviceInformationStatics2, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for DeviceInformation {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DeviceInformation {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceInformation{}
      impl::std::fmt::Debug for DeviceInformation {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DeviceInformation {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DeviceInformation";
        
      }unsafe impl::winrt::Interface for DeviceInformation {
        type Vtable = IDeviceInformation_abi;
        const IID: ::winrt::Guid =  <IDeviceInformation as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DeviceInformation {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DeviceInformation;{aba0fb95-4398-489d-8e44-e6130927011f})");
        
      }impl::std::convert::From<DeviceInformation>for::winrt::Object {
        fn from(value:DeviceInformation) -> Self {
          value.0
        }
      }impl::std::convert::From<&DeviceInformation>for::winrt::Object {
        fn from(value: &DeviceInformation) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DeviceInformation {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DeviceInformation {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceInformation>for IDeviceInformation {
        fn from(value:DeviceInformation) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DeviceInformation>for IDeviceInformation {
        fn from(value: &DeviceInformation) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceInformation>>for DeviceInformation {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceInformation>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceInformation>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceInformation>>for& 'a DeviceInformation {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceInformation>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceInformation>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceInformation>for IDeviceInformation2 {
        fn from(value:DeviceInformation) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&DeviceInformation>for IDeviceInformation2 {
        fn from(value: &DeviceInformation) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceInformation2>>for DeviceInformation {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceInformation2>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceInformation2>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceInformation2>>for& 'a DeviceInformation {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceInformation2>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceInformation2>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for DeviceInformation{}
      unsafe impl::std::marker::Sync for DeviceInformation{}
      #[repr(transparent)]pub struct IDeviceDisconnectButtonClickedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IDeviceDisconnectButtonClickedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceDisconnectButtonClickedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceDisconnectButtonClickedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceDisconnectButtonClickedEventArgs{}
      impl IDeviceDisconnectButtonClickedEventArgs {
        pub fn device(&self) ->  ::winrt::Result<DeviceInformation>{
          let this = self;
          unsafe {
            let mut result__: <DeviceInformation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformation>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceDisconnectButtonClickedEventArgs {
        type Vtable = IDeviceDisconnectButtonClickedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2386867565,63746,18944,[181,54,243,121,146,230,162,167],);
        
      }#[repr(C)]pub struct IDeviceDisconnectButtonClickedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceDisconnectButtonClickedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{8e44b56d-f902-4a00-b536-f37992e6a2a7}")
        };
        
      }impl::std::convert::From<IDeviceDisconnectButtonClickedEventArgs>for::winrt::Object {
        fn from(value:IDeviceDisconnectButtonClickedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceDisconnectButtonClickedEventArgs>for::winrt::Object {
        fn from(value: &IDeviceDisconnectButtonClickedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceDisconnectButtonClickedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceDisconnectButtonClickedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DeviceDisconnectButtonClickedEventArgs(::winrt::Object);
      impl DeviceDisconnectButtonClickedEventArgs {
        pub fn device(&self) ->  ::winrt::Result<DeviceInformation>{
          let this = self;
          unsafe {
            let mut result__: <DeviceInformation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformation>(result__)
          }
        }
      }impl::std::clone::Clone for DeviceDisconnectButtonClickedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DeviceDisconnectButtonClickedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceDisconnectButtonClickedEventArgs{}
      impl::std::fmt::Debug for DeviceDisconnectButtonClickedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DeviceDisconnectButtonClickedEventArgs {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs";
        
      }unsafe impl::winrt::Interface for DeviceDisconnectButtonClickedEventArgs {
        type Vtable = IDeviceDisconnectButtonClickedEventArgs_abi;
        const IID: ::winrt::Guid =  <IDeviceDisconnectButtonClickedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DeviceDisconnectButtonClickedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs;{8e44b56d-f902-4a00-b536-f37992e6a2a7})");
        
      }impl::std::convert::From<DeviceDisconnectButtonClickedEventArgs>for::winrt::Object {
        fn from(value:DeviceDisconnectButtonClickedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&DeviceDisconnectButtonClickedEventArgs>for::winrt::Object {
        fn from(value: &DeviceDisconnectButtonClickedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DeviceDisconnectButtonClickedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DeviceDisconnectButtonClickedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceDisconnectButtonClickedEventArgs>for IDeviceDisconnectButtonClickedEventArgs {
        fn from(value:DeviceDisconnectButtonClickedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DeviceDisconnectButtonClickedEventArgs>for IDeviceDisconnectButtonClickedEventArgs {
        fn from(value: &DeviceDisconnectButtonClickedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceDisconnectButtonClickedEventArgs>>for DeviceDisconnectButtonClickedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceDisconnectButtonClickedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceDisconnectButtonClickedEventArgs, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceDisconnectButtonClickedEventArgs>>for& 'a DeviceDisconnectButtonClickedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceDisconnectButtonClickedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceDisconnectButtonClickedEventArgs, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for DeviceDisconnectButtonClickedEventArgs{}
      unsafe impl::std::marker::Sync for DeviceDisconnectButtonClickedEventArgs{}
      #[repr(transparent)]pub struct IDevicePickerFilter(::winrt::Object);
      impl::std::clone::Clone for IDevicePickerFilter {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDevicePickerFilter {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDevicePickerFilter {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDevicePickerFilter{}
      impl IDevicePickerFilter {
        pub fn supported_device_classes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<DeviceClass>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector<DeviceClass, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: <DeviceClass> >(result__)
          }
        }pub fn supported_device_selectors(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDevicePickerFilter {
        type Vtable = IDevicePickerFilter_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2447086242,22475,18673,[155,89,165,155,122,31,2,162],);
        
      }#[repr(C)]pub struct IDevicePickerFilter_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDevicePickerFilter {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{91db92a2-57cb-48f1-9b59-a59b7a1f02a2}")
        };
        
      }impl::std::convert::From<IDevicePickerFilter>for::winrt::Object {
        fn from(value:IDevicePickerFilter) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDevicePickerFilter>for::winrt::Object {
        fn from(value: &IDevicePickerFilter) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDevicePickerFilter {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDevicePickerFilter {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DevicePickerFilter(::winrt::Object);
      impl DevicePickerFilter {
        pub fn supported_device_classes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<DeviceClass>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector<DeviceClass, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: <DeviceClass> >(result__)
          }
        }pub fn supported_device_selectors(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }
      }impl::std::clone::Clone for DevicePickerFilter {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DevicePickerFilter {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DevicePickerFilter{}
      impl::std::fmt::Debug for DevicePickerFilter {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DevicePickerFilter {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DevicePickerFilter";
        
      }unsafe impl::winrt::Interface for DevicePickerFilter {
        type Vtable = IDevicePickerFilter_abi;
        const IID: ::winrt::Guid =  <IDevicePickerFilter as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DevicePickerFilter {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DevicePickerFilter;{91db92a2-57cb-48f1-9b59-a59b7a1f02a2})");
        
      }impl::std::convert::From<DevicePickerFilter>for::winrt::Object {
        fn from(value:DevicePickerFilter) -> Self {
          value.0
        }
      }impl::std::convert::From<&DevicePickerFilter>for::winrt::Object {
        fn from(value: &DevicePickerFilter) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DevicePickerFilter {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DevicePickerFilter {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DevicePickerFilter>for IDevicePickerFilter {
        fn from(value:DevicePickerFilter) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DevicePickerFilter>for IDevicePickerFilter {
        fn from(value: &DevicePickerFilter) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDevicePickerFilter>>for DevicePickerFilter {
        fn into(self) ->  ::winrt::Param< 'a ,IDevicePickerFilter>{
          ::winrt::Param::Owned(::std::convert::Into::<IDevicePickerFilter>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDevicePickerFilter>>for& 'a DevicePickerFilter {
        fn into(self) ->  ::winrt::Param< 'a ,IDevicePickerFilter>{
          ::winrt::Param::Owned(::std::convert::Into::<IDevicePickerFilter>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for DevicePickerFilter{}
      unsafe impl::std::marker::Sync for DevicePickerFilter{}
      #[repr(transparent)]pub struct IDevicePickerAppearance(::winrt::Object);
      impl::std::clone::Clone for IDevicePickerAppearance {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDevicePickerAppearance {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDevicePickerAppearance {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDevicePickerAppearance{}
      impl IDevicePickerAppearance {
        pub fn title(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_title< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn foreground_color(&self) ->  ::winrt::Result<super::super::ui::Color>{
          let this = self;
          unsafe {
            let mut result__: <super::super::ui::Color as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::ui::Color>(result__)
          }
        }pub fn set_foreground_color< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::ui::Color>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn background_color(&self) ->  ::winrt::Result<super::super::ui::Color>{
          let this = self;
          unsafe {
            let mut result__: <super::super::ui::Color as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::ui::Color>(result__)
          }
        }pub fn set_background_color< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::ui::Color>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn accent_color(&self) ->  ::winrt::Result<super::super::ui::Color>{
          let this = self;
          unsafe {
            let mut result__: <super::super::ui::Color as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::ui::Color>(result__)
          }
        }pub fn set_accent_color< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::ui::Color>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn selected_foreground_color(&self,) ->  ::winrt::Result<super::super::ui::Color>{
          let this = self;
          unsafe {
            let mut result__: <super::super::ui::Color as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::ui::Color>(result__)
          }
        }pub fn set_selected_foreground_color< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::ui::Color>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn selected_background_color(&self,) ->  ::winrt::Result<super::super::ui::Color>{
          let this = self;
          unsafe {
            let mut result__: <super::super::ui::Color as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::ui::Color>(result__)
          }
        }pub fn set_selected_background_color< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::ui::Color>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn selected_accent_color(&self) ->  ::winrt::Result<super::super::ui::Color>{
          let this = self;
          unsafe {
            let mut result__: <super::super::ui::Color as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::ui::Color>(result__)
          }
        }pub fn set_selected_accent_color< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::ui::Color>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IDevicePickerAppearance {
        type Vtable = IDevicePickerAppearance_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3868857030,58919,20184,[155,108,70,10,244,69,229,109],);
        
      }#[repr(C)]pub struct IDevicePickerAppearance_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::ui::Color_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::ui::Color_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::ui::Color_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::ui::Color_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::ui::Color_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::ui::Color_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::ui::Color_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::ui::Color_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::ui::Color_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::ui::Color_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::ui::Color_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::ui::Color_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDevicePickerAppearance {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{e69a12c6-e627-4ed8-9b6c-460af445e56d}")
        };
        
      }impl::std::convert::From<IDevicePickerAppearance>for::winrt::Object {
        fn from(value:IDevicePickerAppearance) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDevicePickerAppearance>for::winrt::Object {
        fn from(value: &IDevicePickerAppearance) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDevicePickerAppearance {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDevicePickerAppearance {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DevicePickerAppearance(::winrt::Object);
      impl DevicePickerAppearance {
        pub fn title(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_title< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn foreground_color(&self) ->  ::winrt::Result<super::super::ui::Color>{
          let this = self;
          unsafe {
            let mut result__: <super::super::ui::Color as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::ui::Color>(result__)
          }
        }pub fn set_foreground_color< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::ui::Color>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn background_color(&self) ->  ::winrt::Result<super::super::ui::Color>{
          let this = self;
          unsafe {
            let mut result__: <super::super::ui::Color as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::ui::Color>(result__)
          }
        }pub fn set_background_color< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::ui::Color>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn accent_color(&self) ->  ::winrt::Result<super::super::ui::Color>{
          let this = self;
          unsafe {
            let mut result__: <super::super::ui::Color as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::ui::Color>(result__)
          }
        }pub fn set_accent_color< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::ui::Color>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn selected_foreground_color(&self,) ->  ::winrt::Result<super::super::ui::Color>{
          let this = self;
          unsafe {
            let mut result__: <super::super::ui::Color as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::ui::Color>(result__)
          }
        }pub fn set_selected_foreground_color< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::ui::Color>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn selected_background_color(&self,) ->  ::winrt::Result<super::super::ui::Color>{
          let this = self;
          unsafe {
            let mut result__: <super::super::ui::Color as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::ui::Color>(result__)
          }
        }pub fn set_selected_background_color< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::ui::Color>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn selected_accent_color(&self) ->  ::winrt::Result<super::super::ui::Color>{
          let this = self;
          unsafe {
            let mut result__: <super::super::ui::Color as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::ui::Color>(result__)
          }
        }pub fn set_selected_accent_color< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::ui::Color>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for DevicePickerAppearance {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DevicePickerAppearance {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DevicePickerAppearance{}
      impl::std::fmt::Debug for DevicePickerAppearance {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DevicePickerAppearance {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DevicePickerAppearance";
        
      }unsafe impl::winrt::Interface for DevicePickerAppearance {
        type Vtable = IDevicePickerAppearance_abi;
        const IID: ::winrt::Guid =  <IDevicePickerAppearance as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DevicePickerAppearance {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DevicePickerAppearance;{e69a12c6-e627-4ed8-9b6c-460af445e56d})");
        
      }impl::std::convert::From<DevicePickerAppearance>for::winrt::Object {
        fn from(value:DevicePickerAppearance) -> Self {
          value.0
        }
      }impl::std::convert::From<&DevicePickerAppearance>for::winrt::Object {
        fn from(value: &DevicePickerAppearance) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DevicePickerAppearance {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DevicePickerAppearance {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DevicePickerAppearance>for IDevicePickerAppearance {
        fn from(value:DevicePickerAppearance) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DevicePickerAppearance>for IDevicePickerAppearance {
        fn from(value: &DevicePickerAppearance) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDevicePickerAppearance>>for DevicePickerAppearance {
        fn into(self) ->  ::winrt::Param< 'a ,IDevicePickerAppearance>{
          ::winrt::Param::Owned(::std::convert::Into::<IDevicePickerAppearance>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDevicePickerAppearance>>for& 'a DevicePickerAppearance {
        fn into(self) ->  ::winrt::Param< 'a ,IDevicePickerAppearance>{
          ::winrt::Param::Owned(::std::convert::Into::<IDevicePickerAppearance>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for DevicePickerAppearance{}
      unsafe impl::std::marker::Sync for DevicePickerAppearance{}
      #[repr(transparent)]pub struct IDeviceSelectedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IDeviceSelectedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceSelectedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceSelectedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceSelectedEventArgs{}
      impl IDeviceSelectedEventArgs {
        pub fn selected_device(&self) ->  ::winrt::Result<DeviceInformation>{
          let this = self;
          unsafe {
            let mut result__: <DeviceInformation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformation>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceSelectedEventArgs {
        type Vtable = IDeviceSelectedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(647944926,7471,18752,[132,2,65,86,184,29,60,119],);
        
      }#[repr(C)]pub struct IDeviceSelectedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceSelectedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{269edade-1d2f-4940-8402-4156b81d3c77}")
        };
        
      }impl::std::convert::From<IDeviceSelectedEventArgs>for::winrt::Object {
        fn from(value:IDeviceSelectedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceSelectedEventArgs>for::winrt::Object {
        fn from(value: &IDeviceSelectedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceSelectedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceSelectedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DeviceSelectedEventArgs(::winrt::Object);
      impl DeviceSelectedEventArgs {
        pub fn selected_device(&self) ->  ::winrt::Result<DeviceInformation>{
          let this = self;
          unsafe {
            let mut result__: <DeviceInformation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformation>(result__)
          }
        }
      }impl::std::clone::Clone for DeviceSelectedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DeviceSelectedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceSelectedEventArgs{}
      impl::std::fmt::Debug for DeviceSelectedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DeviceSelectedEventArgs {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DeviceSelectedEventArgs";
        
      }unsafe impl::winrt::Interface for DeviceSelectedEventArgs {
        type Vtable = IDeviceSelectedEventArgs_abi;
        const IID: ::winrt::Guid =  <IDeviceSelectedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DeviceSelectedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DeviceSelectedEventArgs;{269edade-1d2f-4940-8402-4156b81d3c77})");
        
      }impl::std::convert::From<DeviceSelectedEventArgs>for::winrt::Object {
        fn from(value:DeviceSelectedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&DeviceSelectedEventArgs>for::winrt::Object {
        fn from(value: &DeviceSelectedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DeviceSelectedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DeviceSelectedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceSelectedEventArgs>for IDeviceSelectedEventArgs {
        fn from(value:DeviceSelectedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DeviceSelectedEventArgs>for IDeviceSelectedEventArgs {
        fn from(value: &DeviceSelectedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceSelectedEventArgs>>for DeviceSelectedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceSelectedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceSelectedEventArgs>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceSelectedEventArgs>>for& 'a DeviceSelectedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceSelectedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceSelectedEventArgs>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for DeviceSelectedEventArgs{}
      unsafe impl::std::marker::Sync for DeviceSelectedEventArgs{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct DevicePickerDisplayStatusOptions(u32);
      impl::std::convert::From<u32>for DevicePickerDisplayStatusOptions {
        fn from(value:u32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for DevicePickerDisplayStatusOptions {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for DevicePickerDisplayStatusOptions {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for DevicePickerDisplayStatusOptions {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for DevicePickerDisplayStatusOptions {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DevicePickerDisplayStatusOptions{}
      impl::std::marker::Copy for DevicePickerDisplayStatusOptions{}
      impl DevicePickerDisplayStatusOptions {
        #![allow(non_upper_case_globals)]pub const None:Self = Self(0u32);
        pub const ShowProgress:Self = Self(1u32);
        pub const ShowDisconnectButton:Self = Self(2u32);
        pub const ShowRetryButton:Self = Self(4u32);
        
      }unsafe impl::winrt::Abi for DevicePickerDisplayStatusOptions {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for DevicePickerDisplayStatusOptions {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Devices.Enumeration.DevicePickerDisplayStatusOptions;u4)",);
        
      }impl::std::ops::BitOr for DevicePickerDisplayStatusOptions {
        type Output = Self;
        fn bitor(self,rhs:Self) -> Self {
          Self(self.0|rhs.0)
        }
      }impl::std::ops::BitAnd for DevicePickerDisplayStatusOptions {
        type Output = Self;
        fn bitand(self,rhs:Self) -> Self {
          Self(self.0&rhs.0)
        }
      }#[repr(transparent)]pub struct IDevicePicker(::winrt::Object);
      impl::std::clone::Clone for IDevicePicker {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDevicePicker {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDevicePicker {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDevicePicker{}
      impl IDevicePicker {
        pub fn filter(&self) ->  ::winrt::Result<DevicePickerFilter>{
          let this = self;
          unsafe {
            let mut result__: <DevicePickerFilter as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DevicePickerFilter>(result__)
          }
        }pub fn appearance(&self) ->  ::winrt::Result<DevicePickerAppearance>{
          let this = self;
          unsafe {
            let mut result__: <DevicePickerAppearance as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<DevicePickerAppearance>(result__)
          }
        }pub fn requested_properties(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn device_selected< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DevicePicker,DeviceSelectedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_device_selected< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn disconnect_button_clicked< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DevicePicker,DeviceDisconnectButtonClickedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_disconnect_button_clicked< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn device_picker_dismissed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DevicePicker, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_device_picker_dismissed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn show< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Rect>>, >(&self,selection:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),selection.into().abi(),).ok()
          }
        }pub fn show_with_placement< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Rect>>, >(&self,selection:T0__,placement:super::super::ui::popups::Placement,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),selection.into().abi(),placement,).ok()
          }
        }pub fn pick_single_device_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Rect>>, >(&self,selection:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformation>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformation, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),selection.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DeviceInformation>>(result__,)
          }
        }pub fn pick_single_device_async_with_placement< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Rect>>, >(&self,selection:T0__,placement:super::super::ui::popups::Placement,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformation>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformation, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),selection.into().abi(),placement, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DeviceInformation>>(result__,)
          }
        }pub fn hide(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn set_display_status< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,DeviceInformation>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,device:T0__,status:T1__,options:DevicePickerDisplayStatusOptions,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),device.into().abi(),status.into().abi(),options,).ok()
          }
        }
      }unsafe impl::winrt::Interface for IDevicePicker {
        type Vtable = IDevicePicker_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2224650914,842,17472,[136,19,125,11,212,121,191,90],);
        
      }#[repr(C)]pub struct IDevicePicker_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,selection:super::super::foundation::Rect_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,selection:super::super::foundation::Rect_abi,placement:super::super::ui::popups::Placement,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,selection:super::super::foundation::Rect_abi,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,selection:super::super::foundation::Rect_abi,placement:super::super::ui::popups::Placement,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,device: ::winrt::RawPtr,status: ::winrt::RawPtr,options:DevicePickerDisplayStatusOptions,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDevicePicker {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{84997aa2-034a-4440-8813-7d0bd479bf5a}")
        };
        
      }impl::std::convert::From<IDevicePicker>for::winrt::Object {
        fn from(value:IDevicePicker) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDevicePicker>for::winrt::Object {
        fn from(value: &IDevicePicker) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDevicePicker {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDevicePicker {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DevicePicker(::winrt::Object);
      impl DevicePicker {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn filter(&self) ->  ::winrt::Result<DevicePickerFilter>{
          let this = self;
          unsafe {
            let mut result__: <DevicePickerFilter as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DevicePickerFilter>(result__)
          }
        }pub fn appearance(&self) ->  ::winrt::Result<DevicePickerAppearance>{
          let this = self;
          unsafe {
            let mut result__: <DevicePickerAppearance as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<DevicePickerAppearance>(result__)
          }
        }pub fn requested_properties(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn device_selected< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DevicePicker,DeviceSelectedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_device_selected< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn disconnect_button_clicked< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DevicePicker,DeviceDisconnectButtonClickedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_disconnect_button_clicked< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn device_picker_dismissed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DevicePicker, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_device_picker_dismissed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn show< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Rect>>, >(&self,selection:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),selection.into().abi(),).ok()
          }
        }pub fn show_with_placement< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Rect>>, >(&self,selection:T0__,placement:super::super::ui::popups::Placement,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),selection.into().abi(),placement,).ok()
          }
        }pub fn pick_single_device_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Rect>>, >(&self,selection:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformation>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformation, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),selection.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DeviceInformation>>(result__,)
          }
        }pub fn pick_single_device_async_with_placement< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Rect>>, >(&self,selection:T0__,placement:super::super::ui::popups::Placement,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DeviceInformation>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DeviceInformation, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),selection.into().abi(),placement, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<DeviceInformation>>(result__,)
          }
        }pub fn hide(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn set_display_status< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,DeviceInformation>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,device:T0__,status:T1__,options:DevicePickerDisplayStatusOptions,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),device.into().abi(),status.into().abi(),options,).ok()
          }
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<DevicePicker, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for DevicePicker {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DevicePicker {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DevicePicker{}
      impl::std::fmt::Debug for DevicePicker {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DevicePicker {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DevicePicker";
        
      }unsafe impl::winrt::Interface for DevicePicker {
        type Vtable = IDevicePicker_abi;
        const IID: ::winrt::Guid =  <IDevicePicker as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DevicePicker {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DevicePicker;{84997aa2-034a-4440-8813-7d0bd479bf5a})");
        
      }impl::std::convert::From<DevicePicker>for::winrt::Object {
        fn from(value:DevicePicker) -> Self {
          value.0
        }
      }impl::std::convert::From<&DevicePicker>for::winrt::Object {
        fn from(value: &DevicePicker) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DevicePicker {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DevicePicker {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DevicePicker>for IDevicePicker {
        fn from(value:DevicePicker) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DevicePicker>for IDevicePicker {
        fn from(value: &DevicePicker) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDevicePicker>>for DevicePicker {
        fn into(self) ->  ::winrt::Param< 'a ,IDevicePicker>{
          ::winrt::Param::Owned(::std::convert::Into::<IDevicePicker>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDevicePicker>>for& 'a DevicePicker {
        fn into(self) ->  ::winrt::Param< 'a ,IDevicePicker>{
          ::winrt::Param::Owned(::std::convert::Into::<IDevicePicker>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for DevicePicker{}
      unsafe impl::std::marker::Sync for DevicePicker{}
      #[repr(transparent)]pub struct IDeviceWatcherEvent(::winrt::Object);
      impl::std::clone::Clone for IDeviceWatcherEvent {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceWatcherEvent {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceWatcherEvent {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceWatcherEvent{}
      impl IDeviceWatcherEvent {
        pub fn kind(&self) ->  ::winrt::Result<DeviceWatcherEventKind>{
          let this = self;
          unsafe {
            let mut result__: <DeviceWatcherEventKind as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceWatcherEventKind>(result__)
          }
        }pub fn device_information(&self) ->  ::winrt::Result<DeviceInformation>{
          let this = self;
          unsafe {
            let mut result__: <DeviceInformation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformation>(result__)
          }
        }pub fn device_information_update(&self,) ->  ::winrt::Result<DeviceInformationUpdate>{
          let this = self;
          unsafe {
            let mut result__: <DeviceInformationUpdate as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformationUpdate>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceWatcherEvent {
        type Vtable = IDeviceWatcherEvent_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1957338123,7613,18429,[182,53,60,197,86,208,255,139],);
        
      }#[repr(C)]pub struct IDeviceWatcherEvent_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut DeviceWatcherEventKind,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceWatcherEvent {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{74aa9c0b-1dbd-47fd-b635-3cc556d0ff8b}")
        };
        
      }impl::std::convert::From<IDeviceWatcherEvent>for::winrt::Object {
        fn from(value:IDeviceWatcherEvent) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceWatcherEvent>for::winrt::Object {
        fn from(value: &IDeviceWatcherEvent) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceWatcherEvent {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceWatcherEvent {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DeviceWatcherEvent(::winrt::Object);
      impl DeviceWatcherEvent {
        pub fn kind(&self) ->  ::winrt::Result<DeviceWatcherEventKind>{
          let this = self;
          unsafe {
            let mut result__: <DeviceWatcherEventKind as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceWatcherEventKind>(result__)
          }
        }pub fn device_information(&self) ->  ::winrt::Result<DeviceInformation>{
          let this = self;
          unsafe {
            let mut result__: <DeviceInformation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformation>(result__)
          }
        }pub fn device_information_update(&self,) ->  ::winrt::Result<DeviceInformationUpdate>{
          let this = self;
          unsafe {
            let mut result__: <DeviceInformationUpdate as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<DeviceInformationUpdate>(result__)
          }
        }
      }impl::std::clone::Clone for DeviceWatcherEvent {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DeviceWatcherEvent {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceWatcherEvent{}
      impl::std::fmt::Debug for DeviceWatcherEvent {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DeviceWatcherEvent {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DeviceWatcherEvent";
        
      }unsafe impl::winrt::Interface for DeviceWatcherEvent {
        type Vtable = IDeviceWatcherEvent_abi;
        const IID: ::winrt::Guid =  <IDeviceWatcherEvent as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DeviceWatcherEvent {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DeviceWatcherEvent;{74aa9c0b-1dbd-47fd-b635-3cc556d0ff8b})");
        
      }impl::std::convert::From<DeviceWatcherEvent>for::winrt::Object {
        fn from(value:DeviceWatcherEvent) -> Self {
          value.0
        }
      }impl::std::convert::From<&DeviceWatcherEvent>for::winrt::Object {
        fn from(value: &DeviceWatcherEvent) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DeviceWatcherEvent {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DeviceWatcherEvent {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceWatcherEvent>for IDeviceWatcherEvent {
        fn from(value:DeviceWatcherEvent) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DeviceWatcherEvent>for IDeviceWatcherEvent {
        fn from(value: &DeviceWatcherEvent) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceWatcherEvent>>for DeviceWatcherEvent {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceWatcherEvent>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceWatcherEvent>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceWatcherEvent>>for& 'a DeviceWatcherEvent {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceWatcherEvent>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceWatcherEvent>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for DeviceWatcherEvent{}
      unsafe impl::std::marker::Sync for DeviceWatcherEvent{}
      #[repr(transparent)]pub struct IDeviceWatcherTriggerDetails(::winrt::Object);
      impl::std::clone::Clone for IDeviceWatcherTriggerDetails {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDeviceWatcherTriggerDetails {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDeviceWatcherTriggerDetails {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDeviceWatcherTriggerDetails{}
      impl IDeviceWatcherTriggerDetails {
        pub fn device_watcher_events(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<DeviceWatcherEvent>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<DeviceWatcherEvent, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <DeviceWatcherEvent> >(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDeviceWatcherTriggerDetails {
        type Vtable = IDeviceWatcherTriggerDetails_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(947945753,19639,20055,[165,109,119,109,7,203,254,249],);
        
      }#[repr(C)]pub struct IDeviceWatcherTriggerDetails_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDeviceWatcherTriggerDetails {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{38808119-4cb7-4e57-a56d-776d07cbfef9}")
        };
        
      }impl::std::convert::From<IDeviceWatcherTriggerDetails>for::winrt::Object {
        fn from(value:IDeviceWatcherTriggerDetails) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDeviceWatcherTriggerDetails>for::winrt::Object {
        fn from(value: &IDeviceWatcherTriggerDetails) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDeviceWatcherTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDeviceWatcherTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DeviceWatcherTriggerDetails(::winrt::Object);
      impl DeviceWatcherTriggerDetails {
        pub fn device_watcher_events(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<DeviceWatcherEvent>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<DeviceWatcherEvent, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <DeviceWatcherEvent> >(result__)
          }
        }
      }impl::std::clone::Clone for DeviceWatcherTriggerDetails {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DeviceWatcherTriggerDetails {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DeviceWatcherTriggerDetails{}
      impl::std::fmt::Debug for DeviceWatcherTriggerDetails {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DeviceWatcherTriggerDetails {
        const NAME: & 'static str = "Windows.Devices.Enumeration.DeviceWatcherTriggerDetails";
        
      }unsafe impl::winrt::Interface for DeviceWatcherTriggerDetails {
        type Vtable = IDeviceWatcherTriggerDetails_abi;
        const IID: ::winrt::Guid =  <IDeviceWatcherTriggerDetails as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DeviceWatcherTriggerDetails {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Devices.Enumeration.DeviceWatcherTriggerDetails;{38808119-4cb7-4e57-a56d-776d07cbfef9})");
        
      }impl::std::convert::From<DeviceWatcherTriggerDetails>for::winrt::Object {
        fn from(value:DeviceWatcherTriggerDetails) -> Self {
          value.0
        }
      }impl::std::convert::From<&DeviceWatcherTriggerDetails>for::winrt::Object {
        fn from(value: &DeviceWatcherTriggerDetails) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DeviceWatcherTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DeviceWatcherTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DeviceWatcherTriggerDetails>for IDeviceWatcherTriggerDetails {
        fn from(value:DeviceWatcherTriggerDetails) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DeviceWatcherTriggerDetails>for IDeviceWatcherTriggerDetails {
        fn from(value: &DeviceWatcherTriggerDetails) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceWatcherTriggerDetails>>for DeviceWatcherTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceWatcherTriggerDetails>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceWatcherTriggerDetails>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDeviceWatcherTriggerDetails>>for& 'a DeviceWatcherTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a ,IDeviceWatcherTriggerDetails>{
          ::winrt::Param::Owned(::std::convert::Into::<IDeviceWatcherTriggerDetails>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for DeviceWatcherTriggerDetails{}
      unsafe impl::std::marker::Sync for DeviceWatcherTriggerDetails{}
      
    }
  }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod graphics {
    #[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod directx {
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct DirectXPixelFormat(i32);
      impl::std::convert::From<i32>for DirectXPixelFormat {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for DirectXPixelFormat {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for DirectXPixelFormat {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for DirectXPixelFormat {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for DirectXPixelFormat {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DirectXPixelFormat{}
      impl::std::marker::Copy for DirectXPixelFormat{}
      impl DirectXPixelFormat {
        #![allow(non_upper_case_globals)]pub const Unknown:Self = Self(0i32);
        pub const R32G32B32A32Typeless:Self = Self(1i32);
        pub const R32G32B32A32Float:Self = Self(2i32);
        pub const R32G32B32A32UInt:Self = Self(3i32);
        pub const R32G32B32A32Int:Self = Self(4i32);
        pub const R32G32B32Typeless:Self = Self(5i32);
        pub const R32G32B32Float:Self = Self(6i32);
        pub const R32G32B32UInt:Self = Self(7i32);
        pub const R32G32B32Int:Self = Self(8i32);
        pub const R16G16B16A16Typeless:Self = Self(9i32);
        pub const R16G16B16A16Float:Self = Self(10i32);
        pub const R16G16B16A16UIntNormalized:Self = Self(11i32);
        pub const R16G16B16A16UInt:Self = Self(12i32);
        pub const R16G16B16A16IntNormalized:Self = Self(13i32);
        pub const R16G16B16A16Int:Self = Self(14i32);
        pub const R32G32Typeless:Self = Self(15i32);
        pub const R32G32Float:Self = Self(16i32);
        pub const R32G32UInt:Self = Self(17i32);
        pub const R32G32Int:Self = Self(18i32);
        pub const R32G8X24Typeless:Self = Self(19i32);
        pub const D32FloatS8X24UInt:Self = Self(20i32);
        pub const R32FloatX8X24Typeless:Self = Self(21i32);
        pub const X32TypelessG8X24UInt:Self = Self(22i32);
        pub const R10G10B10A2Typeless:Self = Self(23i32);
        pub const R10G10B10A2UIntNormalized:Self = Self(24i32);
        pub const R10G10B10A2UInt:Self = Self(25i32);
        pub const R11G11B10Float:Self = Self(26i32);
        pub const R8G8B8A8Typeless:Self = Self(27i32);
        pub const R8G8B8A8UIntNormalized:Self = Self(28i32);
        pub const R8G8B8A8UIntNormalizedSrgb:Self = Self(29i32);
        pub const R8G8B8A8UInt:Self = Self(30i32);
        pub const R8G8B8A8IntNormalized:Self = Self(31i32);
        pub const R8G8B8A8Int:Self = Self(32i32);
        pub const R16G16Typeless:Self = Self(33i32);
        pub const R16G16Float:Self = Self(34i32);
        pub const R16G16UIntNormalized:Self = Self(35i32);
        pub const R16G16UInt:Self = Self(36i32);
        pub const R16G16IntNormalized:Self = Self(37i32);
        pub const R16G16Int:Self = Self(38i32);
        pub const R32Typeless:Self = Self(39i32);
        pub const D32Float:Self = Self(40i32);
        pub const R32Float:Self = Self(41i32);
        pub const R32UInt:Self = Self(42i32);
        pub const R32Int:Self = Self(43i32);
        pub const R24G8Typeless:Self = Self(44i32);
        pub const D24UIntNormalizedS8UInt:Self = Self(45i32);
        pub const R24UIntNormalizedX8Typeless:Self = Self(46i32);
        pub const X24TypelessG8UInt:Self = Self(47i32);
        pub const R8G8Typeless:Self = Self(48i32);
        pub const R8G8UIntNormalized:Self = Self(49i32);
        pub const R8G8UInt:Self = Self(50i32);
        pub const R8G8IntNormalized:Self = Self(51i32);
        pub const R8G8Int:Self = Self(52i32);
        pub const R16Typeless:Self = Self(53i32);
        pub const R16Float:Self = Self(54i32);
        pub const D16UIntNormalized:Self = Self(55i32);
        pub const R16UIntNormalized:Self = Self(56i32);
        pub const R16UInt:Self = Self(57i32);
        pub const R16IntNormalized:Self = Self(58i32);
        pub const R16Int:Self = Self(59i32);
        pub const R8Typeless:Self = Self(60i32);
        pub const R8UIntNormalized:Self = Self(61i32);
        pub const R8UInt:Self = Self(62i32);
        pub const R8IntNormalized:Self = Self(63i32);
        pub const R8Int:Self = Self(64i32);
        pub const A8UIntNormalized:Self = Self(65i32);
        pub const R1UIntNormalized:Self = Self(66i32);
        pub const R9G9B9E5SharedExponent:Self = Self(67i32);
        pub const R8G8B8G8UIntNormalized:Self = Self(68i32);
        pub const G8R8G8B8UIntNormalized:Self = Self(69i32);
        pub const BC1Typeless:Self = Self(70i32);
        pub const BC1UIntNormalized:Self = Self(71i32);
        pub const BC1UIntNormalizedSrgb:Self = Self(72i32);
        pub const BC2Typeless:Self = Self(73i32);
        pub const BC2UIntNormalized:Self = Self(74i32);
        pub const BC2UIntNormalizedSrgb:Self = Self(75i32);
        pub const BC3Typeless:Self = Self(76i32);
        pub const BC3UIntNormalized:Self = Self(77i32);
        pub const BC3UIntNormalizedSrgb:Self = Self(78i32);
        pub const BC4Typeless:Self = Self(79i32);
        pub const BC4UIntNormalized:Self = Self(80i32);
        pub const BC4IntNormalized:Self = Self(81i32);
        pub const BC5Typeless:Self = Self(82i32);
        pub const BC5UIntNormalized:Self = Self(83i32);
        pub const BC5IntNormalized:Self = Self(84i32);
        pub const B5G6R5UIntNormalized:Self = Self(85i32);
        pub const B5G5R5A1UIntNormalized:Self = Self(86i32);
        pub const B8G8R8A8UIntNormalized:Self = Self(87i32);
        pub const B8G8R8X8UIntNormalized:Self = Self(88i32);
        pub const R10G10B10XRBiasA2UIntNormalized:Self = Self(89i32);
        pub const B8G8R8A8Typeless:Self = Self(90i32);
        pub const B8G8R8A8UIntNormalizedSrgb:Self = Self(91i32);
        pub const B8G8R8X8Typeless:Self = Self(92i32);
        pub const B8G8R8X8UIntNormalizedSrgb:Self = Self(93i32);
        pub const BC6HTypeless:Self = Self(94i32);
        pub const BC6H16UnsignedFloat:Self = Self(95i32);
        pub const BC6H16Float:Self = Self(96i32);
        pub const BC7Typeless:Self = Self(97i32);
        pub const BC7UIntNormalized:Self = Self(98i32);
        pub const BC7UIntNormalizedSrgb:Self = Self(99i32);
        pub const Ayuv:Self = Self(100i32);
        pub const Y410:Self = Self(101i32);
        pub const Y416:Self = Self(102i32);
        pub const NV12:Self = Self(103i32);
        pub const P010:Self = Self(104i32);
        pub const P016:Self = Self(105i32);
        pub const Opaque420:Self = Self(106i32);
        pub const Yuy2:Self = Self(107i32);
        pub const Y210:Self = Self(108i32);
        pub const Y216:Self = Self(109i32);
        pub const NV11:Self = Self(110i32);
        pub const AI44:Self = Self(111i32);
        pub const IA44:Self = Self(112i32);
        pub const P8:Self = Self(113i32);
        pub const A8P8:Self = Self(114i32);
        pub const B4G4R4A4UIntNormalized:Self = Self(115i32);
        pub const P208:Self = Self(130i32);
        pub const V208:Self = Self(131i32);
        pub const V408:Self = Self(132i32);
        pub const SamplerFeedbackMinMipOpaque:Self = Self(189i32);
        pub const SamplerFeedbackMipRegionUsedOpaque:Self = Self(190i32);
        
      }unsafe impl::winrt::Abi for DirectXPixelFormat {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for DirectXPixelFormat {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Graphics.DirectX.DirectXPixelFormat;i4)",);
        
      }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod direct3d11 {
        #[repr(C)]#[allow(non_snake_case)]pub struct Direct3DMultisampleDescription {
          pub count:i32,pub quality:i32,
        }#[repr(C)]pub struct Direct3DMultisampleDescription_abi(i32,i32);
        unsafe impl::winrt::Abi for Direct3DMultisampleDescription {
          type Abi = Direct3DMultisampleDescription_abi;
          
        }impl::std::default::Default for Direct3DMultisampleDescription {
          fn default() -> Self {
            Self {
              count:0,quality:0,
            }
          }
        }impl::std::fmt::Debug for Direct3DMultisampleDescription {
          fn fmt(&self,fmt: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            fmt.debug_struct("Direct3DMultisampleDescription").field("count", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.count),std::fmt::Display::fmt),])).field("quality", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.quality),std::fmt::Display::fmt),])).finish()
          }
        }impl::std::clone::Clone for Direct3DMultisampleDescription {
          fn clone(&self) -> Self {
            Self {
              count:self.count,quality:self.quality,
            }
          }
        }impl::std::cmp::PartialEq for Direct3DMultisampleDescription {
          fn eq(&self,other: &Self) -> bool {
            self.count==other.count&&self.quality==other.quality
          }
        }impl::std::cmp::Eq for Direct3DMultisampleDescription{}
        unsafe impl::winrt::RuntimeType for Direct3DMultisampleDescription {
          type DefaultType = Self;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"struct(Windows.Graphics.DirectX.Direct3D11.Direct3DMultisampleDescription;i4;i4)");
          
        }#[repr(C)]#[allow(non_snake_case)]pub struct Direct3DSurfaceDescription {
          pub width:i32,pub height:i32,pub format:super::DirectXPixelFormat,pub multisample_description:Direct3DMultisampleDescription,
        }#[repr(C)]pub struct Direct3DSurfaceDescription_abi(i32,i32,super::DirectXPixelFormat,Direct3DMultisampleDescription_abi,);
        unsafe impl::winrt::Abi for Direct3DSurfaceDescription {
          type Abi = Direct3DSurfaceDescription_abi;
          
        }impl::std::default::Default for Direct3DSurfaceDescription {
          fn default() -> Self {
            Self {
              width:0,height:0,format: ::std::default::Default::default(),multisample_description: ::std::default::Default::default(),
            }
          }
        }impl::std::fmt::Debug for Direct3DSurfaceDescription {
          fn fmt(&self,fmt: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            fmt.write_fmt(format_args!("Direct3DSurfaceDescription: width: {:?} height: {:?}", self.width, self.height))
            // fmt.debug_struct("Direct3DSurfaceDescription").field("width", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.width),std::fmt::Display::fmt),])).field("height", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.height),std::fmt::Display::fmt),])).field("format", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.format),std::fmt::Display::fmt),])).field("multisample_description", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.multisample_description),std::fmt::Display::fmt),]),).finish()
          }
        }impl::std::clone::Clone for Direct3DSurfaceDescription {
          fn clone(&self) -> Self {
            Self {
              width:self.width,height:self.height,format:self.format,multisample_description: <Direct3DMultisampleDescription as std::clone::Clone>::clone(&self.multisample_description,),
            }
          }
        }impl::std::cmp::PartialEq for Direct3DSurfaceDescription {
          fn eq(&self,other: &Self) -> bool {
            self.width==other.width&&self.height==other.height&&self.format==other.format&&self.multisample_description==other.multisample_description
          }
        }impl::std::cmp::Eq for Direct3DSurfaceDescription{}
        unsafe impl::winrt::RuntimeType for Direct3DSurfaceDescription {
          type DefaultType = Self;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"struct(Windows.Graphics.DirectX.Direct3D11.Direct3DSurfaceDescription;i4;i4;enum(Windows.Graphics.DirectX.DirectXPixelFormat;i4);struct(Windows.Graphics.DirectX.Direct3D11.Direct3DMultisampleDescription;i4;i4))");
          
        }#[repr(transparent)]pub struct IDirect3DSurface(::winrt::Object);
        impl::std::clone::Clone for IDirect3DSurface {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IDirect3DSurface {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IDirect3DSurface {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IDirect3DSurface{}
        impl IDirect3DSurface {
          pub fn close(&self) ->  ::winrt::Result<()>{
            let this =  &::winrt::Interface::cast::<super::super::super::foundation::IClosable, >(self).unwrap();
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
            }
          }pub fn description(&self) ->  ::winrt::Result<Direct3DSurfaceDescription>{
            let this = self;
            unsafe {
              let mut result__: <Direct3DSurfaceDescription as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<Direct3DSurfaceDescription>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IDirect3DSurface {
          type Vtable = IDirect3DSurface_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(200581446,5057,18068,[190,227,122,191,21,234,245,134],);
          
        }#[repr(C)]pub struct IDirect3DSurface_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut Direct3DSurfaceDescription_abi,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IDirect3DSurface {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{0bf4a146-13c1-4694-bee3-7abf15eaf586}")
          };
          
        }impl::std::convert::From<IDirect3DSurface>for::winrt::Object {
          fn from(value:IDirect3DSurface) -> Self {
            value.0
          }
        }impl::std::convert::From<&IDirect3DSurface>for::winrt::Object {
          fn from(value: &IDirect3DSurface) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDirect3DSurface {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDirect3DSurface {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<IDirect3DSurface>for super::super::super::foundation::IClosable {
          fn from(value:IDirect3DSurface) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&IDirect3DSurface>for super::super::super::foundation::IClosable {
          fn from(value: &IDirect3DSurface) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for IDirect3DSurface {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(self))
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for& 'a IDirect3DSurface {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(::std::clone::Clone::clone(self)))
          }
        }#[repr(transparent)]pub struct IDirect3DDevice(::winrt::Object);
        impl::std::clone::Clone for IDirect3DDevice {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IDirect3DDevice {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IDirect3DDevice {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IDirect3DDevice{}
        impl IDirect3DDevice {
          pub fn close(&self) ->  ::winrt::Result<()>{
            let this =  &::winrt::Interface::cast::<super::super::super::foundation::IClosable, >(self).unwrap();
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
            }
          }pub fn trim(&self) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
            }
          }
        }unsafe impl::winrt::Interface for IDirect3DDevice {
          type Vtable = IDirect3DDevice_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2742428843,36191,18000,[157,62,158,174,61,155,198,112],);
          
        }#[repr(C)]pub struct IDirect3DDevice_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IDirect3DDevice {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{a37624ab-8d5f-4650-9d3e-9eae3d9bc670}")
          };
          
        }impl::std::convert::From<IDirect3DDevice>for::winrt::Object {
          fn from(value:IDirect3DDevice) -> Self {
            value.0
          }
        }impl::std::convert::From<&IDirect3DDevice>for::winrt::Object {
          fn from(value: &IDirect3DDevice) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDirect3DDevice {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDirect3DDevice {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<IDirect3DDevice>for super::super::super::foundation::IClosable {
          fn from(value:IDirect3DDevice) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&IDirect3DDevice>for super::super::super::foundation::IClosable {
          fn from(value: &IDirect3DDevice) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for IDirect3DDevice {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(self))
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for& 'a IDirect3DDevice {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(::std::clone::Clone::clone(self)))
          }
        }
      }
    }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod imaging {
      #[repr(transparent)]pub struct IBitmapTypedValue(::winrt::Object);
      impl::std::clone::Clone for IBitmapTypedValue {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IBitmapTypedValue {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IBitmapTypedValue {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IBitmapTypedValue{}
      impl IBitmapTypedValue {
        pub fn value(&self) ->  ::winrt::Result<::winrt::Object>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::Object as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::Object>(result__)
          }
        }pub fn r#type(&self) ->  ::winrt::Result<super::super::foundation::PropertyType>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::PropertyType as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::PropertyType>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IBitmapTypedValue {
        type Vtable = IBitmapTypedValue_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3447735465,9283,16384,[176,205,121,49,108,86,245,137],);
        
      }#[repr(C)]pub struct IBitmapTypedValue_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::PropertyType,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IBitmapTypedValue {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{cd8044a9-2443-4000-b0cd-79316c56f589}")
        };
        
      }impl::std::convert::From<IBitmapTypedValue>for::winrt::Object {
        fn from(value:IBitmapTypedValue) -> Self {
          value.0
        }
      }impl::std::convert::From<&IBitmapTypedValue>for::winrt::Object {
        fn from(value: &IBitmapTypedValue) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IBitmapTypedValue {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IBitmapTypedValue {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IBitmapTypedValueFactory(::winrt::Object);
      impl::std::clone::Clone for IBitmapTypedValueFactory {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IBitmapTypedValueFactory {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IBitmapTypedValueFactory {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IBitmapTypedValueFactory{}
      impl IBitmapTypedValueFactory {
        pub fn create< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,value:T0__,r#type:super::super::foundation::PropertyType,) ->  ::winrt::Result<BitmapTypedValue>{
          let this = self;
          unsafe {
            let mut result__: <BitmapTypedValue as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),r#type, &mut result__,).from_abi::<BitmapTypedValue>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IBitmapTypedValueFactory {
        type Vtable = IBitmapTypedValueFactory_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2463872409,52755,18107,[149,69,203,58,63,99,235,139],);
        
      }#[repr(C)]pub struct IBitmapTypedValueFactory_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,r#type:super::super::foundation::PropertyType,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IBitmapTypedValueFactory {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{92dbb599-ce13-46bb-9545-cb3a3f63eb8b}")
        };
        
      }impl::std::convert::From<IBitmapTypedValueFactory>for::winrt::Object {
        fn from(value:IBitmapTypedValueFactory) -> Self {
          value.0
        }
      }impl::std::convert::From<&IBitmapTypedValueFactory>for::winrt::Object {
        fn from(value: &IBitmapTypedValueFactory) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IBitmapTypedValueFactory {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IBitmapTypedValueFactory {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct BitmapTypedValue(::winrt::Object);
      impl BitmapTypedValue {
        pub fn value(&self) ->  ::winrt::Result<::winrt::Object>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::Object as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::Object>(result__)
          }
        }pub fn r#type(&self) ->  ::winrt::Result<super::super::foundation::PropertyType>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::PropertyType as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::PropertyType>(result__)
          }
        }pub fn create< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(value:T0__,r#type:super::super::foundation::PropertyType,) ->  ::winrt::Result<BitmapTypedValue>{
          Self::IBitmapTypedValueFactory(|this|unsafe {
            let mut result__: <BitmapTypedValue as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),r#type, &mut result__,).from_abi::<BitmapTypedValue>(result__)
          })
        }#[allow(non_snake_case)]fn IBitmapTypedValueFactory<R,F:FnOnce(&IBitmapTypedValueFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<BitmapTypedValue,IBitmapTypedValueFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for BitmapTypedValue {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for BitmapTypedValue {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for BitmapTypedValue{}
      impl::std::fmt::Debug for BitmapTypedValue {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for BitmapTypedValue {
        const NAME: & 'static str = "Windows.Graphics.Imaging.BitmapTypedValue";
        
      }unsafe impl::winrt::Interface for BitmapTypedValue {
        type Vtable = IBitmapTypedValue_abi;
        const IID: ::winrt::Guid =  <IBitmapTypedValue as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for BitmapTypedValue {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Graphics.Imaging.BitmapTypedValue;{cd8044a9-2443-4000-b0cd-79316c56f589})");
        
      }impl::std::convert::From<BitmapTypedValue>for::winrt::Object {
        fn from(value:BitmapTypedValue) -> Self {
          value.0
        }
      }impl::std::convert::From<&BitmapTypedValue>for::winrt::Object {
        fn from(value: &BitmapTypedValue) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for BitmapTypedValue {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a BitmapTypedValue {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<BitmapTypedValue>for IBitmapTypedValue {
        fn from(value:BitmapTypedValue) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&BitmapTypedValue>for IBitmapTypedValue {
        fn from(value: &BitmapTypedValue) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IBitmapTypedValue>>for BitmapTypedValue {
        fn into(self) ->  ::winrt::Param< 'a ,IBitmapTypedValue>{
          ::winrt::Param::Owned(::std::convert::Into::<IBitmapTypedValue>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IBitmapTypedValue>>for& 'a BitmapTypedValue {
        fn into(self) ->  ::winrt::Param< 'a ,IBitmapTypedValue>{
          ::winrt::Param::Owned(::std::convert::Into::<IBitmapTypedValue>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for BitmapTypedValue{}
      unsafe impl::std::marker::Sync for BitmapTypedValue{}
      #[repr(transparent)]pub struct BitmapPropertySet(::winrt::Object);
      impl BitmapPropertySet {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn first(&self,) ->  ::winrt::Result<super::super::foundation::collections::IIterator<super::super::foundation::collections::IKeyValuePair< ::winrt::HString,BitmapTypedValue, >, >, >{
          let this =  &::winrt::Interface::cast::<super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString,BitmapTypedValue, >, >, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IIterator<super::super::foundation::collections::IKeyValuePair< ::winrt::HString,BitmapTypedValue, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IIterator<super::super::foundation::collections::IKeyValuePair< ::winrt::HString,BitmapTypedValue, >, >>(result__)
          }
        }pub fn lookup< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,key:T0__,) ->  ::winrt::Result<BitmapTypedValue>{
          let this = self;
          unsafe {
            let mut result__: <BitmapTypedValue as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),key.into().abi(), &mut result__,).from_abi::<BitmapTypedValue>(result__)
          }
        }pub fn size(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn has_key< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,key:T0__,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),key.into().abi(), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn get_view(&self,) ->  ::winrt::Result<super::super::foundation::collections::IMapView< ::winrt::HString,BitmapTypedValue, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IMapView< ::winrt::HString,BitmapTypedValue, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IMapView< ::winrt::HString,BitmapTypedValue, >>(result__)
          }
        }pub fn insert< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a ,BitmapTypedValue>>, >(&self,key:T0__,value:T1__,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),key.into().abi(),value.into().abi(), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn remove< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,key:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),key.into().abi(),).ok()
          }
        }pub fn clear(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this)).ok()
          }
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<BitmapPropertySet, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for BitmapPropertySet {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for BitmapPropertySet {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for BitmapPropertySet{}
      impl::std::fmt::Debug for BitmapPropertySet {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for BitmapPropertySet {
        const NAME: & 'static str = "Windows.Graphics.Imaging.BitmapPropertySet";
        
      }unsafe impl::winrt::Interface for BitmapPropertySet {
        type Vtable = super::super::foundation::collections::IMap_abi< ::winrt::HString,BitmapTypedValue, >;
        const IID: ::winrt::Guid =  <super::super::foundation::collections::IMap< ::winrt::HString,BitmapTypedValue, >as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for BitmapPropertySet {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Graphics.Imaging.BitmapPropertySet;pinterface({3c2925fe-8519-45c1-aa79-197b6718c1c1};string;rc(Windows.Graphics.Imaging.BitmapTypedValue;{cd8044a9-2443-4000-b0cd-79316c56f589})))");
        
      }impl::std::convert::From<BitmapPropertySet>for::winrt::Object {
        fn from(value:BitmapPropertySet) -> Self {
          value.0
        }
      }impl::std::convert::From<&BitmapPropertySet>for::winrt::Object {
        fn from(value: &BitmapPropertySet) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for BitmapPropertySet {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a BitmapPropertySet {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<BitmapPropertySet>for super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString,BitmapTypedValue, >, >{
        fn from(value:BitmapPropertySet) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&BitmapPropertySet>for super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString,BitmapTypedValue, >, >{
        fn from(value: &BitmapPropertySet) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString,BitmapTypedValue, >, >, >, >for BitmapPropertySet {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString,BitmapTypedValue, >, >, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString,BitmapTypedValue, >, >, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString,BitmapTypedValue, >, >, >, >for& 'a BitmapPropertySet {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString,BitmapTypedValue, >, >, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString,BitmapTypedValue, >, >, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<BitmapPropertySet>for super::super::foundation::collections::IMap<::winrt::HString,BitmapTypedValue>{
        fn from(value:BitmapPropertySet) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&BitmapPropertySet>for super::super::foundation::collections::IMap<::winrt::HString,BitmapTypedValue>{
        fn from(value: &BitmapPropertySet) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IMap< ::winrt::HString,BitmapTypedValue, >, >, >for BitmapPropertySet {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::foundation::collections::IMap<::winrt::HString,BitmapTypedValue>, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::collections::IMap< ::winrt::HString,BitmapTypedValue, >, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IMap< ::winrt::HString,BitmapTypedValue, >, >, >for& 'a BitmapPropertySet {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::foundation::collections::IMap<::winrt::HString,BitmapTypedValue>, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::collections::IMap< ::winrt::HString,BitmapTypedValue, >, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::iter::IntoIterator for BitmapPropertySet {
        type Item = super::super::foundation::collections::IKeyValuePair< ::winrt::HString,BitmapTypedValue, >;
        type IntoIter = super::super::foundation::collections::IIterator<Self::Item>;
        fn into_iter(self) -> Self::IntoIter {
          self.first().unwrap()
        }
      }impl< 'a > ::std::iter::IntoIterator for& 'a BitmapPropertySet {
        type Item = super::super::foundation::collections::IKeyValuePair< ::winrt::HString,BitmapTypedValue, >;
        type IntoIter = super::super::foundation::collections::IIterator<Self::Item>;
        fn into_iter(self) -> Self::IntoIter {
          self.first().unwrap()
        }
      }unsafe impl::std::marker::Send for BitmapPropertySet{}
      unsafe impl::std::marker::Sync for BitmapPropertySet{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct BitmapPixelFormat(i32);
      impl::std::convert::From<i32>for BitmapPixelFormat {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for BitmapPixelFormat {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for BitmapPixelFormat {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for BitmapPixelFormat {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for BitmapPixelFormat {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for BitmapPixelFormat{}
      impl::std::marker::Copy for BitmapPixelFormat{}
      impl BitmapPixelFormat {
        #![allow(non_upper_case_globals)]pub const Unknown:Self = Self(0i32);
        pub const Rgba16:Self = Self(12i32);
        pub const Rgba8:Self = Self(30i32);
        pub const Gray16:Self = Self(57i32);
        pub const Gray8:Self = Self(62i32);
        pub const Bgra8:Self = Self(87i32);
        pub const Nv12:Self = Self(103i32);
        pub const P010:Self = Self(104i32);
        pub const Yuy2:Self = Self(107i32);
        
      }unsafe impl::winrt::Abi for BitmapPixelFormat {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for BitmapPixelFormat {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Graphics.Imaging.BitmapPixelFormat;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct BitmapAlphaMode(i32);
      impl::std::convert::From<i32>for BitmapAlphaMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for BitmapAlphaMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for BitmapAlphaMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for BitmapAlphaMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for BitmapAlphaMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for BitmapAlphaMode{}
      impl::std::marker::Copy for BitmapAlphaMode{}
      impl BitmapAlphaMode {
        #![allow(non_upper_case_globals)]pub const Premultiplied:Self = Self(0i32);
        pub const Straight:Self = Self(1i32);
        pub const Ignore:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for BitmapAlphaMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for BitmapAlphaMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Graphics.Imaging.BitmapAlphaMode;i4)",);
        
      }#[repr(C)]#[allow(non_snake_case)]pub struct BitmapPlaneDescription {
        pub start_index:i32,pub width:i32,pub height:i32,pub stride:i32,
      }#[repr(C)]pub struct BitmapPlaneDescription_abi(i32,i32,i32,i32);
      unsafe impl::winrt::Abi for BitmapPlaneDescription {
        type Abi = BitmapPlaneDescription_abi;
        
      }impl::std::default::Default for BitmapPlaneDescription {
        fn default() -> Self {
          Self {
            start_index:0,width:0,height:0,stride:0,
          }
        }
      }impl::std::fmt::Debug for BitmapPlaneDescription {
        fn fmt(&self,fmt: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          fmt.debug_struct("BitmapPlaneDescription").field("start_index", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.start_index),std::fmt::Display::fmt),])).field("width", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.width),std::fmt::Display::fmt),])).field("height", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.height),std::fmt::Display::fmt),])).field("stride", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.stride),std::fmt::Display::fmt),])).finish()
        }
      }impl::std::clone::Clone for BitmapPlaneDescription {
        fn clone(&self) -> Self {
          Self {
            start_index:self.start_index,width:self.width,height:self.height,stride:self.stride,
          }
        }
      }impl::std::cmp::PartialEq for BitmapPlaneDescription {
        fn eq(&self,other: &Self) -> bool {
          self.start_index==other.start_index&&self.width==other.width&&self.height==other.height&&self.stride==other.stride
        }
      }impl::std::cmp::Eq for BitmapPlaneDescription{}
      unsafe impl::winrt::RuntimeType for BitmapPlaneDescription {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"struct(Windows.Graphics.Imaging.BitmapPlaneDescription;i4;i4;i4;i4)",);
        
      }#[repr(transparent)]pub struct IBitmapBuffer(::winrt::Object);
      impl::std::clone::Clone for IBitmapBuffer {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IBitmapBuffer {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IBitmapBuffer {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IBitmapBuffer{}
      impl IBitmapBuffer {
        pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn create_reference(&self,) ->  ::winrt::Result<super::super::foundation::IMemoryBufferReference>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IMemoryBuffer>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IMemoryBufferReference as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IMemoryBufferReference>(result__)
          }
        }pub fn get_plane_count(&self) ->  ::winrt::Result<i32>{
          let this = self;
          unsafe {
            let mut result__: <i32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<i32>(result__)
          }
        }pub fn get_plane_description(&self,index:i32,) ->  ::winrt::Result<BitmapPlaneDescription>{
          let this = self;
          unsafe {
            let mut result__: <BitmapPlaneDescription as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),index, &mut result__,).from_abi::<BitmapPlaneDescription>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IBitmapBuffer {
        type Vtable = IBitmapBuffer_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2772305092,14748,17292,[178,143,166,58,107,131,209,161],);
        
      }#[repr(C)]pub struct IBitmapBuffer_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,index:i32,result__: *mut BitmapPlaneDescription_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IBitmapBuffer {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{a53e04c4-399c-438c-b28f-a63a6b83d1a1}")
        };
        
      }impl::std::convert::From<IBitmapBuffer>for::winrt::Object {
        fn from(value:IBitmapBuffer) -> Self {
          value.0
        }
      }impl::std::convert::From<&IBitmapBuffer>for::winrt::Object {
        fn from(value: &IBitmapBuffer) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IBitmapBuffer {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IBitmapBuffer {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IBitmapBuffer>for super::super::foundation::IClosable {
        fn from(value:IBitmapBuffer) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IBitmapBuffer>for super::super::foundation::IClosable {
        fn from(value: &IBitmapBuffer) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for IBitmapBuffer {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a IBitmapBuffer {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<IBitmapBuffer>for super::super::foundation::IMemoryBuffer {
        fn from(value:IBitmapBuffer) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IBitmapBuffer>for super::super::foundation::IMemoryBuffer {
        fn from(value: &IBitmapBuffer) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IMemoryBuffer>>for IBitmapBuffer {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IMemoryBuffer>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IMemoryBuffer, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IMemoryBuffer>>for& 'a IBitmapBuffer {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IMemoryBuffer>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IMemoryBuffer, >::into(::std::clone::Clone::clone(self,)))
        }
      }#[repr(transparent)]pub struct BitmapBuffer(::winrt::Object);
      impl BitmapBuffer {
        pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn create_reference(&self,) ->  ::winrt::Result<super::super::foundation::IMemoryBufferReference>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IMemoryBuffer>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IMemoryBufferReference as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IMemoryBufferReference>(result__)
          }
        }pub fn get_plane_count(&self) ->  ::winrt::Result<i32>{
          let this = self;
          unsafe {
            let mut result__: <i32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<i32>(result__)
          }
        }pub fn get_plane_description(&self,index:i32,) ->  ::winrt::Result<BitmapPlaneDescription>{
          let this = self;
          unsafe {
            let mut result__: <BitmapPlaneDescription as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),index, &mut result__,).from_abi::<BitmapPlaneDescription>(result__)
          }
        }
      }impl::std::clone::Clone for BitmapBuffer {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for BitmapBuffer {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for BitmapBuffer{}
      impl::std::fmt::Debug for BitmapBuffer {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for BitmapBuffer {
        const NAME: & 'static str = "Windows.Graphics.Imaging.BitmapBuffer";
        
      }unsafe impl::winrt::Interface for BitmapBuffer {
        type Vtable = IBitmapBuffer_abi;
        const IID: ::winrt::Guid =  <IBitmapBuffer as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for BitmapBuffer {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Graphics.Imaging.BitmapBuffer;{a53e04c4-399c-438c-b28f-a63a6b83d1a1})");
        
      }impl::std::convert::From<BitmapBuffer>for::winrt::Object {
        fn from(value:BitmapBuffer) -> Self {
          value.0
        }
      }impl::std::convert::From<&BitmapBuffer>for::winrt::Object {
        fn from(value: &BitmapBuffer) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for BitmapBuffer {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a BitmapBuffer {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<BitmapBuffer>for super::super::foundation::IClosable {
        fn from(value:BitmapBuffer) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&BitmapBuffer>for super::super::foundation::IClosable {
        fn from(value: &BitmapBuffer) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for BitmapBuffer {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a BitmapBuffer {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<BitmapBuffer>for super::super::foundation::IMemoryBuffer {
        fn from(value:BitmapBuffer) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&BitmapBuffer>for super::super::foundation::IMemoryBuffer {
        fn from(value: &BitmapBuffer) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IMemoryBuffer>>for BitmapBuffer {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IMemoryBuffer>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IMemoryBuffer, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IMemoryBuffer>>for& 'a BitmapBuffer {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IMemoryBuffer>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IMemoryBuffer, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<BitmapBuffer>for IBitmapBuffer {
        fn from(value:BitmapBuffer) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&BitmapBuffer>for IBitmapBuffer {
        fn from(value: &BitmapBuffer) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IBitmapBuffer>>for BitmapBuffer {
        fn into(self) ->  ::winrt::Param< 'a ,IBitmapBuffer>{
          ::winrt::Param::Owned(::std::convert::Into::<IBitmapBuffer>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IBitmapBuffer>>for& 'a BitmapBuffer {
        fn into(self) ->  ::winrt::Param< 'a ,IBitmapBuffer>{
          ::winrt::Param::Owned(::std::convert::Into::<IBitmapBuffer>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for BitmapBuffer{}
      unsafe impl::std::marker::Sync for BitmapBuffer{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct BitmapBufferAccessMode(i32);
      impl::std::convert::From<i32>for BitmapBufferAccessMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for BitmapBufferAccessMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for BitmapBufferAccessMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for BitmapBufferAccessMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for BitmapBufferAccessMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for BitmapBufferAccessMode{}
      impl::std::marker::Copy for BitmapBufferAccessMode{}
      impl BitmapBufferAccessMode {
        #![allow(non_upper_case_globals)]pub const Read:Self = Self(0i32);
        pub const ReadWrite:Self = Self(1i32);
        pub const Write:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for BitmapBufferAccessMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for BitmapBufferAccessMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Graphics.Imaging.BitmapBufferAccessMode;i4)",);
        
      }#[repr(transparent)]pub struct ISoftwareBitmap(::winrt::Object);
      impl::std::clone::Clone for ISoftwareBitmap {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ISoftwareBitmap {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ISoftwareBitmap {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ISoftwareBitmap{}
      impl ISoftwareBitmap {
        pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn bitmap_pixel_format(&self) ->  ::winrt::Result<BitmapPixelFormat>{
          let this = self;
          unsafe {
            let mut result__: <BitmapPixelFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<BitmapPixelFormat>(result__)
          }
        }pub fn bitmap_alpha_mode(&self) ->  ::winrt::Result<BitmapAlphaMode>{
          let this = self;
          unsafe {
            let mut result__: <BitmapAlphaMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<BitmapAlphaMode>(result__)
          }
        }pub fn pixel_width(&self) ->  ::winrt::Result<i32>{
          let this = self;
          unsafe {
            let mut result__: <i32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<i32>(result__)
          }
        }pub fn pixel_height(&self) ->  ::winrt::Result<i32>{
          let this = self;
          unsafe {
            let mut result__: <i32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<i32>(result__)
          }
        }pub fn is_read_only(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_dpix(&self,value:f64) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn dpix(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f64>(result__)
          }
        }pub fn set_dpiy(&self,value:f64) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn dpiy(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f64>(result__)
          }
        }pub fn lock_buffer(&self,mode:BitmapBufferAccessMode,) ->  ::winrt::Result<BitmapBuffer>{
          let this = self;
          unsafe {
            let mut result__: <BitmapBuffer as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),mode, &mut result__,).from_abi::<BitmapBuffer>(result__)
          }
        }pub fn copy_to< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,SoftwareBitmap>>, >(&self,bitmap:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),bitmap.into().abi(),).ok()
          }
        }pub fn copy_from_buffer< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IBuffer>, >, >(&self,buffer:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),buffer.into().abi(),).ok()
          }
        }pub fn copy_to_buffer< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IBuffer>, >, >(&self,buffer:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),buffer.into().abi(),).ok()
          }
        }pub fn get_read_only_view(&self) ->  ::winrt::Result<SoftwareBitmap>{
          let this = self;
          unsafe {
            let mut result__: <SoftwareBitmap as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<SoftwareBitmap>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ISoftwareBitmap {
        type Vtable = ISoftwareBitmap_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1755186952,32495,18495,[150,63,218,147,136,24,224,115],);
        
      }#[repr(C)]pub struct ISoftwareBitmap_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut BitmapPixelFormat,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut BitmapAlphaMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,mode:BitmapBufferAccessMode,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,bitmap: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,buffer: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,buffer: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ISoftwareBitmap {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{689e0708-7eef-483f-963f-da938818e073}")
        };
        
      }impl::std::convert::From<ISoftwareBitmap>for::winrt::Object {
        fn from(value:ISoftwareBitmap) -> Self {
          value.0
        }
      }impl::std::convert::From<&ISoftwareBitmap>for::winrt::Object {
        fn from(value: &ISoftwareBitmap) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ISoftwareBitmap {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ISoftwareBitmap {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<ISoftwareBitmap>for super::super::foundation::IClosable {
        fn from(value:ISoftwareBitmap) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&ISoftwareBitmap>for super::super::foundation::IClosable {
        fn from(value: &ISoftwareBitmap) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for ISoftwareBitmap {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a ISoftwareBitmap {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct ISoftwareBitmapFactory(::winrt::Object);
      impl::std::clone::Clone for ISoftwareBitmapFactory {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ISoftwareBitmapFactory {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ISoftwareBitmapFactory {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ISoftwareBitmapFactory{}
      impl ISoftwareBitmapFactory {
        pub fn create(&self,format:BitmapPixelFormat,width:i32,height:i32,) ->  ::winrt::Result<SoftwareBitmap>{
          let this = self;
          unsafe {
            let mut result__: <SoftwareBitmap as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),format,width,height, &mut result__,).from_abi::<SoftwareBitmap>(result__)
          }
        }pub fn create_with_alpha(&self,format:BitmapPixelFormat,width:i32,height:i32,alpha:BitmapAlphaMode,) ->  ::winrt::Result<SoftwareBitmap>{
          let this = self;
          unsafe {
            let mut result__: <SoftwareBitmap as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),format,width,height,alpha, &mut result__,).from_abi::<SoftwareBitmap>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ISoftwareBitmapFactory {
        type Vtable = ISoftwareBitmapFactory_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3382700905,11618,19783,[166,179,79,219,106,7,253,248],);
        
      }#[repr(C)]pub struct ISoftwareBitmapFactory_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,format:BitmapPixelFormat,width:i32,height:i32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,format:BitmapPixelFormat,width:i32,height:i32,alpha:BitmapAlphaMode,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ISoftwareBitmapFactory {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c99feb69-2d62-4d47-a6b3-4fdb6a07fdf8}")
        };
        
      }impl::std::convert::From<ISoftwareBitmapFactory>for::winrt::Object {
        fn from(value:ISoftwareBitmapFactory) -> Self {
          value.0
        }
      }impl::std::convert::From<&ISoftwareBitmapFactory>for::winrt::Object {
        fn from(value: &ISoftwareBitmapFactory) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ISoftwareBitmapFactory {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ISoftwareBitmapFactory {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ISoftwareBitmapStatics(::winrt::Object);
      impl::std::clone::Clone for ISoftwareBitmapStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ISoftwareBitmapStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ISoftwareBitmapStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ISoftwareBitmapStatics{}
      impl ISoftwareBitmapStatics {
        pub fn copy< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,SoftwareBitmap>>>(&self,source:T0__,) ->  ::winrt::Result<SoftwareBitmap>{
          let this = self;
          unsafe {
            let mut result__: <SoftwareBitmap as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),source.into().abi(), &mut result__,).from_abi::<SoftwareBitmap>(result__)
          }
        }pub fn convert< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,SoftwareBitmap>>, >(&self,source:T0__,format:BitmapPixelFormat,) ->  ::winrt::Result<SoftwareBitmap>{
          let this = self;
          unsafe {
            let mut result__: <SoftwareBitmap as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),source.into().abi(),format, &mut result__,).from_abi::<SoftwareBitmap>(result__)
          }
        }pub fn convert_with_alpha< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,SoftwareBitmap>>, >(&self,source:T0__,format:BitmapPixelFormat,alpha:BitmapAlphaMode,) ->  ::winrt::Result<SoftwareBitmap>{
          let this = self;
          unsafe {
            let mut result__: <SoftwareBitmap as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),source.into().abi(),format,alpha, &mut result__,).from_abi::<SoftwareBitmap>(result__)
          }
        }pub fn create_copy_from_buffer< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IBuffer>, >, >(&self,source:T0__,format:BitmapPixelFormat,width:i32,height:i32,) ->  ::winrt::Result<SoftwareBitmap>{
          let this = self;
          unsafe {
            let mut result__: <SoftwareBitmap as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),source.into().abi(),format,width,height, &mut result__,).from_abi::<SoftwareBitmap>(result__)
          }
        }pub fn create_copy_with_alpha_from_buffer< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IBuffer>, >, >(&self,source:T0__,format:BitmapPixelFormat,width:i32,height:i32,alpha:BitmapAlphaMode,) ->  ::winrt::Result<SoftwareBitmap>{
          let this = self;
          unsafe {
            let mut result__: <SoftwareBitmap as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),source.into().abi(),format,width,height,alpha, &mut result__,).from_abi::<SoftwareBitmap>(result__)
          }
        }pub fn create_copy_from_surface_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::directx::direct3d11::IDirect3DSurface>, >, >(&self,surface:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<SoftwareBitmap>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<SoftwareBitmap, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),surface.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<SoftwareBitmap>>(result__,)
          }
        }pub fn create_copy_with_alpha_from_surface_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::directx::direct3d11::IDirect3DSurface>, >, >(&self,surface:T0__,alpha:BitmapAlphaMode,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<SoftwareBitmap>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<SoftwareBitmap, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),surface.into().abi(),alpha, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<SoftwareBitmap>>(result__,)
          }
        }
      }unsafe impl::winrt::Interface for ISoftwareBitmapStatics {
        type Vtable = ISoftwareBitmapStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3741550043,26415,19101,[128,110,194,68,47,52,62,134],);
        
      }#[repr(C)]pub struct ISoftwareBitmapStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,source: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,source: ::winrt::RawPtr,format:BitmapPixelFormat,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,source: ::winrt::RawPtr,format:BitmapPixelFormat,alpha:BitmapAlphaMode,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,source: ::winrt::RawPtr,format:BitmapPixelFormat,width:i32,height:i32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,source: ::winrt::RawPtr,format:BitmapPixelFormat,width:i32,height:i32,alpha:BitmapAlphaMode,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,surface: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,surface: ::winrt::RawPtr,alpha:BitmapAlphaMode,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ISoftwareBitmapStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{df0385db-672f-4a9d-806e-c2442f343e86}")
        };
        
      }impl::std::convert::From<ISoftwareBitmapStatics>for::winrt::Object {
        fn from(value:ISoftwareBitmapStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&ISoftwareBitmapStatics>for::winrt::Object {
        fn from(value: &ISoftwareBitmapStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ISoftwareBitmapStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ISoftwareBitmapStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct SoftwareBitmap(::winrt::Object);
      impl SoftwareBitmap {
        pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn bitmap_pixel_format(&self) ->  ::winrt::Result<BitmapPixelFormat>{
          let this = self;
          unsafe {
            let mut result__: <BitmapPixelFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<BitmapPixelFormat>(result__)
          }
        }pub fn bitmap_alpha_mode(&self) ->  ::winrt::Result<BitmapAlphaMode>{
          let this = self;
          unsafe {
            let mut result__: <BitmapAlphaMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<BitmapAlphaMode>(result__)
          }
        }pub fn pixel_width(&self) ->  ::winrt::Result<i32>{
          let this = self;
          unsafe {
            let mut result__: <i32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<i32>(result__)
          }
        }pub fn pixel_height(&self) ->  ::winrt::Result<i32>{
          let this = self;
          unsafe {
            let mut result__: <i32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<i32>(result__)
          }
        }pub fn is_read_only(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_dpix(&self,value:f64) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn dpix(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f64>(result__)
          }
        }pub fn set_dpiy(&self,value:f64) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn dpiy(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f64>(result__)
          }
        }pub fn lock_buffer(&self,mode:BitmapBufferAccessMode,) ->  ::winrt::Result<BitmapBuffer>{
          let this = self;
          unsafe {
            let mut result__: <BitmapBuffer as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),mode, &mut result__,).from_abi::<BitmapBuffer>(result__)
          }
        }pub fn copy_to< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,SoftwareBitmap>>, >(&self,bitmap:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),bitmap.into().abi(),).ok()
          }
        }pub fn copy_from_buffer< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IBuffer>, >, >(&self,buffer:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),buffer.into().abi(),).ok()
          }
        }pub fn copy_to_buffer< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IBuffer>, >, >(&self,buffer:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),buffer.into().abi(),).ok()
          }
        }pub fn get_read_only_view(&self) ->  ::winrt::Result<SoftwareBitmap>{
          let this = self;
          unsafe {
            let mut result__: <SoftwareBitmap as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<SoftwareBitmap>(result__)
          }
        }pub fn create(format:BitmapPixelFormat,width:i32,height:i32,) ->  ::winrt::Result<SoftwareBitmap>{
          Self::ISoftwareBitmapFactory(|this|unsafe {
            let mut result__: <SoftwareBitmap as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),format,width,height, &mut result__,).from_abi::<SoftwareBitmap>(result__)
          })
        }pub fn create_with_alpha(format:BitmapPixelFormat,width:i32,height:i32,alpha:BitmapAlphaMode,) ->  ::winrt::Result<SoftwareBitmap>{
          Self::ISoftwareBitmapFactory(|this|unsafe {
            let mut result__: <SoftwareBitmap as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),format,width,height,alpha, &mut result__,).from_abi::<SoftwareBitmap>(result__)
          })
        }pub fn copy< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,SoftwareBitmap>>>(source:T0__,) ->  ::winrt::Result<SoftwareBitmap>{
          Self::ISoftwareBitmapStatics(|this|unsafe {
            let mut result__: <SoftwareBitmap as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),source.into().abi(), &mut result__,).from_abi::<SoftwareBitmap>(result__)
          })
        }pub fn convert< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,SoftwareBitmap>>, >(source:T0__,format:BitmapPixelFormat,) ->  ::winrt::Result<SoftwareBitmap>{
          Self::ISoftwareBitmapStatics(|this|unsafe {
            let mut result__: <SoftwareBitmap as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),source.into().abi(),format, &mut result__,).from_abi::<SoftwareBitmap>(result__)
          })
        }pub fn convert_with_alpha< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,SoftwareBitmap>>, >(source:T0__,format:BitmapPixelFormat,alpha:BitmapAlphaMode,) ->  ::winrt::Result<SoftwareBitmap>{
          Self::ISoftwareBitmapStatics(|this|unsafe {
            let mut result__: <SoftwareBitmap as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),source.into().abi(),format,alpha, &mut result__,).from_abi::<SoftwareBitmap>(result__)
          })
        }pub fn create_copy_from_buffer< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IBuffer>, >, >(source:T0__,format:BitmapPixelFormat,width:i32,height:i32,) ->  ::winrt::Result<SoftwareBitmap>{
          Self::ISoftwareBitmapStatics(|this|unsafe {
            let mut result__: <SoftwareBitmap as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),source.into().abi(),format,width,height, &mut result__,).from_abi::<SoftwareBitmap>(result__)
          })
        }pub fn create_copy_with_alpha_from_buffer< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IBuffer>, >, >(source:T0__,format:BitmapPixelFormat,width:i32,height:i32,alpha:BitmapAlphaMode,) ->  ::winrt::Result<SoftwareBitmap>{
          Self::ISoftwareBitmapStatics(|this|unsafe {
            let mut result__: <SoftwareBitmap as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),source.into().abi(),format,width,height,alpha, &mut result__,).from_abi::<SoftwareBitmap>(result__)
          })
        }pub fn create_copy_from_surface_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::directx::direct3d11::IDirect3DSurface>, >, >(surface:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<SoftwareBitmap>>{
          Self::ISoftwareBitmapStatics(|this|unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<SoftwareBitmap, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),surface.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<SoftwareBitmap>>(result__,)
          })
        }pub fn create_copy_with_alpha_from_surface_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::directx::direct3d11::IDirect3DSurface>, >, >(surface:T0__,alpha:BitmapAlphaMode,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<SoftwareBitmap>>{
          Self::ISoftwareBitmapStatics(|this|unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<SoftwareBitmap, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),surface.into().abi(),alpha, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<SoftwareBitmap>>(result__,)
          })
        }#[allow(non_snake_case)]fn ISoftwareBitmapFactory<R,F:FnOnce(&ISoftwareBitmapFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<SoftwareBitmap,ISoftwareBitmapFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn ISoftwareBitmapStatics<R,F:FnOnce(&ISoftwareBitmapStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<SoftwareBitmap,ISoftwareBitmapStatics, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for SoftwareBitmap {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for SoftwareBitmap {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for SoftwareBitmap{}
      impl::std::fmt::Debug for SoftwareBitmap {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for SoftwareBitmap {
        const NAME: & 'static str = "Windows.Graphics.Imaging.SoftwareBitmap";
        
      }unsafe impl::winrt::Interface for SoftwareBitmap {
        type Vtable = ISoftwareBitmap_abi;
        const IID: ::winrt::Guid =  <ISoftwareBitmap as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for SoftwareBitmap {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Graphics.Imaging.SoftwareBitmap;{689e0708-7eef-483f-963f-da938818e073})");
        
      }impl::std::convert::From<SoftwareBitmap>for::winrt::Object {
        fn from(value:SoftwareBitmap) -> Self {
          value.0
        }
      }impl::std::convert::From<&SoftwareBitmap>for::winrt::Object {
        fn from(value: &SoftwareBitmap) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for SoftwareBitmap {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a SoftwareBitmap {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<SoftwareBitmap>for super::super::foundation::IClosable {
        fn from(value:SoftwareBitmap) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&SoftwareBitmap>for super::super::foundation::IClosable {
        fn from(value: &SoftwareBitmap) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for SoftwareBitmap {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a SoftwareBitmap {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<SoftwareBitmap>for ISoftwareBitmap {
        fn from(value:SoftwareBitmap) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&SoftwareBitmap>for ISoftwareBitmap {
        fn from(value: &SoftwareBitmap) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ISoftwareBitmap>>for SoftwareBitmap {
        fn into(self) ->  ::winrt::Param< 'a ,ISoftwareBitmap>{
          ::winrt::Param::Owned(::std::convert::Into::<ISoftwareBitmap>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ISoftwareBitmap>>for& 'a SoftwareBitmap {
        fn into(self) ->  ::winrt::Param< 'a ,ISoftwareBitmap>{
          ::winrt::Param::Owned(::std::convert::Into::<ISoftwareBitmap>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for SoftwareBitmap{}
      unsafe impl::std::marker::Sync for SoftwareBitmap{}
      #[repr(C)]#[allow(non_snake_case)]pub struct BitmapBounds {
        pub x:u32,pub y:u32,pub width:u32,pub height:u32,
      }#[repr(C)]pub struct BitmapBounds_abi(u32,u32,u32,u32);
      unsafe impl::winrt::Abi for BitmapBounds {
        type Abi = BitmapBounds_abi;
        
      }impl::std::default::Default for BitmapBounds {
        fn default() -> Self {
          Self {
            x:0,y:0,width:0,height:0,
          }
        }
      }impl::std::fmt::Debug for BitmapBounds {
        fn fmt(&self,fmt: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          fmt.debug_struct("BitmapBounds").field("x", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.x),std::fmt::Display::fmt),])).field("y", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.y),std::fmt::Display::fmt),])).field("width", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.width),std::fmt::Display::fmt),])).field("height", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.height),std::fmt::Display::fmt),])).finish()
        }
      }impl::std::clone::Clone for BitmapBounds {
        fn clone(&self) -> Self {
          Self {
            x:self.x,y:self.y,width:self.width,height:self.height,
          }
        }
      }impl::std::cmp::PartialEq for BitmapBounds {
        fn eq(&self,other: &Self) -> bool {
          self.x==other.x&&self.y==other.y&&self.width==other.width&&self.height==other.height
        }
      }impl::std::cmp::Eq for BitmapBounds{}
      unsafe impl::winrt::RuntimeType for BitmapBounds {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"struct(Windows.Graphics.Imaging.BitmapBounds;u4;u4;u4;u4)",);
        
      }#[repr(C)]#[allow(non_snake_case)]pub struct BitmapSize {
        pub width:u32,pub height:u32,
      }#[repr(C)]pub struct BitmapSize_abi(u32,u32);
      unsafe impl::winrt::Abi for BitmapSize {
        type Abi = BitmapSize_abi;
        
      }impl::std::default::Default for BitmapSize {
        fn default() -> Self {
          Self {
            width:0,height:0,
          }
        }
      }impl::std::fmt::Debug for BitmapSize {
        fn fmt(&self,fmt: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          fmt.debug_struct("BitmapSize").field("width", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.width),std::fmt::Display::fmt),])).field("height", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.height),std::fmt::Display::fmt),])).finish()
        }
      }impl::std::clone::Clone for BitmapSize {
        fn clone(&self) -> Self {
          Self {
            width:self.width,height:self.height,
          }
        }
      }impl::std::cmp::PartialEq for BitmapSize {
        fn eq(&self,other: &Self) -> bool {
          self.width==other.width&&self.height==other.height
        }
      }impl::std::cmp::Eq for BitmapSize{}
      unsafe impl::winrt::RuntimeType for BitmapSize {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"struct(Windows.Graphics.Imaging.BitmapSize;u4;u4)",);
        
      }
    }
  }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod media {
    #[allow(non_camel_case_types)]#[repr(transparent)]pub struct AudioProcessing(i32);
    impl::std::convert::From<i32>for AudioProcessing {
      fn from(value:i32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for AudioProcessing {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for AudioProcessing {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for AudioProcessing {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for AudioProcessing {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for AudioProcessing{}
    impl::std::marker::Copy for AudioProcessing{}
    impl AudioProcessing {
      #![allow(non_upper_case_globals)]pub const Default:Self = Self(0i32);
      pub const Raw:Self = Self(1i32);
      
    }unsafe impl::winrt::Abi for AudioProcessing {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for AudioProcessing {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.AudioProcessing;i4)");
      
    }#[repr(transparent)]pub struct IMediaExtension(::winrt::Object);
    impl::std::clone::Clone for IMediaExtension {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IMediaExtension {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IMediaExtension {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IMediaExtension{}
    impl IMediaExtension {
      pub fn set_properties< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::collections::IPropertySet>, >, >(&self,configuration:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),configuration.into().abi(),).ok()
        }
      }
    }unsafe impl::winrt::Interface for IMediaExtension {
      type Vtable = IMediaExtension_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(126963992,17887,17451,[138,63,247,130,106,99,112,171],);
      
    }#[repr(C)]pub struct IMediaExtension_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,configuration: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IMediaExtension {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{07915118-45df-442b-8a3f-f7826a6370ab}")
      };
      
    }impl::std::convert::From<IMediaExtension>for::winrt::Object {
      fn from(value:IMediaExtension) -> Self {
        value.0
      }
    }impl::std::convert::From<&IMediaExtension>for::winrt::Object {
      fn from(value: &IMediaExtension) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaExtension {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaExtension {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IMediaFrame(::winrt::Object);
    impl::std::clone::Clone for IMediaFrame {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IMediaFrame {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IMediaFrame {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IMediaFrame{}
    impl IMediaFrame {
      pub fn close(&self) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<super::foundation::IClosable>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
        }
      }pub fn r#type(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn is_read_only(&self) ->  ::winrt::Result<bool>{
        let this = self;
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
        }
      }pub fn set_relative_time< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::foundation::TimeSpan>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
        }
      }pub fn relative_time(&self,) ->  ::winrt::Result<super::foundation::IReference<super::foundation::TimeSpan>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IReference:: <super::foundation::TimeSpan>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IReference<super::foundation::TimeSpan>>(result__,)
        }
      }pub fn set_system_relative_time< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::foundation::TimeSpan>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value.into().abi(),).ok()
        }
      }pub fn system_relative_time(&self,) ->  ::winrt::Result<super::foundation::IReference<super::foundation::TimeSpan>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IReference:: <super::foundation::TimeSpan>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IReference<super::foundation::TimeSpan>>(result__,)
        }
      }pub fn set_duration< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::foundation::TimeSpan>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(),).ok()
        }
      }pub fn duration(&self,) ->  ::winrt::Result<super::foundation::IReference<super::foundation::TimeSpan>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IReference:: <super::foundation::TimeSpan>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IReference<super::foundation::TimeSpan>>(result__,)
        }
      }pub fn set_is_discontinuous(&self,value:bool) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
        }
      }pub fn is_discontinuous(&self) ->  ::winrt::Result<bool>{
        let this = self;
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
        }
      }pub fn extended_properties(&self,) ->  ::winrt::Result<super::foundation::collections::IPropertySet>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::collections::IPropertySet as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::collections::IPropertySet>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IMediaFrame {
      type Vtable = IMediaFrame_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3216322444,22851,18392,[142,16,5,48,138,165,251,208],);
      
    }#[repr(C)]pub struct IMediaFrame_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IMediaFrame {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{bfb52f8c-5943-47d8-8e10-05308aa5fbd0}")
      };
      
    }impl::std::convert::From<IMediaFrame>for::winrt::Object {
      fn from(value:IMediaFrame) -> Self {
        value.0
      }
    }impl::std::convert::From<&IMediaFrame>for::winrt::Object {
      fn from(value: &IMediaFrame) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrame {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrame {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<IMediaFrame>for super::foundation::IClosable {
      fn from(value:IMediaFrame) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&IMediaFrame>for super::foundation::IClosable {
      fn from(value: &IMediaFrame) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for IMediaFrame {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(self,))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for& 'a IMediaFrame {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IVideoFrame(::winrt::Object);
    impl::std::clone::Clone for IVideoFrame {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IVideoFrame {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IVideoFrame {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IVideoFrame{}
    impl IVideoFrame {
      pub fn close(&self) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<super::foundation::IClosable>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
        }
      }pub fn r#type(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn is_read_only(&self) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
        }
      }pub fn set_relative_time< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::foundation::TimeSpan>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
        }
      }pub fn relative_time(&self,) ->  ::winrt::Result<super::foundation::IReference<super::foundation::TimeSpan>>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IReference:: <super::foundation::TimeSpan>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IReference<super::foundation::TimeSpan>>(result__,)
        }
      }pub fn set_system_relative_time< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::foundation::TimeSpan>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value.into().abi(),).ok()
        }
      }pub fn system_relative_time(&self,) ->  ::winrt::Result<super::foundation::IReference<super::foundation::TimeSpan>>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IReference:: <super::foundation::TimeSpan>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IReference<super::foundation::TimeSpan>>(result__,)
        }
      }pub fn set_duration< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::foundation::TimeSpan>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(),).ok()
        }
      }pub fn duration(&self,) ->  ::winrt::Result<super::foundation::IReference<super::foundation::TimeSpan>>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IReference:: <super::foundation::TimeSpan>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IReference<super::foundation::TimeSpan>>(result__,)
        }
      }pub fn set_is_discontinuous(&self,value:bool) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
        }
      }pub fn is_discontinuous(&self) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
        }
      }pub fn extended_properties(&self,) ->  ::winrt::Result<super::foundation::collections::IPropertySet>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::collections::IPropertySet as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::collections::IPropertySet>(result__)
        }
      }pub fn software_bitmap(&self,) ->  ::winrt::Result<super::graphics::imaging::SoftwareBitmap>{
        let this = self;
        unsafe {
          let mut result__: <super::graphics::imaging::SoftwareBitmap as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::graphics::imaging::SoftwareBitmap>(result__)
        }
      }pub fn copy_to_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,VideoFrame>>>(&self,frame:T0__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),frame.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn direct3d_surface(&self,) ->  ::winrt::Result<super::graphics::directx::direct3d11::IDirect3DSurface>{
        let this = self;
        unsafe {
          let mut result__: <super::graphics::directx::direct3d11::IDirect3DSurface as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::graphics::directx::direct3d11::IDirect3DSurface>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IVideoFrame {
      type Vtable = IVideoFrame_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(213935653,37116,19602,[189,149,125,237,33,129,157,28],);
      
    }#[repr(C)]pub struct IVideoFrame_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,frame: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IVideoFrame {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{0cc06625-90fc-4c92-bd95-7ded21819d1c}")
      };
      
    }impl::std::convert::From<IVideoFrame>for::winrt::Object {
      fn from(value:IVideoFrame) -> Self {
        value.0
      }
    }impl::std::convert::From<&IVideoFrame>for::winrt::Object {
      fn from(value: &IVideoFrame) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoFrame {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoFrame {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<IVideoFrame>for super::foundation::IClosable {
      fn from(value:IVideoFrame) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&IVideoFrame>for super::foundation::IClosable {
      fn from(value: &IVideoFrame) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for IVideoFrame {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(self,))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for& 'a IVideoFrame {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<IVideoFrame>for IMediaFrame {
      fn from(value:IVideoFrame) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&IVideoFrame>for IMediaFrame {
      fn from(value: &IVideoFrame) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrame>>for IVideoFrame {
      fn into(self) ->  ::winrt::Param< 'a ,IMediaFrame>{
        ::winrt::Param::Owned(::std::convert::Into::<IMediaFrame>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrame>>for& 'a IVideoFrame {
      fn into(self) ->  ::winrt::Param< 'a ,IMediaFrame>{
        ::winrt::Param::Owned(::std::convert::Into::<IMediaFrame>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IVideoFrame2(::winrt::Object);
    impl::std::clone::Clone for IVideoFrame2 {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IVideoFrame2 {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IVideoFrame2 {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IVideoFrame2{}
    impl IVideoFrame2 {
      pub fn copy_to_with_bounds_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,VideoFrame>>,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::graphics::imaging::BitmapBounds>, >, >,T2__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::graphics::imaging::BitmapBounds>, >, >, >(&self,frame:T0__,source_bounds:T1__,destination_bounds:T2__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),frame.into().abi(),source_bounds.into().abi(),destination_bounds.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IVideoFrame2 {
      type Vtable = IVideoFrame2_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(943162381,13164,17254,[141,70,6,7,152,115,108,93],);
      
    }#[repr(C)]pub struct IVideoFrame2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,frame: ::winrt::RawPtr,source_bounds: ::winrt::RawPtr,destination_bounds: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IVideoFrame2 {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{3837840d-336c-4366-8d46-060798736c5d}")
      };
      
    }impl::std::convert::From<IVideoFrame2>for::winrt::Object {
      fn from(value:IVideoFrame2) -> Self {
        value.0
      }
    }impl::std::convert::From<&IVideoFrame2>for::winrt::Object {
      fn from(value: &IVideoFrame2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoFrame2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoFrame2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IVideoFrameFactory(::winrt::Object);
    impl::std::clone::Clone for IVideoFrameFactory {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IVideoFrameFactory {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IVideoFrameFactory {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IVideoFrameFactory{}
    impl IVideoFrameFactory {
      pub fn create(&self,format:super::graphics::imaging::BitmapPixelFormat,width:i32,height:i32,) ->  ::winrt::Result<VideoFrame>{
        let this = self;
        unsafe {
          let mut result__: <VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),format,width,height, &mut result__,).from_abi::<VideoFrame>(result__)
        }
      }pub fn create_with_alpha(&self,format:super::graphics::imaging::BitmapPixelFormat,width:i32,height:i32,alpha:super::graphics::imaging::BitmapAlphaMode,) ->  ::winrt::Result<VideoFrame>{
        let this = self;
        unsafe {
          let mut result__: <VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),format,width,height,alpha, &mut result__,).from_abi::<VideoFrame>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IVideoFrameFactory {
      type Vtable = IVideoFrameFactory_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(21720425,8744,19602,[146,255,80,195,128,211,231,118],);
      
    }#[repr(C)]pub struct IVideoFrameFactory_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,format:super::graphics::imaging::BitmapPixelFormat,width:i32,height:i32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,format:super::graphics::imaging::BitmapPixelFormat,width:i32,height:i32,alpha:super::graphics::imaging::BitmapAlphaMode,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IVideoFrameFactory {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{014b6d69-2228-4c92-92ff-50c380d3e776}")
      };
      
    }impl::std::convert::From<IVideoFrameFactory>for::winrt::Object {
      fn from(value:IVideoFrameFactory) -> Self {
        value.0
      }
    }impl::std::convert::From<&IVideoFrameFactory>for::winrt::Object {
      fn from(value: &IVideoFrameFactory) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoFrameFactory {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoFrameFactory {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IVideoFrameStatics(::winrt::Object);
    impl::std::clone::Clone for IVideoFrameStatics {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IVideoFrameStatics {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IVideoFrameStatics {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IVideoFrameStatics{}
    impl IVideoFrameStatics {
      pub fn create_as_direct3d11_surface_backed(&self,format:super::graphics::directx::DirectXPixelFormat,width:i32,height:i32,) ->  ::winrt::Result<VideoFrame>{
        let this = self;
        unsafe {
          let mut result__: <VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),format,width,height, &mut result__,).from_abi::<VideoFrame>(result__)
        }
      }pub fn create_as_direct3d11_surface_backed_with_device< 'a ,T3__: ::std::convert::Into< ::winrt::Param< 'a ,super::graphics::directx::direct3d11::IDirect3DDevice>, >, >(&self,format:super::graphics::directx::DirectXPixelFormat,width:i32,height:i32,device:T3__,) ->  ::winrt::Result<VideoFrame>{
        let this = self;
        unsafe {
          let mut result__: <VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),format,width,height,device.into().abi(), &mut result__,).from_abi::<VideoFrame>(result__)
        }
      }pub fn create_with_software_bitmap< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::graphics::imaging::SoftwareBitmap>>, >(&self,bitmap:T0__,) ->  ::winrt::Result<VideoFrame>{
        let this = self;
        unsafe {
          let mut result__: <VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),bitmap.into().abi(), &mut result__,).from_abi::<VideoFrame>(result__)
        }
      }pub fn create_with_direct3d11_surface< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::graphics::directx::direct3d11::IDirect3DSurface>, >, >(&self,surface:T0__,) ->  ::winrt::Result<VideoFrame>{
        let this = self;
        unsafe {
          let mut result__: <VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),surface.into().abi(), &mut result__,).from_abi::<VideoFrame>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IVideoFrameStatics {
      type Vtable = IVideoFrameStatics_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2871678319,24849,19251,[142,195,43,32,154,2,225,122],);
      
    }#[repr(C)]pub struct IVideoFrameStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,format:super::graphics::directx::DirectXPixelFormat,width:i32,height:i32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,format:super::graphics::directx::DirectXPixelFormat,width:i32,height:i32,device: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,bitmap: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,surface: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IVideoFrameStatics {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{ab2a556f-6111-4b33-8ec3-2b209a02e17a}")
      };
      
    }impl::std::convert::From<IVideoFrameStatics>for::winrt::Object {
      fn from(value:IVideoFrameStatics) -> Self {
        value.0
      }
    }impl::std::convert::From<&IVideoFrameStatics>for::winrt::Object {
      fn from(value: &IVideoFrameStatics) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoFrameStatics {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoFrameStatics {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct VideoFrame(::winrt::Object);
    impl VideoFrame {
      pub fn close(&self) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<super::foundation::IClosable>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
        }
      }pub fn r#type(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn is_read_only(&self) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
        }
      }pub fn set_relative_time< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::foundation::TimeSpan>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
        }
      }pub fn relative_time(&self,) ->  ::winrt::Result<super::foundation::IReference<super::foundation::TimeSpan>>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IReference:: <super::foundation::TimeSpan>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IReference<super::foundation::TimeSpan>>(result__,)
        }
      }pub fn set_system_relative_time< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::foundation::TimeSpan>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value.into().abi(),).ok()
        }
      }pub fn system_relative_time(&self,) ->  ::winrt::Result<super::foundation::IReference<super::foundation::TimeSpan>>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IReference:: <super::foundation::TimeSpan>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IReference<super::foundation::TimeSpan>>(result__,)
        }
      }pub fn set_duration< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::foundation::TimeSpan>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(),).ok()
        }
      }pub fn duration(&self,) ->  ::winrt::Result<super::foundation::IReference<super::foundation::TimeSpan>>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IReference:: <super::foundation::TimeSpan>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IReference<super::foundation::TimeSpan>>(result__,)
        }
      }pub fn set_is_discontinuous(&self,value:bool) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
        }
      }pub fn is_discontinuous(&self) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
        }
      }pub fn extended_properties(&self,) ->  ::winrt::Result<super::foundation::collections::IPropertySet>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::collections::IPropertySet as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::collections::IPropertySet>(result__)
        }
      }pub fn software_bitmap(&self,) ->  ::winrt::Result<super::graphics::imaging::SoftwareBitmap>{
        let this = self;
        unsafe {
          let mut result__: <super::graphics::imaging::SoftwareBitmap as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::graphics::imaging::SoftwareBitmap>(result__)
        }
      }pub fn copy_to_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,VideoFrame>>>(&self,frame:T0__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),frame.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn direct3d_surface(&self,) ->  ::winrt::Result<super::graphics::directx::direct3d11::IDirect3DSurface>{
        let this = self;
        unsafe {
          let mut result__: <super::graphics::directx::direct3d11::IDirect3DSurface as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::graphics::directx::direct3d11::IDirect3DSurface>(result__)
        }
      }pub fn copy_to_with_bounds_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,VideoFrame>>,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::graphics::imaging::BitmapBounds>, >, >,T2__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::graphics::imaging::BitmapBounds>, >, >, >(&self,frame:T0__,source_bounds:T1__,destination_bounds:T2__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IVideoFrame2>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),frame.into().abi(),source_bounds.into().abi(),destination_bounds.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn create(format:super::graphics::imaging::BitmapPixelFormat,width:i32,height:i32,) ->  ::winrt::Result<VideoFrame>{
        Self::IVideoFrameFactory(|this|unsafe {
          let mut result__: <VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),format,width,height, &mut result__,).from_abi::<VideoFrame>(result__)
        })
      }pub fn create_with_alpha(format:super::graphics::imaging::BitmapPixelFormat,width:i32,height:i32,alpha:super::graphics::imaging::BitmapAlphaMode,) ->  ::winrt::Result<VideoFrame>{
        Self::IVideoFrameFactory(|this|unsafe {
          let mut result__: <VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),format,width,height,alpha, &mut result__,).from_abi::<VideoFrame>(result__)
        })
      }pub fn create_as_direct3d11_surface_backed(format:super::graphics::directx::DirectXPixelFormat,width:i32,height:i32,) ->  ::winrt::Result<VideoFrame>{
        Self::IVideoFrameStatics(|this|unsafe {
          let mut result__: <VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),format,width,height, &mut result__,).from_abi::<VideoFrame>(result__)
        })
      }pub fn create_as_direct3d11_surface_backed_with_device< 'a ,T3__: ::std::convert::Into< ::winrt::Param< 'a ,super::graphics::directx::direct3d11::IDirect3DDevice>, >, >(format:super::graphics::directx::DirectXPixelFormat,width:i32,height:i32,device:T3__,) ->  ::winrt::Result<VideoFrame>{
        Self::IVideoFrameStatics(|this|unsafe {
          let mut result__: <VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),format,width,height,device.into().abi(), &mut result__,).from_abi::<VideoFrame>(result__)
        })
      }pub fn create_with_software_bitmap< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::graphics::imaging::SoftwareBitmap>>, >(bitmap:T0__,) ->  ::winrt::Result<VideoFrame>{
        Self::IVideoFrameStatics(|this|unsafe {
          let mut result__: <VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),bitmap.into().abi(), &mut result__,).from_abi::<VideoFrame>(result__)
        })
      }pub fn create_with_direct3d11_surface< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::graphics::directx::direct3d11::IDirect3DSurface>, >, >(surface:T0__,) ->  ::winrt::Result<VideoFrame>{
        Self::IVideoFrameStatics(|this|unsafe {
          let mut result__: <VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),surface.into().abi(), &mut result__,).from_abi::<VideoFrame>(result__)
        })
      }#[allow(non_snake_case)]fn IVideoFrameFactory<R,F:FnOnce(&IVideoFrameFactory) ->  ::winrt::Result<R>>(callback:F,) ->  ::winrt::Result<R>{
        static mut SHARED: ::winrt::FactoryCache<VideoFrame,IVideoFrameFactory>  =  ::winrt::FactoryCache::new();
        unsafe {
          SHARED.call(callback)
        }
      }#[allow(non_snake_case)]fn IVideoFrameStatics<R,F:FnOnce(&IVideoFrameStatics) ->  ::winrt::Result<R>>(callback:F,) ->  ::winrt::Result<R>{
        static mut SHARED: ::winrt::FactoryCache<VideoFrame,IVideoFrameStatics>  =  ::winrt::FactoryCache::new();
        unsafe {
          SHARED.call(callback)
        }
      }
    }impl::std::clone::Clone for VideoFrame {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for VideoFrame {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for VideoFrame{}
    impl::std::fmt::Debug for VideoFrame {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::winrt::RuntimeName for VideoFrame {
      const NAME: & 'static str = "Windows.Media.VideoFrame";
      
    }unsafe impl::winrt::Interface for VideoFrame {
      type Vtable = IVideoFrame_abi;
      const IID: ::winrt::Guid =  <IVideoFrame as::winrt::Interface>::IID;
      
    }unsafe impl::winrt::RuntimeType for VideoFrame {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.VideoFrame;{0cc06625-90fc-4c92-bd95-7ded21819d1c})",);
      
    }impl::std::convert::From<VideoFrame>for::winrt::Object {
      fn from(value:VideoFrame) -> Self {
        value.0
      }
    }impl::std::convert::From<&VideoFrame>for::winrt::Object {
      fn from(value: &VideoFrame) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for VideoFrame {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a VideoFrame {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<VideoFrame>for super::foundation::IClosable {
      fn from(value:VideoFrame) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&VideoFrame>for super::foundation::IClosable {
      fn from(value: &VideoFrame) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for VideoFrame {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(self,))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for& 'a VideoFrame {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<VideoFrame>for IMediaFrame {
      fn from(value:VideoFrame) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&VideoFrame>for IMediaFrame {
      fn from(value: &VideoFrame) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrame>>for VideoFrame {
      fn into(self) ->  ::winrt::Param< 'a ,IMediaFrame>{
        ::winrt::Param::Owned(::std::convert::Into::<IMediaFrame>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrame>>for& 'a VideoFrame {
      fn into(self) ->  ::winrt::Param< 'a ,IMediaFrame>{
        ::winrt::Param::Owned(::std::convert::Into::<IMediaFrame>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<VideoFrame>for IVideoFrame {
      fn from(value:VideoFrame) -> Self {
        unsafe {
          ::std::mem::transmute(value)
        }
      }
    }impl::std::convert::From<&VideoFrame>for IVideoFrame {
      fn from(value: &VideoFrame) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoFrame>>for VideoFrame {
      fn into(self) ->  ::winrt::Param< 'a ,IVideoFrame>{
        ::winrt::Param::Owned(::std::convert::Into::<IVideoFrame>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoFrame>>for& 'a VideoFrame {
      fn into(self) ->  ::winrt::Param< 'a ,IVideoFrame>{
        ::winrt::Param::Owned(::std::convert::Into::<IVideoFrame>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<VideoFrame>for IVideoFrame2 {
      fn from(value:VideoFrame) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&VideoFrame>for IVideoFrame2 {
      fn from(value: &VideoFrame) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoFrame2>>for VideoFrame {
      fn into(self) ->  ::winrt::Param< 'a ,IVideoFrame2>{
        ::winrt::Param::Owned(::std::convert::Into::<IVideoFrame2>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoFrame2>>for& 'a VideoFrame {
      fn into(self) ->  ::winrt::Param< 'a ,IVideoFrame2>{
        ::winrt::Param::Owned(::std::convert::Into::<IVideoFrame2>::into(::std::clone::Clone::clone(self),))
      }
    }unsafe impl::std::marker::Send for VideoFrame{}
    unsafe impl::std::marker::Sync for VideoFrame{}
    #[repr(transparent)]pub struct IAudioBuffer(::winrt::Object);
    impl::std::clone::Clone for IAudioBuffer {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IAudioBuffer {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IAudioBuffer {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IAudioBuffer{}
    impl IAudioBuffer {
      pub fn close(&self) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<super::foundation::IClosable>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
        }
      }pub fn create_reference(&self,) ->  ::winrt::Result<super::foundation::IMemoryBufferReference>{
        let this =  &::winrt::Interface::cast::<super::foundation::IMemoryBuffer>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IMemoryBufferReference as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IMemoryBufferReference>(result__)
        }
      }pub fn capacity(&self) ->  ::winrt::Result<u32>{
        let this = self;
        unsafe {
          let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
        }
      }pub fn length(&self) ->  ::winrt::Result<u32>{
        let this = self;
        unsafe {
          let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
        }
      }pub fn set_length(&self,value:u32) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
        }
      }
    }unsafe impl::winrt::Interface for IAudioBuffer {
      type Vtable = IAudioBuffer_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(890722343,29259,19562,[177,48,246,83,127,154,224,208],);
      
    }#[repr(C)]pub struct IAudioBuffer_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IAudioBuffer {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{35175827-724b-4c6a-b130-f6537f9ae0d0}")
      };
      
    }impl::std::convert::From<IAudioBuffer>for::winrt::Object {
      fn from(value:IAudioBuffer) -> Self {
        value.0
      }
    }impl::std::convert::From<&IAudioBuffer>for::winrt::Object {
      fn from(value: &IAudioBuffer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAudioBuffer {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAudioBuffer {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<IAudioBuffer>for super::foundation::IClosable {
      fn from(value:IAudioBuffer) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&IAudioBuffer>for super::foundation::IClosable {
      fn from(value: &IAudioBuffer) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for IAudioBuffer {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(self,))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for& 'a IAudioBuffer {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<IAudioBuffer>for super::foundation::IMemoryBuffer {
      fn from(value:IAudioBuffer) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&IAudioBuffer>for super::foundation::IMemoryBuffer {
      fn from(value: &IAudioBuffer) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IMemoryBuffer>>for IAudioBuffer {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IMemoryBuffer>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IMemoryBuffer>::into(self),)
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IMemoryBuffer>>for& 'a IAudioBuffer {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IMemoryBuffer>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IMemoryBuffer>::into(::std::clone::Clone::clone(self),),)
      }
    }#[repr(transparent)]pub struct AudioBuffer(::winrt::Object);
    impl AudioBuffer {
      pub fn close(&self) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<super::foundation::IClosable>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
        }
      }pub fn create_reference(&self,) ->  ::winrt::Result<super::foundation::IMemoryBufferReference>{
        let this =  &::winrt::Interface::cast::<super::foundation::IMemoryBuffer>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IMemoryBufferReference as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IMemoryBufferReference>(result__)
        }
      }pub fn capacity(&self) ->  ::winrt::Result<u32>{
        let this = self;
        unsafe {
          let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
        }
      }pub fn length(&self) ->  ::winrt::Result<u32>{
        let this = self;
        unsafe {
          let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
        }
      }pub fn set_length(&self,value:u32) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
        }
      }
    }impl::std::clone::Clone for AudioBuffer {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for AudioBuffer {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for AudioBuffer{}
    impl::std::fmt::Debug for AudioBuffer {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::winrt::RuntimeName for AudioBuffer {
      const NAME: & 'static str = "Windows.Media.AudioBuffer";
      
    }unsafe impl::winrt::Interface for AudioBuffer {
      type Vtable = IAudioBuffer_abi;
      const IID: ::winrt::Guid =  <IAudioBuffer as::winrt::Interface>::IID;
      
    }unsafe impl::winrt::RuntimeType for AudioBuffer {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.AudioBuffer;{35175827-724b-4c6a-b130-f6537f9ae0d0})",);
      
    }impl::std::convert::From<AudioBuffer>for::winrt::Object {
      fn from(value:AudioBuffer) -> Self {
        value.0
      }
    }impl::std::convert::From<&AudioBuffer>for::winrt::Object {
      fn from(value: &AudioBuffer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AudioBuffer {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AudioBuffer {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<AudioBuffer>for super::foundation::IClosable {
      fn from(value:AudioBuffer) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&AudioBuffer>for super::foundation::IClosable {
      fn from(value: &AudioBuffer) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for AudioBuffer {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(self,))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for& 'a AudioBuffer {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<AudioBuffer>for super::foundation::IMemoryBuffer {
      fn from(value:AudioBuffer) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&AudioBuffer>for super::foundation::IMemoryBuffer {
      fn from(value: &AudioBuffer) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IMemoryBuffer>>for AudioBuffer {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IMemoryBuffer>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IMemoryBuffer>::into(self),)
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IMemoryBuffer>>for& 'a AudioBuffer {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IMemoryBuffer>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IMemoryBuffer>::into(::std::clone::Clone::clone(self),),)
      }
    }impl::std::convert::From<AudioBuffer>for IAudioBuffer {
      fn from(value:AudioBuffer) -> Self {
        unsafe {
          ::std::mem::transmute(value)
        }
      }
    }impl::std::convert::From<&AudioBuffer>for IAudioBuffer {
      fn from(value: &AudioBuffer) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioBuffer>>for AudioBuffer {
      fn into(self) ->  ::winrt::Param< 'a ,IAudioBuffer>{
        ::winrt::Param::Owned(::std::convert::Into::<IAudioBuffer>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioBuffer>>for& 'a AudioBuffer {
      fn into(self) ->  ::winrt::Param< 'a ,IAudioBuffer>{
        ::winrt::Param::Owned(::std::convert::Into::<IAudioBuffer>::into(::std::clone::Clone::clone(self),))
      }
    }unsafe impl::std::marker::Send for AudioBuffer{}
    unsafe impl::std::marker::Sync for AudioBuffer{}
    #[allow(non_camel_case_types)]#[repr(transparent)]pub struct AudioBufferAccessMode(i32);
    impl::std::convert::From<i32>for AudioBufferAccessMode {
      fn from(value:i32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for AudioBufferAccessMode {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for AudioBufferAccessMode {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for AudioBufferAccessMode {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for AudioBufferAccessMode {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for AudioBufferAccessMode{}
    impl::std::marker::Copy for AudioBufferAccessMode{}
    impl AudioBufferAccessMode {
      #![allow(non_upper_case_globals)]pub const Read:Self = Self(0i32);
      pub const ReadWrite:Self = Self(1i32);
      pub const Write:Self = Self(2i32);
      
    }unsafe impl::winrt::Abi for AudioBufferAccessMode {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for AudioBufferAccessMode {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.AudioBufferAccessMode;i4)");
      
    }#[repr(transparent)]pub struct IAudioFrame(::winrt::Object);
    impl::std::clone::Clone for IAudioFrame {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IAudioFrame {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IAudioFrame {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IAudioFrame{}
    impl IAudioFrame {
      pub fn close(&self) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<super::foundation::IClosable>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
        }
      }pub fn lock_buffer(&self,mode:AudioBufferAccessMode) ->  ::winrt::Result<AudioBuffer>{
        let this = self;
        unsafe {
          let mut result__: <AudioBuffer as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),mode, &mut result__,).from_abi::<AudioBuffer>(result__)
        }
      }pub fn r#type(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn is_read_only(&self) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
        }
      }pub fn set_relative_time< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::foundation::TimeSpan>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
        }
      }pub fn relative_time(&self,) ->  ::winrt::Result<super::foundation::IReference<super::foundation::TimeSpan>>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IReference:: <super::foundation::TimeSpan>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IReference<super::foundation::TimeSpan>>(result__,)
        }
      }pub fn set_system_relative_time< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::foundation::TimeSpan>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value.into().abi(),).ok()
        }
      }pub fn system_relative_time(&self,) ->  ::winrt::Result<super::foundation::IReference<super::foundation::TimeSpan>>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IReference:: <super::foundation::TimeSpan>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IReference<super::foundation::TimeSpan>>(result__,)
        }
      }pub fn set_duration< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::foundation::TimeSpan>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(),).ok()
        }
      }pub fn duration(&self,) ->  ::winrt::Result<super::foundation::IReference<super::foundation::TimeSpan>>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IReference:: <super::foundation::TimeSpan>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IReference<super::foundation::TimeSpan>>(result__,)
        }
      }pub fn set_is_discontinuous(&self,value:bool) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
        }
      }pub fn is_discontinuous(&self) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
        }
      }pub fn extended_properties(&self,) ->  ::winrt::Result<super::foundation::collections::IPropertySet>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::collections::IPropertySet as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::collections::IPropertySet>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IAudioFrame {
      type Vtable = IAudioFrame_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3815424772,43698,17015,[158,208,67,206,223,142,41,198],);
      
    }#[repr(C)]pub struct IAudioFrame_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,mode:AudioBufferAccessMode,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IAudioFrame {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{e36ac304-aab2-4277-9ed0-43cedf8e29c6}")
      };
      
    }impl::std::convert::From<IAudioFrame>for::winrt::Object {
      fn from(value:IAudioFrame) -> Self {
        value.0
      }
    }impl::std::convert::From<&IAudioFrame>for::winrt::Object {
      fn from(value: &IAudioFrame) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAudioFrame {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAudioFrame {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<IAudioFrame>for super::foundation::IClosable {
      fn from(value:IAudioFrame) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&IAudioFrame>for super::foundation::IClosable {
      fn from(value: &IAudioFrame) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for IAudioFrame {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(self,))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for& 'a IAudioFrame {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<IAudioFrame>for IMediaFrame {
      fn from(value:IAudioFrame) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&IAudioFrame>for IMediaFrame {
      fn from(value: &IAudioFrame) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrame>>for IAudioFrame {
      fn into(self) ->  ::winrt::Param< 'a ,IMediaFrame>{
        ::winrt::Param::Owned(::std::convert::Into::<IMediaFrame>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrame>>for& 'a IAudioFrame {
      fn into(self) ->  ::winrt::Param< 'a ,IMediaFrame>{
        ::winrt::Param::Owned(::std::convert::Into::<IMediaFrame>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IAudioFrameFactory(::winrt::Object);
    impl::std::clone::Clone for IAudioFrameFactory {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IAudioFrameFactory {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IAudioFrameFactory {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IAudioFrameFactory{}
    impl IAudioFrameFactory {
      pub fn create(&self,capacity:u32) ->  ::winrt::Result<AudioFrame>{
        let this = self;
        unsafe {
          let mut result__: <AudioFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),capacity, &mut result__,).from_abi::<AudioFrame>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IAudioFrameFactory {
      type Vtable = IAudioFrameFactory_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2443774686,9250,16550,[185,173,48,208,36,4,49,125],);
      
    }#[repr(C)]pub struct IAudioFrameFactory_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,capacity:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IAudioFrameFactory {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{91a90ade-2422-40a6-b9ad-30d02404317d}")
      };
      
    }impl::std::convert::From<IAudioFrameFactory>for::winrt::Object {
      fn from(value:IAudioFrameFactory) -> Self {
        value.0
      }
    }impl::std::convert::From<&IAudioFrameFactory>for::winrt::Object {
      fn from(value: &IAudioFrameFactory) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAudioFrameFactory {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAudioFrameFactory {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct AudioFrame(::winrt::Object);
    impl AudioFrame {
      pub fn close(&self) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<super::foundation::IClosable>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
        }
      }pub fn lock_buffer(&self,mode:AudioBufferAccessMode) ->  ::winrt::Result<AudioBuffer>{
        let this = self;
        unsafe {
          let mut result__: <AudioBuffer as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),mode, &mut result__,).from_abi::<AudioBuffer>(result__)
        }
      }pub fn create(capacity:u32) ->  ::winrt::Result<AudioFrame>{
        Self::IAudioFrameFactory(|this|unsafe {
          let mut result__: <AudioFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),capacity, &mut result__,).from_abi::<AudioFrame>(result__)
        })
      }pub fn r#type(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn is_read_only(&self) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
        }
      }pub fn set_relative_time< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::foundation::TimeSpan>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
        }
      }pub fn relative_time(&self,) ->  ::winrt::Result<super::foundation::IReference<super::foundation::TimeSpan>>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IReference:: <super::foundation::TimeSpan>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IReference<super::foundation::TimeSpan>>(result__,)
        }
      }pub fn set_system_relative_time< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::foundation::TimeSpan>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value.into().abi(),).ok()
        }
      }pub fn system_relative_time(&self,) ->  ::winrt::Result<super::foundation::IReference<super::foundation::TimeSpan>>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IReference:: <super::foundation::TimeSpan>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IReference<super::foundation::TimeSpan>>(result__,)
        }
      }pub fn set_duration< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::IReference<super::foundation::TimeSpan>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(),).ok()
        }
      }pub fn duration(&self,) ->  ::winrt::Result<super::foundation::IReference<super::foundation::TimeSpan>>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IReference:: <super::foundation::TimeSpan>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IReference<super::foundation::TimeSpan>>(result__,)
        }
      }pub fn set_is_discontinuous(&self,value:bool) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
        }
      }pub fn is_discontinuous(&self) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
        }
      }pub fn extended_properties(&self,) ->  ::winrt::Result<super::foundation::collections::IPropertySet>{
        let this =  &::winrt::Interface::cast::<IMediaFrame>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::collections::IPropertySet as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::collections::IPropertySet>(result__)
        }
      }#[allow(non_snake_case)]fn IAudioFrameFactory<R,F:FnOnce(&IAudioFrameFactory) ->  ::winrt::Result<R>>(callback:F,) ->  ::winrt::Result<R>{
        static mut SHARED: ::winrt::FactoryCache<AudioFrame,IAudioFrameFactory>  =  ::winrt::FactoryCache::new();
        unsafe {
          SHARED.call(callback)
        }
      }
    }impl::std::clone::Clone for AudioFrame {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for AudioFrame {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for AudioFrame{}
    impl::std::fmt::Debug for AudioFrame {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::winrt::RuntimeName for AudioFrame {
      const NAME: & 'static str = "Windows.Media.AudioFrame";
      
    }unsafe impl::winrt::Interface for AudioFrame {
      type Vtable = IAudioFrame_abi;
      const IID: ::winrt::Guid =  <IAudioFrame as::winrt::Interface>::IID;
      
    }unsafe impl::winrt::RuntimeType for AudioFrame {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.AudioFrame;{e36ac304-aab2-4277-9ed0-43cedf8e29c6})",);
      
    }impl::std::convert::From<AudioFrame>for::winrt::Object {
      fn from(value:AudioFrame) -> Self {
        value.0
      }
    }impl::std::convert::From<&AudioFrame>for::winrt::Object {
      fn from(value: &AudioFrame) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AudioFrame {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AudioFrame {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<AudioFrame>for super::foundation::IClosable {
      fn from(value:AudioFrame) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&AudioFrame>for super::foundation::IClosable {
      fn from(value: &AudioFrame) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for AudioFrame {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(self,))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for& 'a AudioFrame {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<AudioFrame>for IAudioFrame {
      fn from(value:AudioFrame) -> Self {
        unsafe {
          ::std::mem::transmute(value)
        }
      }
    }impl::std::convert::From<&AudioFrame>for IAudioFrame {
      fn from(value: &AudioFrame) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioFrame>>for AudioFrame {
      fn into(self) ->  ::winrt::Param< 'a ,IAudioFrame>{
        ::winrt::Param::Owned(::std::convert::Into::<IAudioFrame>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioFrame>>for& 'a AudioFrame {
      fn into(self) ->  ::winrt::Param< 'a ,IAudioFrame>{
        ::winrt::Param::Owned(::std::convert::Into::<IAudioFrame>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<AudioFrame>for IMediaFrame {
      fn from(value:AudioFrame) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&AudioFrame>for IMediaFrame {
      fn from(value: &AudioFrame) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrame>>for AudioFrame {
      fn into(self) ->  ::winrt::Param< 'a ,IMediaFrame>{
        ::winrt::Param::Owned(::std::convert::Into::<IMediaFrame>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrame>>for& 'a AudioFrame {
      fn into(self) ->  ::winrt::Param< 'a ,IMediaFrame>{
        ::winrt::Param::Owned(::std::convert::Into::<IMediaFrame>::into(::std::clone::Clone::clone(self),))
      }
    }unsafe impl::std::marker::Send for AudioFrame{}
    unsafe impl::std::marker::Sync for AudioFrame{}
    #[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod capture {
      #[repr(transparent)]pub struct ICapturedFrame(::winrt::Object);
      impl::std::clone::Clone for ICapturedFrame {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ICapturedFrame {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ICapturedFrame {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ICapturedFrame{}
      impl ICapturedFrame {
        pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn content_type(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IContentTypeProvider, >(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn read_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IBuffer>, >, >(&self,buffer:T0__,count:u32,options:super::super::storage::streams::InputStreamOptions,) ->  ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<super::super::storage::streams::IBuffer,u32, >, >{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IInputStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperationWithProgress<super::super::storage::streams::IBuffer,u32, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),buffer.into().abi(),count,options, &mut result__,).from_abi::<super::super::foundation::IAsyncOperationWithProgress<super::super::storage::streams::IBuffer,u32, >>(result__)
          }
        }pub fn write_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IBuffer>, >, >(&self,buffer:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<u32,u32>>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IOutputStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperationWithProgress<u32,u32, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),buffer.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperationWithProgress:: <u32,u32> >(result__)
          }
        }pub fn flush_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<bool>>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IOutputStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <bool>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<bool>>(result__)
          }
        }pub fn size(&self) ->  ::winrt::Result<u64>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u64>(result__)
          }
        }pub fn set_size(&self,value:u64) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn get_input_stream_at(&self,position:u64,) ->  ::winrt::Result<super::super::storage::streams::IInputStream>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::storage::streams::IInputStream as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),position, &mut result__,).from_abi::<super::super::storage::streams::IInputStream>(result__)
          }
        }pub fn get_output_stream_at(&self,position:u64,) ->  ::winrt::Result<super::super::storage::streams::IOutputStream>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::storage::streams::IOutputStream as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),position, &mut result__,).from_abi::<super::super::storage::streams::IOutputStream>(result__)
          }
        }pub fn position(&self) ->  ::winrt::Result<u64>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u64>(result__)
          }
        }pub fn seek(&self,position:u64) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),position).ok()
          }
        }pub fn clone_stream(&self,) ->  ::winrt::Result<super::super::storage::streams::IRandomAccessStream>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::storage::streams::IRandomAccessStream as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::storage::streams::IRandomAccessStream>(result__)
          }
        }pub fn can_read(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn can_write(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ICapturedFrame {
        type Vtable = ICapturedFrame_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(500358687,22299,17624,[142,128,160,138,21,120,118,110],);
        
      }#[repr(C)]pub struct ICapturedFrame_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ICapturedFrame {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{1dd2de1f-571b-44d8-8e80-a08a1578766e}")
        };
        
      }impl::std::convert::From<ICapturedFrame>for::winrt::Object {
        fn from(value:ICapturedFrame) -> Self {
          value.0
        }
      }impl::std::convert::From<&ICapturedFrame>for::winrt::Object {
        fn from(value: &ICapturedFrame) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ICapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ICapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<ICapturedFrame>for super::super::foundation::IClosable {
        fn from(value:ICapturedFrame) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&ICapturedFrame>for super::super::foundation::IClosable {
        fn from(value: &ICapturedFrame) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for ICapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a ICapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<ICapturedFrame>for super::super::storage::streams::IContentTypeProvider {
        fn from(value:ICapturedFrame) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&ICapturedFrame>for super::super::storage::streams::IContentTypeProvider {
        fn from(value: &ICapturedFrame) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IContentTypeProvider>, >for ICapturedFrame {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IContentTypeProvider>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IContentTypeProvider, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IContentTypeProvider>, >for& 'a ICapturedFrame {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IContentTypeProvider>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IContentTypeProvider, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<ICapturedFrame>for super::super::storage::streams::IInputStream {
        fn from(value:ICapturedFrame) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&ICapturedFrame>for super::super::storage::streams::IInputStream {
        fn from(value: &ICapturedFrame) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IInputStream>, >for ICapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::storage::streams::IInputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IInputStream, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IInputStream>, >for& 'a ICapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::storage::streams::IInputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IInputStream, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<ICapturedFrame>for super::super::storage::streams::IOutputStream {
        fn from(value:ICapturedFrame) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&ICapturedFrame>for super::super::storage::streams::IOutputStream {
        fn from(value: &ICapturedFrame) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IOutputStream>, >for ICapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::storage::streams::IOutputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IOutputStream, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IOutputStream>, >for& 'a ICapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::storage::streams::IOutputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IOutputStream, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<ICapturedFrame>for super::super::storage::streams::IRandomAccessStream {
        fn from(value:ICapturedFrame) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&ICapturedFrame>for super::super::storage::streams::IRandomAccessStream {
        fn from(value: &ICapturedFrame) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>, >for ICapturedFrame {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IRandomAccessStream, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>, >for& 'a ICapturedFrame {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IRandomAccessStream, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<ICapturedFrame>for super::super::storage::streams::IRandomAccessStreamWithContentType {
        fn from(value:ICapturedFrame) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&ICapturedFrame>for super::super::storage::streams::IRandomAccessStreamWithContentType {
        fn from(value: &ICapturedFrame) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStreamWithContentType, >, >for ICapturedFrame {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStreamWithContentType, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IRandomAccessStreamWithContentType, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStreamWithContentType, >, >for& 'a ICapturedFrame {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStreamWithContentType, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IRandomAccessStreamWithContentType, >::into(::std::clone::Clone::clone(self,)))
        }
      }#[repr(transparent)]pub struct ICapturedFrameControlValues(::winrt::Object);
      impl::std::clone::Clone for ICapturedFrameControlValues {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ICapturedFrameControlValues {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ICapturedFrameControlValues {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ICapturedFrameControlValues{}
      impl ICapturedFrameControlValues {
        pub fn exposure(&self,) ->  ::winrt::Result<super::super::foundation::IReference<super::super::foundation::TimeSpan>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference<super::super::foundation::TimeSpan, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IReference:: <super::super::foundation::TimeSpan> >(result__)
          }
        }pub fn exposure_compensation(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<f32>>(result__)
          }
        }pub fn iso_speed(&self,) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn focus(&self) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn scene_mode(&self,) ->  ::winrt::Result<super::super::foundation::IReference<super::devices::CaptureSceneMode>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference<super::devices::CaptureSceneMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<super::devices::CaptureSceneMode, >>(result__)
          }
        }pub fn flashed(&self,) ->  ::winrt::Result<super::super::foundation::IReference<bool>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <bool>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<bool>>(result__)
          }
        }pub fn flash_power_percent(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<f32>>(result__)
          }
        }pub fn white_balance(&self,) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn zoom_factor(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<f32>>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ICapturedFrameControlValues {
        type Vtable = ICapturedFrameControlValues_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2428918655,19981,19620,[136,45,122,20,79,237,10,144],);
        
      }#[repr(C)]pub struct ICapturedFrameControlValues_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ICapturedFrameControlValues {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{90c65b7f-4e0d-4ca4-882d-7a144fed0a90}")
        };
        
      }impl::std::convert::From<ICapturedFrameControlValues>for::winrt::Object {
        fn from(value:ICapturedFrameControlValues) -> Self {
          value.0
        }
      }impl::std::convert::From<&ICapturedFrameControlValues>for::winrt::Object {
        fn from(value: &ICapturedFrameControlValues) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ICapturedFrameControlValues {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ICapturedFrameControlValues {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(C)]#[allow(non_snake_case)]pub struct WhiteBalanceGain {
        pub r:f64,pub g:f64,pub b:f64,
      }#[repr(C)]pub struct WhiteBalanceGain_abi(f64,f64,f64);
      unsafe impl::winrt::Abi for WhiteBalanceGain {
        type Abi = WhiteBalanceGain_abi;
        
      }impl::std::default::Default for WhiteBalanceGain {
        fn default() -> Self {
          Self {
            r:0.0,g:0.0,b:0.0,
          }
        }
      }impl::std::fmt::Debug for WhiteBalanceGain {
        fn fmt(&self,fmt: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          fmt.debug_struct("WhiteBalanceGain").field("r", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.r),std::fmt::Display::fmt),])).field("g", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.g),std::fmt::Display::fmt),])).field("b", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.b),std::fmt::Display::fmt),])).finish()
        }
      }impl::std::clone::Clone for WhiteBalanceGain {
        fn clone(&self) -> Self {
          Self {
            r:self.r,g:self.g,b:self.b,
          }
        }
      }impl::std::cmp::PartialEq for WhiteBalanceGain {
        fn eq(&self,other: &Self) -> bool {
          self.r==other.r&&self.g==other.g&&self.b==other.b
        }
      }impl::std::cmp::Eq for WhiteBalanceGain{}
      unsafe impl::winrt::RuntimeType for WhiteBalanceGain {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"struct(Windows.Media.Capture.WhiteBalanceGain;f8;f8;f8)",);
        
      }#[repr(transparent)]pub struct ICapturedFrameControlValues2(::winrt::Object);
      impl::std::clone::Clone for ICapturedFrameControlValues2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ICapturedFrameControlValues2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ICapturedFrameControlValues2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ICapturedFrameControlValues2{}
      impl ICapturedFrameControlValues2 {
        pub fn focus_state(&self,) ->  ::winrt::Result<super::super::foundation::IReference<super::devices::MediaCaptureFocusState>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference<super::devices::MediaCaptureFocusState, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<super::devices::MediaCaptureFocusState, >>(result__)
          }
        }pub fn iso_digital_gain(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f64>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f64>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<f64>>(result__)
          }
        }pub fn iso_analog_gain(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f64>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f64>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<f64>>(result__)
          }
        }pub fn sensor_frame_rate(&self,) ->  ::winrt::Result<super::media_properties::MediaRatio>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::MediaRatio as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::media_properties::MediaRatio>(result__)
          }
        }pub fn white_balance_gain(&self,) ->  ::winrt::Result<super::super::foundation::IReference<WhiteBalanceGain>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <WhiteBalanceGain>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<WhiteBalanceGain, >>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ICapturedFrameControlValues2 {
        type Vtable = ICapturedFrameControlValues2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1342909320,1746,19111,[167,219,211,122,247,51,33,216],);
        
      }#[repr(C)]pub struct ICapturedFrameControlValues2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ICapturedFrameControlValues2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{500b2b88-06d2-4aa7-a7db-d37af73321d8}")
        };
        
      }impl::std::convert::From<ICapturedFrameControlValues2>for::winrt::Object {
        fn from(value:ICapturedFrameControlValues2) -> Self {
          value.0
        }
      }impl::std::convert::From<&ICapturedFrameControlValues2>for::winrt::Object {
        fn from(value: &ICapturedFrameControlValues2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ICapturedFrameControlValues2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ICapturedFrameControlValues2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct CapturedFrameControlValues(::winrt::Object);
      impl CapturedFrameControlValues {
        pub fn exposure(&self,) ->  ::winrt::Result<super::super::foundation::IReference<super::super::foundation::TimeSpan>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference<super::super::foundation::TimeSpan, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IReference:: <super::super::foundation::TimeSpan> >(result__)
          }
        }pub fn exposure_compensation(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<f32>>(result__)
          }
        }pub fn iso_speed(&self,) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn focus(&self) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn scene_mode(&self,) ->  ::winrt::Result<super::super::foundation::IReference<super::devices::CaptureSceneMode>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference<super::devices::CaptureSceneMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<super::devices::CaptureSceneMode, >>(result__)
          }
        }pub fn flashed(&self,) ->  ::winrt::Result<super::super::foundation::IReference<bool>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <bool>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<bool>>(result__)
          }
        }pub fn flash_power_percent(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<f32>>(result__)
          }
        }pub fn white_balance(&self,) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn zoom_factor(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<f32>>(result__)
          }
        }pub fn focus_state(&self,) ->  ::winrt::Result<super::super::foundation::IReference<super::devices::MediaCaptureFocusState>, >{
          let this =  &::winrt::Interface::cast::<ICapturedFrameControlValues2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IReference<super::devices::MediaCaptureFocusState, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<super::devices::MediaCaptureFocusState, >>(result__)
          }
        }pub fn iso_digital_gain(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f64>>{
          let this =  &::winrt::Interface::cast::<ICapturedFrameControlValues2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f64>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<f64>>(result__)
          }
        }pub fn iso_analog_gain(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f64>>{
          let this =  &::winrt::Interface::cast::<ICapturedFrameControlValues2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f64>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<f64>>(result__)
          }
        }pub fn sensor_frame_rate(&self,) ->  ::winrt::Result<super::media_properties::MediaRatio>{
          let this =  &::winrt::Interface::cast::<ICapturedFrameControlValues2>(self).unwrap();
          unsafe {
            let mut result__: <super::media_properties::MediaRatio as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::media_properties::MediaRatio>(result__)
          }
        }pub fn white_balance_gain(&self,) ->  ::winrt::Result<super::super::foundation::IReference<WhiteBalanceGain>>{
          let this =  &::winrt::Interface::cast::<ICapturedFrameControlValues2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <WhiteBalanceGain>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<WhiteBalanceGain, >>(result__)
          }
        }
      }impl::std::clone::Clone for CapturedFrameControlValues {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for CapturedFrameControlValues {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for CapturedFrameControlValues{}
      impl::std::fmt::Debug for CapturedFrameControlValues {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for CapturedFrameControlValues {
        const NAME: & 'static str = "Windows.Media.Capture.CapturedFrameControlValues";
        
      }unsafe impl::winrt::Interface for CapturedFrameControlValues {
        type Vtable = ICapturedFrameControlValues_abi;
        const IID: ::winrt::Guid =  <ICapturedFrameControlValues as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for CapturedFrameControlValues {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.CapturedFrameControlValues;{90c65b7f-4e0d-4ca4-882d-7a144fed0a90})");
        
      }impl::std::convert::From<CapturedFrameControlValues>for::winrt::Object {
        fn from(value:CapturedFrameControlValues) -> Self {
          value.0
        }
      }impl::std::convert::From<&CapturedFrameControlValues>for::winrt::Object {
        fn from(value: &CapturedFrameControlValues) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for CapturedFrameControlValues {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a CapturedFrameControlValues {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<CapturedFrameControlValues>for ICapturedFrameControlValues {
        fn from(value:CapturedFrameControlValues) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&CapturedFrameControlValues>for ICapturedFrameControlValues {
        fn from(value: &CapturedFrameControlValues) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICapturedFrameControlValues>>for CapturedFrameControlValues {
        fn into(self) ->  ::winrt::Param< 'a ,ICapturedFrameControlValues>{
          ::winrt::Param::Owned(::std::convert::Into::<ICapturedFrameControlValues>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICapturedFrameControlValues>>for& 'a CapturedFrameControlValues {
        fn into(self) ->  ::winrt::Param< 'a ,ICapturedFrameControlValues>{
          ::winrt::Param::Owned(::std::convert::Into::<ICapturedFrameControlValues>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<CapturedFrameControlValues>for ICapturedFrameControlValues2 {
        fn from(value:CapturedFrameControlValues) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&CapturedFrameControlValues>for ICapturedFrameControlValues2 {
        fn from(value: &CapturedFrameControlValues) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICapturedFrameControlValues2>>for CapturedFrameControlValues {
        fn into(self) ->  ::winrt::Param< 'a ,ICapturedFrameControlValues2>{
          ::winrt::Param::Owned(::std::convert::Into::<ICapturedFrameControlValues2>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICapturedFrameControlValues2>>for& 'a CapturedFrameControlValues {
        fn into(self) ->  ::winrt::Param< 'a ,ICapturedFrameControlValues2>{
          ::winrt::Param::Owned(::std::convert::Into::<ICapturedFrameControlValues2>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for CapturedFrameControlValues{}
      unsafe impl::std::marker::Sync for CapturedFrameControlValues{}
      #[repr(transparent)]pub struct ICapturedFrame2(::winrt::Object);
      impl::std::clone::Clone for ICapturedFrame2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ICapturedFrame2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ICapturedFrame2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ICapturedFrame2{}
      impl ICapturedFrame2 {
        pub fn control_values(&self) ->  ::winrt::Result<CapturedFrameControlValues>{
          let this = self;
          unsafe {
            let mut result__: <CapturedFrameControlValues as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CapturedFrameControlValues>(result__)
          }
        }pub fn bitmap_properties(&self,) ->  ::winrt::Result<super::super::graphics::imaging::BitmapPropertySet>{
          let this = self;
          unsafe {
            let mut result__: <super::super::graphics::imaging::BitmapPropertySet as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::graphics::imaging::BitmapPropertySet>(result__,)
          }
        }
      }unsafe impl::winrt::Interface for ICapturedFrame2 {
        type Vtable = ICapturedFrame2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1413457617,48504,18534,[173,218,36,49,75,198,93,234],);
        
      }#[repr(C)]pub struct ICapturedFrame2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ICapturedFrame2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{543fa6d1-bd78-4866-adda-24314bc65dea}")
        };
        
      }impl::std::convert::From<ICapturedFrame2>for::winrt::Object {
        fn from(value:ICapturedFrame2) -> Self {
          value.0
        }
      }impl::std::convert::From<&ICapturedFrame2>for::winrt::Object {
        fn from(value: &ICapturedFrame2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ICapturedFrame2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ICapturedFrame2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ICapturedFrameWithSoftwareBitmap(::winrt::Object);
      impl::std::clone::Clone for ICapturedFrameWithSoftwareBitmap {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ICapturedFrameWithSoftwareBitmap {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ICapturedFrameWithSoftwareBitmap {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ICapturedFrameWithSoftwareBitmap{}
      impl ICapturedFrameWithSoftwareBitmap {
        pub fn software_bitmap(&self,) ->  ::winrt::Result<super::super::graphics::imaging::SoftwareBitmap>{
          let this = self;
          unsafe {
            let mut result__: <super::super::graphics::imaging::SoftwareBitmap as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::graphics::imaging::SoftwareBitmap>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ICapturedFrameWithSoftwareBitmap {
        type Vtable = ICapturedFrameWithSoftwareBitmap_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3046017902,34051,18869,[158,134,137,125,38,163,255,61],);
        
      }#[repr(C)]pub struct ICapturedFrameWithSoftwareBitmap_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ICapturedFrameWithSoftwareBitmap {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{b58e8b6e-8503-49b5-9e86-897d26a3ff3d}")
        };
        
      }impl::std::convert::From<ICapturedFrameWithSoftwareBitmap>for::winrt::Object {
        fn from(value:ICapturedFrameWithSoftwareBitmap) -> Self {
          value.0
        }
      }impl::std::convert::From<&ICapturedFrameWithSoftwareBitmap>for::winrt::Object {
        fn from(value: &ICapturedFrameWithSoftwareBitmap) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ICapturedFrameWithSoftwareBitmap {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ICapturedFrameWithSoftwareBitmap {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct CapturedFrame(::winrt::Object);
      impl CapturedFrame {
        pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn control_values(&self) ->  ::winrt::Result<CapturedFrameControlValues>{
          let this =  &::winrt::Interface::cast::<ICapturedFrame2>(self).unwrap();
          unsafe {
            let mut result__: <CapturedFrameControlValues as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CapturedFrameControlValues>(result__)
          }
        }pub fn bitmap_properties(&self,) ->  ::winrt::Result<super::super::graphics::imaging::BitmapPropertySet>{
          let this =  &::winrt::Interface::cast::<ICapturedFrame2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::graphics::imaging::BitmapPropertySet as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::graphics::imaging::BitmapPropertySet>(result__,)
          }
        }pub fn software_bitmap(&self,) ->  ::winrt::Result<super::super::graphics::imaging::SoftwareBitmap>{
          let this =  &::winrt::Interface::cast::<ICapturedFrameWithSoftwareBitmap>(self).unwrap();
          unsafe {
            let mut result__: <super::super::graphics::imaging::SoftwareBitmap as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::graphics::imaging::SoftwareBitmap>(result__)
          }
        }pub fn content_type(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IContentTypeProvider, >(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn read_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IBuffer>, >, >(&self,buffer:T0__,count:u32,options:super::super::storage::streams::InputStreamOptions,) ->  ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<super::super::storage::streams::IBuffer,u32, >, >{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IInputStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperationWithProgress<super::super::storage::streams::IBuffer,u32, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),buffer.into().abi(),count,options, &mut result__,).from_abi::<super::super::foundation::IAsyncOperationWithProgress<super::super::storage::streams::IBuffer,u32, >>(result__)
          }
        }pub fn write_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IBuffer>, >, >(&self,buffer:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<u32,u32>>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IOutputStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperationWithProgress<u32,u32, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),buffer.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperationWithProgress:: <u32,u32> >(result__)
          }
        }pub fn flush_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<bool>>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IOutputStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <bool>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<bool>>(result__)
          }
        }pub fn size(&self) ->  ::winrt::Result<u64>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u64>(result__)
          }
        }pub fn set_size(&self,value:u64) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn get_input_stream_at(&self,position:u64,) ->  ::winrt::Result<super::super::storage::streams::IInputStream>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::storage::streams::IInputStream as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),position, &mut result__,).from_abi::<super::super::storage::streams::IInputStream>(result__)
          }
        }pub fn get_output_stream_at(&self,position:u64,) ->  ::winrt::Result<super::super::storage::streams::IOutputStream>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::storage::streams::IOutputStream as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),position, &mut result__,).from_abi::<super::super::storage::streams::IOutputStream>(result__)
          }
        }pub fn position(&self) ->  ::winrt::Result<u64>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u64>(result__)
          }
        }pub fn seek(&self,position:u64) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),position).ok()
          }
        }pub fn clone_stream(&self,) ->  ::winrt::Result<super::super::storage::streams::IRandomAccessStream>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::storage::streams::IRandomAccessStream as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::storage::streams::IRandomAccessStream>(result__)
          }
        }pub fn can_read(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn can_write(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<super::super::storage::streams::IRandomAccessStream, >(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }
      }impl::std::clone::Clone for CapturedFrame {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for CapturedFrame {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for CapturedFrame{}
      impl::std::fmt::Debug for CapturedFrame {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for CapturedFrame {
        const NAME: & 'static str = "Windows.Media.Capture.CapturedFrame";
        
      }unsafe impl::winrt::Interface for CapturedFrame {
        type Vtable = ICapturedFrame_abi;
        const IID: ::winrt::Guid =  <ICapturedFrame as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for CapturedFrame {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.CapturedFrame;{1dd2de1f-571b-44d8-8e80-a08a1578766e})");
        
      }impl::std::convert::From<CapturedFrame>for::winrt::Object {
        fn from(value:CapturedFrame) -> Self {
          value.0
        }
      }impl::std::convert::From<&CapturedFrame>for::winrt::Object {
        fn from(value: &CapturedFrame) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for CapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a CapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<CapturedFrame>for super::super::foundation::IClosable {
        fn from(value:CapturedFrame) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&CapturedFrame>for super::super::foundation::IClosable {
        fn from(value: &CapturedFrame) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for CapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a CapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<CapturedFrame>for ICapturedFrame {
        fn from(value:CapturedFrame) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&CapturedFrame>for ICapturedFrame {
        fn from(value: &CapturedFrame) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICapturedFrame>>for CapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,ICapturedFrame>{
          ::winrt::Param::Owned(::std::convert::Into::<ICapturedFrame>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICapturedFrame>>for& 'a CapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,ICapturedFrame>{
          ::winrt::Param::Owned(::std::convert::Into::<ICapturedFrame>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<CapturedFrame>for ICapturedFrame2 {
        fn from(value:CapturedFrame) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&CapturedFrame>for ICapturedFrame2 {
        fn from(value: &CapturedFrame) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICapturedFrame2>>for CapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,ICapturedFrame2>{
          ::winrt::Param::Owned(::std::convert::Into::<ICapturedFrame2>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICapturedFrame2>>for& 'a CapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,ICapturedFrame2>{
          ::winrt::Param::Owned(::std::convert::Into::<ICapturedFrame2>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<CapturedFrame>for ICapturedFrameWithSoftwareBitmap {
        fn from(value:CapturedFrame) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&CapturedFrame>for ICapturedFrameWithSoftwareBitmap {
        fn from(value: &CapturedFrame) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICapturedFrameWithSoftwareBitmap>>for CapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,ICapturedFrameWithSoftwareBitmap>{
          ::winrt::Param::Owned(::std::convert::Into::<ICapturedFrameWithSoftwareBitmap>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICapturedFrameWithSoftwareBitmap>>for& 'a CapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,ICapturedFrameWithSoftwareBitmap>{
          ::winrt::Param::Owned(::std::convert::Into::<ICapturedFrameWithSoftwareBitmap>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<CapturedFrame>for super::super::storage::streams::IContentTypeProvider {
        fn from(value:CapturedFrame) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&CapturedFrame>for super::super::storage::streams::IContentTypeProvider {
        fn from(value: &CapturedFrame) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IContentTypeProvider>, >for CapturedFrame {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IContentTypeProvider>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IContentTypeProvider, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IContentTypeProvider>, >for& 'a CapturedFrame {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IContentTypeProvider>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IContentTypeProvider, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<CapturedFrame>for super::super::storage::streams::IInputStream {
        fn from(value:CapturedFrame) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&CapturedFrame>for super::super::storage::streams::IInputStream {
        fn from(value: &CapturedFrame) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IInputStream>, >for CapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::storage::streams::IInputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IInputStream, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IInputStream>, >for& 'a CapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::storage::streams::IInputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IInputStream, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<CapturedFrame>for super::super::storage::streams::IOutputStream {
        fn from(value:CapturedFrame) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&CapturedFrame>for super::super::storage::streams::IOutputStream {
        fn from(value: &CapturedFrame) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IOutputStream>, >for CapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::storage::streams::IOutputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IOutputStream, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IOutputStream>, >for& 'a CapturedFrame {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::storage::streams::IOutputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IOutputStream, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<CapturedFrame>for super::super::storage::streams::IRandomAccessStream {
        fn from(value:CapturedFrame) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&CapturedFrame>for super::super::storage::streams::IRandomAccessStream {
        fn from(value: &CapturedFrame) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>, >for CapturedFrame {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IRandomAccessStream, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>, >for& 'a CapturedFrame {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IRandomAccessStream, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<CapturedFrame>for super::super::storage::streams::IRandomAccessStreamWithContentType {
        fn from(value:CapturedFrame) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&CapturedFrame>for super::super::storage::streams::IRandomAccessStreamWithContentType {
        fn from(value: &CapturedFrame) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStreamWithContentType, >, >for CapturedFrame {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStreamWithContentType, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IRandomAccessStreamWithContentType, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStreamWithContentType, >, >for& 'a CapturedFrame {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStreamWithContentType, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::storage::streams::IRandomAccessStreamWithContentType, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for CapturedFrame{}
      unsafe impl::std::marker::Sync for CapturedFrame{}
      #[repr(transparent)]pub struct IAdvancedCapturedPhoto(::winrt::Object);
      impl::std::clone::Clone for IAdvancedCapturedPhoto {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAdvancedCapturedPhoto {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAdvancedCapturedPhoto {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAdvancedCapturedPhoto{}
      impl IAdvancedCapturedPhoto {
        pub fn frame(&self) ->  ::winrt::Result<CapturedFrame>{
          let this = self;
          unsafe {
            let mut result__: <CapturedFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CapturedFrame>(result__)
          }
        }pub fn mode(&self) ->  ::winrt::Result<super::devices::AdvancedPhotoMode>{
          let this = self;
          unsafe {
            let mut result__: <super::devices::AdvancedPhotoMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::devices::AdvancedPhotoMode>(result__)
          }
        }pub fn context(&self) ->  ::winrt::Result<::winrt::Object>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::Object as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::Object>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAdvancedCapturedPhoto {
        type Vtable = IAdvancedCapturedPhoto_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4034032267,45714,17553,[157,65,153,128,122,85,11,191],);
        
      }#[repr(C)]pub struct IAdvancedCapturedPhoto_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::devices::AdvancedPhotoMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAdvancedCapturedPhoto {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{f072728b-b292-4491-9d41-99807a550bbf}")
        };
        
      }impl::std::convert::From<IAdvancedCapturedPhoto>for::winrt::Object {
        fn from(value:IAdvancedCapturedPhoto) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAdvancedCapturedPhoto>for::winrt::Object {
        fn from(value: &IAdvancedCapturedPhoto) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAdvancedCapturedPhoto {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAdvancedCapturedPhoto {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAdvancedCapturedPhoto2(::winrt::Object);
      impl::std::clone::Clone for IAdvancedCapturedPhoto2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAdvancedCapturedPhoto2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAdvancedCapturedPhoto2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAdvancedCapturedPhoto2{}
      impl IAdvancedCapturedPhoto2 {
        pub fn frame_bounds_relative_to_reference_photo(&self,) ->  ::winrt::Result<super::super::foundation::IReference<super::super::foundation::Rect>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference<super::super::foundation::Rect, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IReference:: <super::super::foundation::Rect> >(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAdvancedCapturedPhoto2 {
        type Vtable = IAdvancedCapturedPhoto2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(416247000,53246,17112,[129,4,1,123,179,24,244,161],);
        
      }#[repr(C)]pub struct IAdvancedCapturedPhoto2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAdvancedCapturedPhoto2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{18cf6cd8-cffe-42d8-8104-017bb318f4a1}")
        };
        
      }impl::std::convert::From<IAdvancedCapturedPhoto2>for::winrt::Object {
        fn from(value:IAdvancedCapturedPhoto2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAdvancedCapturedPhoto2>for::winrt::Object {
        fn from(value: &IAdvancedCapturedPhoto2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAdvancedCapturedPhoto2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAdvancedCapturedPhoto2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AdvancedCapturedPhoto(::winrt::Object);
      impl AdvancedCapturedPhoto {
        pub fn frame(&self) ->  ::winrt::Result<CapturedFrame>{
          let this = self;
          unsafe {
            let mut result__: <CapturedFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CapturedFrame>(result__)
          }
        }pub fn mode(&self) ->  ::winrt::Result<super::devices::AdvancedPhotoMode>{
          let this = self;
          unsafe {
            let mut result__: <super::devices::AdvancedPhotoMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::devices::AdvancedPhotoMode>(result__)
          }
        }pub fn context(&self) ->  ::winrt::Result<::winrt::Object>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::Object as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::Object>(result__)
          }
        }pub fn frame_bounds_relative_to_reference_photo(&self,) ->  ::winrt::Result<super::super::foundation::IReference<super::super::foundation::Rect>, >{
          let this =  &::winrt::Interface::cast::<IAdvancedCapturedPhoto2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IReference<super::super::foundation::Rect, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IReference:: <super::super::foundation::Rect> >(result__)
          }
        }
      }impl::std::clone::Clone for AdvancedCapturedPhoto {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AdvancedCapturedPhoto {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AdvancedCapturedPhoto{}
      impl::std::fmt::Debug for AdvancedCapturedPhoto {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AdvancedCapturedPhoto {
        const NAME: & 'static str = "Windows.Media.Capture.AdvancedCapturedPhoto";
        
      }unsafe impl::winrt::Interface for AdvancedCapturedPhoto {
        type Vtable = IAdvancedCapturedPhoto_abi;
        const IID: ::winrt::Guid =  <IAdvancedCapturedPhoto as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AdvancedCapturedPhoto {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AdvancedCapturedPhoto;{f072728b-b292-4491-9d41-99807a550bbf})");
        
      }impl::std::convert::From<AdvancedCapturedPhoto>for::winrt::Object {
        fn from(value:AdvancedCapturedPhoto) -> Self {
          value.0
        }
      }impl::std::convert::From<&AdvancedCapturedPhoto>for::winrt::Object {
        fn from(value: &AdvancedCapturedPhoto) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AdvancedCapturedPhoto {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AdvancedCapturedPhoto {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AdvancedCapturedPhoto>for IAdvancedCapturedPhoto {
        fn from(value:AdvancedCapturedPhoto) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AdvancedCapturedPhoto>for IAdvancedCapturedPhoto {
        fn from(value: &AdvancedCapturedPhoto) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedCapturedPhoto>>for AdvancedCapturedPhoto {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedCapturedPhoto>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedCapturedPhoto>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedCapturedPhoto>>for& 'a AdvancedCapturedPhoto {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedCapturedPhoto>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedCapturedPhoto>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AdvancedCapturedPhoto>for IAdvancedCapturedPhoto2 {
        fn from(value:AdvancedCapturedPhoto) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AdvancedCapturedPhoto>for IAdvancedCapturedPhoto2 {
        fn from(value: &AdvancedCapturedPhoto) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedCapturedPhoto2>>for AdvancedCapturedPhoto {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedCapturedPhoto2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedCapturedPhoto2>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedCapturedPhoto2>>for& 'a AdvancedCapturedPhoto {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedCapturedPhoto2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedCapturedPhoto2>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for AdvancedCapturedPhoto{}
      unsafe impl::std::marker::Sync for AdvancedCapturedPhoto{}
      #[repr(transparent)]pub struct IOptionalReferencePhotoCapturedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IOptionalReferencePhotoCapturedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IOptionalReferencePhotoCapturedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IOptionalReferencePhotoCapturedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IOptionalReferencePhotoCapturedEventArgs{}
      impl IOptionalReferencePhotoCapturedEventArgs {
        pub fn frame(&self) ->  ::winrt::Result<CapturedFrame>{
          let this = self;
          unsafe {
            let mut result__: <CapturedFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CapturedFrame>(result__)
          }
        }pub fn context(&self) ->  ::winrt::Result<::winrt::Object>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::Object as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::Object>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IOptionalReferencePhotoCapturedEventArgs {
        type Vtable = IOptionalReferencePhotoCapturedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1192200371,7789,16465,[156,139,241,216,90,240,71,183],);
        
      }#[repr(C)]pub struct IOptionalReferencePhotoCapturedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IOptionalReferencePhotoCapturedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{470f88b3-1e6d-4051-9c8b-f1d85af047b7}")
        };
        
      }impl::std::convert::From<IOptionalReferencePhotoCapturedEventArgs>for::winrt::Object {
        fn from(value:IOptionalReferencePhotoCapturedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IOptionalReferencePhotoCapturedEventArgs>for::winrt::Object {
        fn from(value: &IOptionalReferencePhotoCapturedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IOptionalReferencePhotoCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IOptionalReferencePhotoCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct OptionalReferencePhotoCapturedEventArgs(::winrt::Object);
      impl OptionalReferencePhotoCapturedEventArgs {
        pub fn frame(&self) ->  ::winrt::Result<CapturedFrame>{
          let this = self;
          unsafe {
            let mut result__: <CapturedFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CapturedFrame>(result__)
          }
        }pub fn context(&self) ->  ::winrt::Result<::winrt::Object>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::Object as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::Object>(result__)
          }
        }
      }impl::std::clone::Clone for OptionalReferencePhotoCapturedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for OptionalReferencePhotoCapturedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for OptionalReferencePhotoCapturedEventArgs{}
      impl::std::fmt::Debug for OptionalReferencePhotoCapturedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for OptionalReferencePhotoCapturedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.OptionalReferencePhotoCapturedEventArgs";
        
      }unsafe impl::winrt::Interface for OptionalReferencePhotoCapturedEventArgs {
        type Vtable = IOptionalReferencePhotoCapturedEventArgs_abi;
        const IID: ::winrt::Guid =  <IOptionalReferencePhotoCapturedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for OptionalReferencePhotoCapturedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.OptionalReferencePhotoCapturedEventArgs;{470f88b3-1e6d-4051-9c8b-f1d85af047b7})");
        
      }impl::std::convert::From<OptionalReferencePhotoCapturedEventArgs>for::winrt::Object {
        fn from(value:OptionalReferencePhotoCapturedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&OptionalReferencePhotoCapturedEventArgs>for::winrt::Object {
        fn from(value: &OptionalReferencePhotoCapturedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for OptionalReferencePhotoCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a OptionalReferencePhotoCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<OptionalReferencePhotoCapturedEventArgs>for IOptionalReferencePhotoCapturedEventArgs {
        fn from(value:OptionalReferencePhotoCapturedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&OptionalReferencePhotoCapturedEventArgs>for IOptionalReferencePhotoCapturedEventArgs {
        fn from(value: &OptionalReferencePhotoCapturedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IOptionalReferencePhotoCapturedEventArgs>>for OptionalReferencePhotoCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IOptionalReferencePhotoCapturedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IOptionalReferencePhotoCapturedEventArgs, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IOptionalReferencePhotoCapturedEventArgs>>for& 'a OptionalReferencePhotoCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IOptionalReferencePhotoCapturedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IOptionalReferencePhotoCapturedEventArgs, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for OptionalReferencePhotoCapturedEventArgs{}
      unsafe impl::std::marker::Sync for OptionalReferencePhotoCapturedEventArgs{}
      #[repr(transparent)]pub struct IAdvancedPhotoCapture(::winrt::Object);
      impl::std::clone::Clone for IAdvancedPhotoCapture {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAdvancedPhotoCapture {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAdvancedPhotoCapture {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAdvancedPhotoCapture{}
      impl IAdvancedPhotoCapture {
        pub fn capture_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<AdvancedCapturedPhoto>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<AdvancedCapturedPhoto, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <AdvancedCapturedPhoto> >(result__)
          }
        }pub fn capture_with_context_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,context:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<AdvancedCapturedPhoto>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<AdvancedCapturedPhoto, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),context.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <AdvancedCapturedPhoto> >(result__)
          }
        }pub fn optional_reference_photo_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AdvancedPhotoCapture,OptionalReferencePhotoCapturedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_optional_reference_photo_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn all_photos_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AdvancedPhotoCapture, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_all_photos_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn finish_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAdvancedPhotoCapture {
        type Vtable = IAdvancedPhotoCapture_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2214570746,26215,17628,[151,60,166,188,229,150,170,15],);
        
      }#[repr(C)]pub struct IAdvancedPhotoCapture_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,context: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAdvancedPhotoCapture {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{83ffaafa-6667-44dc-973c-a6bce596aa0f}")
        };
        
      }impl::std::convert::From<IAdvancedPhotoCapture>for::winrt::Object {
        fn from(value:IAdvancedPhotoCapture) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAdvancedPhotoCapture>for::winrt::Object {
        fn from(value: &IAdvancedPhotoCapture) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAdvancedPhotoCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAdvancedPhotoCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AdvancedPhotoCapture(::winrt::Object);
      impl AdvancedPhotoCapture {
        pub fn capture_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<AdvancedCapturedPhoto>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<AdvancedCapturedPhoto, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <AdvancedCapturedPhoto> >(result__)
          }
        }pub fn capture_with_context_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,context:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<AdvancedCapturedPhoto>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<AdvancedCapturedPhoto, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),context.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <AdvancedCapturedPhoto> >(result__)
          }
        }pub fn optional_reference_photo_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AdvancedPhotoCapture,OptionalReferencePhotoCapturedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_optional_reference_photo_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn all_photos_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AdvancedPhotoCapture, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_all_photos_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn finish_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }impl::std::clone::Clone for AdvancedPhotoCapture {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AdvancedPhotoCapture {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AdvancedPhotoCapture{}
      impl::std::fmt::Debug for AdvancedPhotoCapture {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AdvancedPhotoCapture {
        const NAME: & 'static str = "Windows.Media.Capture.AdvancedPhotoCapture";
        
      }unsafe impl::winrt::Interface for AdvancedPhotoCapture {
        type Vtable = IAdvancedPhotoCapture_abi;
        const IID: ::winrt::Guid =  <IAdvancedPhotoCapture as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AdvancedPhotoCapture {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AdvancedPhotoCapture;{83ffaafa-6667-44dc-973c-a6bce596aa0f})");
        
      }impl::std::convert::From<AdvancedPhotoCapture>for::winrt::Object {
        fn from(value:AdvancedPhotoCapture) -> Self {
          value.0
        }
      }impl::std::convert::From<&AdvancedPhotoCapture>for::winrt::Object {
        fn from(value: &AdvancedPhotoCapture) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AdvancedPhotoCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AdvancedPhotoCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AdvancedPhotoCapture>for IAdvancedPhotoCapture {
        fn from(value:AdvancedPhotoCapture) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AdvancedPhotoCapture>for IAdvancedPhotoCapture {
        fn from(value: &AdvancedPhotoCapture) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedPhotoCapture>>for AdvancedPhotoCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedPhotoCapture>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedPhotoCapture>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedPhotoCapture>>for& 'a AdvancedPhotoCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedPhotoCapture>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedPhotoCapture>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for AdvancedPhotoCapture{}
      unsafe impl::std::marker::Sync for AdvancedPhotoCapture{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppBroadcastPlugInState(i32);
      impl::std::convert::From<i32>for AppBroadcastPlugInState {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppBroadcastPlugInState {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppBroadcastPlugInState {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppBroadcastPlugInState {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppBroadcastPlugInState {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastPlugInState{}
      impl::std::marker::Copy for AppBroadcastPlugInState{}
      impl AppBroadcastPlugInState {
        #![allow(non_upper_case_globals)]pub const Unknown:Self = Self(0i32);
        pub const Initialized:Self = Self(1i32);
        pub const MicrosoftSignInRequired:Self = Self(2i32);
        pub const OAuthSignInRequired:Self = Self(3i32);
        pub const ProviderSignInRequired:Self = Self(4i32);
        pub const InBandwidthTest:Self = Self(5i32);
        pub const ReadyToBroadcast:Self = Self(6i32);
        
      }unsafe impl::winrt::Abi for AppBroadcastPlugInState {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastPlugInState {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppBroadcastPlugInState;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppBroadcastSignInState(i32);
      impl::std::convert::From<i32>for AppBroadcastSignInState {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppBroadcastSignInState {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppBroadcastSignInState {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppBroadcastSignInState {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppBroadcastSignInState {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastSignInState{}
      impl::std::marker::Copy for AppBroadcastSignInState{}
      impl AppBroadcastSignInState {
        #![allow(non_upper_case_globals)]pub const NotSignedIn:Self = Self(0i32);
        pub const MicrosoftSignInInProgress:Self = Self(1i32);
        pub const MicrosoftSignInComplete:Self = Self(2i32);
        pub const OAuthSignInInProgress:Self = Self(3i32);
        pub const OAuthSignInComplete:Self = Self(4i32);
        
      }unsafe impl::winrt::Abi for AppBroadcastSignInState {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastSignInState {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppBroadcastSignInState;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppBroadcastSignInResult(i32);
      impl::std::convert::From<i32>for AppBroadcastSignInResult {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppBroadcastSignInResult {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppBroadcastSignInResult {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppBroadcastSignInResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppBroadcastSignInResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastSignInResult{}
      impl::std::marker::Copy for AppBroadcastSignInResult{}
      impl AppBroadcastSignInResult {
        #![allow(non_upper_case_globals)]pub const Success:Self = Self(0i32);
        pub const AuthenticationFailed:Self = Self(1i32);
        pub const Unauthorized:Self = Self(2i32);
        pub const ServiceUnavailable:Self = Self(3i32);
        pub const Unknown:Self = Self(4i32);
        
      }unsafe impl::winrt::Abi for AppBroadcastSignInResult {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastSignInResult {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppBroadcastSignInResult;i4)",);
        
      }#[repr(transparent)]pub struct IAppBroadcastSignInStateChangedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastSignInStateChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastSignInStateChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastSignInStateChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastSignInStateChangedEventArgs{}
      impl IAppBroadcastSignInStateChangedEventArgs {
        pub fn sign_in_state(&self) ->  ::winrt::Result<AppBroadcastSignInState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastSignInState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastSignInState>(result__)
          }
        }pub fn result(&self) ->  ::winrt::Result<AppBroadcastSignInResult>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastSignInResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastSignInResult>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastSignInStateChangedEventArgs {
        type Vtable = IAppBroadcastSignInStateChangedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(45519524,22809,19102,[141,94,201,187,13,211,55,122],);
        
      }#[repr(C)]pub struct IAppBroadcastSignInStateChangedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastSignInState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastSignInResult,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastSignInStateChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{02b692a4-5919-4a9e-8d5e-c9bb0dd3377a}")
        };
        
      }impl::std::convert::From<IAppBroadcastSignInStateChangedEventArgs>for::winrt::Object {
        fn from(value:IAppBroadcastSignInStateChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastSignInStateChangedEventArgs>for::winrt::Object {
        fn from(value: &IAppBroadcastSignInStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastSignInStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastSignInStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastSignInStateChangedEventArgs(::winrt::Object);
      impl AppBroadcastSignInStateChangedEventArgs {
        pub fn sign_in_state(&self) ->  ::winrt::Result<AppBroadcastSignInState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastSignInState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastSignInState>(result__)
          }
        }pub fn result(&self) ->  ::winrt::Result<AppBroadcastSignInResult>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastSignInResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastSignInResult>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastSignInStateChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastSignInStateChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastSignInStateChangedEventArgs{}
      impl::std::fmt::Debug for AppBroadcastSignInStateChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastSignInStateChangedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastSignInStateChangedEventArgs";
        
      }unsafe impl::winrt::Interface for AppBroadcastSignInStateChangedEventArgs {
        type Vtable = IAppBroadcastSignInStateChangedEventArgs_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastSignInStateChangedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastSignInStateChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastSignInStateChangedEventArgs;{02b692a4-5919-4a9e-8d5e-c9bb0dd3377a})");
        
      }impl::std::convert::From<AppBroadcastSignInStateChangedEventArgs>for::winrt::Object {
        fn from(value:AppBroadcastSignInStateChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastSignInStateChangedEventArgs>for::winrt::Object {
        fn from(value: &AppBroadcastSignInStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastSignInStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastSignInStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastSignInStateChangedEventArgs>for IAppBroadcastSignInStateChangedEventArgs {
        fn from(value:AppBroadcastSignInStateChangedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastSignInStateChangedEventArgs>for IAppBroadcastSignInStateChangedEventArgs {
        fn from(value: &AppBroadcastSignInStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastSignInStateChangedEventArgs>>for AppBroadcastSignInStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastSignInStateChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastSignInStateChangedEventArgs, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastSignInStateChangedEventArgs>>for& 'a AppBroadcastSignInStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastSignInStateChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastSignInStateChangedEventArgs, >::into(::std::clone::Clone::clone(self,)))
        }
      }#[repr(transparent)]pub struct IAppBroadcastBackgroundServiceSignInInfo(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastBackgroundServiceSignInInfo {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastBackgroundServiceSignInInfo {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastBackgroundServiceSignInInfo {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastBackgroundServiceSignInInfo{}
      impl IAppBroadcastBackgroundServiceSignInInfo {
        pub fn sign_in_state(&self) ->  ::winrt::Result<AppBroadcastSignInState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastSignInState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastSignInState>(result__)
          }
        }pub fn set_oauth_request_uri< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Uri>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn oauth_request_uri(&self) ->  ::winrt::Result<super::super::foundation::Uri>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Uri as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::Uri>(result__)
          }
        }pub fn set_oauth_callback_uri< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Uri>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn oauth_callback_uri(&self) ->  ::winrt::Result<super::super::foundation::Uri>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Uri as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::Uri>(result__)
          }
        }pub fn authentication_result(&self,) ->  ::winrt::Result<super::super::security::authentication::web::WebAuthenticationResult, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::security::authentication::web::WebAuthenticationResult as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::security::authentication::web::WebAuthenticationResult>(result__)
          }
        }pub fn set_user_name< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn user_name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn sign_in_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundServiceSignInInfo,AppBroadcastSignInStateChangedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_sign_in_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastBackgroundServiceSignInInfo {
        type Vtable = IAppBroadcastBackgroundServiceSignInInfo_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1584616053,35016,20170,[137,186,72,37,152,93,184,128],);
        
      }#[repr(C)]pub struct IAppBroadcastBackgroundServiceSignInInfo_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastSignInState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastBackgroundServiceSignInInfo {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{5e735275-88c8-4eca-89ba-4825985db880}")
        };
        
      }impl::std::convert::From<IAppBroadcastBackgroundServiceSignInInfo>for::winrt::Object {
        fn from(value:IAppBroadcastBackgroundServiceSignInInfo) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastBackgroundServiceSignInInfo>for::winrt::Object {
        fn from(value: &IAppBroadcastBackgroundServiceSignInInfo) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastBackgroundServiceSignInInfo {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastBackgroundServiceSignInInfo {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAppBroadcastBackgroundServiceSignInInfo2(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastBackgroundServiceSignInInfo2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastBackgroundServiceSignInInfo2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastBackgroundServiceSignInInfo2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastBackgroundServiceSignInInfo2{}
      impl IAppBroadcastBackgroundServiceSignInInfo2 {
        pub fn user_name_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundServiceSignInInfo, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_user_name_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastBackgroundServiceSignInInfo2 {
        type Vtable = IAppBroadcastBackgroundServiceSignInInfo2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2432968796,25295,19004,[167,238,174,181,7,64,70,69],);
        
      }#[repr(C)]pub struct IAppBroadcastBackgroundServiceSignInInfo2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastBackgroundServiceSignInInfo2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{9104285c-62cf-4a3c-a7ee-aeb507404645}")
        };
        
      }impl::std::convert::From<IAppBroadcastBackgroundServiceSignInInfo2>for::winrt::Object {
        fn from(value:IAppBroadcastBackgroundServiceSignInInfo2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastBackgroundServiceSignInInfo2>for::winrt::Object {
        fn from(value: &IAppBroadcastBackgroundServiceSignInInfo2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastBackgroundServiceSignInInfo2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastBackgroundServiceSignInInfo2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastBackgroundServiceSignInInfo(::winrt::Object);
      impl AppBroadcastBackgroundServiceSignInInfo {
        pub fn sign_in_state(&self) ->  ::winrt::Result<AppBroadcastSignInState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastSignInState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastSignInState>(result__)
          }
        }pub fn set_oauth_request_uri< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Uri>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn oauth_request_uri(&self) ->  ::winrt::Result<super::super::foundation::Uri>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Uri as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::Uri>(result__)
          }
        }pub fn set_oauth_callback_uri< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Uri>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn oauth_callback_uri(&self) ->  ::winrt::Result<super::super::foundation::Uri>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Uri as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::Uri>(result__)
          }
        }pub fn authentication_result(&self,) ->  ::winrt::Result<super::super::security::authentication::web::WebAuthenticationResult, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::security::authentication::web::WebAuthenticationResult as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::security::authentication::web::WebAuthenticationResult>(result__)
          }
        }pub fn set_user_name< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn user_name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn sign_in_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundServiceSignInInfo,AppBroadcastSignInStateChangedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_sign_in_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn user_name_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundServiceSignInInfo, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IAppBroadcastBackgroundServiceSignInInfo2>(self,).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_user_name_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppBroadcastBackgroundServiceSignInInfo2>(self,).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for AppBroadcastBackgroundServiceSignInInfo {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastBackgroundServiceSignInInfo {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastBackgroundServiceSignInInfo{}
      impl::std::fmt::Debug for AppBroadcastBackgroundServiceSignInInfo {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastBackgroundServiceSignInInfo {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastBackgroundServiceSignInInfo";
        
      }unsafe impl::winrt::Interface for AppBroadcastBackgroundServiceSignInInfo {
        type Vtable = IAppBroadcastBackgroundServiceSignInInfo_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastBackgroundServiceSignInInfo as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastBackgroundServiceSignInInfo {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastBackgroundServiceSignInInfo;{5e735275-88c8-4eca-89ba-4825985db880})");
        
      }impl::std::convert::From<AppBroadcastBackgroundServiceSignInInfo>for::winrt::Object {
        fn from(value:AppBroadcastBackgroundServiceSignInInfo) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastBackgroundServiceSignInInfo>for::winrt::Object {
        fn from(value: &AppBroadcastBackgroundServiceSignInInfo) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastBackgroundServiceSignInInfo {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastBackgroundServiceSignInInfo {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastBackgroundServiceSignInInfo>for IAppBroadcastBackgroundServiceSignInInfo {
        fn from(value:AppBroadcastBackgroundServiceSignInInfo) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastBackgroundServiceSignInInfo>for IAppBroadcastBackgroundServiceSignInInfo {
        fn from(value: &AppBroadcastBackgroundServiceSignInInfo) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastBackgroundServiceSignInInfo>>for AppBroadcastBackgroundServiceSignInInfo {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastBackgroundServiceSignInInfo>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastBackgroundServiceSignInInfo, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastBackgroundServiceSignInInfo>>for& 'a AppBroadcastBackgroundServiceSignInInfo {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastBackgroundServiceSignInInfo>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastBackgroundServiceSignInInfo, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<AppBroadcastBackgroundServiceSignInInfo>for IAppBroadcastBackgroundServiceSignInInfo2 {
        fn from(value:AppBroadcastBackgroundServiceSignInInfo) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AppBroadcastBackgroundServiceSignInInfo>for IAppBroadcastBackgroundServiceSignInInfo2 {
        fn from(value: &AppBroadcastBackgroundServiceSignInInfo) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastBackgroundServiceSignInInfo2>>for AppBroadcastBackgroundServiceSignInInfo {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastBackgroundServiceSignInInfo2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastBackgroundServiceSignInInfo2, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastBackgroundServiceSignInInfo2>>for& 'a AppBroadcastBackgroundServiceSignInInfo {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastBackgroundServiceSignInInfo2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastBackgroundServiceSignInInfo2, >::into(::std::clone::Clone::clone(self,)))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppBroadcastStreamState(i32);
      impl::std::convert::From<i32>for AppBroadcastStreamState {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppBroadcastStreamState {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppBroadcastStreamState {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppBroadcastStreamState {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppBroadcastStreamState {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastStreamState{}
      impl::std::marker::Copy for AppBroadcastStreamState{}
      impl AppBroadcastStreamState {
        #![allow(non_upper_case_globals)]pub const Initializing:Self = Self(0i32);
        pub const StreamReady:Self = Self(1i32);
        pub const Started:Self = Self(2i32);
        pub const Paused:Self = Self(3i32);
        pub const Terminated:Self = Self(4i32);
        
      }unsafe impl::winrt::Abi for AppBroadcastStreamState {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastStreamState {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppBroadcastStreamState;i4)",);
        
      }#[repr(transparent)]pub struct IAppBroadcastStreamAudioHeader(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastStreamAudioHeader {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastStreamAudioHeader {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastStreamAudioHeader {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastStreamAudioHeader{}
      impl IAppBroadcastStreamAudioHeader {
        pub fn absolute_timestamp(&self,) ->  ::winrt::Result<super::super::foundation::DateTime>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::DateTime as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::DateTime>(result__)
          }
        }pub fn relative_timestamp(&self,) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn duration(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn has_discontinuity(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn frame_id(&self) ->  ::winrt::Result<u64>{
          let this = self;
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u64>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastStreamAudioHeader {
        type Vtable = IAppBroadcastStreamAudioHeader_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3206653296,27512,16918,[159,7,90,255,82,86,241,183],);
        
      }#[repr(C)]pub struct IAppBroadcastStreamAudioHeader_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::DateTime_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u64,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastStreamAudioHeader {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{bf21a570-6b78-4216-9f07-5aff5256f1b7}")
        };
        
      }impl::std::convert::From<IAppBroadcastStreamAudioHeader>for::winrt::Object {
        fn from(value:IAppBroadcastStreamAudioHeader) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastStreamAudioHeader>for::winrt::Object {
        fn from(value: &IAppBroadcastStreamAudioHeader) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastStreamAudioHeader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastStreamAudioHeader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastStreamAudioHeader(::winrt::Object);
      impl AppBroadcastStreamAudioHeader {
        pub fn absolute_timestamp(&self,) ->  ::winrt::Result<super::super::foundation::DateTime>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::DateTime as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::DateTime>(result__)
          }
        }pub fn relative_timestamp(&self,) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn duration(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn has_discontinuity(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn frame_id(&self) ->  ::winrt::Result<u64>{
          let this = self;
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u64>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastStreamAudioHeader {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastStreamAudioHeader {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastStreamAudioHeader{}
      impl::std::fmt::Debug for AppBroadcastStreamAudioHeader {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastStreamAudioHeader {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastStreamAudioHeader";
        
      }unsafe impl::winrt::Interface for AppBroadcastStreamAudioHeader {
        type Vtable = IAppBroadcastStreamAudioHeader_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastStreamAudioHeader as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastStreamAudioHeader {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastStreamAudioHeader;{bf21a570-6b78-4216-9f07-5aff5256f1b7})");
        
      }impl::std::convert::From<AppBroadcastStreamAudioHeader>for::winrt::Object {
        fn from(value:AppBroadcastStreamAudioHeader) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastStreamAudioHeader>for::winrt::Object {
        fn from(value: &AppBroadcastStreamAudioHeader) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastStreamAudioHeader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastStreamAudioHeader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastStreamAudioHeader>for IAppBroadcastStreamAudioHeader {
        fn from(value:AppBroadcastStreamAudioHeader) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastStreamAudioHeader>for IAppBroadcastStreamAudioHeader {
        fn from(value: &AppBroadcastStreamAudioHeader) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastStreamAudioHeader>>for AppBroadcastStreamAudioHeader {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastStreamAudioHeader>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastStreamAudioHeader>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastStreamAudioHeader>>for& 'a AppBroadcastStreamAudioHeader {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastStreamAudioHeader>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastStreamAudioHeader>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct IAppBroadcastStreamAudioFrame(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastStreamAudioFrame {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastStreamAudioFrame {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastStreamAudioFrame {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastStreamAudioFrame{}
      impl IAppBroadcastStreamAudioFrame {
        pub fn audio_header(&self) ->  ::winrt::Result<AppBroadcastStreamAudioHeader>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastStreamAudioHeader as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastStreamAudioHeader>(result__)
          }
        }pub fn audio_buffer(&self,) ->  ::winrt::Result<super::super::storage::streams::IBuffer>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::streams::IBuffer as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::storage::streams::IBuffer>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastStreamAudioFrame {
        type Vtable = IAppBroadcastStreamAudioFrame_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4020980424,8634,17727,[139,183,94,147,138,46,154,116],);
        
      }#[repr(C)]pub struct IAppBroadcastStreamAudioFrame_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastStreamAudioFrame {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{efab4ac8-21ba-453f-8bb7-5e938a2e9a74}")
        };
        
      }impl::std::convert::From<IAppBroadcastStreamAudioFrame>for::winrt::Object {
        fn from(value:IAppBroadcastStreamAudioFrame) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastStreamAudioFrame>for::winrt::Object {
        fn from(value: &IAppBroadcastStreamAudioFrame) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastStreamAudioFrame {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastStreamAudioFrame {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastStreamAudioFrame(::winrt::Object);
      impl AppBroadcastStreamAudioFrame {
        pub fn audio_header(&self) ->  ::winrt::Result<AppBroadcastStreamAudioHeader>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastStreamAudioHeader as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastStreamAudioHeader>(result__)
          }
        }pub fn audio_buffer(&self,) ->  ::winrt::Result<super::super::storage::streams::IBuffer>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::streams::IBuffer as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::storage::streams::IBuffer>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastStreamAudioFrame {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastStreamAudioFrame {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastStreamAudioFrame{}
      impl::std::fmt::Debug for AppBroadcastStreamAudioFrame {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastStreamAudioFrame {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastStreamAudioFrame";
        
      }unsafe impl::winrt::Interface for AppBroadcastStreamAudioFrame {
        type Vtable = IAppBroadcastStreamAudioFrame_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastStreamAudioFrame as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastStreamAudioFrame {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastStreamAudioFrame;{efab4ac8-21ba-453f-8bb7-5e938a2e9a74})");
        
      }impl::std::convert::From<AppBroadcastStreamAudioFrame>for::winrt::Object {
        fn from(value:AppBroadcastStreamAudioFrame) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastStreamAudioFrame>for::winrt::Object {
        fn from(value: &AppBroadcastStreamAudioFrame) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastStreamAudioFrame {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastStreamAudioFrame {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastStreamAudioFrame>for IAppBroadcastStreamAudioFrame {
        fn from(value:AppBroadcastStreamAudioFrame) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastStreamAudioFrame>for IAppBroadcastStreamAudioFrame {
        fn from(value: &AppBroadcastStreamAudioFrame) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastStreamAudioFrame>>for AppBroadcastStreamAudioFrame {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastStreamAudioFrame>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastStreamAudioFrame>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastStreamAudioFrame>>for& 'a AppBroadcastStreamAudioFrame {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastStreamAudioFrame>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastStreamAudioFrame>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct IAppBroadcastStreamVideoHeader(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastStreamVideoHeader {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastStreamVideoHeader {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastStreamVideoHeader {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastStreamVideoHeader{}
      impl IAppBroadcastStreamVideoHeader {
        pub fn absolute_timestamp(&self,) ->  ::winrt::Result<super::super::foundation::DateTime>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::DateTime as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::DateTime>(result__)
          }
        }pub fn relative_timestamp(&self,) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn duration(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn is_key_frame(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn has_discontinuity(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn frame_id(&self) ->  ::winrt::Result<u64>{
          let this = self;
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u64>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastStreamVideoHeader {
        type Vtable = IAppBroadcastStreamVideoHeader_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(194952910,32306,17197,[140,162,54,191,16,185,244,98],);
        
      }#[repr(C)]pub struct IAppBroadcastStreamVideoHeader_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::DateTime_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u64,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastStreamVideoHeader {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{0b9ebece-7e32-432d-8ca2-36bf10b9f462}")
        };
        
      }impl::std::convert::From<IAppBroadcastStreamVideoHeader>for::winrt::Object {
        fn from(value:IAppBroadcastStreamVideoHeader) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastStreamVideoHeader>for::winrt::Object {
        fn from(value: &IAppBroadcastStreamVideoHeader) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastStreamVideoHeader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastStreamVideoHeader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastStreamVideoHeader(::winrt::Object);
      impl AppBroadcastStreamVideoHeader {
        pub fn absolute_timestamp(&self,) ->  ::winrt::Result<super::super::foundation::DateTime>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::DateTime as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::DateTime>(result__)
          }
        }pub fn relative_timestamp(&self,) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn duration(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn is_key_frame(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn has_discontinuity(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn frame_id(&self) ->  ::winrt::Result<u64>{
          let this = self;
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u64>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastStreamVideoHeader {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastStreamVideoHeader {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastStreamVideoHeader{}
      impl::std::fmt::Debug for AppBroadcastStreamVideoHeader {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastStreamVideoHeader {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastStreamVideoHeader";
        
      }unsafe impl::winrt::Interface for AppBroadcastStreamVideoHeader {
        type Vtable = IAppBroadcastStreamVideoHeader_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastStreamVideoHeader as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastStreamVideoHeader {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastStreamVideoHeader;{0b9ebece-7e32-432d-8ca2-36bf10b9f462})");
        
      }impl::std::convert::From<AppBroadcastStreamVideoHeader>for::winrt::Object {
        fn from(value:AppBroadcastStreamVideoHeader) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastStreamVideoHeader>for::winrt::Object {
        fn from(value: &AppBroadcastStreamVideoHeader) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastStreamVideoHeader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastStreamVideoHeader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastStreamVideoHeader>for IAppBroadcastStreamVideoHeader {
        fn from(value:AppBroadcastStreamVideoHeader) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastStreamVideoHeader>for IAppBroadcastStreamVideoHeader {
        fn from(value: &AppBroadcastStreamVideoHeader) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastStreamVideoHeader>>for AppBroadcastStreamVideoHeader {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastStreamVideoHeader>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastStreamVideoHeader>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastStreamVideoHeader>>for& 'a AppBroadcastStreamVideoHeader {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastStreamVideoHeader>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastStreamVideoHeader>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct IAppBroadcastStreamVideoFrame(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastStreamVideoFrame {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastStreamVideoFrame {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastStreamVideoFrame {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastStreamVideoFrame{}
      impl IAppBroadcastStreamVideoFrame {
        pub fn video_header(&self) ->  ::winrt::Result<AppBroadcastStreamVideoHeader>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastStreamVideoHeader as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastStreamVideoHeader>(result__)
          }
        }pub fn video_buffer(&self,) ->  ::winrt::Result<super::super::storage::streams::IBuffer>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::streams::IBuffer as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::storage::streams::IBuffer>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastStreamVideoFrame {
        type Vtable = IAppBroadcastStreamVideoFrame_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(261607211,51684,20104,[129,148,216,20,203,213,133,216],);
        
      }#[repr(C)]pub struct IAppBroadcastStreamVideoFrame_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastStreamVideoFrame {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{0f97cf2b-c9e4-4e88-8194-d814cbd585d8}")
        };
        
      }impl::std::convert::From<IAppBroadcastStreamVideoFrame>for::winrt::Object {
        fn from(value:IAppBroadcastStreamVideoFrame) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastStreamVideoFrame>for::winrt::Object {
        fn from(value: &IAppBroadcastStreamVideoFrame) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastStreamVideoFrame {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastStreamVideoFrame {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastStreamVideoFrame(::winrt::Object);
      impl AppBroadcastStreamVideoFrame {
        pub fn video_header(&self) ->  ::winrt::Result<AppBroadcastStreamVideoHeader>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastStreamVideoHeader as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastStreamVideoHeader>(result__)
          }
        }pub fn video_buffer(&self,) ->  ::winrt::Result<super::super::storage::streams::IBuffer>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::streams::IBuffer as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::storage::streams::IBuffer>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastStreamVideoFrame {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastStreamVideoFrame {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastStreamVideoFrame{}
      impl::std::fmt::Debug for AppBroadcastStreamVideoFrame {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastStreamVideoFrame {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastStreamVideoFrame";
        
      }unsafe impl::winrt::Interface for AppBroadcastStreamVideoFrame {
        type Vtable = IAppBroadcastStreamVideoFrame_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastStreamVideoFrame as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastStreamVideoFrame {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastStreamVideoFrame;{0f97cf2b-c9e4-4e88-8194-d814cbd585d8})");
        
      }impl::std::convert::From<AppBroadcastStreamVideoFrame>for::winrt::Object {
        fn from(value:AppBroadcastStreamVideoFrame) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastStreamVideoFrame>for::winrt::Object {
        fn from(value: &AppBroadcastStreamVideoFrame) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastStreamVideoFrame {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastStreamVideoFrame {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastStreamVideoFrame>for IAppBroadcastStreamVideoFrame {
        fn from(value:AppBroadcastStreamVideoFrame) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastStreamVideoFrame>for IAppBroadcastStreamVideoFrame {
        fn from(value: &AppBroadcastStreamVideoFrame) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastStreamVideoFrame>>for AppBroadcastStreamVideoFrame {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastStreamVideoFrame>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastStreamVideoFrame>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastStreamVideoFrame>>for& 'a AppBroadcastStreamVideoFrame {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastStreamVideoFrame>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastStreamVideoFrame>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct IAppBroadcastStreamReader(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastStreamReader {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastStreamReader {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastStreamReader {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastStreamReader{}
      impl IAppBroadcastStreamReader {
        pub fn audio_channels(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn audio_sample_rate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn audio_aac_sequence(&self,) ->  ::winrt::Result<super::super::storage::streams::IBuffer>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::streams::IBuffer as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::storage::streams::IBuffer>(result__)
          }
        }pub fn audio_bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn try_get_next_audio_frame(&self,) ->  ::winrt::Result<AppBroadcastStreamAudioFrame>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastStreamAudioFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastStreamAudioFrame>(result__)
          }
        }pub fn video_width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn video_height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn video_bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn try_get_next_video_frame(&self,) ->  ::winrt::Result<AppBroadcastStreamVideoFrame>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastStreamVideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastStreamVideoFrame>(result__)
          }
        }pub fn audio_frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastStreamReader, ::winrt::Object, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_audio_frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn video_frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastStreamReader, ::winrt::Object, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_video_frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastStreamReader {
        type Vtable = IAppBroadcastStreamReader_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3006840057,13156,17504,[181,241,60,194,121,106,138,162],);
        
      }#[repr(C)]pub struct IAppBroadcastStreamReader_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastStreamReader {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{b338bcf9-3364-4460-b5f1-3cc2796a8aa2}")
        };
        
      }impl::std::convert::From<IAppBroadcastStreamReader>for::winrt::Object {
        fn from(value:IAppBroadcastStreamReader) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastStreamReader>for::winrt::Object {
        fn from(value: &IAppBroadcastStreamReader) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastStreamReader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastStreamReader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastStreamReader(::winrt::Object);
      impl AppBroadcastStreamReader {
        pub fn audio_channels(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn audio_sample_rate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn audio_aac_sequence(&self,) ->  ::winrt::Result<super::super::storage::streams::IBuffer>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::streams::IBuffer as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::storage::streams::IBuffer>(result__)
          }
        }pub fn audio_bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn try_get_next_audio_frame(&self,) ->  ::winrt::Result<AppBroadcastStreamAudioFrame>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastStreamAudioFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastStreamAudioFrame>(result__)
          }
        }pub fn video_width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn video_height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn video_bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn try_get_next_video_frame(&self,) ->  ::winrt::Result<AppBroadcastStreamVideoFrame>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastStreamVideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastStreamVideoFrame>(result__)
          }
        }pub fn audio_frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastStreamReader, ::winrt::Object, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_audio_frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn video_frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastStreamReader, ::winrt::Object, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_video_frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for AppBroadcastStreamReader {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastStreamReader {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastStreamReader{}
      impl::std::fmt::Debug for AppBroadcastStreamReader {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastStreamReader {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastStreamReader";
        
      }unsafe impl::winrt::Interface for AppBroadcastStreamReader {
        type Vtable = IAppBroadcastStreamReader_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastStreamReader as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastStreamReader {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastStreamReader;{b338bcf9-3364-4460-b5f1-3cc2796a8aa2})");
        
      }impl::std::convert::From<AppBroadcastStreamReader>for::winrt::Object {
        fn from(value:AppBroadcastStreamReader) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastStreamReader>for::winrt::Object {
        fn from(value: &AppBroadcastStreamReader) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastStreamReader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastStreamReader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastStreamReader>for IAppBroadcastStreamReader {
        fn from(value:AppBroadcastStreamReader) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastStreamReader>for IAppBroadcastStreamReader {
        fn from(value: &AppBroadcastStreamReader) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastStreamReader>>for AppBroadcastStreamReader {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastStreamReader>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastStreamReader>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastStreamReader>>for& 'a AppBroadcastStreamReader {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastStreamReader>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastStreamReader>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAppBroadcastStreamStateChangedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastStreamStateChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastStreamStateChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastStreamStateChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastStreamStateChangedEventArgs{}
      impl IAppBroadcastStreamStateChangedEventArgs {
        pub fn stream_state(&self) ->  ::winrt::Result<AppBroadcastStreamState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastStreamState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastStreamState>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastStreamStateChangedEventArgs {
        type Vtable = IAppBroadcastStreamStateChangedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1359521587,53256,19081,[147,190,88,174,217,97,55,78],);
        
      }#[repr(C)]pub struct IAppBroadcastStreamStateChangedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastStreamState,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastStreamStateChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{5108a733-d008-4a89-93be-58aed961374e}")
        };
        
      }impl::std::convert::From<IAppBroadcastStreamStateChangedEventArgs>for::winrt::Object {
        fn from(value:IAppBroadcastStreamStateChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastStreamStateChangedEventArgs>for::winrt::Object {
        fn from(value: &IAppBroadcastStreamStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastStreamStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastStreamStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastStreamStateChangedEventArgs(::winrt::Object);
      impl AppBroadcastStreamStateChangedEventArgs {
        pub fn stream_state(&self) ->  ::winrt::Result<AppBroadcastStreamState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastStreamState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastStreamState>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastStreamStateChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastStreamStateChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastStreamStateChangedEventArgs{}
      impl::std::fmt::Debug for AppBroadcastStreamStateChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastStreamStateChangedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastStreamStateChangedEventArgs";
        
      }unsafe impl::winrt::Interface for AppBroadcastStreamStateChangedEventArgs {
        type Vtable = IAppBroadcastStreamStateChangedEventArgs_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastStreamStateChangedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastStreamStateChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastStreamStateChangedEventArgs;{5108a733-d008-4a89-93be-58aed961374e})");
        
      }impl::std::convert::From<AppBroadcastStreamStateChangedEventArgs>for::winrt::Object {
        fn from(value:AppBroadcastStreamStateChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastStreamStateChangedEventArgs>for::winrt::Object {
        fn from(value: &AppBroadcastStreamStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastStreamStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastStreamStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastStreamStateChangedEventArgs>for IAppBroadcastStreamStateChangedEventArgs {
        fn from(value:AppBroadcastStreamStateChangedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastStreamStateChangedEventArgs>for IAppBroadcastStreamStateChangedEventArgs {
        fn from(value: &AppBroadcastStreamStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastStreamStateChangedEventArgs>>for AppBroadcastStreamStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastStreamStateChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastStreamStateChangedEventArgs, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastStreamStateChangedEventArgs>>for& 'a AppBroadcastStreamStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastStreamStateChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastStreamStateChangedEventArgs, >::into(::std::clone::Clone::clone(self,)))
        }
      }#[repr(transparent)]pub struct IAppBroadcastBackgroundServiceStreamInfo(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastBackgroundServiceStreamInfo {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastBackgroundServiceStreamInfo {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastBackgroundServiceStreamInfo {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastBackgroundServiceStreamInfo{}
      impl IAppBroadcastBackgroundServiceStreamInfo {
        pub fn stream_state(&self) ->  ::winrt::Result<AppBroadcastStreamState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastStreamState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastStreamState>(result__)
          }
        }pub fn set_desired_video_encoding_bitrate(&self,value:u64,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn desired_video_encoding_bitrate(&self) ->  ::winrt::Result<u64>{
          let this = self;
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<u64>(result__)
          }
        }pub fn set_bandwidth_test_bitrate(&self,value:u64) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn bandwidth_test_bitrate(&self) ->  ::winrt::Result<u64>{
          let this = self;
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u64>(result__)
          }
        }pub fn set_audio_codec< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn audio_codec(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn broadcast_stream_reader(&self) ->  ::winrt::Result<AppBroadcastStreamReader>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastStreamReader as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastStreamReader>(result__)
          }
        }pub fn stream_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundServiceStreamInfo,AppBroadcastStreamStateChangedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_stream_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn video_encoding_resolution_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundServiceStreamInfo, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_video_encoding_resolution_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn video_encoding_bitrate_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundServiceStreamInfo, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_video_encoding_bitrate_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastBackgroundServiceStreamInfo {
        type Vtable = IAppBroadcastBackgroundServiceStreamInfo_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(836502204,39178,18692,[170,150,254,54,67,129,241,54],);
        
      }#[repr(C)]pub struct IAppBroadcastBackgroundServiceStreamInfo_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastStreamState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastBackgroundServiceStreamInfo {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{31dc02bc-990a-4904-aa96-fe364381f136}")
        };
        
      }impl::std::convert::From<IAppBroadcastBackgroundServiceStreamInfo>for::winrt::Object {
        fn from(value:IAppBroadcastBackgroundServiceStreamInfo) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastBackgroundServiceStreamInfo>for::winrt::Object {
        fn from(value: &IAppBroadcastBackgroundServiceStreamInfo) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastBackgroundServiceStreamInfo {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastBackgroundServiceStreamInfo {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAppBroadcastBackgroundServiceStreamInfo2(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastBackgroundServiceStreamInfo2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastBackgroundServiceStreamInfo2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastBackgroundServiceStreamInfo2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastBackgroundServiceStreamInfo2{}
      impl IAppBroadcastBackgroundServiceStreamInfo2 {
        pub fn report_problem_with_stream(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastBackgroundServiceStreamInfo2 {
        type Vtable = IAppBroadcastBackgroundServiceStreamInfo2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3172900717,38108,20430,[149,65,169,241,41,89,99,52],);
        
      }#[repr(C)]pub struct IAppBroadcastBackgroundServiceStreamInfo2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastBackgroundServiceStreamInfo2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{bd1e9f6d-94dc-4fce-9541-a9f129596334}")
        };
        
      }impl::std::convert::From<IAppBroadcastBackgroundServiceStreamInfo2>for::winrt::Object {
        fn from(value:IAppBroadcastBackgroundServiceStreamInfo2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastBackgroundServiceStreamInfo2>for::winrt::Object {
        fn from(value: &IAppBroadcastBackgroundServiceStreamInfo2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastBackgroundServiceStreamInfo2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastBackgroundServiceStreamInfo2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastBackgroundServiceStreamInfo(::winrt::Object);
      impl AppBroadcastBackgroundServiceStreamInfo {
        pub fn stream_state(&self) ->  ::winrt::Result<AppBroadcastStreamState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastStreamState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastStreamState>(result__)
          }
        }pub fn set_desired_video_encoding_bitrate(&self,value:u64,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn desired_video_encoding_bitrate(&self) ->  ::winrt::Result<u64>{
          let this = self;
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<u64>(result__)
          }
        }pub fn set_bandwidth_test_bitrate(&self,value:u64) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn bandwidth_test_bitrate(&self) ->  ::winrt::Result<u64>{
          let this = self;
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u64>(result__)
          }
        }pub fn set_audio_codec< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn audio_codec(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn broadcast_stream_reader(&self) ->  ::winrt::Result<AppBroadcastStreamReader>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastStreamReader as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastStreamReader>(result__)
          }
        }pub fn stream_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundServiceStreamInfo,AppBroadcastStreamStateChangedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_stream_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn video_encoding_resolution_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundServiceStreamInfo, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_video_encoding_resolution_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn video_encoding_bitrate_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundServiceStreamInfo, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_video_encoding_bitrate_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn report_problem_with_stream(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppBroadcastBackgroundServiceStreamInfo2>(self,).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }
      }impl::std::clone::Clone for AppBroadcastBackgroundServiceStreamInfo {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastBackgroundServiceStreamInfo {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastBackgroundServiceStreamInfo{}
      impl::std::fmt::Debug for AppBroadcastBackgroundServiceStreamInfo {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastBackgroundServiceStreamInfo {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastBackgroundServiceStreamInfo";
        
      }unsafe impl::winrt::Interface for AppBroadcastBackgroundServiceStreamInfo {
        type Vtable = IAppBroadcastBackgroundServiceStreamInfo_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastBackgroundServiceStreamInfo as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastBackgroundServiceStreamInfo {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastBackgroundServiceStreamInfo;{31dc02bc-990a-4904-aa96-fe364381f136})");
        
      }impl::std::convert::From<AppBroadcastBackgroundServiceStreamInfo>for::winrt::Object {
        fn from(value:AppBroadcastBackgroundServiceStreamInfo) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastBackgroundServiceStreamInfo>for::winrt::Object {
        fn from(value: &AppBroadcastBackgroundServiceStreamInfo) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastBackgroundServiceStreamInfo {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastBackgroundServiceStreamInfo {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastBackgroundServiceStreamInfo>for IAppBroadcastBackgroundServiceStreamInfo {
        fn from(value:AppBroadcastBackgroundServiceStreamInfo) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastBackgroundServiceStreamInfo>for IAppBroadcastBackgroundServiceStreamInfo {
        fn from(value: &AppBroadcastBackgroundServiceStreamInfo) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastBackgroundServiceStreamInfo>>for AppBroadcastBackgroundServiceStreamInfo {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastBackgroundServiceStreamInfo>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastBackgroundServiceStreamInfo, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastBackgroundServiceStreamInfo>>for& 'a AppBroadcastBackgroundServiceStreamInfo {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastBackgroundServiceStreamInfo>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastBackgroundServiceStreamInfo, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<AppBroadcastBackgroundServiceStreamInfo>for IAppBroadcastBackgroundServiceStreamInfo2 {
        fn from(value:AppBroadcastBackgroundServiceStreamInfo) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AppBroadcastBackgroundServiceStreamInfo>for IAppBroadcastBackgroundServiceStreamInfo2 {
        fn from(value: &AppBroadcastBackgroundServiceStreamInfo) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastBackgroundServiceStreamInfo2>>for AppBroadcastBackgroundServiceStreamInfo {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastBackgroundServiceStreamInfo2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastBackgroundServiceStreamInfo2, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastBackgroundServiceStreamInfo2>>for& 'a AppBroadcastBackgroundServiceStreamInfo {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastBackgroundServiceStreamInfo2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastBackgroundServiceStreamInfo2, >::into(::std::clone::Clone::clone(self,)))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppBroadcastTerminationReason(i32);
      impl::std::convert::From<i32>for AppBroadcastTerminationReason {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppBroadcastTerminationReason {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppBroadcastTerminationReason {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppBroadcastTerminationReason {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppBroadcastTerminationReason {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastTerminationReason{}
      impl::std::marker::Copy for AppBroadcastTerminationReason{}
      impl AppBroadcastTerminationReason {
        #![allow(non_upper_case_globals)]pub const NormalTermination:Self = Self(0i32);
        pub const LostConnectionToService:Self = Self(1i32);
        pub const NoNetworkConnectivity:Self = Self(2i32);
        pub const ServiceAbort:Self = Self(3i32);
        pub const ServiceError:Self = Self(4i32);
        pub const ServiceUnavailable:Self = Self(5i32);
        pub const InternalError:Self = Self(6i32);
        pub const UnsupportedFormat:Self = Self(7i32);
        pub const BackgroundTaskTerminated:Self = Self(8i32);
        pub const BackgroundTaskUnresponsive:Self = Self(9i32);
        
      }unsafe impl::winrt::Abi for AppBroadcastTerminationReason {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastTerminationReason {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppBroadcastTerminationReason;i4)",);
        
      }#[repr(transparent)]pub struct IAppBroadcastHeartbeatRequestedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastHeartbeatRequestedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastHeartbeatRequestedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastHeartbeatRequestedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastHeartbeatRequestedEventArgs{}
      impl IAppBroadcastHeartbeatRequestedEventArgs {
        pub fn set_handled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn handled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastHeartbeatRequestedEventArgs {
        type Vtable = IAppBroadcastHeartbeatRequestedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3466936963,61009,19903,[148,114,121,169,237,78,33,101],);
        
      }#[repr(C)]pub struct IAppBroadcastHeartbeatRequestedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastHeartbeatRequestedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{cea54283-ee51-4dbf-9472-79a9ed4e2165}")
        };
        
      }impl::std::convert::From<IAppBroadcastHeartbeatRequestedEventArgs>for::winrt::Object {
        fn from(value:IAppBroadcastHeartbeatRequestedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastHeartbeatRequestedEventArgs>for::winrt::Object {
        fn from(value: &IAppBroadcastHeartbeatRequestedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastHeartbeatRequestedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastHeartbeatRequestedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastHeartbeatRequestedEventArgs(::winrt::Object);
      impl AppBroadcastHeartbeatRequestedEventArgs {
        pub fn set_handled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn handled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastHeartbeatRequestedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastHeartbeatRequestedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastHeartbeatRequestedEventArgs{}
      impl::std::fmt::Debug for AppBroadcastHeartbeatRequestedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastHeartbeatRequestedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastHeartbeatRequestedEventArgs";
        
      }unsafe impl::winrt::Interface for AppBroadcastHeartbeatRequestedEventArgs {
        type Vtable = IAppBroadcastHeartbeatRequestedEventArgs_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastHeartbeatRequestedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastHeartbeatRequestedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastHeartbeatRequestedEventArgs;{cea54283-ee51-4dbf-9472-79a9ed4e2165})");
        
      }impl::std::convert::From<AppBroadcastHeartbeatRequestedEventArgs>for::winrt::Object {
        fn from(value:AppBroadcastHeartbeatRequestedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastHeartbeatRequestedEventArgs>for::winrt::Object {
        fn from(value: &AppBroadcastHeartbeatRequestedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastHeartbeatRequestedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastHeartbeatRequestedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastHeartbeatRequestedEventArgs>for IAppBroadcastHeartbeatRequestedEventArgs {
        fn from(value:AppBroadcastHeartbeatRequestedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastHeartbeatRequestedEventArgs>for IAppBroadcastHeartbeatRequestedEventArgs {
        fn from(value: &AppBroadcastHeartbeatRequestedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastHeartbeatRequestedEventArgs>>for AppBroadcastHeartbeatRequestedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastHeartbeatRequestedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastHeartbeatRequestedEventArgs, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastHeartbeatRequestedEventArgs>>for& 'a AppBroadcastHeartbeatRequestedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastHeartbeatRequestedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastHeartbeatRequestedEventArgs, >::into(::std::clone::Clone::clone(self,)))
        }
      }#[repr(transparent)]pub struct IAppBroadcastBackgroundService(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastBackgroundService {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastBackgroundService {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastBackgroundService {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastBackgroundService{}
      impl IAppBroadcastBackgroundService {
        pub fn set_plug_in_state(&self,value:AppBroadcastPlugInState,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn plug_in_state(&self) ->  ::winrt::Result<AppBroadcastPlugInState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPlugInState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastPlugInState>(result__)
          }
        }pub fn set_sign_in_info< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,AppBroadcastBackgroundServiceSignInInfo>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn sign_in_info(&self,) ->  ::winrt::Result<AppBroadcastBackgroundServiceSignInInfo>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastBackgroundServiceSignInInfo as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastBackgroundServiceSignInInfo>(result__)
          }
        }pub fn set_stream_info< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,AppBroadcastBackgroundServiceStreamInfo>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn stream_info(&self,) ->  ::winrt::Result<AppBroadcastBackgroundServiceStreamInfo>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastBackgroundServiceStreamInfo as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastBackgroundServiceStreamInfo>(result__)
          }
        }pub fn app_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn broadcast_title(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_viewer_count(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn viewer_count(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn terminate_broadcast(&self,reason:AppBroadcastTerminationReason,provider_specific_reason:u32,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),reason,provider_specific_reason,).ok()
          }
        }pub fn heartbeat_requested< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundService,AppBroadcastHeartbeatRequestedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_heartbeat_requested< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn title_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastBackgroundService {
        type Vtable = IAppBroadcastBackgroundService_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3134318378,64148,18169,[149,252,215,21,17,205,167,11],);
        
      }#[repr(C)]pub struct IAppBroadcastBackgroundService_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:AppBroadcastPlugInState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastPlugInState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,reason:AppBroadcastTerminationReason,provider_specific_reason:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastBackgroundService {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{bad1e72a-fa94-46f9-95fc-d71511cda70b}")
        };
        
      }impl::std::convert::From<IAppBroadcastBackgroundService>for::winrt::Object {
        fn from(value:IAppBroadcastBackgroundService) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastBackgroundService>for::winrt::Object {
        fn from(value: &IAppBroadcastBackgroundService) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastBackgroundService {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastBackgroundService {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAppBroadcastBackgroundService2(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastBackgroundService2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastBackgroundService2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastBackgroundService2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastBackgroundService2{}
      impl IAppBroadcastBackgroundService2 {
        pub fn set_broadcast_title< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn broadcast_language(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_broadcast_language< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn broadcast_channel(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_broadcast_channel< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn broadcast_title_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundService, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_broadcast_title_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn broadcast_language_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundService, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_broadcast_language_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn broadcast_channel_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundService, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_broadcast_channel_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastBackgroundService2 {
        type Vtable = IAppBroadcastBackgroundService2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4237085631,21833,19335,[149,159,35,202,64,31,212,115],);
        
      }#[repr(C)]pub struct IAppBroadcastBackgroundService2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastBackgroundService2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{fc8ccbbf-5549-4b87-959f-23ca401fd473}")
        };
        
      }impl::std::convert::From<IAppBroadcastBackgroundService2>for::winrt::Object {
        fn from(value:IAppBroadcastBackgroundService2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastBackgroundService2>for::winrt::Object {
        fn from(value: &IAppBroadcastBackgroundService2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastBackgroundService2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastBackgroundService2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastBackgroundService(::winrt::Object);
      impl AppBroadcastBackgroundService {
        pub fn set_plug_in_state(&self,value:AppBroadcastPlugInState,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn plug_in_state(&self) ->  ::winrt::Result<AppBroadcastPlugInState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPlugInState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastPlugInState>(result__)
          }
        }pub fn set_sign_in_info< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,AppBroadcastBackgroundServiceSignInInfo>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn sign_in_info(&self,) ->  ::winrt::Result<AppBroadcastBackgroundServiceSignInInfo>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastBackgroundServiceSignInInfo as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastBackgroundServiceSignInInfo>(result__)
          }
        }pub fn set_stream_info< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,AppBroadcastBackgroundServiceStreamInfo>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn stream_info(&self,) ->  ::winrt::Result<AppBroadcastBackgroundServiceStreamInfo>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastBackgroundServiceStreamInfo as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastBackgroundServiceStreamInfo>(result__)
          }
        }pub fn app_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn broadcast_title(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_viewer_count(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn viewer_count(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn terminate_broadcast(&self,reason:AppBroadcastTerminationReason,provider_specific_reason:u32,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),reason,provider_specific_reason,).ok()
          }
        }pub fn heartbeat_requested< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundService,AppBroadcastHeartbeatRequestedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_heartbeat_requested< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn title_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_broadcast_title< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppBroadcastBackgroundService2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn broadcast_language(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IAppBroadcastBackgroundService2>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_broadcast_language< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppBroadcastBackgroundService2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn broadcast_channel(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IAppBroadcastBackgroundService2>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_broadcast_channel< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppBroadcastBackgroundService2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn broadcast_title_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundService, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IAppBroadcastBackgroundService2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_broadcast_title_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppBroadcastBackgroundService2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn broadcast_language_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundService, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IAppBroadcastBackgroundService2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_broadcast_language_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppBroadcastBackgroundService2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn broadcast_channel_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastBackgroundService, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IAppBroadcastBackgroundService2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_broadcast_channel_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppBroadcastBackgroundService2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for AppBroadcastBackgroundService {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastBackgroundService {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastBackgroundService{}
      impl::std::fmt::Debug for AppBroadcastBackgroundService {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastBackgroundService {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastBackgroundService";
        
      }unsafe impl::winrt::Interface for AppBroadcastBackgroundService {
        type Vtable = IAppBroadcastBackgroundService_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastBackgroundService as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastBackgroundService {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastBackgroundService;{bad1e72a-fa94-46f9-95fc-d71511cda70b})");
        
      }impl::std::convert::From<AppBroadcastBackgroundService>for::winrt::Object {
        fn from(value:AppBroadcastBackgroundService) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastBackgroundService>for::winrt::Object {
        fn from(value: &AppBroadcastBackgroundService) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastBackgroundService {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastBackgroundService {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastBackgroundService>for IAppBroadcastBackgroundService {
        fn from(value:AppBroadcastBackgroundService) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastBackgroundService>for IAppBroadcastBackgroundService {
        fn from(value: &AppBroadcastBackgroundService) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastBackgroundService>>for AppBroadcastBackgroundService {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastBackgroundService>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastBackgroundService>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastBackgroundService>>for& 'a AppBroadcastBackgroundService {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastBackgroundService>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastBackgroundService>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<AppBroadcastBackgroundService>for IAppBroadcastBackgroundService2 {
        fn from(value:AppBroadcastBackgroundService) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AppBroadcastBackgroundService>for IAppBroadcastBackgroundService2 {
        fn from(value: &AppBroadcastBackgroundService) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastBackgroundService2>>for AppBroadcastBackgroundService {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastBackgroundService2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastBackgroundService2>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastBackgroundService2>>for& 'a AppBroadcastBackgroundService {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastBackgroundService2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastBackgroundService2>::into(::std::clone::Clone::clone(self),),)
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppBroadcastCameraCaptureState(i32);
      impl::std::convert::From<i32>for AppBroadcastCameraCaptureState {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppBroadcastCameraCaptureState {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppBroadcastCameraCaptureState {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppBroadcastCameraCaptureState {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppBroadcastCameraCaptureState {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastCameraCaptureState{}
      impl::std::marker::Copy for AppBroadcastCameraCaptureState{}
      impl AppBroadcastCameraCaptureState {
        #![allow(non_upper_case_globals)]pub const Stopped:Self = Self(0i32);
        pub const Started:Self = Self(1i32);
        pub const Failed:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for AppBroadcastCameraCaptureState {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastCameraCaptureState {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppBroadcastCameraCaptureState;i4)",);
        
      }#[repr(transparent)]pub struct IAppBroadcastCameraCaptureStateChangedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastCameraCaptureStateChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastCameraCaptureStateChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastCameraCaptureStateChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastCameraCaptureStateChangedEventArgs{}
      impl IAppBroadcastCameraCaptureStateChangedEventArgs {
        pub fn state(&self) ->  ::winrt::Result<AppBroadcastCameraCaptureState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastCameraCaptureState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastCameraCaptureState>(result__)
          }
        }pub fn error_code(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastCameraCaptureStateChangedEventArgs {
        type Vtable = IAppBroadcastCameraCaptureStateChangedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(506678480,47234,19336,[134,146,5,153,154,206,183,15],);
        
      }#[repr(C)]pub struct IAppBroadcastCameraCaptureStateChangedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastCameraCaptureState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastCameraCaptureStateChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{1e334cd0-b882-4b88-8692-05999aceb70f}")
        };
        
      }impl::std::convert::From<IAppBroadcastCameraCaptureStateChangedEventArgs>for::winrt::Object {
        fn from(value:IAppBroadcastCameraCaptureStateChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastCameraCaptureStateChangedEventArgs>for::winrt::Object {
        fn from(value: &IAppBroadcastCameraCaptureStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastCameraCaptureStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastCameraCaptureStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastCameraCaptureStateChangedEventArgs(::winrt::Object);
      impl AppBroadcastCameraCaptureStateChangedEventArgs {
        pub fn state(&self) ->  ::winrt::Result<AppBroadcastCameraCaptureState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastCameraCaptureState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastCameraCaptureState>(result__)
          }
        }pub fn error_code(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastCameraCaptureStateChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastCameraCaptureStateChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastCameraCaptureStateChangedEventArgs{}
      impl::std::fmt::Debug for AppBroadcastCameraCaptureStateChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastCameraCaptureStateChangedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastCameraCaptureStateChangedEventArgs";
        
      }unsafe impl::winrt::Interface for AppBroadcastCameraCaptureStateChangedEventArgs {
        type Vtable = IAppBroadcastCameraCaptureStateChangedEventArgs_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastCameraCaptureStateChangedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastCameraCaptureStateChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastCameraCaptureStateChangedEventArgs;{1e334cd0-b882-4b88-8692-05999aceb70f})");
        
      }impl::std::convert::From<AppBroadcastCameraCaptureStateChangedEventArgs>for::winrt::Object {
        fn from(value:AppBroadcastCameraCaptureStateChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastCameraCaptureStateChangedEventArgs>for::winrt::Object {
        fn from(value: &AppBroadcastCameraCaptureStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastCameraCaptureStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastCameraCaptureStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastCameraCaptureStateChangedEventArgs>for IAppBroadcastCameraCaptureStateChangedEventArgs {
        fn from(value:AppBroadcastCameraCaptureStateChangedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastCameraCaptureStateChangedEventArgs>for IAppBroadcastCameraCaptureStateChangedEventArgs {
        fn from(value: &AppBroadcastCameraCaptureStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,IAppBroadcastCameraCaptureStateChangedEventArgs>, >for AppBroadcastCameraCaptureStateChangedEventArgs {
        fn into(self,) ->  ::winrt::Param< 'a ,IAppBroadcastCameraCaptureStateChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastCameraCaptureStateChangedEventArgs, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,IAppBroadcastCameraCaptureStateChangedEventArgs>, >for& 'a AppBroadcastCameraCaptureStateChangedEventArgs {
        fn into(self,) ->  ::winrt::Param< 'a ,IAppBroadcastCameraCaptureStateChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastCameraCaptureStateChangedEventArgs, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for AppBroadcastCameraCaptureStateChangedEventArgs{}
      unsafe impl::std::marker::Sync for AppBroadcastCameraCaptureStateChangedEventArgs{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppBroadcastCameraOverlayLocation(i32);
      impl::std::convert::From<i32>for AppBroadcastCameraOverlayLocation {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppBroadcastCameraOverlayLocation {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppBroadcastCameraOverlayLocation {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppBroadcastCameraOverlayLocation {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppBroadcastCameraOverlayLocation {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastCameraOverlayLocation{}
      impl::std::marker::Copy for AppBroadcastCameraOverlayLocation{}
      impl AppBroadcastCameraOverlayLocation {
        #![allow(non_upper_case_globals)]pub const TopLeft:Self = Self(0i32);
        pub const TopCenter:Self = Self(1i32);
        pub const TopRight:Self = Self(2i32);
        pub const MiddleLeft:Self = Self(3i32);
        pub const MiddleCenter:Self = Self(4i32);
        pub const MiddleRight:Self = Self(5i32);
        pub const BottomLeft:Self = Self(6i32);
        pub const BottomCenter:Self = Self(7i32);
        pub const BottomRight:Self = Self(8i32);
        
      }unsafe impl::winrt::Abi for AppBroadcastCameraOverlayLocation {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastCameraOverlayLocation {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppBroadcastCameraOverlayLocation;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppBroadcastCameraOverlaySize(i32);
      impl::std::convert::From<i32>for AppBroadcastCameraOverlaySize {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppBroadcastCameraOverlaySize {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppBroadcastCameraOverlaySize {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppBroadcastCameraOverlaySize {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppBroadcastCameraOverlaySize {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastCameraOverlaySize{}
      impl::std::marker::Copy for AppBroadcastCameraOverlaySize{}
      impl AppBroadcastCameraOverlaySize {
        #![allow(non_upper_case_globals)]pub const Small:Self = Self(0i32);
        pub const Medium:Self = Self(1i32);
        pub const Large:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for AppBroadcastCameraOverlaySize {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastCameraOverlaySize {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppBroadcastCameraOverlaySize;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppBroadcastCaptureTargetType(i32);
      impl::std::convert::From<i32>for AppBroadcastCaptureTargetType {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppBroadcastCaptureTargetType {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppBroadcastCaptureTargetType {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppBroadcastCaptureTargetType {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppBroadcastCaptureTargetType {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastCaptureTargetType{}
      impl::std::marker::Copy for AppBroadcastCaptureTargetType{}
      impl AppBroadcastCaptureTargetType {
        #![allow(non_upper_case_globals)]pub const AppView:Self = Self(0i32);
        pub const EntireDisplay:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for AppBroadcastCaptureTargetType {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastCaptureTargetType {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppBroadcastCaptureTargetType;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppBroadcastExitBroadcastModeReason(i32);
      impl::std::convert::From<i32>for AppBroadcastExitBroadcastModeReason {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppBroadcastExitBroadcastModeReason {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppBroadcastExitBroadcastModeReason {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppBroadcastExitBroadcastModeReason {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppBroadcastExitBroadcastModeReason {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastExitBroadcastModeReason{}
      impl::std::marker::Copy for AppBroadcastExitBroadcastModeReason{}
      impl AppBroadcastExitBroadcastModeReason {
        #![allow(non_upper_case_globals)]pub const NormalExit:Self = Self(0i32);
        pub const UserCanceled:Self = Self(1i32);
        pub const AuthorizationFail:Self = Self(2i32);
        pub const ForegroundAppActivated:Self = Self(3i32);
        
      }unsafe impl::winrt::Abi for AppBroadcastExitBroadcastModeReason {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastExitBroadcastModeReason {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppBroadcastExitBroadcastModeReason;i4)",);
        
      }#[repr(transparent)]pub struct IAppBroadcastGlobalSettings(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastGlobalSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastGlobalSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastGlobalSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastGlobalSettings{}
      impl IAppBroadcastGlobalSettings {
        pub fn is_broadcast_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn is_disabled_by_policy(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn is_gpu_constrained(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn has_hardware_encoder(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_is_audio_capture_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_audio_capture_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_is_microphone_capture_enabled_by_default(&self,value:bool,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_microphone_capture_enabled_by_default(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_is_echo_cancellation_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_echo_cancellation_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_system_audio_gain(&self,value:f64) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn system_audio_gain(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f64>(result__)
          }
        }pub fn set_microphone_gain(&self,value:f64) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn microphone_gain(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f64>(result__)
          }
        }pub fn set_is_camera_capture_enabled_by_default(&self,value:bool,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_camera_capture_enabled_by_default(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_selected_camera_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn selected_camera_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).23)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_camera_overlay_location(&self,value:AppBroadcastCameraOverlayLocation,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).24)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn camera_overlay_location(&self,) ->  ::winrt::Result<AppBroadcastCameraOverlayLocation>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastCameraOverlayLocation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).25)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastCameraOverlayLocation>(result__)
          }
        }pub fn set_camera_overlay_size(&self,value:AppBroadcastCameraOverlaySize,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).26)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn camera_overlay_size(&self,) ->  ::winrt::Result<AppBroadcastCameraOverlaySize>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastCameraOverlaySize as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).27)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastCameraOverlaySize>(result__)
          }
        }pub fn set_is_cursor_image_capture_enabled(&self,value:bool,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).28)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_cursor_image_capture_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).29)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastGlobalSettings {
        type Vtable = IAppBroadcastGlobalSettings_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2999658405,28924,19991,[128,189,107,160,253,63,243,160],);
        
      }#[repr(C)]pub struct IAppBroadcastGlobalSettings_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:AppBroadcastCameraOverlayLocation,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastCameraOverlayLocation,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:AppBroadcastCameraOverlaySize,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastCameraOverlaySize,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastGlobalSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{b2cb27a5-70fc-4e17-80bd-6ba0fd3ff3a0}")
        };
        
      }impl::std::convert::From<IAppBroadcastGlobalSettings>for::winrt::Object {
        fn from(value:IAppBroadcastGlobalSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastGlobalSettings>for::winrt::Object {
        fn from(value: &IAppBroadcastGlobalSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastGlobalSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastGlobalSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastGlobalSettings(::winrt::Object);
      impl AppBroadcastGlobalSettings {
        pub fn is_broadcast_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn is_disabled_by_policy(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn is_gpu_constrained(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn has_hardware_encoder(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_is_audio_capture_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_audio_capture_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_is_microphone_capture_enabled_by_default(&self,value:bool,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_microphone_capture_enabled_by_default(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_is_echo_cancellation_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_echo_cancellation_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_system_audio_gain(&self,value:f64) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn system_audio_gain(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f64>(result__)
          }
        }pub fn set_microphone_gain(&self,value:f64) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn microphone_gain(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f64>(result__)
          }
        }pub fn set_is_camera_capture_enabled_by_default(&self,value:bool,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_camera_capture_enabled_by_default(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_selected_camera_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn selected_camera_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).23)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_camera_overlay_location(&self,value:AppBroadcastCameraOverlayLocation,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).24)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn camera_overlay_location(&self,) ->  ::winrt::Result<AppBroadcastCameraOverlayLocation>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastCameraOverlayLocation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).25)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastCameraOverlayLocation>(result__)
          }
        }pub fn set_camera_overlay_size(&self,value:AppBroadcastCameraOverlaySize,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).26)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn camera_overlay_size(&self,) ->  ::winrt::Result<AppBroadcastCameraOverlaySize>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastCameraOverlaySize as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).27)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastCameraOverlaySize>(result__)
          }
        }pub fn set_is_cursor_image_capture_enabled(&self,value:bool,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).28)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_cursor_image_capture_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).29)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastGlobalSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastGlobalSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastGlobalSettings{}
      impl::std::fmt::Debug for AppBroadcastGlobalSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastGlobalSettings {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastGlobalSettings";
        
      }unsafe impl::winrt::Interface for AppBroadcastGlobalSettings {
        type Vtable = IAppBroadcastGlobalSettings_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastGlobalSettings as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastGlobalSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastGlobalSettings;{b2cb27a5-70fc-4e17-80bd-6ba0fd3ff3a0})");
        
      }impl::std::convert::From<AppBroadcastGlobalSettings>for::winrt::Object {
        fn from(value:AppBroadcastGlobalSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastGlobalSettings>for::winrt::Object {
        fn from(value: &AppBroadcastGlobalSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastGlobalSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastGlobalSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastGlobalSettings>for IAppBroadcastGlobalSettings {
        fn from(value:AppBroadcastGlobalSettings) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastGlobalSettings>for IAppBroadcastGlobalSettings {
        fn from(value: &AppBroadcastGlobalSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastGlobalSettings>>for AppBroadcastGlobalSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastGlobalSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastGlobalSettings>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastGlobalSettings>>for& 'a AppBroadcastGlobalSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastGlobalSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastGlobalSettings>::into(::std::clone::Clone::clone(self),),)
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppBroadcastVideoEncodingBitrateMode(i32);
      impl::std::convert::From<i32>for AppBroadcastVideoEncodingBitrateMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppBroadcastVideoEncodingBitrateMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppBroadcastVideoEncodingBitrateMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppBroadcastVideoEncodingBitrateMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppBroadcastVideoEncodingBitrateMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastVideoEncodingBitrateMode{}
      impl::std::marker::Copy for AppBroadcastVideoEncodingBitrateMode{}
      impl AppBroadcastVideoEncodingBitrateMode {
        #![allow(non_upper_case_globals)]pub const Custom:Self = Self(0i32);
        pub const Auto:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for AppBroadcastVideoEncodingBitrateMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastVideoEncodingBitrateMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppBroadcastVideoEncodingBitrateMode;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppBroadcastVideoEncodingResolutionMode(i32);
      impl::std::convert::From<i32>for AppBroadcastVideoEncodingResolutionMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppBroadcastVideoEncodingResolutionMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppBroadcastVideoEncodingResolutionMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppBroadcastVideoEncodingResolutionMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppBroadcastVideoEncodingResolutionMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastVideoEncodingResolutionMode{}
      impl::std::marker::Copy for AppBroadcastVideoEncodingResolutionMode{}
      impl AppBroadcastVideoEncodingResolutionMode {
        #![allow(non_upper_case_globals)]pub const Custom:Self = Self(0i32);
        pub const Auto:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for AppBroadcastVideoEncodingResolutionMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastVideoEncodingResolutionMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppBroadcastVideoEncodingResolutionMode;i4)",);
        
      }#[repr(transparent)]pub struct IAppBroadcastProviderSettings(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastProviderSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastProviderSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastProviderSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastProviderSettings{}
      impl IAppBroadcastProviderSettings {
        pub fn set_default_broadcast_title< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn default_broadcast_title(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_audio_encoding_bitrate(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn audio_encoding_bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_custom_video_encoding_bitrate(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn custom_video_encoding_bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_custom_video_encoding_height(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn custom_video_encoding_height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_custom_video_encoding_width(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn custom_video_encoding_width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_video_encoding_bitrate_mode(&self,value:AppBroadcastVideoEncodingBitrateMode,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn video_encoding_bitrate_mode(&self,) ->  ::winrt::Result<AppBroadcastVideoEncodingBitrateMode>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastVideoEncodingBitrateMode as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastVideoEncodingBitrateMode>(result__)
          }
        }pub fn set_video_encoding_resolution_mode(&self,value:AppBroadcastVideoEncodingResolutionMode,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn video_encoding_resolution_mode(&self,) ->  ::winrt::Result<AppBroadcastVideoEncodingResolutionMode>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastVideoEncodingResolutionMode as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastVideoEncodingResolutionMode>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastProviderSettings {
        type Vtable = IAppBroadcastProviderSettings_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3272335202,39240,17807,[173,80,170,6,236,3,218,8],);
        
      }#[repr(C)]pub struct IAppBroadcastProviderSettings_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:AppBroadcastVideoEncodingBitrateMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastVideoEncodingBitrateMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:AppBroadcastVideoEncodingResolutionMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastVideoEncodingResolutionMode,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastProviderSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c30bdf62-9948-458f-ad50-aa06ec03da08}")
        };
        
      }impl::std::convert::From<IAppBroadcastProviderSettings>for::winrt::Object {
        fn from(value:IAppBroadcastProviderSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastProviderSettings>for::winrt::Object {
        fn from(value: &IAppBroadcastProviderSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastProviderSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastProviderSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastProviderSettings(::winrt::Object);
      impl AppBroadcastProviderSettings {
        pub fn set_default_broadcast_title< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn default_broadcast_title(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_audio_encoding_bitrate(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn audio_encoding_bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_custom_video_encoding_bitrate(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn custom_video_encoding_bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_custom_video_encoding_height(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn custom_video_encoding_height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_custom_video_encoding_width(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn custom_video_encoding_width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_video_encoding_bitrate_mode(&self,value:AppBroadcastVideoEncodingBitrateMode,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn video_encoding_bitrate_mode(&self,) ->  ::winrt::Result<AppBroadcastVideoEncodingBitrateMode>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastVideoEncodingBitrateMode as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastVideoEncodingBitrateMode>(result__)
          }
        }pub fn set_video_encoding_resolution_mode(&self,value:AppBroadcastVideoEncodingResolutionMode,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn video_encoding_resolution_mode(&self,) ->  ::winrt::Result<AppBroadcastVideoEncodingResolutionMode>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastVideoEncodingResolutionMode as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastVideoEncodingResolutionMode>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastProviderSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastProviderSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastProviderSettings{}
      impl::std::fmt::Debug for AppBroadcastProviderSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastProviderSettings {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastProviderSettings";
        
      }unsafe impl::winrt::Interface for AppBroadcastProviderSettings {
        type Vtable = IAppBroadcastProviderSettings_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastProviderSettings as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastProviderSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastProviderSettings;{c30bdf62-9948-458f-ad50-aa06ec03da08})");
        
      }impl::std::convert::From<AppBroadcastProviderSettings>for::winrt::Object {
        fn from(value:AppBroadcastProviderSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastProviderSettings>for::winrt::Object {
        fn from(value: &AppBroadcastProviderSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastProviderSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastProviderSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastProviderSettings>for IAppBroadcastProviderSettings {
        fn from(value:AppBroadcastProviderSettings) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastProviderSettings>for IAppBroadcastProviderSettings {
        fn from(value: &AppBroadcastProviderSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastProviderSettings>>for AppBroadcastProviderSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastProviderSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastProviderSettings>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastProviderSettings>>for& 'a AppBroadcastProviderSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastProviderSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastProviderSettings>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct IAppBroadcastManagerStatics(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastManagerStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastManagerStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastManagerStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastManagerStatics{}
      impl IAppBroadcastManagerStatics {
        pub fn get_global_settings(&self) ->  ::winrt::Result<AppBroadcastGlobalSettings>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastGlobalSettings as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastGlobalSettings>(result__)
          }
        }pub fn apply_global_settings< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,AppBroadcastGlobalSettings>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn get_provider_settings(&self,) ->  ::winrt::Result<AppBroadcastProviderSettings>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastProviderSettings as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastProviderSettings>(result__)
          }
        }pub fn apply_provider_settings< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,AppBroadcastProviderSettings>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastManagerStatics {
        type Vtable = IAppBroadcastManagerStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(911081867,7758,16671,[171,62,146,149,152,68,193,86],);
        
      }#[repr(C)]pub struct IAppBroadcastManagerStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastManagerStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{364e018b-1e4e-411f-ab3e-92959844c156}")
        };
        
      }impl::std::convert::From<IAppBroadcastManagerStatics>for::winrt::Object {
        fn from(value:IAppBroadcastManagerStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastManagerStatics>for::winrt::Object {
        fn from(value: &IAppBroadcastManagerStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastManagerStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastManagerStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }pub struct AppBroadcastManager{}
      impl AppBroadcastManager {
        pub fn get_global_settings() ->  ::winrt::Result<AppBroadcastGlobalSettings>{
          Self::IAppBroadcastManagerStatics(|this|unsafe {
            let mut result__: <AppBroadcastGlobalSettings as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastGlobalSettings>(result__)
          })
        }pub fn apply_global_settings< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,AppBroadcastGlobalSettings>>, >(value:T0__,) ->  ::winrt::Result<()>{
          Self::IAppBroadcastManagerStatics(|this|unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          })
        }pub fn get_provider_settings() ->  ::winrt::Result<AppBroadcastProviderSettings>{
          Self::IAppBroadcastManagerStatics(|this|unsafe {
            let mut result__: <AppBroadcastProviderSettings as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastProviderSettings>(result__)
          })
        }pub fn apply_provider_settings< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,AppBroadcastProviderSettings>>, >(value:T0__,) ->  ::winrt::Result<()>{
          Self::IAppBroadcastManagerStatics(|this|unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          })
        }#[allow(non_snake_case)]fn IAppBroadcastManagerStatics<R,F:FnOnce(&IAppBroadcastManagerStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<AppBroadcastManager,IAppBroadcastManagerStatics, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::winrt::RuntimeName for AppBroadcastManager {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastManager";
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppBroadcastMicrophoneCaptureState(i32);
      impl::std::convert::From<i32>for AppBroadcastMicrophoneCaptureState {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppBroadcastMicrophoneCaptureState {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppBroadcastMicrophoneCaptureState {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppBroadcastMicrophoneCaptureState {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppBroadcastMicrophoneCaptureState {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastMicrophoneCaptureState{}
      impl::std::marker::Copy for AppBroadcastMicrophoneCaptureState{}
      impl AppBroadcastMicrophoneCaptureState {
        #![allow(non_upper_case_globals)]pub const Stopped:Self = Self(0i32);
        pub const Started:Self = Self(1i32);
        pub const Failed:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for AppBroadcastMicrophoneCaptureState {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastMicrophoneCaptureState {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppBroadcastMicrophoneCaptureState;i4)",);
        
      }#[repr(transparent)]pub struct IAppBroadcastMicrophoneCaptureStateChangedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastMicrophoneCaptureStateChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastMicrophoneCaptureStateChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastMicrophoneCaptureStateChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastMicrophoneCaptureStateChangedEventArgs{}
      impl IAppBroadcastMicrophoneCaptureStateChangedEventArgs {
        pub fn state(&self) ->  ::winrt::Result<AppBroadcastMicrophoneCaptureState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastMicrophoneCaptureState as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastMicrophoneCaptureState>(result__)
          }
        }pub fn error_code(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastMicrophoneCaptureStateChangedEventArgs {
        type Vtable = IAppBroadcastMicrophoneCaptureStateChangedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2825573865,37952,18696,[157,9,101,183,227,21,215,149],);
        
      }#[repr(C)]pub struct IAppBroadcastMicrophoneCaptureStateChangedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastMicrophoneCaptureState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastMicrophoneCaptureStateChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{a86ad5e9-9440-4908-9d09-65b7e315d795}")
        };
        
      }impl::std::convert::From<IAppBroadcastMicrophoneCaptureStateChangedEventArgs>for::winrt::Object {
        fn from(value:IAppBroadcastMicrophoneCaptureStateChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastMicrophoneCaptureStateChangedEventArgs>for::winrt::Object {
        fn from(value: &IAppBroadcastMicrophoneCaptureStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastMicrophoneCaptureStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastMicrophoneCaptureStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastMicrophoneCaptureStateChangedEventArgs(::winrt::Object);
      impl AppBroadcastMicrophoneCaptureStateChangedEventArgs {
        pub fn state(&self) ->  ::winrt::Result<AppBroadcastMicrophoneCaptureState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastMicrophoneCaptureState as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastMicrophoneCaptureState>(result__)
          }
        }pub fn error_code(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastMicrophoneCaptureStateChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastMicrophoneCaptureStateChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastMicrophoneCaptureStateChangedEventArgs{}
      impl::std::fmt::Debug for AppBroadcastMicrophoneCaptureStateChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastMicrophoneCaptureStateChangedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastMicrophoneCaptureStateChangedEventArgs";
        
      }unsafe impl::winrt::Interface for AppBroadcastMicrophoneCaptureStateChangedEventArgs {
        type Vtable = IAppBroadcastMicrophoneCaptureStateChangedEventArgs_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastMicrophoneCaptureStateChangedEventArgs as::winrt::Interface> ::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastMicrophoneCaptureStateChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastMicrophoneCaptureStateChangedEventArgs;{a86ad5e9-9440-4908-9d09-65b7e315d795})");
        
      }impl::std::convert::From<AppBroadcastMicrophoneCaptureStateChangedEventArgs>for::winrt::Object {
        fn from(value:AppBroadcastMicrophoneCaptureStateChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastMicrophoneCaptureStateChangedEventArgs>for::winrt::Object {
        fn from(value: &AppBroadcastMicrophoneCaptureStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastMicrophoneCaptureStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastMicrophoneCaptureStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastMicrophoneCaptureStateChangedEventArgs>for IAppBroadcastMicrophoneCaptureStateChangedEventArgs {
        fn from(value:AppBroadcastMicrophoneCaptureStateChangedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastMicrophoneCaptureStateChangedEventArgs>for IAppBroadcastMicrophoneCaptureStateChangedEventArgs {
        fn from(value: &AppBroadcastMicrophoneCaptureStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,IAppBroadcastMicrophoneCaptureStateChangedEventArgs>, >for AppBroadcastMicrophoneCaptureStateChangedEventArgs {
        fn into(self,) ->  ::winrt::Param< 'a ,IAppBroadcastMicrophoneCaptureStateChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastMicrophoneCaptureStateChangedEventArgs, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,IAppBroadcastMicrophoneCaptureStateChangedEventArgs>, >for& 'a AppBroadcastMicrophoneCaptureStateChangedEventArgs {
        fn into(self,) ->  ::winrt::Param< 'a ,IAppBroadcastMicrophoneCaptureStateChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastMicrophoneCaptureStateChangedEventArgs, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for AppBroadcastMicrophoneCaptureStateChangedEventArgs{}
      unsafe impl::std::marker::Sync for AppBroadcastMicrophoneCaptureStateChangedEventArgs{}
      #[repr(transparent)]pub struct IAppBroadcastPlugIn(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastPlugIn {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastPlugIn {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastPlugIn {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastPlugIn{}
      impl IAppBroadcastPlugIn {
        pub fn app_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn provider_settings(&self) ->  ::winrt::Result<AppBroadcastProviderSettings>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastProviderSettings as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastProviderSettings>(result__)
          }
        }pub fn logo(&self,) ->  ::winrt::Result<super::super::storage::streams::IRandomAccessStreamReference>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::streams::IRandomAccessStreamReference as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::storage::streams::IRandomAccessStreamReference>(result__)
          }
        }pub fn display_name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastPlugIn {
        type Vtable = IAppBroadcastPlugIn_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1376525926,25875,17780,[172,84,35,183,151,41,97,91],);
        
      }#[repr(C)]pub struct IAppBroadcastPlugIn_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastPlugIn {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{520c1e66-6513-4574-ac54-23b79729615b}")
        };
        
      }impl::std::convert::From<IAppBroadcastPlugIn>for::winrt::Object {
        fn from(value:IAppBroadcastPlugIn) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastPlugIn>for::winrt::Object {
        fn from(value: &IAppBroadcastPlugIn) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastPlugIn {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastPlugIn {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastPlugIn(::winrt::Object);
      impl AppBroadcastPlugIn {
        pub fn app_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn provider_settings(&self) ->  ::winrt::Result<AppBroadcastProviderSettings>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastProviderSettings as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastProviderSettings>(result__)
          }
        }pub fn logo(&self,) ->  ::winrt::Result<super::super::storage::streams::IRandomAccessStreamReference>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::streams::IRandomAccessStreamReference as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::storage::streams::IRandomAccessStreamReference>(result__)
          }
        }pub fn display_name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastPlugIn {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastPlugIn {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastPlugIn{}
      impl::std::fmt::Debug for AppBroadcastPlugIn {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastPlugIn {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastPlugIn";
        
      }unsafe impl::winrt::Interface for AppBroadcastPlugIn {
        type Vtable = IAppBroadcastPlugIn_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastPlugIn as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastPlugIn {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastPlugIn;{520c1e66-6513-4574-ac54-23b79729615b})");
        
      }impl::std::convert::From<AppBroadcastPlugIn>for::winrt::Object {
        fn from(value:AppBroadcastPlugIn) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastPlugIn>for::winrt::Object {
        fn from(value: &AppBroadcastPlugIn) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastPlugIn {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastPlugIn {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastPlugIn>for IAppBroadcastPlugIn {
        fn from(value:AppBroadcastPlugIn) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastPlugIn>for IAppBroadcastPlugIn {
        fn from(value: &AppBroadcastPlugIn) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastPlugIn>>for AppBroadcastPlugIn {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastPlugIn>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastPlugIn>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastPlugIn>>for& 'a AppBroadcastPlugIn {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastPlugIn>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastPlugIn>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for AppBroadcastPlugIn{}
      unsafe impl::std::marker::Sync for AppBroadcastPlugIn{}
      #[repr(transparent)]pub struct IAppBroadcastPlugInManager(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastPlugInManager {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastPlugInManager {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastPlugInManager {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastPlugInManager{}
      impl IAppBroadcastPlugInManager {
        pub fn is_broadcast_provider_available(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn plug_in_list(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<AppBroadcastPlugIn>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<AppBroadcastPlugIn, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <AppBroadcastPlugIn> >(result__)
          }
        }pub fn default_plug_in(&self) ->  ::winrt::Result<AppBroadcastPlugIn>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPlugIn as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastPlugIn>(result__)
          }
        }pub fn set_default_plug_in< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,AppBroadcastPlugIn>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastPlugInManager {
        type Vtable = IAppBroadcastPlugInManager_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3847281017,10145,18855,[187,244,215,169,233,208,118,104],);
        
      }#[repr(C)]pub struct IAppBroadcastPlugInManager_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastPlugInManager {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{e550d979-27a1-49a7-bbf4-d7a9e9d07668}")
        };
        
      }impl::std::convert::From<IAppBroadcastPlugInManager>for::winrt::Object {
        fn from(value:IAppBroadcastPlugInManager) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastPlugInManager>for::winrt::Object {
        fn from(value: &IAppBroadcastPlugInManager) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastPlugInManager {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastPlugInManager {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAppBroadcastPlugInManagerStatics(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastPlugInManagerStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastPlugInManagerStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastPlugInManagerStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastPlugInManagerStatics{}
      impl IAppBroadcastPlugInManagerStatics {
        pub fn get_default(&self) ->  ::winrt::Result<AppBroadcastPlugInManager>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPlugInManager as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastPlugInManager>(result__)
          }
        }pub fn get_for_user< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::system::User>>, >(&self,user:T0__,) ->  ::winrt::Result<AppBroadcastPlugInManager>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPlugInManager as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),user.into().abi(), &mut result__,).from_abi::<AppBroadcastPlugInManager>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastPlugInManagerStatics {
        type Vtable = IAppBroadcastPlugInManagerStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4066663456,23670,19676,[147,100,130,254,158,182,83,77],);
        
      }#[repr(C)]pub struct IAppBroadcastPlugInManagerStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,user: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastPlugInManagerStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{f2645c20-5c76-4cdc-9364-82fe9eb6534d}")
        };
        
      }impl::std::convert::From<IAppBroadcastPlugInManagerStatics>for::winrt::Object {
        fn from(value:IAppBroadcastPlugInManagerStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastPlugInManagerStatics>for::winrt::Object {
        fn from(value: &IAppBroadcastPlugInManagerStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastPlugInManagerStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastPlugInManagerStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastPlugInManager(::winrt::Object);
      impl AppBroadcastPlugInManager {
        pub fn is_broadcast_provider_available(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn plug_in_list(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<AppBroadcastPlugIn>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<AppBroadcastPlugIn, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <AppBroadcastPlugIn> >(result__)
          }
        }pub fn default_plug_in(&self) ->  ::winrt::Result<AppBroadcastPlugIn>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPlugIn as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastPlugIn>(result__)
          }
        }pub fn set_default_plug_in< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,AppBroadcastPlugIn>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn get_default() ->  ::winrt::Result<AppBroadcastPlugInManager>{
          Self::IAppBroadcastPlugInManagerStatics(|this|unsafe {
            let mut result__: <AppBroadcastPlugInManager as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastPlugInManager>(result__)
          })
        }pub fn get_for_user< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::system::User>>, >(user:T0__,) ->  ::winrt::Result<AppBroadcastPlugInManager>{
          Self::IAppBroadcastPlugInManagerStatics(|this|unsafe {
            let mut result__: <AppBroadcastPlugInManager as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),user.into().abi(), &mut result__,).from_abi::<AppBroadcastPlugInManager>(result__)
          })
        }#[allow(non_snake_case)]fn IAppBroadcastPlugInManagerStatics<R,F:FnOnce(&IAppBroadcastPlugInManagerStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<AppBroadcastPlugInManager,IAppBroadcastPlugInManagerStatics, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for AppBroadcastPlugInManager {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastPlugInManager {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastPlugInManager{}
      impl::std::fmt::Debug for AppBroadcastPlugInManager {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastPlugInManager {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastPlugInManager";
        
      }unsafe impl::winrt::Interface for AppBroadcastPlugInManager {
        type Vtable = IAppBroadcastPlugInManager_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastPlugInManager as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastPlugInManager {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastPlugInManager;{e550d979-27a1-49a7-bbf4-d7a9e9d07668})");
        
      }impl::std::convert::From<AppBroadcastPlugInManager>for::winrt::Object {
        fn from(value:AppBroadcastPlugInManager) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastPlugInManager>for::winrt::Object {
        fn from(value: &AppBroadcastPlugInManager) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastPlugInManager {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastPlugInManager {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastPlugInManager>for IAppBroadcastPlugInManager {
        fn from(value:AppBroadcastPlugInManager) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastPlugInManager>for IAppBroadcastPlugInManager {
        fn from(value: &AppBroadcastPlugInManager) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastPlugInManager>>for AppBroadcastPlugInManager {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastPlugInManager>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastPlugInManager>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastPlugInManager>>for& 'a AppBroadcastPlugInManager {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastPlugInManager>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastPlugInManager>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for AppBroadcastPlugInManager{}
      unsafe impl::std::marker::Sync for AppBroadcastPlugInManager{}
      #[repr(transparent)]pub struct IAppBroadcastPlugInStateChangedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastPlugInStateChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastPlugInStateChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastPlugInStateChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastPlugInStateChangedEventArgs{}
      impl IAppBroadcastPlugInStateChangedEventArgs {
        pub fn plug_in_state(&self) ->  ::winrt::Result<AppBroadcastPlugInState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPlugInState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastPlugInState>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastPlugInStateChangedEventArgs {
        type Vtable = IAppBroadcastPlugInStateChangedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1216467186,43973,20422,[132,176,137,55,11,180,114,18],);
        
      }#[repr(C)]pub struct IAppBroadcastPlugInStateChangedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastPlugInState,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastPlugInStateChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{4881d0f2-abc5-4fc6-84b0-89370bb47212}")
        };
        
      }impl::std::convert::From<IAppBroadcastPlugInStateChangedEventArgs>for::winrt::Object {
        fn from(value:IAppBroadcastPlugInStateChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastPlugInStateChangedEventArgs>for::winrt::Object {
        fn from(value: &IAppBroadcastPlugInStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastPlugInStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastPlugInStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastPlugInStateChangedEventArgs(::winrt::Object);
      impl AppBroadcastPlugInStateChangedEventArgs {
        pub fn plug_in_state(&self) ->  ::winrt::Result<AppBroadcastPlugInState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPlugInState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastPlugInState>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastPlugInStateChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastPlugInStateChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastPlugInStateChangedEventArgs{}
      impl::std::fmt::Debug for AppBroadcastPlugInStateChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastPlugInStateChangedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastPlugInStateChangedEventArgs";
        
      }unsafe impl::winrt::Interface for AppBroadcastPlugInStateChangedEventArgs {
        type Vtable = IAppBroadcastPlugInStateChangedEventArgs_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastPlugInStateChangedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastPlugInStateChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastPlugInStateChangedEventArgs;{4881d0f2-abc5-4fc6-84b0-89370bb47212})");
        
      }impl::std::convert::From<AppBroadcastPlugInStateChangedEventArgs>for::winrt::Object {
        fn from(value:AppBroadcastPlugInStateChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastPlugInStateChangedEventArgs>for::winrt::Object {
        fn from(value: &AppBroadcastPlugInStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastPlugInStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastPlugInStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastPlugInStateChangedEventArgs>for IAppBroadcastPlugInStateChangedEventArgs {
        fn from(value:AppBroadcastPlugInStateChangedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastPlugInStateChangedEventArgs>for IAppBroadcastPlugInStateChangedEventArgs {
        fn from(value: &AppBroadcastPlugInStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastPlugInStateChangedEventArgs>>for AppBroadcastPlugInStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastPlugInStateChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastPlugInStateChangedEventArgs, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastPlugInStateChangedEventArgs>>for& 'a AppBroadcastPlugInStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastPlugInStateChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastPlugInStateChangedEventArgs, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for AppBroadcastPlugInStateChangedEventArgs{}
      unsafe impl::std::marker::Sync for AppBroadcastPlugInStateChangedEventArgs{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppBroadcastPreviewState(i32);
      impl::std::convert::From<i32>for AppBroadcastPreviewState {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppBroadcastPreviewState {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppBroadcastPreviewState {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppBroadcastPreviewState {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppBroadcastPreviewState {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastPreviewState{}
      impl::std::marker::Copy for AppBroadcastPreviewState{}
      impl AppBroadcastPreviewState {
        #![allow(non_upper_case_globals)]pub const Started:Self = Self(0i32);
        pub const Stopped:Self = Self(1i32);
        pub const Failed:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for AppBroadcastPreviewState {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastPreviewState {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppBroadcastPreviewState;i4)",);
        
      }#[repr(transparent)]pub struct IAppBroadcastPreviewStateChangedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastPreviewStateChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastPreviewStateChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastPreviewStateChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastPreviewStateChangedEventArgs{}
      impl IAppBroadcastPreviewStateChangedEventArgs {
        pub fn preview_state(&self) ->  ::winrt::Result<AppBroadcastPreviewState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPreviewState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastPreviewState>(result__)
          }
        }pub fn error_code(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastPreviewStateChangedEventArgs {
        type Vtable = IAppBroadcastPreviewStateChangedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1515713246,36330,20102,[144,173,3,252,38,185,101,60],);
        
      }#[repr(C)]pub struct IAppBroadcastPreviewStateChangedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastPreviewState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastPreviewStateChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{5a57f2de-8dea-4e86-90ad-03fc26b9653c}")
        };
        
      }impl::std::convert::From<IAppBroadcastPreviewStateChangedEventArgs>for::winrt::Object {
        fn from(value:IAppBroadcastPreviewStateChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastPreviewStateChangedEventArgs>for::winrt::Object {
        fn from(value: &IAppBroadcastPreviewStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastPreviewStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastPreviewStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastPreviewStateChangedEventArgs(::winrt::Object);
      impl AppBroadcastPreviewStateChangedEventArgs {
        pub fn preview_state(&self) ->  ::winrt::Result<AppBroadcastPreviewState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPreviewState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastPreviewState>(result__)
          }
        }pub fn error_code(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastPreviewStateChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastPreviewStateChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastPreviewStateChangedEventArgs{}
      impl::std::fmt::Debug for AppBroadcastPreviewStateChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastPreviewStateChangedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastPreviewStateChangedEventArgs";
        
      }unsafe impl::winrt::Interface for AppBroadcastPreviewStateChangedEventArgs {
        type Vtable = IAppBroadcastPreviewStateChangedEventArgs_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastPreviewStateChangedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastPreviewStateChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastPreviewStateChangedEventArgs;{5a57f2de-8dea-4e86-90ad-03fc26b9653c})");
        
      }impl::std::convert::From<AppBroadcastPreviewStateChangedEventArgs>for::winrt::Object {
        fn from(value:AppBroadcastPreviewStateChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastPreviewStateChangedEventArgs>for::winrt::Object {
        fn from(value: &AppBroadcastPreviewStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastPreviewStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastPreviewStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastPreviewStateChangedEventArgs>for IAppBroadcastPreviewStateChangedEventArgs {
        fn from(value:AppBroadcastPreviewStateChangedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastPreviewStateChangedEventArgs>for IAppBroadcastPreviewStateChangedEventArgs {
        fn from(value: &AppBroadcastPreviewStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastPreviewStateChangedEventArgs>>for AppBroadcastPreviewStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastPreviewStateChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastPreviewStateChangedEventArgs, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastPreviewStateChangedEventArgs>>for& 'a AppBroadcastPreviewStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastPreviewStateChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastPreviewStateChangedEventArgs, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for AppBroadcastPreviewStateChangedEventArgs{}
      unsafe impl::std::marker::Sync for AppBroadcastPreviewStateChangedEventArgs{}
      #[repr(transparent)]pub struct IAppBroadcastPreviewStreamVideoHeader(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastPreviewStreamVideoHeader {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastPreviewStreamVideoHeader {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastPreviewStreamVideoHeader {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastPreviewStreamVideoHeader{}
      impl IAppBroadcastPreviewStreamVideoHeader {
        pub fn absolute_timestamp(&self,) ->  ::winrt::Result<super::super::foundation::DateTime>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::DateTime as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::DateTime>(result__)
          }
        }pub fn relative_timestamp(&self,) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn duration(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn frame_id(&self) ->  ::winrt::Result<u64>{
          let this = self;
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u64>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastPreviewStreamVideoHeader {
        type Vtable = IAppBroadcastPreviewStreamVideoHeader_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2347720979,55940,17561,[167,171,135,17,140,180,161,87],);
        
      }#[repr(C)]pub struct IAppBroadcastPreviewStreamVideoHeader_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::DateTime_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u64,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastPreviewStreamVideoHeader {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{8bef6113-da84-4499-a7ab-87118cb4a157}")
        };
        
      }impl::std::convert::From<IAppBroadcastPreviewStreamVideoHeader>for::winrt::Object {
        fn from(value:IAppBroadcastPreviewStreamVideoHeader) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastPreviewStreamVideoHeader>for::winrt::Object {
        fn from(value: &IAppBroadcastPreviewStreamVideoHeader) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastPreviewStreamVideoHeader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastPreviewStreamVideoHeader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastPreviewStreamVideoHeader(::winrt::Object);
      impl AppBroadcastPreviewStreamVideoHeader {
        pub fn absolute_timestamp(&self,) ->  ::winrt::Result<super::super::foundation::DateTime>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::DateTime as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::DateTime>(result__)
          }
        }pub fn relative_timestamp(&self,) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn duration(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn frame_id(&self) ->  ::winrt::Result<u64>{
          let this = self;
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u64>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastPreviewStreamVideoHeader {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastPreviewStreamVideoHeader {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastPreviewStreamVideoHeader{}
      impl::std::fmt::Debug for AppBroadcastPreviewStreamVideoHeader {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastPreviewStreamVideoHeader {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastPreviewStreamVideoHeader";
        
      }unsafe impl::winrt::Interface for AppBroadcastPreviewStreamVideoHeader {
        type Vtable = IAppBroadcastPreviewStreamVideoHeader_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastPreviewStreamVideoHeader as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastPreviewStreamVideoHeader {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastPreviewStreamVideoHeader;{8bef6113-da84-4499-a7ab-87118cb4a157})");
        
      }impl::std::convert::From<AppBroadcastPreviewStreamVideoHeader>for::winrt::Object {
        fn from(value:AppBroadcastPreviewStreamVideoHeader) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastPreviewStreamVideoHeader>for::winrt::Object {
        fn from(value: &AppBroadcastPreviewStreamVideoHeader) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastPreviewStreamVideoHeader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastPreviewStreamVideoHeader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastPreviewStreamVideoHeader>for IAppBroadcastPreviewStreamVideoHeader {
        fn from(value:AppBroadcastPreviewStreamVideoHeader) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastPreviewStreamVideoHeader>for IAppBroadcastPreviewStreamVideoHeader {
        fn from(value: &AppBroadcastPreviewStreamVideoHeader) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastPreviewStreamVideoHeader>>for AppBroadcastPreviewStreamVideoHeader {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastPreviewStreamVideoHeader>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastPreviewStreamVideoHeader, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastPreviewStreamVideoHeader>>for& 'a AppBroadcastPreviewStreamVideoHeader {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastPreviewStreamVideoHeader>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastPreviewStreamVideoHeader, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for AppBroadcastPreviewStreamVideoHeader{}
      unsafe impl::std::marker::Sync for AppBroadcastPreviewStreamVideoHeader{}
      #[repr(transparent)]pub struct IAppBroadcastPreviewStreamVideoFrame(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastPreviewStreamVideoFrame {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastPreviewStreamVideoFrame {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastPreviewStreamVideoFrame {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastPreviewStreamVideoFrame{}
      impl IAppBroadcastPreviewStreamVideoFrame {
        pub fn video_header(&self,) ->  ::winrt::Result<AppBroadcastPreviewStreamVideoHeader>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPreviewStreamVideoHeader as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastPreviewStreamVideoHeader>(result__)
          }
        }pub fn video_buffer(&self,) ->  ::winrt::Result<super::super::storage::streams::IBuffer>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::streams::IBuffer as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::storage::streams::IBuffer>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastPreviewStreamVideoFrame {
        type Vtable = IAppBroadcastPreviewStreamVideoFrame_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(17809057,38142,17561,[184,192,141,36,66,121,251,18],);
        
      }#[repr(C)]pub struct IAppBroadcastPreviewStreamVideoFrame_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastPreviewStreamVideoFrame {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{010fbea1-94fe-4499-b8c0-8d244279fb12}")
        };
        
      }impl::std::convert::From<IAppBroadcastPreviewStreamVideoFrame>for::winrt::Object {
        fn from(value:IAppBroadcastPreviewStreamVideoFrame) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastPreviewStreamVideoFrame>for::winrt::Object {
        fn from(value: &IAppBroadcastPreviewStreamVideoFrame) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastPreviewStreamVideoFrame {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastPreviewStreamVideoFrame {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastPreviewStreamVideoFrame(::winrt::Object);
      impl AppBroadcastPreviewStreamVideoFrame {
        pub fn video_header(&self,) ->  ::winrt::Result<AppBroadcastPreviewStreamVideoHeader>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPreviewStreamVideoHeader as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastPreviewStreamVideoHeader>(result__)
          }
        }pub fn video_buffer(&self,) ->  ::winrt::Result<super::super::storage::streams::IBuffer>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::streams::IBuffer as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::storage::streams::IBuffer>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastPreviewStreamVideoFrame {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastPreviewStreamVideoFrame {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastPreviewStreamVideoFrame{}
      impl::std::fmt::Debug for AppBroadcastPreviewStreamVideoFrame {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastPreviewStreamVideoFrame {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastPreviewStreamVideoFrame";
        
      }unsafe impl::winrt::Interface for AppBroadcastPreviewStreamVideoFrame {
        type Vtable = IAppBroadcastPreviewStreamVideoFrame_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastPreviewStreamVideoFrame as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastPreviewStreamVideoFrame {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastPreviewStreamVideoFrame;{010fbea1-94fe-4499-b8c0-8d244279fb12})");
        
      }impl::std::convert::From<AppBroadcastPreviewStreamVideoFrame>for::winrt::Object {
        fn from(value:AppBroadcastPreviewStreamVideoFrame) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastPreviewStreamVideoFrame>for::winrt::Object {
        fn from(value: &AppBroadcastPreviewStreamVideoFrame) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastPreviewStreamVideoFrame {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastPreviewStreamVideoFrame {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastPreviewStreamVideoFrame>for IAppBroadcastPreviewStreamVideoFrame {
        fn from(value:AppBroadcastPreviewStreamVideoFrame) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastPreviewStreamVideoFrame>for IAppBroadcastPreviewStreamVideoFrame {
        fn from(value: &AppBroadcastPreviewStreamVideoFrame) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastPreviewStreamVideoFrame>>for AppBroadcastPreviewStreamVideoFrame {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastPreviewStreamVideoFrame>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastPreviewStreamVideoFrame, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastPreviewStreamVideoFrame>>for& 'a AppBroadcastPreviewStreamVideoFrame {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastPreviewStreamVideoFrame>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastPreviewStreamVideoFrame, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for AppBroadcastPreviewStreamVideoFrame{}
      unsafe impl::std::marker::Sync for AppBroadcastPreviewStreamVideoFrame{}
      #[repr(transparent)]pub struct IAppBroadcastPreviewStreamReader(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastPreviewStreamReader {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastPreviewStreamReader {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastPreviewStreamReader {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastPreviewStreamReader{}
      impl IAppBroadcastPreviewStreamReader {
        pub fn video_width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn video_height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn video_stride(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn video_bitmap_pixel_format(&self,) ->  ::winrt::Result<super::super::graphics::imaging::BitmapPixelFormat>{
          let this = self;
          unsafe {
            let mut result__: <super::super::graphics::imaging::BitmapPixelFormat as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::graphics::imaging::BitmapPixelFormat>(result__,)
          }
        }pub fn video_bitmap_alpha_mode(&self,) ->  ::winrt::Result<super::super::graphics::imaging::BitmapAlphaMode>{
          let this = self;
          unsafe {
            let mut result__: <super::super::graphics::imaging::BitmapAlphaMode as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::graphics::imaging::BitmapAlphaMode>(result__)
          }
        }pub fn try_get_next_video_frame(&self,) ->  ::winrt::Result<AppBroadcastPreviewStreamVideoFrame>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPreviewStreamVideoFrame as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastPreviewStreamVideoFrame>(result__)
          }
        }pub fn video_frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastPreviewStreamReader, ::winrt::Object, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_video_frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastPreviewStreamReader {
        type Vtable = IAppBroadcastPreviewStreamReader_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2451737936,56127,16552,[140,212,244,227,113,221,171,55],);
        
      }#[repr(C)]pub struct IAppBroadcastPreviewStreamReader_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::graphics::imaging::BitmapPixelFormat,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::graphics::imaging::BitmapAlphaMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastPreviewStreamReader {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{92228d50-db3f-40a8-8cd4-f4e371ddab37}")
        };
        
      }impl::std::convert::From<IAppBroadcastPreviewStreamReader>for::winrt::Object {
        fn from(value:IAppBroadcastPreviewStreamReader) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastPreviewStreamReader>for::winrt::Object {
        fn from(value: &IAppBroadcastPreviewStreamReader) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastPreviewStreamReader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastPreviewStreamReader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastPreviewStreamReader(::winrt::Object);
      impl AppBroadcastPreviewStreamReader {
        pub fn video_width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn video_height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn video_stride(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn video_bitmap_pixel_format(&self,) ->  ::winrt::Result<super::super::graphics::imaging::BitmapPixelFormat>{
          let this = self;
          unsafe {
            let mut result__: <super::super::graphics::imaging::BitmapPixelFormat as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::graphics::imaging::BitmapPixelFormat>(result__,)
          }
        }pub fn video_bitmap_alpha_mode(&self,) ->  ::winrt::Result<super::super::graphics::imaging::BitmapAlphaMode>{
          let this = self;
          unsafe {
            let mut result__: <super::super::graphics::imaging::BitmapAlphaMode as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::graphics::imaging::BitmapAlphaMode>(result__)
          }
        }pub fn try_get_next_video_frame(&self,) ->  ::winrt::Result<AppBroadcastPreviewStreamVideoFrame>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPreviewStreamVideoFrame as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastPreviewStreamVideoFrame>(result__)
          }
        }pub fn video_frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastPreviewStreamReader, ::winrt::Object, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_video_frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for AppBroadcastPreviewStreamReader {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastPreviewStreamReader {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastPreviewStreamReader{}
      impl::std::fmt::Debug for AppBroadcastPreviewStreamReader {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastPreviewStreamReader {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastPreviewStreamReader";
        
      }unsafe impl::winrt::Interface for AppBroadcastPreviewStreamReader {
        type Vtable = IAppBroadcastPreviewStreamReader_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastPreviewStreamReader as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastPreviewStreamReader {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastPreviewStreamReader;{92228d50-db3f-40a8-8cd4-f4e371ddab37})");
        
      }impl::std::convert::From<AppBroadcastPreviewStreamReader>for::winrt::Object {
        fn from(value:AppBroadcastPreviewStreamReader) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastPreviewStreamReader>for::winrt::Object {
        fn from(value: &AppBroadcastPreviewStreamReader) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastPreviewStreamReader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastPreviewStreamReader {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastPreviewStreamReader>for IAppBroadcastPreviewStreamReader {
        fn from(value:AppBroadcastPreviewStreamReader) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastPreviewStreamReader>for IAppBroadcastPreviewStreamReader {
        fn from(value: &AppBroadcastPreviewStreamReader) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastPreviewStreamReader>>for AppBroadcastPreviewStreamReader {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastPreviewStreamReader>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastPreviewStreamReader>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastPreviewStreamReader>>for& 'a AppBroadcastPreviewStreamReader {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastPreviewStreamReader>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastPreviewStreamReader>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for AppBroadcastPreviewStreamReader{}
      unsafe impl::std::marker::Sync for AppBroadcastPreviewStreamReader{}
      #[repr(transparent)]pub struct IAppBroadcastPreview(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastPreview {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastPreview {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastPreview {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastPreview{}
      impl IAppBroadcastPreview {
        pub fn stop_preview(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn preview_state(&self) ->  ::winrt::Result<AppBroadcastPreviewState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPreviewState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastPreviewState>(result__)
          }
        }pub fn error_code(&self,) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn preview_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastPreview,AppBroadcastPreviewStateChangedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_preview_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn preview_stream_reader(&self,) ->  ::winrt::Result<AppBroadcastPreviewStreamReader>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPreviewStreamReader as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastPreviewStreamReader>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastPreview {
        type Vtable = IAppBroadcastPreview_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(347475802,28234,19328,[161,79,103,238,119,209,83,231],);
        
      }#[repr(C)]pub struct IAppBroadcastPreview_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastPreviewState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastPreview {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{14b60f5a-6e4a-4b80-a14f-67ee77d153e7}")
        };
        
      }impl::std::convert::From<IAppBroadcastPreview>for::winrt::Object {
        fn from(value:IAppBroadcastPreview) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastPreview>for::winrt::Object {
        fn from(value: &IAppBroadcastPreview) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastPreview {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastPreview {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastPreview(::winrt::Object);
      impl AppBroadcastPreview {
        pub fn stop_preview(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn preview_state(&self) ->  ::winrt::Result<AppBroadcastPreviewState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPreviewState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastPreviewState>(result__)
          }
        }pub fn error_code(&self,) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn preview_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastPreview,AppBroadcastPreviewStateChangedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_preview_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn preview_stream_reader(&self,) ->  ::winrt::Result<AppBroadcastPreviewStreamReader>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPreviewStreamReader as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastPreviewStreamReader>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastPreview {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastPreview {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastPreview{}
      impl::std::fmt::Debug for AppBroadcastPreview {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastPreview {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastPreview";
        
      }unsafe impl::winrt::Interface for AppBroadcastPreview {
        type Vtable = IAppBroadcastPreview_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastPreview as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastPreview {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastPreview;{14b60f5a-6e4a-4b80-a14f-67ee77d153e7})");
        
      }impl::std::convert::From<AppBroadcastPreview>for::winrt::Object {
        fn from(value:AppBroadcastPreview) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastPreview>for::winrt::Object {
        fn from(value: &AppBroadcastPreview) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastPreview {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastPreview {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastPreview>for IAppBroadcastPreview {
        fn from(value:AppBroadcastPreview) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastPreview>for IAppBroadcastPreview {
        fn from(value: &AppBroadcastPreview) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastPreview>>for AppBroadcastPreview {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastPreview>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastPreview>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastPreview>>for& 'a AppBroadcastPreview {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastPreview>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastPreview>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for AppBroadcastPreview{}
      unsafe impl::std::marker::Sync for AppBroadcastPreview{}
      #[repr(transparent)]pub struct IAppBroadcastViewerCountChangedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastViewerCountChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastViewerCountChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastViewerCountChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastViewerCountChangedEventArgs{}
      impl IAppBroadcastViewerCountChangedEventArgs {
        pub fn viewer_count(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastViewerCountChangedEventArgs {
        type Vtable = IAppBroadcastViewerCountChangedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3873511461,21505,19166,[139,210,193,78,206,230,128,125],);
        
      }#[repr(C)]pub struct IAppBroadcastViewerCountChangedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastViewerCountChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{e6e11825-5401-4ade-8bd2-c14ecee6807d}")
        };
        
      }impl::std::convert::From<IAppBroadcastViewerCountChangedEventArgs>for::winrt::Object {
        fn from(value:IAppBroadcastViewerCountChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastViewerCountChangedEventArgs>for::winrt::Object {
        fn from(value: &IAppBroadcastViewerCountChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastViewerCountChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastViewerCountChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastViewerCountChangedEventArgs(::winrt::Object);
      impl AppBroadcastViewerCountChangedEventArgs {
        pub fn viewer_count(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastViewerCountChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastViewerCountChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastViewerCountChangedEventArgs{}
      impl::std::fmt::Debug for AppBroadcastViewerCountChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastViewerCountChangedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastViewerCountChangedEventArgs";
        
      }unsafe impl::winrt::Interface for AppBroadcastViewerCountChangedEventArgs {
        type Vtable = IAppBroadcastViewerCountChangedEventArgs_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastViewerCountChangedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastViewerCountChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastViewerCountChangedEventArgs;{e6e11825-5401-4ade-8bd2-c14ecee6807d})");
        
      }impl::std::convert::From<AppBroadcastViewerCountChangedEventArgs>for::winrt::Object {
        fn from(value:AppBroadcastViewerCountChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastViewerCountChangedEventArgs>for::winrt::Object {
        fn from(value: &AppBroadcastViewerCountChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastViewerCountChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastViewerCountChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastViewerCountChangedEventArgs>for IAppBroadcastViewerCountChangedEventArgs {
        fn from(value:AppBroadcastViewerCountChangedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastViewerCountChangedEventArgs>for IAppBroadcastViewerCountChangedEventArgs {
        fn from(value: &AppBroadcastViewerCountChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastViewerCountChangedEventArgs>>for AppBroadcastViewerCountChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastViewerCountChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastViewerCountChangedEventArgs, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastViewerCountChangedEventArgs>>for& 'a AppBroadcastViewerCountChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastViewerCountChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastViewerCountChangedEventArgs, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for AppBroadcastViewerCountChangedEventArgs{}
      unsafe impl::std::marker::Sync for AppBroadcastViewerCountChangedEventArgs{}
      #[repr(transparent)]pub struct IAppBroadcastState(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastState {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastState {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastState {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastState{}
      impl IAppBroadcastState {
        pub fn is_capture_target_running(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn viewer_count(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn should_capture_microphone(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_should_capture_microphone(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn restart_microphone_capture(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn should_capture_camera(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_should_capture_camera(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn restart_camera_capture(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn encoded_video_size(&self,) ->  ::winrt::Result<super::super::foundation::Size>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Size as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::Size>(result__)
          }
        }pub fn microphone_capture_state(&self,) ->  ::winrt::Result<AppBroadcastMicrophoneCaptureState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastMicrophoneCaptureState as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastMicrophoneCaptureState>(result__)
          }
        }pub fn microphone_capture_error(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn camera_capture_state(&self,) ->  ::winrt::Result<AppBroadcastCameraCaptureState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastCameraCaptureState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastCameraCaptureState>(result__)
          }
        }pub fn camera_capture_error(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn stream_state(&self) ->  ::winrt::Result<AppBroadcastStreamState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastStreamState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastStreamState>(result__)
          }
        }pub fn plug_in_state(&self) ->  ::winrt::Result<AppBroadcastPlugInState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPlugInState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastPlugInState>(result__)
          }
        }pub fn oauth_request_uri(&self) ->  ::winrt::Result<super::super::foundation::Uri>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Uri as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::Uri>(result__)
          }
        }pub fn oauth_callback_uri(&self) ->  ::winrt::Result<super::super::foundation::Uri>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Uri as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::Uri>(result__)
          }
        }pub fn authentication_result(&self,) ->  ::winrt::Result<super::super::security::authentication::web::WebAuthenticationResult, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::security::authentication::web::WebAuthenticationResult as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).23)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::security::authentication::web::WebAuthenticationResult>(result__)
          }
        }pub fn set_authentication_result< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::security::authentication::web::WebAuthenticationResult, >, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).24)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn set_sign_in_state(&self,value:AppBroadcastSignInState,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).25)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn sign_in_state(&self) ->  ::winrt::Result<AppBroadcastSignInState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastSignInState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).26)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastSignInState>(result__)
          }
        }pub fn termination_reason(&self) ->  ::winrt::Result<AppBroadcastTerminationReason>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastTerminationReason as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).27)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastTerminationReason>(result__)
          }
        }pub fn termination_reason_plug_in_specific(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).28)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn viewer_count_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastState,AppBroadcastViewerCountChangedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).29)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_viewer_count_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).30)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn microphone_capture_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastState,AppBroadcastMicrophoneCaptureStateChangedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).31)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_microphone_capture_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).32)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn camera_capture_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastState,AppBroadcastCameraCaptureStateChangedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).33)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_camera_capture_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).34)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn plug_in_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastState,AppBroadcastPlugInStateChangedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).35)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_plug_in_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).36)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn stream_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastState,AppBroadcastStreamStateChangedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).37)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_stream_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).38)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn capture_target_closed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastState, ::winrt::Object, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).39)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_capture_target_closed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).40)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastState {
        type Vtable = IAppBroadcastState_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3993503085,32921,19933,[146,46,197,109,172,88,171,251],);
        
      }#[repr(C)]pub struct IAppBroadcastState_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::Size_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastMicrophoneCaptureState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastCameraCaptureState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastStreamState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastPlugInState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:AppBroadcastSignInState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastSignInState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastTerminationReason,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastState {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{ee08056d-8099-4ddd-922e-c56dac58abfb}")
        };
        
      }impl::std::convert::From<IAppBroadcastState>for::winrt::Object {
        fn from(value:IAppBroadcastState) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastState>for::winrt::Object {
        fn from(value: &IAppBroadcastState) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastState {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastState {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastState(::winrt::Object);
      impl AppBroadcastState {
        pub fn is_capture_target_running(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn viewer_count(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn should_capture_microphone(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_should_capture_microphone(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn restart_microphone_capture(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn should_capture_camera(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_should_capture_camera(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn restart_camera_capture(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn encoded_video_size(&self,) ->  ::winrt::Result<super::super::foundation::Size>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Size as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::Size>(result__)
          }
        }pub fn microphone_capture_state(&self,) ->  ::winrt::Result<AppBroadcastMicrophoneCaptureState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastMicrophoneCaptureState as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastMicrophoneCaptureState>(result__)
          }
        }pub fn microphone_capture_error(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn camera_capture_state(&self,) ->  ::winrt::Result<AppBroadcastCameraCaptureState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastCameraCaptureState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastCameraCaptureState>(result__)
          }
        }pub fn camera_capture_error(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn stream_state(&self) ->  ::winrt::Result<AppBroadcastStreamState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastStreamState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastStreamState>(result__)
          }
        }pub fn plug_in_state(&self) ->  ::winrt::Result<AppBroadcastPlugInState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPlugInState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastPlugInState>(result__)
          }
        }pub fn oauth_request_uri(&self) ->  ::winrt::Result<super::super::foundation::Uri>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Uri as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::Uri>(result__)
          }
        }pub fn oauth_callback_uri(&self) ->  ::winrt::Result<super::super::foundation::Uri>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Uri as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::Uri>(result__)
          }
        }pub fn authentication_result(&self,) ->  ::winrt::Result<super::super::security::authentication::web::WebAuthenticationResult, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::security::authentication::web::WebAuthenticationResult as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).23)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::security::authentication::web::WebAuthenticationResult>(result__)
          }
        }pub fn set_authentication_result< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::security::authentication::web::WebAuthenticationResult, >, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).24)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn set_sign_in_state(&self,value:AppBroadcastSignInState,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).25)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn sign_in_state(&self) ->  ::winrt::Result<AppBroadcastSignInState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastSignInState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).26)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastSignInState>(result__)
          }
        }pub fn termination_reason(&self) ->  ::winrt::Result<AppBroadcastTerminationReason>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastTerminationReason as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).27)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastTerminationReason>(result__)
          }
        }pub fn termination_reason_plug_in_specific(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).28)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn viewer_count_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastState,AppBroadcastViewerCountChangedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).29)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_viewer_count_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).30)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn microphone_capture_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastState,AppBroadcastMicrophoneCaptureStateChangedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).31)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_microphone_capture_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).32)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn camera_capture_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastState,AppBroadcastCameraCaptureStateChangedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).33)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_camera_capture_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).34)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn plug_in_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastState,AppBroadcastPlugInStateChangedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).35)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_plug_in_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).36)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn stream_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastState,AppBroadcastStreamStateChangedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).37)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_stream_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).38)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn capture_target_closed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppBroadcastState, ::winrt::Object, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).39)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_capture_target_closed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).40)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for AppBroadcastState {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastState {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastState{}
      impl::std::fmt::Debug for AppBroadcastState {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastState {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastState";
        
      }unsafe impl::winrt::Interface for AppBroadcastState {
        type Vtable = IAppBroadcastState_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastState as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastState {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastState;{ee08056d-8099-4ddd-922e-c56dac58abfb})");
        
      }impl::std::convert::From<AppBroadcastState>for::winrt::Object {
        fn from(value:AppBroadcastState) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastState>for::winrt::Object {
        fn from(value: &AppBroadcastState) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastState {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastState {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastState>for IAppBroadcastState {
        fn from(value:AppBroadcastState) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastState>for IAppBroadcastState {
        fn from(value: &AppBroadcastState) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastState>>for AppBroadcastState {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastState>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastState>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastState>>for& 'a AppBroadcastState {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastState>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastState>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for AppBroadcastState{}
      unsafe impl::std::marker::Sync for AppBroadcastState{}
      #[repr(transparent)]pub struct IAppBroadcastServices(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastServices {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastServices {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastServices {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastServices{}
      impl IAppBroadcastServices {
        pub fn capture_target_type(&self,) ->  ::winrt::Result<AppBroadcastCaptureTargetType>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastCaptureTargetType as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastCaptureTargetType>(result__)
          }
        }pub fn set_capture_target_type(&self,value:AppBroadcastCaptureTargetType,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn broadcast_title(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_broadcast_title< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn broadcast_language(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_broadcast_language< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn user_name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn can_capture(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn enter_broadcast_mode_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,AppBroadcastPlugIn>>, >(&self,plug_in:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),plug_in.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn exit_broadcast_mode(&self,reason:AppBroadcastExitBroadcastModeReason,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),reason).ok()
          }
        }pub fn start_broadcast(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn pause_broadcast(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn resume_broadcast(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn start_preview< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Size>>, >(&self,desired_size:T0__,) ->  ::winrt::Result<AppBroadcastPreview>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPreview as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this),desired_size.into().abi(), &mut result__,).from_abi::<AppBroadcastPreview>(result__)
          }
        }pub fn state(&self) ->  ::winrt::Result<AppBroadcastState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastState>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastServices {
        type Vtable = IAppBroadcastServices_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2254484694,38555,20028,[172,58,139,4,46,228,238,99],);
        
      }#[repr(C)]pub struct IAppBroadcastServices_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppBroadcastCaptureTargetType,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:AppBroadcastCaptureTargetType,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,plug_in: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,reason:AppBroadcastExitBroadcastModeReason,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,desired_size:super::super::foundation::Size_abi,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastServices {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{8660b4d6-969b-4e3c-ac3a-8b042ee4ee63}")
        };
        
      }impl::std::convert::From<IAppBroadcastServices>for::winrt::Object {
        fn from(value:IAppBroadcastServices) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastServices>for::winrt::Object {
        fn from(value: &IAppBroadcastServices) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastServices {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastServices {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastServices(::winrt::Object);
      impl AppBroadcastServices {
        pub fn capture_target_type(&self,) ->  ::winrt::Result<AppBroadcastCaptureTargetType>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastCaptureTargetType as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastCaptureTargetType>(result__)
          }
        }pub fn set_capture_target_type(&self,value:AppBroadcastCaptureTargetType,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn broadcast_title(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_broadcast_title< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn broadcast_language(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_broadcast_language< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn user_name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn can_capture(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn enter_broadcast_mode_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,AppBroadcastPlugIn>>, >(&self,plug_in:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),plug_in.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn exit_broadcast_mode(&self,reason:AppBroadcastExitBroadcastModeReason,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),reason).ok()
          }
        }pub fn start_broadcast(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn pause_broadcast(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn resume_broadcast(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn start_preview< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Size>>, >(&self,desired_size:T0__,) ->  ::winrt::Result<AppBroadcastPreview>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastPreview as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this),desired_size.into().abi(), &mut result__,).from_abi::<AppBroadcastPreview>(result__)
          }
        }pub fn state(&self) ->  ::winrt::Result<AppBroadcastState>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastState>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastServices {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastServices {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastServices{}
      impl::std::fmt::Debug for AppBroadcastServices {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastServices {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastServices";
        
      }unsafe impl::winrt::Interface for AppBroadcastServices {
        type Vtable = IAppBroadcastServices_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastServices as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastServices {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastServices;{8660b4d6-969b-4e3c-ac3a-8b042ee4ee63})");
        
      }impl::std::convert::From<AppBroadcastServices>for::winrt::Object {
        fn from(value:AppBroadcastServices) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastServices>for::winrt::Object {
        fn from(value: &AppBroadcastServices) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastServices {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastServices {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastServices>for IAppBroadcastServices {
        fn from(value:AppBroadcastServices) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastServices>for IAppBroadcastServices {
        fn from(value: &AppBroadcastServices) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastServices>>for AppBroadcastServices {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastServices>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastServices>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastServices>>for& 'a AppBroadcastServices {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastServices>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastServices>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for AppBroadcastServices{}
      unsafe impl::std::marker::Sync for AppBroadcastServices{}
      #[repr(transparent)]pub struct IAppBroadcastTriggerDetails(::winrt::Object);
      impl::std::clone::Clone for IAppBroadcastTriggerDetails {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppBroadcastTriggerDetails {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppBroadcastTriggerDetails {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppBroadcastTriggerDetails{}
      impl IAppBroadcastTriggerDetails {
        pub fn background_service(&self) ->  ::winrt::Result<AppBroadcastBackgroundService>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastBackgroundService as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastBackgroundService>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppBroadcastTriggerDetails {
        type Vtable = IAppBroadcastTriggerDetails_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3739986741,60510,19855,[177,192,93,166,232,199,86,56],);
        
      }#[repr(C)]pub struct IAppBroadcastTriggerDetails_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppBroadcastTriggerDetails {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{deebab35-ec5e-4d8f-b1c0-5da6e8c75638}")
        };
        
      }impl::std::convert::From<IAppBroadcastTriggerDetails>for::winrt::Object {
        fn from(value:IAppBroadcastTriggerDetails) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppBroadcastTriggerDetails>for::winrt::Object {
        fn from(value: &IAppBroadcastTriggerDetails) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppBroadcastTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppBroadcastTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppBroadcastTriggerDetails(::winrt::Object);
      impl AppBroadcastTriggerDetails {
        pub fn background_service(&self) ->  ::winrt::Result<AppBroadcastBackgroundService>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastBackgroundService as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppBroadcastBackgroundService>(result__)
          }
        }
      }impl::std::clone::Clone for AppBroadcastTriggerDetails {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppBroadcastTriggerDetails {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppBroadcastTriggerDetails{}
      impl::std::fmt::Debug for AppBroadcastTriggerDetails {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppBroadcastTriggerDetails {
        const NAME: & 'static str = "Windows.Media.Capture.AppBroadcastTriggerDetails";
        
      }unsafe impl::winrt::Interface for AppBroadcastTriggerDetails {
        type Vtable = IAppBroadcastTriggerDetails_abi;
        const IID: ::winrt::Guid =  <IAppBroadcastTriggerDetails as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppBroadcastTriggerDetails {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppBroadcastTriggerDetails;{deebab35-ec5e-4d8f-b1c0-5da6e8c75638})");
        
      }impl::std::convert::From<AppBroadcastTriggerDetails>for::winrt::Object {
        fn from(value:AppBroadcastTriggerDetails) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppBroadcastTriggerDetails>for::winrt::Object {
        fn from(value: &AppBroadcastTriggerDetails) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppBroadcastTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppBroadcastTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppBroadcastTriggerDetails>for IAppBroadcastTriggerDetails {
        fn from(value:AppBroadcastTriggerDetails) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppBroadcastTriggerDetails>for IAppBroadcastTriggerDetails {
        fn from(value: &AppBroadcastTriggerDetails) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastTriggerDetails>>for AppBroadcastTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastTriggerDetails>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastTriggerDetails>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppBroadcastTriggerDetails>>for& 'a AppBroadcastTriggerDetails {
        fn into(self) ->  ::winrt::Param< 'a ,IAppBroadcastTriggerDetails>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppBroadcastTriggerDetails>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct IAppCapture(::winrt::Object);
      impl::std::clone::Clone for IAppCapture {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCapture {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCapture {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCapture{}
      impl IAppCapture {
        pub fn is_capturing_audio(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn is_capturing_video(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn capturing_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppCapture, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_capturing_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAppCapture {
        type Vtable = IAppCapture_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2538198099,41626,17901,[143,41,34,208,153,66,207,247],);
        
      }#[repr(C)]pub struct IAppCapture_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCapture {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{9749d453-a29a-45ed-8f29-22d09942cff7}")
        };
        
      }impl::std::convert::From<IAppCapture>for::winrt::Object {
        fn from(value:IAppCapture) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCapture>for::winrt::Object {
        fn from(value: &IAppCapture) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAppCaptureStatics(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureStatics{}
      impl IAppCaptureStatics {
        pub fn get_for_current_view(&self) ->  ::winrt::Result<AppCapture>{
          let this = self;
          unsafe {
            let mut result__: <AppCapture as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppCapture>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureStatics {
        type Vtable = IAppCaptureStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4179811692,2686,20084,[139,32,156,31,144,45,8,161],);
        
      }#[repr(C)]pub struct IAppCaptureStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{f922dd6c-0a7e-4e74-8b20-9c1f902d08a1}")
        };
        
      }impl::std::convert::From<IAppCaptureStatics>for::winrt::Object {
        fn from(value:IAppCaptureStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureStatics>for::winrt::Object {
        fn from(value: &IAppCaptureStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAppCaptureStatics2(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureStatics2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureStatics2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureStatics2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureStatics2{}
      impl IAppCaptureStatics2 {
        pub fn set_allowed_async(&self,allowed:bool,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),allowed, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureStatics2 {
        type Vtable = IAppCaptureStatics2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3000533460,33644,19876,[175,215,250,204,4,30,28,243],);
        
      }#[repr(C)]pub struct IAppCaptureStatics2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,allowed:bool,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureStatics2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{b2d881d4-836c-4da4-afd7-facc041e1cf3}")
        };
        
      }impl::std::convert::From<IAppCaptureStatics2>for::winrt::Object {
        fn from(value:IAppCaptureStatics2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureStatics2>for::winrt::Object {
        fn from(value: &IAppCaptureStatics2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureStatics2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureStatics2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppCapture(::winrt::Object);
      impl AppCapture {
        pub fn is_capturing_audio(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn is_capturing_video(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn capturing_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppCapture, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_capturing_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn get_for_current_view() ->  ::winrt::Result<AppCapture>{
          Self::IAppCaptureStatics(|this|unsafe {
            let mut result__: <AppCapture as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppCapture>(result__)
          })
        }pub fn set_allowed_async(allowed:bool,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          Self::IAppCaptureStatics2(|this|unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),allowed, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          })
        }#[allow(non_snake_case)]fn IAppCaptureStatics<R,F:FnOnce(&IAppCaptureStatics) ->  ::winrt::Result<R>>(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<AppCapture,IAppCaptureStatics>  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn IAppCaptureStatics2<R,F:FnOnce(&IAppCaptureStatics2) ->  ::winrt::Result<R>>(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<AppCapture,IAppCaptureStatics2>  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for AppCapture {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppCapture {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCapture{}
      impl::std::fmt::Debug for AppCapture {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppCapture {
        const NAME: & 'static str = "Windows.Media.Capture.AppCapture";
        
      }unsafe impl::winrt::Interface for AppCapture {
        type Vtable = IAppCapture_abi;
        const IID: ::winrt::Guid =  <IAppCapture as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppCapture {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppCapture;{9749d453-a29a-45ed-8f29-22d09942cff7})",);
        
      }impl::std::convert::From<AppCapture>for::winrt::Object {
        fn from(value:AppCapture) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppCapture>for::winrt::Object {
        fn from(value: &AppCapture) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppCapture>for IAppCapture {
        fn from(value:AppCapture) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppCapture>for IAppCapture {
        fn from(value: &AppCapture) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCapture>>for AppCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCapture>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCapture>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCapture>>for& 'a AppCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCapture>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCapture>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAppCaptureAlternateShortcutKeys(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureAlternateShortcutKeys {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureAlternateShortcutKeys {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureAlternateShortcutKeys {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureAlternateShortcutKeys{}
      impl IAppCaptureAlternateShortcutKeys {
        pub fn set_toggle_game_bar_key(&self,value:super::super::system::VirtualKey,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_game_bar_key(&self,) ->  ::winrt::Result<super::super::system::VirtualKey>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKey as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::system::VirtualKey>(result__)
          }
        }pub fn set_toggle_game_bar_key_modifiers(&self,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_game_bar_key_modifiers(&self,) ->  ::winrt::Result<super::super::system::VirtualKeyModifiers>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKeyModifiers as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::system::VirtualKeyModifiers>(result__)
          }
        }pub fn set_save_historical_video_key(&self,value:super::super::system::VirtualKey,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn save_historical_video_key(&self,) ->  ::winrt::Result<super::super::system::VirtualKey>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKey as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKey>(result__)
          }
        }pub fn set_save_historical_video_key_modifiers(&self,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn save_historical_video_key_modifiers(&self,) ->  ::winrt::Result<super::super::system::VirtualKeyModifiers>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKeyModifiers as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKeyModifiers>(result__)
          }
        }pub fn set_toggle_recording_key(&self,value:super::super::system::VirtualKey,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_recording_key(&self,) ->  ::winrt::Result<super::super::system::VirtualKey>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKey as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKey>(result__)
          }
        }pub fn set_toggle_recording_key_modifiers(&self,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_recording_key_modifiers(&self,) ->  ::winrt::Result<super::super::system::VirtualKeyModifiers>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKeyModifiers as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKeyModifiers>(result__)
          }
        }pub fn set_take_screenshot_key(&self,value:super::super::system::VirtualKey,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn take_screenshot_key(&self,) ->  ::winrt::Result<super::super::system::VirtualKey>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKey as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKey>(result__)
          }
        }pub fn set_take_screenshot_key_modifiers(&self,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn take_screenshot_key_modifiers(&self,) ->  ::winrt::Result<super::super::system::VirtualKeyModifiers>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKeyModifiers as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKeyModifiers>(result__)
          }
        }pub fn set_toggle_recording_indicator_key(&self,value:super::super::system::VirtualKey,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_recording_indicator_key(&self,) ->  ::winrt::Result<super::super::system::VirtualKey>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKey as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).23)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKey>(result__)
          }
        }pub fn set_toggle_recording_indicator_key_modifiers(&self,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).24)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_recording_indicator_key_modifiers(&self,) ->  ::winrt::Result<super::super::system::VirtualKeyModifiers>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKeyModifiers as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).25)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKeyModifiers>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureAlternateShortcutKeys {
        type Vtable = IAppCaptureAlternateShortcutKeys_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(434692335,9068,16633,[179,143,155,125,214,93,28,204],);
        
      }#[repr(C)]pub struct IAppCaptureAlternateShortcutKeys_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::system::VirtualKey,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::system::VirtualKey,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::system::VirtualKeyModifiers,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::system::VirtualKey,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::system::VirtualKey,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::system::VirtualKeyModifiers,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::system::VirtualKey,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::system::VirtualKey,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::system::VirtualKeyModifiers,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::system::VirtualKey,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::system::VirtualKey,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::system::VirtualKeyModifiers,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::system::VirtualKey,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::system::VirtualKey,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::system::VirtualKeyModifiers,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureAlternateShortcutKeys {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{19e8e0ef-236c-40f9-b38f-9b7dd65d1ccc}")
        };
        
      }impl::std::convert::From<IAppCaptureAlternateShortcutKeys>for::winrt::Object {
        fn from(value:IAppCaptureAlternateShortcutKeys) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureAlternateShortcutKeys>for::winrt::Object {
        fn from(value: &IAppCaptureAlternateShortcutKeys) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureAlternateShortcutKeys {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureAlternateShortcutKeys {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAppCaptureAlternateShortcutKeys2(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureAlternateShortcutKeys2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureAlternateShortcutKeys2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureAlternateShortcutKeys2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureAlternateShortcutKeys2{}
      impl IAppCaptureAlternateShortcutKeys2 {
        pub fn set_toggle_microphone_capture_key(&self,value:super::super::system::VirtualKey,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_microphone_capture_key(&self,) ->  ::winrt::Result<super::super::system::VirtualKey>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKey as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::system::VirtualKey>(result__)
          }
        }pub fn set_toggle_microphone_capture_key_modifiers(&self,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_microphone_capture_key_modifiers(&self,) ->  ::winrt::Result<super::super::system::VirtualKeyModifiers>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKeyModifiers as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::system::VirtualKeyModifiers>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureAlternateShortcutKeys2 {
        type Vtable = IAppCaptureAlternateShortcutKeys2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3278278800,56599,18416,[149,229,206,66,40,108,243,56],);
        
      }#[repr(C)]pub struct IAppCaptureAlternateShortcutKeys2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::system::VirtualKey,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::system::VirtualKey,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::system::VirtualKeyModifiers,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureAlternateShortcutKeys2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c3669090-dd17-47f0-95e5-ce42286cf338}")
        };
        
      }impl::std::convert::From<IAppCaptureAlternateShortcutKeys2>for::winrt::Object {
        fn from(value:IAppCaptureAlternateShortcutKeys2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureAlternateShortcutKeys2>for::winrt::Object {
        fn from(value: &IAppCaptureAlternateShortcutKeys2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureAlternateShortcutKeys2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureAlternateShortcutKeys2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAppCaptureAlternateShortcutKeys3(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureAlternateShortcutKeys3 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureAlternateShortcutKeys3 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureAlternateShortcutKeys3 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureAlternateShortcutKeys3{}
      impl IAppCaptureAlternateShortcutKeys3 {
        pub fn set_toggle_camera_capture_key(&self,value:super::super::system::VirtualKey,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_camera_capture_key(&self,) ->  ::winrt::Result<super::super::system::VirtualKey>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKey as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::system::VirtualKey>(result__)
          }
        }pub fn set_toggle_camera_capture_key_modifiers(&self,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_camera_capture_key_modifiers(&self,) ->  ::winrt::Result<super::super::system::VirtualKeyModifiers>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKeyModifiers as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::system::VirtualKeyModifiers>(result__)
          }
        }pub fn set_toggle_broadcast_key(&self,value:super::super::system::VirtualKey,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_broadcast_key(&self,) ->  ::winrt::Result<super::super::system::VirtualKey>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKey as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKey>(result__)
          }
        }pub fn set_toggle_broadcast_key_modifiers(&self,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_broadcast_key_modifiers(&self,) ->  ::winrt::Result<super::super::system::VirtualKeyModifiers>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKeyModifiers as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKeyModifiers>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureAlternateShortcutKeys3 {
        type Vtable = IAppCaptureAlternateShortcutKeys3_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2072069260,16782,18076,[164,154,69,181,151,200,38,182],);
        
      }#[repr(C)]pub struct IAppCaptureAlternateShortcutKeys3_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::system::VirtualKey,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::system::VirtualKey,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::system::VirtualKeyModifiers,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::system::VirtualKey,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::system::VirtualKey,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::system::VirtualKeyModifiers,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureAlternateShortcutKeys3 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{7b81448c-418e-469c-a49a-45b597c826b6}")
        };
        
      }impl::std::convert::From<IAppCaptureAlternateShortcutKeys3>for::winrt::Object {
        fn from(value:IAppCaptureAlternateShortcutKeys3) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureAlternateShortcutKeys3>for::winrt::Object {
        fn from(value: &IAppCaptureAlternateShortcutKeys3) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureAlternateShortcutKeys3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureAlternateShortcutKeys3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppCaptureAlternateShortcutKeys(::winrt::Object);
      impl AppCaptureAlternateShortcutKeys {
        pub fn set_toggle_game_bar_key(&self,value:super::super::system::VirtualKey,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_game_bar_key(&self,) ->  ::winrt::Result<super::super::system::VirtualKey>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKey as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::system::VirtualKey>(result__)
          }
        }pub fn set_toggle_game_bar_key_modifiers(&self,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_game_bar_key_modifiers(&self,) ->  ::winrt::Result<super::super::system::VirtualKeyModifiers>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKeyModifiers as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::system::VirtualKeyModifiers>(result__)
          }
        }pub fn set_save_historical_video_key(&self,value:super::super::system::VirtualKey,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn save_historical_video_key(&self,) ->  ::winrt::Result<super::super::system::VirtualKey>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKey as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKey>(result__)
          }
        }pub fn set_save_historical_video_key_modifiers(&self,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn save_historical_video_key_modifiers(&self,) ->  ::winrt::Result<super::super::system::VirtualKeyModifiers>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKeyModifiers as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKeyModifiers>(result__)
          }
        }pub fn set_toggle_recording_key(&self,value:super::super::system::VirtualKey,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_recording_key(&self,) ->  ::winrt::Result<super::super::system::VirtualKey>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKey as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKey>(result__)
          }
        }pub fn set_toggle_recording_key_modifiers(&self,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_recording_key_modifiers(&self,) ->  ::winrt::Result<super::super::system::VirtualKeyModifiers>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKeyModifiers as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKeyModifiers>(result__)
          }
        }pub fn set_take_screenshot_key(&self,value:super::super::system::VirtualKey,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn take_screenshot_key(&self,) ->  ::winrt::Result<super::super::system::VirtualKey>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKey as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKey>(result__)
          }
        }pub fn set_take_screenshot_key_modifiers(&self,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn take_screenshot_key_modifiers(&self,) ->  ::winrt::Result<super::super::system::VirtualKeyModifiers>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKeyModifiers as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKeyModifiers>(result__)
          }
        }pub fn set_toggle_recording_indicator_key(&self,value:super::super::system::VirtualKey,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_recording_indicator_key(&self,) ->  ::winrt::Result<super::super::system::VirtualKey>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKey as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).23)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKey>(result__)
          }
        }pub fn set_toggle_recording_indicator_key_modifiers(&self,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).24)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_recording_indicator_key_modifiers(&self,) ->  ::winrt::Result<super::super::system::VirtualKeyModifiers>{
          let this = self;
          unsafe {
            let mut result__: <super::super::system::VirtualKeyModifiers as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).25)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKeyModifiers>(result__)
          }
        }pub fn set_toggle_microphone_capture_key(&self,value:super::super::system::VirtualKey,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppCaptureAlternateShortcutKeys2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_microphone_capture_key(&self,) ->  ::winrt::Result<super::super::system::VirtualKey>{
          let this =  &::winrt::Interface::cast::<IAppCaptureAlternateShortcutKeys2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::system::VirtualKey as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::system::VirtualKey>(result__)
          }
        }pub fn set_toggle_microphone_capture_key_modifiers(&self,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppCaptureAlternateShortcutKeys2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_microphone_capture_key_modifiers(&self,) ->  ::winrt::Result<super::super::system::VirtualKeyModifiers>{
          let this =  &::winrt::Interface::cast::<IAppCaptureAlternateShortcutKeys2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::system::VirtualKeyModifiers as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::system::VirtualKeyModifiers>(result__)
          }
        }pub fn set_toggle_camera_capture_key(&self,value:super::super::system::VirtualKey,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppCaptureAlternateShortcutKeys3>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_camera_capture_key(&self,) ->  ::winrt::Result<super::super::system::VirtualKey>{
          let this =  &::winrt::Interface::cast::<IAppCaptureAlternateShortcutKeys3>(self).unwrap();
          unsafe {
            let mut result__: <super::super::system::VirtualKey as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::system::VirtualKey>(result__)
          }
        }pub fn set_toggle_camera_capture_key_modifiers(&self,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppCaptureAlternateShortcutKeys3>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_camera_capture_key_modifiers(&self,) ->  ::winrt::Result<super::super::system::VirtualKeyModifiers>{
          let this =  &::winrt::Interface::cast::<IAppCaptureAlternateShortcutKeys3>(self).unwrap();
          unsafe {
            let mut result__: <super::super::system::VirtualKeyModifiers as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::system::VirtualKeyModifiers>(result__)
          }
        }pub fn set_toggle_broadcast_key(&self,value:super::super::system::VirtualKey,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppCaptureAlternateShortcutKeys3>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_broadcast_key(&self,) ->  ::winrt::Result<super::super::system::VirtualKey>{
          let this =  &::winrt::Interface::cast::<IAppCaptureAlternateShortcutKeys3>(self).unwrap();
          unsafe {
            let mut result__: <super::super::system::VirtualKey as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKey>(result__)
          }
        }pub fn set_toggle_broadcast_key_modifiers(&self,value:super::super::system::VirtualKeyModifiers,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppCaptureAlternateShortcutKeys3>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn toggle_broadcast_key_modifiers(&self,) ->  ::winrt::Result<super::super::system::VirtualKeyModifiers>{
          let this =  &::winrt::Interface::cast::<IAppCaptureAlternateShortcutKeys3>(self).unwrap();
          unsafe {
            let mut result__: <super::super::system::VirtualKeyModifiers as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::system::VirtualKeyModifiers>(result__)
          }
        }
      }impl::std::clone::Clone for AppCaptureAlternateShortcutKeys {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppCaptureAlternateShortcutKeys {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureAlternateShortcutKeys{}
      impl::std::fmt::Debug for AppCaptureAlternateShortcutKeys {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppCaptureAlternateShortcutKeys {
        const NAME: & 'static str = "Windows.Media.Capture.AppCaptureAlternateShortcutKeys";
        
      }unsafe impl::winrt::Interface for AppCaptureAlternateShortcutKeys {
        type Vtable = IAppCaptureAlternateShortcutKeys_abi;
        const IID: ::winrt::Guid =  <IAppCaptureAlternateShortcutKeys as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureAlternateShortcutKeys {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppCaptureAlternateShortcutKeys;{19e8e0ef-236c-40f9-b38f-9b7dd65d1ccc})");
        
      }impl::std::convert::From<AppCaptureAlternateShortcutKeys>for::winrt::Object {
        fn from(value:AppCaptureAlternateShortcutKeys) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppCaptureAlternateShortcutKeys>for::winrt::Object {
        fn from(value: &AppCaptureAlternateShortcutKeys) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppCaptureAlternateShortcutKeys {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppCaptureAlternateShortcutKeys {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppCaptureAlternateShortcutKeys>for IAppCaptureAlternateShortcutKeys {
        fn from(value:AppCaptureAlternateShortcutKeys) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppCaptureAlternateShortcutKeys>for IAppCaptureAlternateShortcutKeys {
        fn from(value: &AppCaptureAlternateShortcutKeys) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureAlternateShortcutKeys>>for AppCaptureAlternateShortcutKeys {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureAlternateShortcutKeys>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureAlternateShortcutKeys>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureAlternateShortcutKeys>>for& 'a AppCaptureAlternateShortcutKeys {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureAlternateShortcutKeys>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureAlternateShortcutKeys>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<AppCaptureAlternateShortcutKeys>for IAppCaptureAlternateShortcutKeys2 {
        fn from(value:AppCaptureAlternateShortcutKeys) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AppCaptureAlternateShortcutKeys>for IAppCaptureAlternateShortcutKeys2 {
        fn from(value: &AppCaptureAlternateShortcutKeys) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureAlternateShortcutKeys2>>for AppCaptureAlternateShortcutKeys {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureAlternateShortcutKeys2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureAlternateShortcutKeys2>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureAlternateShortcutKeys2>>for& 'a AppCaptureAlternateShortcutKeys {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureAlternateShortcutKeys2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureAlternateShortcutKeys2>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<AppCaptureAlternateShortcutKeys>for IAppCaptureAlternateShortcutKeys3 {
        fn from(value:AppCaptureAlternateShortcutKeys) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AppCaptureAlternateShortcutKeys>for IAppCaptureAlternateShortcutKeys3 {
        fn from(value: &AppCaptureAlternateShortcutKeys) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureAlternateShortcutKeys3>>for AppCaptureAlternateShortcutKeys {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureAlternateShortcutKeys3>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureAlternateShortcutKeys3>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureAlternateShortcutKeys3>>for& 'a AppCaptureAlternateShortcutKeys {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureAlternateShortcutKeys3>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureAlternateShortcutKeys3>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct IAppCaptureDurationGeneratedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureDurationGeneratedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureDurationGeneratedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureDurationGeneratedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureDurationGeneratedEventArgs{}
      impl IAppCaptureDurationGeneratedEventArgs {
        pub fn duration(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureDurationGeneratedEventArgs {
        type Vtable = IAppCaptureDurationGeneratedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3254081083,65441,17609,[151,95,39,251,235,85,59,53],);
        
      }#[repr(C)]pub struct IAppCaptureDurationGeneratedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureDurationGeneratedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c1f5563b-ffa1-44c9-975f-27fbeb553b35}")
        };
        
      }impl::std::convert::From<IAppCaptureDurationGeneratedEventArgs>for::winrt::Object {
        fn from(value:IAppCaptureDurationGeneratedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureDurationGeneratedEventArgs>for::winrt::Object {
        fn from(value: &IAppCaptureDurationGeneratedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureDurationGeneratedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureDurationGeneratedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppCaptureDurationGeneratedEventArgs(::winrt::Object);
      impl AppCaptureDurationGeneratedEventArgs {
        pub fn duration(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }
      }impl::std::clone::Clone for AppCaptureDurationGeneratedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppCaptureDurationGeneratedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureDurationGeneratedEventArgs{}
      impl::std::fmt::Debug for AppCaptureDurationGeneratedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppCaptureDurationGeneratedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.AppCaptureDurationGeneratedEventArgs";
        
      }unsafe impl::winrt::Interface for AppCaptureDurationGeneratedEventArgs {
        type Vtable = IAppCaptureDurationGeneratedEventArgs_abi;
        const IID: ::winrt::Guid =  <IAppCaptureDurationGeneratedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureDurationGeneratedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppCaptureDurationGeneratedEventArgs;{c1f5563b-ffa1-44c9-975f-27fbeb553b35})");
        
      }impl::std::convert::From<AppCaptureDurationGeneratedEventArgs>for::winrt::Object {
        fn from(value:AppCaptureDurationGeneratedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppCaptureDurationGeneratedEventArgs>for::winrt::Object {
        fn from(value: &AppCaptureDurationGeneratedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppCaptureDurationGeneratedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppCaptureDurationGeneratedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppCaptureDurationGeneratedEventArgs>for IAppCaptureDurationGeneratedEventArgs {
        fn from(value:AppCaptureDurationGeneratedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppCaptureDurationGeneratedEventArgs>for IAppCaptureDurationGeneratedEventArgs {
        fn from(value: &AppCaptureDurationGeneratedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureDurationGeneratedEventArgs>>for AppCaptureDurationGeneratedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureDurationGeneratedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureDurationGeneratedEventArgs, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureDurationGeneratedEventArgs>>for& 'a AppCaptureDurationGeneratedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureDurationGeneratedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureDurationGeneratedEventArgs, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for AppCaptureDurationGeneratedEventArgs{}
      unsafe impl::std::marker::Sync for AppCaptureDurationGeneratedEventArgs{}
      #[repr(transparent)]pub struct IAppCaptureFileGeneratedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureFileGeneratedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureFileGeneratedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureFileGeneratedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureFileGeneratedEventArgs{}
      impl IAppCaptureFileGeneratedEventArgs {
        pub fn file(&self) ->  ::winrt::Result<super::super::storage::StorageFile>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::StorageFile as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::storage::StorageFile>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureFileGeneratedEventArgs {
        type Vtable = IAppCaptureFileGeneratedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1099561972,18014,17855,[144,127,22,91,63,178,55,88],);
        
      }#[repr(C)]pub struct IAppCaptureFileGeneratedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureFileGeneratedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{4189fbf4-465e-45bf-907f-165b3fb23758}")
        };
        
      }impl::std::convert::From<IAppCaptureFileGeneratedEventArgs>for::winrt::Object {
        fn from(value:IAppCaptureFileGeneratedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureFileGeneratedEventArgs>for::winrt::Object {
        fn from(value: &IAppCaptureFileGeneratedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureFileGeneratedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureFileGeneratedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppCaptureFileGeneratedEventArgs(::winrt::Object);
      impl AppCaptureFileGeneratedEventArgs {
        pub fn file(&self) ->  ::winrt::Result<super::super::storage::StorageFile>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::StorageFile as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::storage::StorageFile>(result__)
          }
        }
      }impl::std::clone::Clone for AppCaptureFileGeneratedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppCaptureFileGeneratedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureFileGeneratedEventArgs{}
      impl::std::fmt::Debug for AppCaptureFileGeneratedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppCaptureFileGeneratedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.AppCaptureFileGeneratedEventArgs";
        
      }unsafe impl::winrt::Interface for AppCaptureFileGeneratedEventArgs {
        type Vtable = IAppCaptureFileGeneratedEventArgs_abi;
        const IID: ::winrt::Guid =  <IAppCaptureFileGeneratedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureFileGeneratedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppCaptureFileGeneratedEventArgs;{4189fbf4-465e-45bf-907f-165b3fb23758})");
        
      }impl::std::convert::From<AppCaptureFileGeneratedEventArgs>for::winrt::Object {
        fn from(value:AppCaptureFileGeneratedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppCaptureFileGeneratedEventArgs>for::winrt::Object {
        fn from(value: &AppCaptureFileGeneratedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppCaptureFileGeneratedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppCaptureFileGeneratedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppCaptureFileGeneratedEventArgs>for IAppCaptureFileGeneratedEventArgs {
        fn from(value:AppCaptureFileGeneratedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppCaptureFileGeneratedEventArgs>for IAppCaptureFileGeneratedEventArgs {
        fn from(value: &AppCaptureFileGeneratedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureFileGeneratedEventArgs>>for AppCaptureFileGeneratedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureFileGeneratedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureFileGeneratedEventArgs>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureFileGeneratedEventArgs>>for& 'a AppCaptureFileGeneratedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureFileGeneratedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureFileGeneratedEventArgs>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for AppCaptureFileGeneratedEventArgs{}
      unsafe impl::std::marker::Sync for AppCaptureFileGeneratedEventArgs{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppCaptureHistoricalBufferLengthUnit(i32);
      impl::std::convert::From<i32>for AppCaptureHistoricalBufferLengthUnit {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppCaptureHistoricalBufferLengthUnit {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppCaptureHistoricalBufferLengthUnit {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppCaptureHistoricalBufferLengthUnit {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppCaptureHistoricalBufferLengthUnit {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureHistoricalBufferLengthUnit{}
      impl::std::marker::Copy for AppCaptureHistoricalBufferLengthUnit{}
      impl AppCaptureHistoricalBufferLengthUnit {
        #![allow(non_upper_case_globals)]pub const Megabytes:Self = Self(0i32);
        pub const Seconds:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for AppCaptureHistoricalBufferLengthUnit {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureHistoricalBufferLengthUnit {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppCaptureHistoricalBufferLengthUnit;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppCaptureVideoEncodingBitrateMode(i32);
      impl::std::convert::From<i32>for AppCaptureVideoEncodingBitrateMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppCaptureVideoEncodingBitrateMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppCaptureVideoEncodingBitrateMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppCaptureVideoEncodingBitrateMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppCaptureVideoEncodingBitrateMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureVideoEncodingBitrateMode{}
      impl::std::marker::Copy for AppCaptureVideoEncodingBitrateMode{}
      impl AppCaptureVideoEncodingBitrateMode {
        #![allow(non_upper_case_globals)]pub const Custom:Self = Self(0i32);
        pub const High:Self = Self(1i32);
        pub const Standard:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for AppCaptureVideoEncodingBitrateMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureVideoEncodingBitrateMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppCaptureVideoEncodingBitrateMode;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppCaptureVideoEncodingResolutionMode(i32);
      impl::std::convert::From<i32>for AppCaptureVideoEncodingResolutionMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppCaptureVideoEncodingResolutionMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppCaptureVideoEncodingResolutionMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppCaptureVideoEncodingResolutionMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppCaptureVideoEncodingResolutionMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureVideoEncodingResolutionMode{}
      impl::std::marker::Copy for AppCaptureVideoEncodingResolutionMode{}
      impl AppCaptureVideoEncodingResolutionMode {
        #![allow(non_upper_case_globals)]pub const Custom:Self = Self(0i32);
        pub const High:Self = Self(1i32);
        pub const Standard:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for AppCaptureVideoEncodingResolutionMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureVideoEncodingResolutionMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppCaptureVideoEncodingResolutionMode;i4)",);
        
      }#[repr(transparent)]pub struct IAppCaptureSettings(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureSettings{}
      impl IAppCaptureSettings {
        pub fn set_app_capture_destination_folder< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::storage::StorageFolder>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn app_capture_destination_folder(&self,) ->  ::winrt::Result<super::super::storage::StorageFolder>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::StorageFolder as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::storage::StorageFolder>(result__)
          }
        }pub fn set_audio_encoding_bitrate(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn audio_encoding_bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_is_audio_capture_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_audio_capture_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_custom_video_encoding_bitrate(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn custom_video_encoding_bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_custom_video_encoding_height(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn custom_video_encoding_height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_custom_video_encoding_width(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn custom_video_encoding_width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_historical_buffer_length(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn historical_buffer_length(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_historical_buffer_length_unit(&self,value:AppCaptureHistoricalBufferLengthUnit,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn historical_buffer_length_unit(&self,) ->  ::winrt::Result<AppCaptureHistoricalBufferLengthUnit>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureHistoricalBufferLengthUnit as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppCaptureHistoricalBufferLengthUnit>(result__)
          }
        }pub fn set_is_historical_capture_enabled(&self,value:bool,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_historical_capture_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).23)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_is_historical_capture_on_battery_allowed(&self,value:bool,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).24)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_historical_capture_on_battery_allowed(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).25)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_is_historical_capture_on_wireless_display_allowed(&self,value:bool,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).26)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_historical_capture_on_wireless_display_allowed(&self,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).27)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_maximum_record_length< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::TimeSpan>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).28)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn maximum_record_length(&self,) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).29)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn set_screenshot_destination_folder< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::storage::StorageFolder>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).30)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn screenshot_destination_folder(&self,) ->  ::winrt::Result<super::super::storage::StorageFolder>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::StorageFolder as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).31)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::storage::StorageFolder>(result__)
          }
        }pub fn set_video_encoding_bitrate_mode(&self,value:AppCaptureVideoEncodingBitrateMode,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).32)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn video_encoding_bitrate_mode(&self,) ->  ::winrt::Result<AppCaptureVideoEncodingBitrateMode>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureVideoEncodingBitrateMode as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).33)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppCaptureVideoEncodingBitrateMode>(result__)
          }
        }pub fn set_video_encoding_resolution_mode(&self,value:AppCaptureVideoEncodingResolutionMode,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).34)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn video_encoding_resolution_mode(&self,) ->  ::winrt::Result<AppCaptureVideoEncodingResolutionMode>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureVideoEncodingResolutionMode as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).35)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppCaptureVideoEncodingResolutionMode>(result__)
          }
        }pub fn set_is_app_capture_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).36)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_app_capture_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).37)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn is_cpu_constrained(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).38)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn is_disabled_by_policy(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).39)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn is_memory_constrained(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).40)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn has_hardware_encoder(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).41)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureSettings {
        type Vtable = IAppCaptureSettings_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(342375046,34823,18643,[136,58,151,14,228,83,42,57],);
        
      }#[repr(C)]pub struct IAppCaptureSettings_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:AppCaptureHistoricalBufferLengthUnit,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppCaptureHistoricalBufferLengthUnit,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:AppCaptureVideoEncodingBitrateMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppCaptureVideoEncodingBitrateMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:AppCaptureVideoEncodingResolutionMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppCaptureVideoEncodingResolutionMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{14683a86-8807-48d3-883a-970ee4532a39}")
        };
        
      }impl::std::convert::From<IAppCaptureSettings>for::winrt::Object {
        fn from(value:IAppCaptureSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureSettings>for::winrt::Object {
        fn from(value: &IAppCaptureSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAppCaptureSettings2(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureSettings2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureSettings2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureSettings2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureSettings2{}
      impl IAppCaptureSettings2 {
        pub fn is_gpu_constrained(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn alternate_shortcut_keys(&self,) ->  ::winrt::Result<AppCaptureAlternateShortcutKeys>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureAlternateShortcutKeys as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppCaptureAlternateShortcutKeys>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureSettings2 {
        type Vtable = IAppCaptureSettings2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4239970023,57963,18287,[155,26,236,52,45,42,143,222],);
        
      }#[repr(C)]pub struct IAppCaptureSettings2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureSettings2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{fcb8cee7-e26b-476f-9b1a-ec342d2a8fde}")
        };
        
      }impl::std::convert::From<IAppCaptureSettings2>for::winrt::Object {
        fn from(value:IAppCaptureSettings2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureSettings2>for::winrt::Object {
        fn from(value: &IAppCaptureSettings2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureSettings2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureSettings2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAppCaptureSettings3(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureSettings3 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureSettings3 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureSettings3 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureSettings3{}
      impl IAppCaptureSettings3 {
        pub fn set_is_microphone_capture_enabled(&self,value:bool,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_microphone_capture_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureSettings3 {
        type Vtable = IAppCaptureSettings3_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2838823678,35010,17110,[170,170,64,254,255,215,90,236],);
        
      }#[repr(C)]pub struct IAppCaptureSettings3_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureSettings3 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{a93502fe-88c2-42d6-aaaa-40feffd75aec}")
        };
        
      }impl::std::convert::From<IAppCaptureSettings3>for::winrt::Object {
        fn from(value:IAppCaptureSettings3) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureSettings3>for::winrt::Object {
        fn from(value: &IAppCaptureSettings3) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureSettings3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureSettings3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppCaptureVideoEncodingFrameRateMode(i32);
      impl::std::convert::From<i32>for AppCaptureVideoEncodingFrameRateMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppCaptureVideoEncodingFrameRateMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppCaptureVideoEncodingFrameRateMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppCaptureVideoEncodingFrameRateMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppCaptureVideoEncodingFrameRateMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureVideoEncodingFrameRateMode{}
      impl::std::marker::Copy for AppCaptureVideoEncodingFrameRateMode{}
      impl AppCaptureVideoEncodingFrameRateMode {
        #![allow(non_upper_case_globals)]pub const Standard:Self = Self(0i32);
        pub const High:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for AppCaptureVideoEncodingFrameRateMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureVideoEncodingFrameRateMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppCaptureVideoEncodingFrameRateMode;i4)",);
        
      }#[repr(transparent)]pub struct IAppCaptureSettings4(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureSettings4 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureSettings4 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureSettings4 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureSettings4{}
      impl IAppCaptureSettings4 {
        pub fn set_is_microphone_capture_enabled_by_default(&self,value:bool,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_microphone_capture_enabled_by_default(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_system_audio_gain(&self,value:f64) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn system_audio_gain(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<f64>(result__)
          }
        }pub fn set_microphone_gain(&self,value:f64) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn microphone_gain(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f64>(result__)
          }
        }pub fn set_video_encoding_frame_rate_mode(&self,value:AppCaptureVideoEncodingFrameRateMode,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn video_encoding_frame_rate_mode(&self,) ->  ::winrt::Result<AppCaptureVideoEncodingFrameRateMode>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureVideoEncodingFrameRateMode as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppCaptureVideoEncodingFrameRateMode>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureSettings4 {
        type Vtable = IAppCaptureSettings4_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(130185036,6785,18479,[162,68,4,157,149,242,91,11],);
        
      }#[repr(C)]pub struct IAppCaptureSettings4_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:AppCaptureVideoEncodingFrameRateMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppCaptureVideoEncodingFrameRateMode,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureSettings4 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{07c2774c-1a81-482f-a244-049d95f25b0b}")
        };
        
      }impl::std::convert::From<IAppCaptureSettings4>for::winrt::Object {
        fn from(value:IAppCaptureSettings4) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureSettings4>for::winrt::Object {
        fn from(value: &IAppCaptureSettings4) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureSettings4 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureSettings4 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAppCaptureSettings5(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureSettings5 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureSettings5 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureSettings5 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureSettings5{}
      impl IAppCaptureSettings5 {
        pub fn set_is_echo_cancellation_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_echo_cancellation_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_is_cursor_image_capture_enabled(&self,value:bool,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_cursor_image_capture_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureSettings5 {
        type Vtable = IAppCaptureSettings5_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(411649314,45288,19360,[143,19,62,170,95,164,1,59],);
        
      }#[repr(C)]pub struct IAppCaptureSettings5_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureSettings5 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{18894522-b0e8-4ba0-8f13-3eaa5fa4013b}")
        };
        
      }impl::std::convert::From<IAppCaptureSettings5>for::winrt::Object {
        fn from(value:IAppCaptureSettings5) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureSettings5>for::winrt::Object {
        fn from(value: &IAppCaptureSettings5) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureSettings5 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureSettings5 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppCaptureSettings(::winrt::Object);
      impl AppCaptureSettings {
        pub fn set_app_capture_destination_folder< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::storage::StorageFolder>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn app_capture_destination_folder(&self,) ->  ::winrt::Result<super::super::storage::StorageFolder>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::StorageFolder as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::storage::StorageFolder>(result__)
          }
        }pub fn set_audio_encoding_bitrate(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn audio_encoding_bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_is_audio_capture_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_audio_capture_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_custom_video_encoding_bitrate(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn custom_video_encoding_bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_custom_video_encoding_height(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn custom_video_encoding_height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_custom_video_encoding_width(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn custom_video_encoding_width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_historical_buffer_length(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn historical_buffer_length(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_historical_buffer_length_unit(&self,value:AppCaptureHistoricalBufferLengthUnit,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn historical_buffer_length_unit(&self,) ->  ::winrt::Result<AppCaptureHistoricalBufferLengthUnit>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureHistoricalBufferLengthUnit as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppCaptureHistoricalBufferLengthUnit>(result__)
          }
        }pub fn set_is_historical_capture_enabled(&self,value:bool,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_historical_capture_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).23)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_is_historical_capture_on_battery_allowed(&self,value:bool,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).24)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_historical_capture_on_battery_allowed(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).25)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_is_historical_capture_on_wireless_display_allowed(&self,value:bool,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).26)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_historical_capture_on_wireless_display_allowed(&self,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).27)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_maximum_record_length< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::TimeSpan>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).28)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn maximum_record_length(&self,) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).29)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn set_screenshot_destination_folder< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::storage::StorageFolder>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).30)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn screenshot_destination_folder(&self,) ->  ::winrt::Result<super::super::storage::StorageFolder>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::StorageFolder as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).31)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::storage::StorageFolder>(result__)
          }
        }pub fn set_video_encoding_bitrate_mode(&self,value:AppCaptureVideoEncodingBitrateMode,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).32)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn video_encoding_bitrate_mode(&self,) ->  ::winrt::Result<AppCaptureVideoEncodingBitrateMode>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureVideoEncodingBitrateMode as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).33)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppCaptureVideoEncodingBitrateMode>(result__)
          }
        }pub fn set_video_encoding_resolution_mode(&self,value:AppCaptureVideoEncodingResolutionMode,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).34)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn video_encoding_resolution_mode(&self,) ->  ::winrt::Result<AppCaptureVideoEncodingResolutionMode>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureVideoEncodingResolutionMode as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).35)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppCaptureVideoEncodingResolutionMode>(result__)
          }
        }pub fn set_is_app_capture_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).36)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_app_capture_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).37)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn is_cpu_constrained(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).38)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn is_disabled_by_policy(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).39)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn is_memory_constrained(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).40)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn has_hardware_encoder(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).41)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn is_gpu_constrained(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IAppCaptureSettings2>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn alternate_shortcut_keys(&self,) ->  ::winrt::Result<AppCaptureAlternateShortcutKeys>{
          let this =  &::winrt::Interface::cast::<IAppCaptureSettings2>(self).unwrap();
          unsafe {
            let mut result__: <AppCaptureAlternateShortcutKeys as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppCaptureAlternateShortcutKeys>(result__)
          }
        }pub fn set_is_microphone_capture_enabled(&self,value:bool,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppCaptureSettings3>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_microphone_capture_enabled(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IAppCaptureSettings3>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_is_microphone_capture_enabled_by_default(&self,value:bool,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppCaptureSettings4>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_microphone_capture_enabled_by_default(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IAppCaptureSettings4>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_system_audio_gain(&self,value:f64) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppCaptureSettings4>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn system_audio_gain(&self) ->  ::winrt::Result<f64>{
          let this =  &::winrt::Interface::cast::<IAppCaptureSettings4>(self).unwrap();
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<f64>(result__)
          }
        }pub fn set_microphone_gain(&self,value:f64) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppCaptureSettings4>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn microphone_gain(&self) ->  ::winrt::Result<f64>{
          let this =  &::winrt::Interface::cast::<IAppCaptureSettings4>(self).unwrap();
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f64>(result__)
          }
        }pub fn set_video_encoding_frame_rate_mode(&self,value:AppCaptureVideoEncodingFrameRateMode,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppCaptureSettings4>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn video_encoding_frame_rate_mode(&self,) ->  ::winrt::Result<AppCaptureVideoEncodingFrameRateMode>{
          let this =  &::winrt::Interface::cast::<IAppCaptureSettings4>(self).unwrap();
          unsafe {
            let mut result__: <AppCaptureVideoEncodingFrameRateMode as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppCaptureVideoEncodingFrameRateMode>(result__)
          }
        }pub fn set_is_echo_cancellation_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppCaptureSettings5>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_echo_cancellation_enabled(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IAppCaptureSettings5>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_is_cursor_image_capture_enabled(&self,value:bool,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAppCaptureSettings5>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn is_cursor_image_capture_enabled(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IAppCaptureSettings5>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }
      }impl::std::clone::Clone for AppCaptureSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppCaptureSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureSettings{}
      impl::std::fmt::Debug for AppCaptureSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppCaptureSettings {
        const NAME: & 'static str = "Windows.Media.Capture.AppCaptureSettings";
        
      }unsafe impl::winrt::Interface for AppCaptureSettings {
        type Vtable = IAppCaptureSettings_abi;
        const IID: ::winrt::Guid =  <IAppCaptureSettings as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppCaptureSettings;{14683a86-8807-48d3-883a-970ee4532a39})");
        
      }impl::std::convert::From<AppCaptureSettings>for::winrt::Object {
        fn from(value:AppCaptureSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppCaptureSettings>for::winrt::Object {
        fn from(value: &AppCaptureSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppCaptureSettings>for IAppCaptureSettings {
        fn from(value:AppCaptureSettings) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppCaptureSettings>for IAppCaptureSettings {
        fn from(value: &AppCaptureSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureSettings>>for AppCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureSettings>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureSettings>>for& 'a AppCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureSettings>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppCaptureSettings>for IAppCaptureSettings2 {
        fn from(value:AppCaptureSettings) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AppCaptureSettings>for IAppCaptureSettings2 {
        fn from(value: &AppCaptureSettings) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureSettings2>>for AppCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureSettings2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureSettings2>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureSettings2>>for& 'a AppCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureSettings2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureSettings2>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppCaptureSettings>for IAppCaptureSettings3 {
        fn from(value:AppCaptureSettings) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AppCaptureSettings>for IAppCaptureSettings3 {
        fn from(value: &AppCaptureSettings) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureSettings3>>for AppCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureSettings3>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureSettings3>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureSettings3>>for& 'a AppCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureSettings3>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureSettings3>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppCaptureSettings>for IAppCaptureSettings4 {
        fn from(value:AppCaptureSettings) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AppCaptureSettings>for IAppCaptureSettings4 {
        fn from(value: &AppCaptureSettings) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureSettings4>>for AppCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureSettings4>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureSettings4>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureSettings4>>for& 'a AppCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureSettings4>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureSettings4>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppCaptureSettings>for IAppCaptureSettings5 {
        fn from(value:AppCaptureSettings) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AppCaptureSettings>for IAppCaptureSettings5 {
        fn from(value: &AppCaptureSettings) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureSettings5>>for AppCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureSettings5>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureSettings5>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureSettings5>>for& 'a AppCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureSettings5>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureSettings5>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAppCaptureManagerStatics(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureManagerStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureManagerStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureManagerStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureManagerStatics{}
      impl IAppCaptureManagerStatics {
        pub fn get_current_settings(&self) ->  ::winrt::Result<AppCaptureSettings>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureSettings as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppCaptureSettings>(result__)
          }
        }pub fn apply_settings< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,AppCaptureSettings>>, >(&self,app_capture_settings:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),app_capture_settings.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureManagerStatics {
        type Vtable = IAppCaptureManagerStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2107522727,25218,18229,[141,78,170,69,249,15,103,35],);
        
      }#[repr(C)]pub struct IAppCaptureManagerStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,app_capture_settings: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureManagerStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{7d9e3ea7-6282-4735-8d4e-aa45f90f6723}")
        };
        
      }impl::std::convert::From<IAppCaptureManagerStatics>for::winrt::Object {
        fn from(value:IAppCaptureManagerStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureManagerStatics>for::winrt::Object {
        fn from(value: &IAppCaptureManagerStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureManagerStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureManagerStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }pub struct AppCaptureManager{}
      impl AppCaptureManager {
        pub fn get_current_settings() ->  ::winrt::Result<AppCaptureSettings>{
          Self::IAppCaptureManagerStatics(|this|unsafe {
            let mut result__: <AppCaptureSettings as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppCaptureSettings>(result__)
          })
        }pub fn apply_settings< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,AppCaptureSettings>>, >(app_capture_settings:T0__,) ->  ::winrt::Result<()>{
          Self::IAppCaptureManagerStatics(|this|unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),app_capture_settings.into().abi(),).ok()
          })
        }#[allow(non_snake_case)]fn IAppCaptureManagerStatics<R,F:FnOnce(&IAppCaptureManagerStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<AppCaptureManager,IAppCaptureManagerStatics, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::winrt::RuntimeName for AppCaptureManager {
        const NAME: & 'static str = "Windows.Media.Capture.AppCaptureManager";
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppCaptureMetadataPriority(i32);
      impl::std::convert::From<i32>for AppCaptureMetadataPriority {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppCaptureMetadataPriority {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppCaptureMetadataPriority {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppCaptureMetadataPriority {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppCaptureMetadataPriority {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureMetadataPriority{}
      impl::std::marker::Copy for AppCaptureMetadataPriority{}
      impl AppCaptureMetadataPriority {
        #![allow(non_upper_case_globals)]pub const Informational:Self = Self(0i32);
        pub const Important:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for AppCaptureMetadataPriority {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureMetadataPriority {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppCaptureMetadataPriority;i4)",);
        
      }#[repr(transparent)]pub struct IAppCaptureMetadataWriter(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureMetadataWriter {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureMetadataWriter {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureMetadataWriter {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureMetadataWriter{}
      impl IAppCaptureMetadataWriter {
        pub fn add_string_event< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,value:T1__,priority:AppCaptureMetadataPriority,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),name.into().abi(),value.into().abi(),priority,).ok()
          }
        }pub fn add_int32_event< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,value:i32,priority:AppCaptureMetadataPriority,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),name.into().abi(),value,priority,).ok()
          }
        }pub fn add_double_event< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,value:f64,priority:AppCaptureMetadataPriority,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),name.into().abi(),value,priority,).ok()
          }
        }pub fn start_string_state< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,value:T1__,priority:AppCaptureMetadataPriority,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),name.into().abi(),value.into().abi(),priority,).ok()
          }
        }pub fn start_int32_state< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,value:i32,priority:AppCaptureMetadataPriority,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),name.into().abi(),value,priority,).ok()
          }
        }pub fn start_double_state< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,value:f64,priority:AppCaptureMetadataPriority,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),name.into().abi(),value,priority,).ok()
          }
        }pub fn stop_state< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),name.into().abi(),).ok()
          }
        }pub fn stop_all_states(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn remaining_storage_bytes_available(&self) ->  ::winrt::Result<u64>{
          let this = self;
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u64>(result__)
          }
        }pub fn metadata_purged< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppCaptureMetadataWriter, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_metadata_purged< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureMetadataWriter {
        type Vtable = IAppCaptureMetadataWriter_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3771615351,39599,18100,[173,49,106,96,180,65,199,128],);
        
      }#[repr(C)]pub struct IAppCaptureMetadataWriter_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,name: ::winrt::RawPtr,value: ::winrt::RawPtr,priority:AppCaptureMetadataPriority,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,name: ::winrt::RawPtr,value:i32,priority:AppCaptureMetadataPriority,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,name: ::winrt::RawPtr,value:f64,priority:AppCaptureMetadataPriority,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,name: ::winrt::RawPtr,value: ::winrt::RawPtr,priority:AppCaptureMetadataPriority,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,name: ::winrt::RawPtr,value:i32,priority:AppCaptureMetadataPriority,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,name: ::winrt::RawPtr,value:f64,priority:AppCaptureMetadataPriority,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,name: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureMetadataWriter {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{e0ce4877-9aaf-46b4-ad31-6a60b441c780}")
        };
        
      }impl::std::convert::From<IAppCaptureMetadataWriter>for::winrt::Object {
        fn from(value:IAppCaptureMetadataWriter) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureMetadataWriter>for::winrt::Object {
        fn from(value: &IAppCaptureMetadataWriter) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureMetadataWriter {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureMetadataWriter {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppCaptureMetadataWriter(::winrt::Object);
      impl AppCaptureMetadataWriter {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn add_string_event< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,value:T1__,priority:AppCaptureMetadataPriority,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),name.into().abi(),value.into().abi(),priority,).ok()
          }
        }pub fn add_int32_event< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,value:i32,priority:AppCaptureMetadataPriority,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),name.into().abi(),value,priority,).ok()
          }
        }pub fn add_double_event< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,value:f64,priority:AppCaptureMetadataPriority,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),name.into().abi(),value,priority,).ok()
          }
        }pub fn start_string_state< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,value:T1__,priority:AppCaptureMetadataPriority,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),name.into().abi(),value.into().abi(),priority,).ok()
          }
        }pub fn start_int32_state< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,value:i32,priority:AppCaptureMetadataPriority,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),name.into().abi(),value,priority,).ok()
          }
        }pub fn start_double_state< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,value:f64,priority:AppCaptureMetadataPriority,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),name.into().abi(),value,priority,).ok()
          }
        }pub fn stop_state< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),name.into().abi(),).ok()
          }
        }pub fn stop_all_states(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn remaining_storage_bytes_available(&self) ->  ::winrt::Result<u64>{
          let this = self;
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u64>(result__)
          }
        }pub fn metadata_purged< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppCaptureMetadataWriter, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_metadata_purged< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<AppCaptureMetadataWriter, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for AppCaptureMetadataWriter {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppCaptureMetadataWriter {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureMetadataWriter{}
      impl::std::fmt::Debug for AppCaptureMetadataWriter {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppCaptureMetadataWriter {
        const NAME: & 'static str = "Windows.Media.Capture.AppCaptureMetadataWriter";
        
      }unsafe impl::winrt::Interface for AppCaptureMetadataWriter {
        type Vtable = IAppCaptureMetadataWriter_abi;
        const IID: ::winrt::Guid =  <IAppCaptureMetadataWriter as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureMetadataWriter {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppCaptureMetadataWriter;{e0ce4877-9aaf-46b4-ad31-6a60b441c780})");
        
      }impl::std::convert::From<AppCaptureMetadataWriter>for::winrt::Object {
        fn from(value:AppCaptureMetadataWriter) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppCaptureMetadataWriter>for::winrt::Object {
        fn from(value: &AppCaptureMetadataWriter) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppCaptureMetadataWriter {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppCaptureMetadataWriter {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppCaptureMetadataWriter>for super::super::foundation::IClosable {
        fn from(value:AppCaptureMetadataWriter) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AppCaptureMetadataWriter>for super::super::foundation::IClosable {
        fn from(value: &AppCaptureMetadataWriter) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for AppCaptureMetadataWriter {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a AppCaptureMetadataWriter {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<AppCaptureMetadataWriter>for IAppCaptureMetadataWriter {
        fn from(value:AppCaptureMetadataWriter) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppCaptureMetadataWriter>for IAppCaptureMetadataWriter {
        fn from(value: &AppCaptureMetadataWriter) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureMetadataWriter>>for AppCaptureMetadataWriter {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureMetadataWriter>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureMetadataWriter>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureMetadataWriter>>for& 'a AppCaptureMetadataWriter {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureMetadataWriter>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureMetadataWriter>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for AppCaptureMetadataWriter{}
      unsafe impl::std::marker::Sync for AppCaptureMetadataWriter{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppCaptureMicrophoneCaptureState(i32);
      impl::std::convert::From<i32>for AppCaptureMicrophoneCaptureState {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppCaptureMicrophoneCaptureState {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppCaptureMicrophoneCaptureState {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppCaptureMicrophoneCaptureState {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppCaptureMicrophoneCaptureState {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureMicrophoneCaptureState{}
      impl::std::marker::Copy for AppCaptureMicrophoneCaptureState{}
      impl AppCaptureMicrophoneCaptureState {
        #![allow(non_upper_case_globals)]pub const Stopped:Self = Self(0i32);
        pub const Started:Self = Self(1i32);
        pub const Failed:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for AppCaptureMicrophoneCaptureState {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureMicrophoneCaptureState {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppCaptureMicrophoneCaptureState;i4)",);
        
      }#[repr(transparent)]pub struct IAppCaptureMicrophoneCaptureStateChangedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureMicrophoneCaptureStateChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureMicrophoneCaptureStateChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureMicrophoneCaptureStateChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureMicrophoneCaptureStateChangedEventArgs{}
      impl IAppCaptureMicrophoneCaptureStateChangedEventArgs {
        pub fn state(&self) ->  ::winrt::Result<AppCaptureMicrophoneCaptureState>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureMicrophoneCaptureState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppCaptureMicrophoneCaptureState>(result__)
          }
        }pub fn error_code(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureMicrophoneCaptureStateChangedEventArgs {
        type Vtable = IAppCaptureMicrophoneCaptureStateChangedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(843916446,17852,19509,[188,53,228,105,252,122,105,224],);
        
      }#[repr(C)]pub struct IAppCaptureMicrophoneCaptureStateChangedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppCaptureMicrophoneCaptureState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureMicrophoneCaptureStateChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{324d249e-45bc-4c35-bc35-e469fc7a69e0}")
        };
        
      }impl::std::convert::From<IAppCaptureMicrophoneCaptureStateChangedEventArgs>for::winrt::Object {
        fn from(value:IAppCaptureMicrophoneCaptureStateChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureMicrophoneCaptureStateChangedEventArgs>for::winrt::Object {
        fn from(value: &IAppCaptureMicrophoneCaptureStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureMicrophoneCaptureStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureMicrophoneCaptureStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppCaptureMicrophoneCaptureStateChangedEventArgs(::winrt::Object);
      impl AppCaptureMicrophoneCaptureStateChangedEventArgs {
        pub fn state(&self) ->  ::winrt::Result<AppCaptureMicrophoneCaptureState>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureMicrophoneCaptureState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppCaptureMicrophoneCaptureState>(result__)
          }
        }pub fn error_code(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }impl::std::clone::Clone for AppCaptureMicrophoneCaptureStateChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppCaptureMicrophoneCaptureStateChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureMicrophoneCaptureStateChangedEventArgs{}
      impl::std::fmt::Debug for AppCaptureMicrophoneCaptureStateChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppCaptureMicrophoneCaptureStateChangedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.AppCaptureMicrophoneCaptureStateChangedEventArgs";
        
      }unsafe impl::winrt::Interface for AppCaptureMicrophoneCaptureStateChangedEventArgs {
        type Vtable = IAppCaptureMicrophoneCaptureStateChangedEventArgs_abi;
        const IID: ::winrt::Guid =  <IAppCaptureMicrophoneCaptureStateChangedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureMicrophoneCaptureStateChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppCaptureMicrophoneCaptureStateChangedEventArgs;{324d249e-45bc-4c35-bc35-e469fc7a69e0})");
        
      }impl::std::convert::From<AppCaptureMicrophoneCaptureStateChangedEventArgs>for::winrt::Object {
        fn from(value:AppCaptureMicrophoneCaptureStateChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppCaptureMicrophoneCaptureStateChangedEventArgs>for::winrt::Object {
        fn from(value: &AppCaptureMicrophoneCaptureStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppCaptureMicrophoneCaptureStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppCaptureMicrophoneCaptureStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppCaptureMicrophoneCaptureStateChangedEventArgs>for IAppCaptureMicrophoneCaptureStateChangedEventArgs {
        fn from(value:AppCaptureMicrophoneCaptureStateChangedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppCaptureMicrophoneCaptureStateChangedEventArgs>for IAppCaptureMicrophoneCaptureStateChangedEventArgs {
        fn from(value: &AppCaptureMicrophoneCaptureStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,IAppCaptureMicrophoneCaptureStateChangedEventArgs>, >for AppCaptureMicrophoneCaptureStateChangedEventArgs {
        fn into(self,) ->  ::winrt::Param< 'a ,IAppCaptureMicrophoneCaptureStateChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureMicrophoneCaptureStateChangedEventArgs, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,IAppCaptureMicrophoneCaptureStateChangedEventArgs>, >for& 'a AppCaptureMicrophoneCaptureStateChangedEventArgs {
        fn into(self,) ->  ::winrt::Param< 'a ,IAppCaptureMicrophoneCaptureStateChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureMicrophoneCaptureStateChangedEventArgs, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for AppCaptureMicrophoneCaptureStateChangedEventArgs{}
      unsafe impl::std::marker::Sync for AppCaptureMicrophoneCaptureStateChangedEventArgs{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct AppCaptureRecordingState(i32);
      impl::std::convert::From<i32>for AppCaptureRecordingState {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AppCaptureRecordingState {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AppCaptureRecordingState {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AppCaptureRecordingState {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AppCaptureRecordingState {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureRecordingState{}
      impl::std::marker::Copy for AppCaptureRecordingState{}
      impl AppCaptureRecordingState {
        #![allow(non_upper_case_globals)]pub const InProgress:Self = Self(0i32);
        pub const Completed:Self = Self(1i32);
        pub const Failed:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for AppCaptureRecordingState {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureRecordingState {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.AppCaptureRecordingState;i4)",);
        
      }#[repr(transparent)]pub struct IAppCaptureRecordingStateChangedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureRecordingStateChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureRecordingStateChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureRecordingStateChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureRecordingStateChangedEventArgs{}
      impl IAppCaptureRecordingStateChangedEventArgs {
        pub fn state(&self) ->  ::winrt::Result<AppCaptureRecordingState>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureRecordingState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppCaptureRecordingState>(result__)
          }
        }pub fn error_code(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureRecordingStateChangedEventArgs {
        type Vtable = IAppCaptureRecordingStateChangedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(620529426,58117,18701,[180,21,107,28,144,73,115,107],);
        
      }#[repr(C)]pub struct IAppCaptureRecordingStateChangedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppCaptureRecordingState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureRecordingStateChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{24fc8712-e305-490d-b415-6b1c9049736b}")
        };
        
      }impl::std::convert::From<IAppCaptureRecordingStateChangedEventArgs>for::winrt::Object {
        fn from(value:IAppCaptureRecordingStateChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureRecordingStateChangedEventArgs>for::winrt::Object {
        fn from(value: &IAppCaptureRecordingStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureRecordingStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureRecordingStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppCaptureRecordingStateChangedEventArgs(::winrt::Object);
      impl AppCaptureRecordingStateChangedEventArgs {
        pub fn state(&self) ->  ::winrt::Result<AppCaptureRecordingState>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureRecordingState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppCaptureRecordingState>(result__)
          }
        }pub fn error_code(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }impl::std::clone::Clone for AppCaptureRecordingStateChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppCaptureRecordingStateChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureRecordingStateChangedEventArgs{}
      impl::std::fmt::Debug for AppCaptureRecordingStateChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppCaptureRecordingStateChangedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.AppCaptureRecordingStateChangedEventArgs";
        
      }unsafe impl::winrt::Interface for AppCaptureRecordingStateChangedEventArgs {
        type Vtable = IAppCaptureRecordingStateChangedEventArgs_abi;
        const IID: ::winrt::Guid =  <IAppCaptureRecordingStateChangedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureRecordingStateChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppCaptureRecordingStateChangedEventArgs;{24fc8712-e305-490d-b415-6b1c9049736b})");
        
      }impl::std::convert::From<AppCaptureRecordingStateChangedEventArgs>for::winrt::Object {
        fn from(value:AppCaptureRecordingStateChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppCaptureRecordingStateChangedEventArgs>for::winrt::Object {
        fn from(value: &AppCaptureRecordingStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppCaptureRecordingStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppCaptureRecordingStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppCaptureRecordingStateChangedEventArgs>for IAppCaptureRecordingStateChangedEventArgs {
        fn from(value:AppCaptureRecordingStateChangedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppCaptureRecordingStateChangedEventArgs>for IAppCaptureRecordingStateChangedEventArgs {
        fn from(value: &AppCaptureRecordingStateChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureRecordingStateChangedEventArgs>>for AppCaptureRecordingStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureRecordingStateChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureRecordingStateChangedEventArgs, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureRecordingStateChangedEventArgs>>for& 'a AppCaptureRecordingStateChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureRecordingStateChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureRecordingStateChangedEventArgs, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for AppCaptureRecordingStateChangedEventArgs{}
      unsafe impl::std::marker::Sync for AppCaptureRecordingStateChangedEventArgs{}
      #[repr(transparent)]pub struct IAppCaptureRecordOperation(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureRecordOperation {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureRecordOperation {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureRecordOperation {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureRecordOperation{}
      impl IAppCaptureRecordOperation {
        pub fn stop_recording(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn state(&self) ->  ::winrt::Result<AppCaptureRecordingState>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureRecordingState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppCaptureRecordingState>(result__)
          }
        }pub fn error_code(&self,) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn duration(&self,) ->  ::winrt::Result<super::super::foundation::IReference<super::super::foundation::TimeSpan>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference<super::super::foundation::TimeSpan, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IReference:: <super::super::foundation::TimeSpan> >(result__)
          }
        }pub fn file(&self) ->  ::winrt::Result<super::super::storage::StorageFile>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::StorageFile as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::storage::StorageFile>(result__)
          }
        }pub fn is_file_truncated(&self,) ->  ::winrt::Result<super::super::foundation::IReference<bool>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <bool>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<bool>>(result__)
          }
        }pub fn state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppCaptureRecordOperation,AppCaptureRecordingStateChangedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn duration_generated< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppCaptureRecordOperation,AppCaptureDurationGeneratedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_duration_generated< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn file_generated< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppCaptureRecordOperation,AppCaptureFileGeneratedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_file_generated< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureRecordOperation {
        type Vtable = IAppCaptureRecordOperation_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3328188585,5432,18780,[155,187,43,168,112,236,88,97],);
        
      }#[repr(C)]pub struct IAppCaptureRecordOperation_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppCaptureRecordingState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureRecordOperation {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c66020a9-1538-495c-9bbb-2ba870ec5861}")
        };
        
      }impl::std::convert::From<IAppCaptureRecordOperation>for::winrt::Object {
        fn from(value:IAppCaptureRecordOperation) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureRecordOperation>for::winrt::Object {
        fn from(value: &IAppCaptureRecordOperation) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureRecordOperation {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureRecordOperation {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppCaptureRecordOperation(::winrt::Object);
      impl AppCaptureRecordOperation {
        pub fn stop_recording(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn state(&self) ->  ::winrt::Result<AppCaptureRecordingState>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureRecordingState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppCaptureRecordingState>(result__)
          }
        }pub fn error_code(&self,) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn duration(&self,) ->  ::winrt::Result<super::super::foundation::IReference<super::super::foundation::TimeSpan>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference<super::super::foundation::TimeSpan, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IReference:: <super::super::foundation::TimeSpan> >(result__)
          }
        }pub fn file(&self) ->  ::winrt::Result<super::super::storage::StorageFile>{
          let this = self;
          unsafe {
            let mut result__: <super::super::storage::StorageFile as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::storage::StorageFile>(result__)
          }
        }pub fn is_file_truncated(&self,) ->  ::winrt::Result<super::super::foundation::IReference<bool>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <bool>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<bool>>(result__)
          }
        }pub fn state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppCaptureRecordOperation,AppCaptureRecordingStateChangedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn duration_generated< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppCaptureRecordOperation,AppCaptureDurationGeneratedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_duration_generated< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn file_generated< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppCaptureRecordOperation,AppCaptureFileGeneratedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_file_generated< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for AppCaptureRecordOperation {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppCaptureRecordOperation {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureRecordOperation{}
      impl::std::fmt::Debug for AppCaptureRecordOperation {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppCaptureRecordOperation {
        const NAME: & 'static str = "Windows.Media.Capture.AppCaptureRecordOperation";
        
      }unsafe impl::winrt::Interface for AppCaptureRecordOperation {
        type Vtable = IAppCaptureRecordOperation_abi;
        const IID: ::winrt::Guid =  <IAppCaptureRecordOperation as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureRecordOperation {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppCaptureRecordOperation;{c66020a9-1538-495c-9bbb-2ba870ec5861})");
        
      }impl::std::convert::From<AppCaptureRecordOperation>for::winrt::Object {
        fn from(value:AppCaptureRecordOperation) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppCaptureRecordOperation>for::winrt::Object {
        fn from(value: &AppCaptureRecordOperation) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppCaptureRecordOperation {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppCaptureRecordOperation {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppCaptureRecordOperation>for IAppCaptureRecordOperation {
        fn from(value:AppCaptureRecordOperation) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppCaptureRecordOperation>for IAppCaptureRecordOperation {
        fn from(value: &AppCaptureRecordOperation) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureRecordOperation>>for AppCaptureRecordOperation {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureRecordOperation>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureRecordOperation>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureRecordOperation>>for& 'a AppCaptureRecordOperation {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureRecordOperation>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureRecordOperation>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for AppCaptureRecordOperation{}
      unsafe impl::std::marker::Sync for AppCaptureRecordOperation{}
      #[repr(transparent)]pub struct IAppCaptureState(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureState {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureState {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureState {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureState{}
      impl IAppCaptureState {
        pub fn is_target_running(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn is_historical_capture_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn should_capture_microphone(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_should_capture_microphone(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn restart_microphone_capture(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn microphone_capture_state(&self,) ->  ::winrt::Result<AppCaptureMicrophoneCaptureState>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureMicrophoneCaptureState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppCaptureMicrophoneCaptureState>(result__)
          }
        }pub fn microphone_capture_error(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn microphone_capture_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppCaptureState,AppCaptureMicrophoneCaptureStateChangedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_microphone_capture_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn capture_target_closed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppCaptureState, ::winrt::Object, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_capture_target_closed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureState {
        type Vtable = IAppCaptureState_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1930642290,54507,17614,[149,56,70,95,80,106,196,234],);
        
      }#[repr(C)]pub struct IAppCaptureState_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AppCaptureMicrophoneCaptureState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureState {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{73134372-d4eb-44ce-9538-465f506ac4ea}")
        };
        
      }impl::std::convert::From<IAppCaptureState>for::winrt::Object {
        fn from(value:IAppCaptureState) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureState>for::winrt::Object {
        fn from(value: &IAppCaptureState) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureState {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureState {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppCaptureState(::winrt::Object);
      impl AppCaptureState {
        pub fn is_target_running(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn is_historical_capture_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn should_capture_microphone(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_should_capture_microphone(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn restart_microphone_capture(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn microphone_capture_state(&self,) ->  ::winrt::Result<AppCaptureMicrophoneCaptureState>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureMicrophoneCaptureState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppCaptureMicrophoneCaptureState>(result__)
          }
        }pub fn microphone_capture_error(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn microphone_capture_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppCaptureState,AppCaptureMicrophoneCaptureStateChangedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_microphone_capture_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn capture_target_closed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<AppCaptureState, ::winrt::Object, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_capture_target_closed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for AppCaptureState {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppCaptureState {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureState{}
      impl::std::fmt::Debug for AppCaptureState {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppCaptureState {
        const NAME: & 'static str = "Windows.Media.Capture.AppCaptureState";
        
      }unsafe impl::winrt::Interface for AppCaptureState {
        type Vtable = IAppCaptureState_abi;
        const IID: ::winrt::Guid =  <IAppCaptureState as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureState {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppCaptureState;{73134372-d4eb-44ce-9538-465f506ac4ea})");
        
      }impl::std::convert::From<AppCaptureState>for::winrt::Object {
        fn from(value:AppCaptureState) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppCaptureState>for::winrt::Object {
        fn from(value: &AppCaptureState) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppCaptureState {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppCaptureState {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppCaptureState>for IAppCaptureState {
        fn from(value:AppCaptureState) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppCaptureState>for IAppCaptureState {
        fn from(value: &AppCaptureState) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureState>>for AppCaptureState {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureState>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureState>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureState>>for& 'a AppCaptureState {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureState>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureState>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for AppCaptureState{}
      unsafe impl::std::marker::Sync for AppCaptureState{}
      #[repr(transparent)]pub struct IAppCaptureServices(::winrt::Object);
      impl::std::clone::Clone for IAppCaptureServices {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAppCaptureServices {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAppCaptureServices {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAppCaptureServices{}
      impl IAppCaptureServices {
        pub fn record(&self) ->  ::winrt::Result<AppCaptureRecordOperation>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureRecordOperation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppCaptureRecordOperation>(result__)
          }
        }pub fn record_time_span< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::DateTime>>,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::TimeSpan>>, >(&self,start_time:T0__,duration:T1__,) ->  ::winrt::Result<AppCaptureRecordOperation>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureRecordOperation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),start_time.into().abi(),duration.into().abi(), &mut result__,).from_abi::<AppCaptureRecordOperation>(result__)
          }
        }pub fn can_capture(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn state(&self) ->  ::winrt::Result<AppCaptureState>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppCaptureState>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAppCaptureServices {
        type Vtable = IAppCaptureServices_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1157546165,13557,20248,[174,140,185,18,58,187,252,13],);
        
      }#[repr(C)]pub struct IAppCaptureServices_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,start_time:super::super::foundation::DateTime_abi,duration:super::super::foundation::TimeSpan_abi,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAppCaptureServices {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{44fec0b5-34f5-4f18-ae8c-b9123abbfc0d}")
        };
        
      }impl::std::convert::From<IAppCaptureServices>for::winrt::Object {
        fn from(value:IAppCaptureServices) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAppCaptureServices>for::winrt::Object {
        fn from(value: &IAppCaptureServices) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAppCaptureServices {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAppCaptureServices {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AppCaptureServices(::winrt::Object);
      impl AppCaptureServices {
        pub fn record(&self) ->  ::winrt::Result<AppCaptureRecordOperation>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureRecordOperation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppCaptureRecordOperation>(result__)
          }
        }pub fn record_time_span< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::DateTime>>,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::TimeSpan>>, >(&self,start_time:T0__,duration:T1__,) ->  ::winrt::Result<AppCaptureRecordOperation>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureRecordOperation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),start_time.into().abi(),duration.into().abi(), &mut result__,).from_abi::<AppCaptureRecordOperation>(result__)
          }
        }pub fn can_capture(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn state(&self) ->  ::winrt::Result<AppCaptureState>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<AppCaptureState>(result__)
          }
        }
      }impl::std::clone::Clone for AppCaptureServices {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AppCaptureServices {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AppCaptureServices{}
      impl::std::fmt::Debug for AppCaptureServices {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AppCaptureServices {
        const NAME: & 'static str = "Windows.Media.Capture.AppCaptureServices";
        
      }unsafe impl::winrt::Interface for AppCaptureServices {
        type Vtable = IAppCaptureServices_abi;
        const IID: ::winrt::Guid =  <IAppCaptureServices as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AppCaptureServices {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.AppCaptureServices;{44fec0b5-34f5-4f18-ae8c-b9123abbfc0d})");
        
      }impl::std::convert::From<AppCaptureServices>for::winrt::Object {
        fn from(value:AppCaptureServices) -> Self {
          value.0
        }
      }impl::std::convert::From<&AppCaptureServices>for::winrt::Object {
        fn from(value: &AppCaptureServices) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AppCaptureServices {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AppCaptureServices {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AppCaptureServices>for IAppCaptureServices {
        fn from(value:AppCaptureServices) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AppCaptureServices>for IAppCaptureServices {
        fn from(value: &AppCaptureServices) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureServices>>for AppCaptureServices {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureServices>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureServices>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAppCaptureServices>>for& 'a AppCaptureServices {
        fn into(self) ->  ::winrt::Param< 'a ,IAppCaptureServices>{
          ::winrt::Param::Owned(::std::convert::Into::<IAppCaptureServices>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for AppCaptureServices{}
      unsafe impl::std::marker::Sync for AppCaptureServices{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct CameraCaptureUIPhotoFormat(i32);
      impl::std::convert::From<i32>for CameraCaptureUIPhotoFormat {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for CameraCaptureUIPhotoFormat {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for CameraCaptureUIPhotoFormat {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for CameraCaptureUIPhotoFormat {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for CameraCaptureUIPhotoFormat {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for CameraCaptureUIPhotoFormat{}
      impl::std::marker::Copy for CameraCaptureUIPhotoFormat{}
      impl CameraCaptureUIPhotoFormat {
        #![allow(non_upper_case_globals)]pub const Jpeg:Self = Self(0i32);
        pub const Png:Self = Self(1i32);
        pub const JpegXR:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for CameraCaptureUIPhotoFormat {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for CameraCaptureUIPhotoFormat {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.CameraCaptureUIPhotoFormat;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct CameraCaptureUIMaxPhotoResolution(i32);
      impl::std::convert::From<i32>for CameraCaptureUIMaxPhotoResolution {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for CameraCaptureUIMaxPhotoResolution {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for CameraCaptureUIMaxPhotoResolution {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for CameraCaptureUIMaxPhotoResolution {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for CameraCaptureUIMaxPhotoResolution {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for CameraCaptureUIMaxPhotoResolution{}
      impl::std::marker::Copy for CameraCaptureUIMaxPhotoResolution{}
      impl CameraCaptureUIMaxPhotoResolution {
        #![allow(non_upper_case_globals)]pub const HighestAvailable:Self = Self(0i32);
        pub const VerySmallQvga:Self = Self(1i32);
        pub const SmallVga:Self = Self(2i32);
        pub const MediumXga:Self = Self(3i32);
        pub const Large3M:Self = Self(4i32);
        pub const VeryLarge5M:Self = Self(5i32);
        
      }unsafe impl::winrt::Abi for CameraCaptureUIMaxPhotoResolution {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for CameraCaptureUIMaxPhotoResolution {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.CameraCaptureUIMaxPhotoResolution;i4)",);
        
      }#[repr(transparent)]pub struct ICameraCaptureUIPhotoCaptureSettings(::winrt::Object);
      impl::std::clone::Clone for ICameraCaptureUIPhotoCaptureSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ICameraCaptureUIPhotoCaptureSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ICameraCaptureUIPhotoCaptureSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ICameraCaptureUIPhotoCaptureSettings{}
      impl ICameraCaptureUIPhotoCaptureSettings {
        pub fn format(&self) ->  ::winrt::Result<CameraCaptureUIPhotoFormat>{
          let this = self;
          unsafe {
            let mut result__: <CameraCaptureUIPhotoFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CameraCaptureUIPhotoFormat>(result__)
          }
        }pub fn set_format(&self,value:CameraCaptureUIPhotoFormat) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn max_resolution(&self) ->  ::winrt::Result<CameraCaptureUIMaxPhotoResolution>{
          let this = self;
          unsafe {
            let mut result__: <CameraCaptureUIMaxPhotoResolution as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<CameraCaptureUIMaxPhotoResolution>(result__)
          }
        }pub fn set_max_resolution(&self,value:CameraCaptureUIMaxPhotoResolution,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn cropped_size_in_pixels(&self,) ->  ::winrt::Result<super::super::foundation::Size>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Size as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::Size>(result__)
          }
        }pub fn set_cropped_size_in_pixels< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Size>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn cropped_aspect_ratio(&self,) ->  ::winrt::Result<super::super::foundation::Size>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Size as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::Size>(result__)
          }
        }pub fn set_cropped_aspect_ratio< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Size>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn allow_cropping(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_allow_cropping(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for ICameraCaptureUIPhotoCaptureSettings {
        type Vtable = ICameraCaptureUIPhotoCaptureSettings_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3119890071,13426,18088,[138,158,4,206,66,204,201,125],);
        
      }#[repr(C)]pub struct ICameraCaptureUIPhotoCaptureSettings_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut CameraCaptureUIPhotoFormat,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:CameraCaptureUIPhotoFormat,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut CameraCaptureUIMaxPhotoResolution,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:CameraCaptureUIMaxPhotoResolution,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::Size_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::foundation::Size_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::Size_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::foundation::Size_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ICameraCaptureUIPhotoCaptureSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{b9f5be97-3472-46a8-8a9e-04ce42ccc97d}")
        };
        
      }impl::std::convert::From<ICameraCaptureUIPhotoCaptureSettings>for::winrt::Object {
        fn from(value:ICameraCaptureUIPhotoCaptureSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&ICameraCaptureUIPhotoCaptureSettings>for::winrt::Object {
        fn from(value: &ICameraCaptureUIPhotoCaptureSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ICameraCaptureUIPhotoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ICameraCaptureUIPhotoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct CameraCaptureUIPhotoCaptureSettings(::winrt::Object);
      impl CameraCaptureUIPhotoCaptureSettings {
        pub fn format(&self) ->  ::winrt::Result<CameraCaptureUIPhotoFormat>{
          let this = self;
          unsafe {
            let mut result__: <CameraCaptureUIPhotoFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CameraCaptureUIPhotoFormat>(result__)
          }
        }pub fn set_format(&self,value:CameraCaptureUIPhotoFormat) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn max_resolution(&self) ->  ::winrt::Result<CameraCaptureUIMaxPhotoResolution>{
          let this = self;
          unsafe {
            let mut result__: <CameraCaptureUIMaxPhotoResolution as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<CameraCaptureUIMaxPhotoResolution>(result__)
          }
        }pub fn set_max_resolution(&self,value:CameraCaptureUIMaxPhotoResolution,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn cropped_size_in_pixels(&self,) ->  ::winrt::Result<super::super::foundation::Size>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Size as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::Size>(result__)
          }
        }pub fn set_cropped_size_in_pixels< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Size>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn cropped_aspect_ratio(&self,) ->  ::winrt::Result<super::super::foundation::Size>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Size as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::Size>(result__)
          }
        }pub fn set_cropped_aspect_ratio< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Size>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn allow_cropping(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_allow_cropping(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }impl::std::clone::Clone for CameraCaptureUIPhotoCaptureSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for CameraCaptureUIPhotoCaptureSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for CameraCaptureUIPhotoCaptureSettings{}
      impl::std::fmt::Debug for CameraCaptureUIPhotoCaptureSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for CameraCaptureUIPhotoCaptureSettings {
        const NAME: & 'static str = "Windows.Media.Capture.CameraCaptureUIPhotoCaptureSettings";
        
      }unsafe impl::winrt::Interface for CameraCaptureUIPhotoCaptureSettings {
        type Vtable = ICameraCaptureUIPhotoCaptureSettings_abi;
        const IID: ::winrt::Guid =  <ICameraCaptureUIPhotoCaptureSettings as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for CameraCaptureUIPhotoCaptureSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.CameraCaptureUIPhotoCaptureSettings;{b9f5be97-3472-46a8-8a9e-04ce42ccc97d})");
        
      }impl::std::convert::From<CameraCaptureUIPhotoCaptureSettings>for::winrt::Object {
        fn from(value:CameraCaptureUIPhotoCaptureSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&CameraCaptureUIPhotoCaptureSettings>for::winrt::Object {
        fn from(value: &CameraCaptureUIPhotoCaptureSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for CameraCaptureUIPhotoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a CameraCaptureUIPhotoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<CameraCaptureUIPhotoCaptureSettings>for ICameraCaptureUIPhotoCaptureSettings {
        fn from(value:CameraCaptureUIPhotoCaptureSettings) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&CameraCaptureUIPhotoCaptureSettings>for ICameraCaptureUIPhotoCaptureSettings {
        fn from(value: &CameraCaptureUIPhotoCaptureSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICameraCaptureUIPhotoCaptureSettings>>for CameraCaptureUIPhotoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,ICameraCaptureUIPhotoCaptureSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<ICameraCaptureUIPhotoCaptureSettings, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICameraCaptureUIPhotoCaptureSettings>>for& 'a CameraCaptureUIPhotoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,ICameraCaptureUIPhotoCaptureSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<ICameraCaptureUIPhotoCaptureSettings, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for CameraCaptureUIPhotoCaptureSettings{}
      unsafe impl::std::marker::Sync for CameraCaptureUIPhotoCaptureSettings{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct CameraCaptureUIVideoFormat(i32);
      impl::std::convert::From<i32>for CameraCaptureUIVideoFormat {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for CameraCaptureUIVideoFormat {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for CameraCaptureUIVideoFormat {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for CameraCaptureUIVideoFormat {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for CameraCaptureUIVideoFormat {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for CameraCaptureUIVideoFormat{}
      impl::std::marker::Copy for CameraCaptureUIVideoFormat{}
      impl CameraCaptureUIVideoFormat {
        #![allow(non_upper_case_globals)]pub const Mp4:Self = Self(0i32);
        pub const Wmv:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for CameraCaptureUIVideoFormat {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for CameraCaptureUIVideoFormat {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.CameraCaptureUIVideoFormat;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct CameraCaptureUIMaxVideoResolution(i32);
      impl::std::convert::From<i32>for CameraCaptureUIMaxVideoResolution {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for CameraCaptureUIMaxVideoResolution {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for CameraCaptureUIMaxVideoResolution {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for CameraCaptureUIMaxVideoResolution {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for CameraCaptureUIMaxVideoResolution {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for CameraCaptureUIMaxVideoResolution{}
      impl::std::marker::Copy for CameraCaptureUIMaxVideoResolution{}
      impl CameraCaptureUIMaxVideoResolution {
        #![allow(non_upper_case_globals)]pub const HighestAvailable:Self = Self(0i32);
        pub const LowDefinition:Self = Self(1i32);
        pub const StandardDefinition:Self = Self(2i32);
        pub const HighDefinition:Self = Self(3i32);
        
      }unsafe impl::winrt::Abi for CameraCaptureUIMaxVideoResolution {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for CameraCaptureUIMaxVideoResolution {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.CameraCaptureUIMaxVideoResolution;i4)",);
        
      }#[repr(transparent)]pub struct ICameraCaptureUIVideoCaptureSettings(::winrt::Object);
      impl::std::clone::Clone for ICameraCaptureUIVideoCaptureSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ICameraCaptureUIVideoCaptureSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ICameraCaptureUIVideoCaptureSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ICameraCaptureUIVideoCaptureSettings{}
      impl ICameraCaptureUIVideoCaptureSettings {
        pub fn format(&self) ->  ::winrt::Result<CameraCaptureUIVideoFormat>{
          let this = self;
          unsafe {
            let mut result__: <CameraCaptureUIVideoFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CameraCaptureUIVideoFormat>(result__)
          }
        }pub fn set_format(&self,value:CameraCaptureUIVideoFormat) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn max_resolution(&self) ->  ::winrt::Result<CameraCaptureUIMaxVideoResolution>{
          let this = self;
          unsafe {
            let mut result__: <CameraCaptureUIMaxVideoResolution as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<CameraCaptureUIMaxVideoResolution>(result__)
          }
        }pub fn set_max_resolution(&self,value:CameraCaptureUIMaxVideoResolution,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn max_duration_in_seconds(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
          }
        }pub fn set_max_duration_in_seconds(&self,value:f32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn allow_trimming(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_allow_trimming(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for ICameraCaptureUIVideoCaptureSettings {
        type Vtable = ICameraCaptureUIVideoCaptureSettings_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1693003039,41613,16986,[184,79,229,104,51,95,242,78],);
        
      }#[repr(C)]pub struct ICameraCaptureUIVideoCaptureSettings_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut CameraCaptureUIVideoFormat,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:CameraCaptureUIVideoFormat,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut CameraCaptureUIMaxVideoResolution,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:CameraCaptureUIMaxVideoResolution,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ICameraCaptureUIVideoCaptureSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{64e92d1f-a28d-425a-b84f-e568335ff24e}")
        };
        
      }impl::std::convert::From<ICameraCaptureUIVideoCaptureSettings>for::winrt::Object {
        fn from(value:ICameraCaptureUIVideoCaptureSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&ICameraCaptureUIVideoCaptureSettings>for::winrt::Object {
        fn from(value: &ICameraCaptureUIVideoCaptureSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ICameraCaptureUIVideoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ICameraCaptureUIVideoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct CameraCaptureUIVideoCaptureSettings(::winrt::Object);
      impl CameraCaptureUIVideoCaptureSettings {
        pub fn format(&self) ->  ::winrt::Result<CameraCaptureUIVideoFormat>{
          let this = self;
          unsafe {
            let mut result__: <CameraCaptureUIVideoFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CameraCaptureUIVideoFormat>(result__)
          }
        }pub fn set_format(&self,value:CameraCaptureUIVideoFormat) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn max_resolution(&self) ->  ::winrt::Result<CameraCaptureUIMaxVideoResolution>{
          let this = self;
          unsafe {
            let mut result__: <CameraCaptureUIMaxVideoResolution as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<CameraCaptureUIMaxVideoResolution>(result__)
          }
        }pub fn set_max_resolution(&self,value:CameraCaptureUIMaxVideoResolution,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn max_duration_in_seconds(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
          }
        }pub fn set_max_duration_in_seconds(&self,value:f32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn allow_trimming(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_allow_trimming(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }impl::std::clone::Clone for CameraCaptureUIVideoCaptureSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for CameraCaptureUIVideoCaptureSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for CameraCaptureUIVideoCaptureSettings{}
      impl::std::fmt::Debug for CameraCaptureUIVideoCaptureSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for CameraCaptureUIVideoCaptureSettings {
        const NAME: & 'static str = "Windows.Media.Capture.CameraCaptureUIVideoCaptureSettings";
        
      }unsafe impl::winrt::Interface for CameraCaptureUIVideoCaptureSettings {
        type Vtable = ICameraCaptureUIVideoCaptureSettings_abi;
        const IID: ::winrt::Guid =  <ICameraCaptureUIVideoCaptureSettings as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for CameraCaptureUIVideoCaptureSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.CameraCaptureUIVideoCaptureSettings;{64e92d1f-a28d-425a-b84f-e568335ff24e})");
        
      }impl::std::convert::From<CameraCaptureUIVideoCaptureSettings>for::winrt::Object {
        fn from(value:CameraCaptureUIVideoCaptureSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&CameraCaptureUIVideoCaptureSettings>for::winrt::Object {
        fn from(value: &CameraCaptureUIVideoCaptureSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for CameraCaptureUIVideoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a CameraCaptureUIVideoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<CameraCaptureUIVideoCaptureSettings>for ICameraCaptureUIVideoCaptureSettings {
        fn from(value:CameraCaptureUIVideoCaptureSettings) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&CameraCaptureUIVideoCaptureSettings>for ICameraCaptureUIVideoCaptureSettings {
        fn from(value: &CameraCaptureUIVideoCaptureSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICameraCaptureUIVideoCaptureSettings>>for CameraCaptureUIVideoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,ICameraCaptureUIVideoCaptureSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<ICameraCaptureUIVideoCaptureSettings, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICameraCaptureUIVideoCaptureSettings>>for& 'a CameraCaptureUIVideoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,ICameraCaptureUIVideoCaptureSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<ICameraCaptureUIVideoCaptureSettings, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for CameraCaptureUIVideoCaptureSettings{}
      unsafe impl::std::marker::Sync for CameraCaptureUIVideoCaptureSettings{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct CameraCaptureUIMode(i32);
      impl::std::convert::From<i32>for CameraCaptureUIMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for CameraCaptureUIMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for CameraCaptureUIMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for CameraCaptureUIMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for CameraCaptureUIMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for CameraCaptureUIMode{}
      impl::std::marker::Copy for CameraCaptureUIMode{}
      impl CameraCaptureUIMode {
        #![allow(non_upper_case_globals)]pub const PhotoOrVideo:Self = Self(0i32);
        pub const Photo:Self = Self(1i32);
        pub const Video:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for CameraCaptureUIMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for CameraCaptureUIMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.CameraCaptureUIMode;i4)",);
        
      }#[repr(transparent)]pub struct ICameraCaptureUI(::winrt::Object);
      impl::std::clone::Clone for ICameraCaptureUI {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ICameraCaptureUI {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ICameraCaptureUI {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ICameraCaptureUI{}
      impl ICameraCaptureUI {
        pub fn photo_settings(&self,) ->  ::winrt::Result<CameraCaptureUIPhotoCaptureSettings>{
          let this = self;
          unsafe {
            let mut result__: <CameraCaptureUIPhotoCaptureSettings as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CameraCaptureUIPhotoCaptureSettings>(result__)
          }
        }pub fn video_settings(&self,) ->  ::winrt::Result<CameraCaptureUIVideoCaptureSettings>{
          let this = self;
          unsafe {
            let mut result__: <CameraCaptureUIVideoCaptureSettings as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<CameraCaptureUIVideoCaptureSettings>(result__)
          }
        }pub fn capture_file_async(&self,mode:CameraCaptureUIMode,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::storage::StorageFile>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::storage::StorageFile, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),mode, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::storage::StorageFile, >>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ICameraCaptureUI {
        type Vtable = ICameraCaptureUI_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1213756736,28563,19380,[184,243,232,158,72,148,140,145],);
        
      }#[repr(C)]pub struct ICameraCaptureUI_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,mode:CameraCaptureUIMode,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ICameraCaptureUI {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{48587540-6f93-4bb4-b8f3-e89e48948c91}")
        };
        
      }impl::std::convert::From<ICameraCaptureUI>for::winrt::Object {
        fn from(value:ICameraCaptureUI) -> Self {
          value.0
        }
      }impl::std::convert::From<&ICameraCaptureUI>for::winrt::Object {
        fn from(value: &ICameraCaptureUI) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ICameraCaptureUI {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ICameraCaptureUI {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct CameraCaptureUI(::winrt::Object);
      impl CameraCaptureUI {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn photo_settings(&self,) ->  ::winrt::Result<CameraCaptureUIPhotoCaptureSettings>{
          let this = self;
          unsafe {
            let mut result__: <CameraCaptureUIPhotoCaptureSettings as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CameraCaptureUIPhotoCaptureSettings>(result__)
          }
        }pub fn video_settings(&self,) ->  ::winrt::Result<CameraCaptureUIVideoCaptureSettings>{
          let this = self;
          unsafe {
            let mut result__: <CameraCaptureUIVideoCaptureSettings as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<CameraCaptureUIVideoCaptureSettings>(result__)
          }
        }pub fn capture_file_async(&self,mode:CameraCaptureUIMode,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::storage::StorageFile>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::storage::StorageFile, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),mode, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::storage::StorageFile, >>(result__)
          }
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<CameraCaptureUI, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for CameraCaptureUI {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for CameraCaptureUI {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for CameraCaptureUI{}
      impl::std::fmt::Debug for CameraCaptureUI {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for CameraCaptureUI {
        const NAME: & 'static str = "Windows.Media.Capture.CameraCaptureUI";
        
      }unsafe impl::winrt::Interface for CameraCaptureUI {
        type Vtable = ICameraCaptureUI_abi;
        const IID: ::winrt::Guid =  <ICameraCaptureUI as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for CameraCaptureUI {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.CameraCaptureUI;{48587540-6f93-4bb4-b8f3-e89e48948c91})");
        
      }impl::std::convert::From<CameraCaptureUI>for::winrt::Object {
        fn from(value:CameraCaptureUI) -> Self {
          value.0
        }
      }impl::std::convert::From<&CameraCaptureUI>for::winrt::Object {
        fn from(value: &CameraCaptureUI) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for CameraCaptureUI {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a CameraCaptureUI {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<CameraCaptureUI>for ICameraCaptureUI {
        fn from(value:CameraCaptureUI) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&CameraCaptureUI>for ICameraCaptureUI {
        fn from(value: &CameraCaptureUI) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICameraCaptureUI>>for CameraCaptureUI {
        fn into(self) ->  ::winrt::Param< 'a ,ICameraCaptureUI>{
          ::winrt::Param::Owned(::std::convert::Into::<ICameraCaptureUI>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICameraCaptureUI>>for& 'a CameraCaptureUI {
        fn into(self) ->  ::winrt::Param< 'a ,ICameraCaptureUI>{
          ::winrt::Param::Owned(::std::convert::Into::<ICameraCaptureUI>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct StreamingCaptureMode(i32);
      impl::std::convert::From<i32>for StreamingCaptureMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for StreamingCaptureMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for StreamingCaptureMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for StreamingCaptureMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for StreamingCaptureMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for StreamingCaptureMode{}
      impl::std::marker::Copy for StreamingCaptureMode{}
      impl StreamingCaptureMode {
        #![allow(non_upper_case_globals)]pub const AudioAndVideo:Self = Self(0i32);
        pub const Audio:Self = Self(1i32);
        pub const Video:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for StreamingCaptureMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for StreamingCaptureMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.StreamingCaptureMode;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct PhotoCaptureSource(i32);
      impl::std::convert::From<i32>for PhotoCaptureSource {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for PhotoCaptureSource {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for PhotoCaptureSource {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for PhotoCaptureSource {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for PhotoCaptureSource {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for PhotoCaptureSource{}
      impl::std::marker::Copy for PhotoCaptureSource{}
      impl PhotoCaptureSource {
        #![allow(non_upper_case_globals)]pub const Auto:Self = Self(0i32);
        pub const VideoPreview:Self = Self(1i32);
        pub const Photo:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for PhotoCaptureSource {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for PhotoCaptureSource {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.PhotoCaptureSource;i4)",);
        
      }#[repr(transparent)]pub struct IMediaCaptureInitializationSettings(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureInitializationSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureInitializationSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureInitializationSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureInitializationSettings{}
      impl IMediaCaptureInitializationSettings {
        pub fn set_audio_device_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn audio_device_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_video_device_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn video_device_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_streaming_capture_mode(&self,value:StreamingCaptureMode,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn streaming_capture_mode(&self) ->  ::winrt::Result<StreamingCaptureMode>{
          let this = self;
          unsafe {
            let mut result__: <StreamingCaptureMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<StreamingCaptureMode>(result__)
          }
        }pub fn set_photo_capture_source(&self,value:PhotoCaptureSource,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn photo_capture_source(&self) ->  ::winrt::Result<PhotoCaptureSource>{
          let this = self;
          unsafe {
            let mut result__: <PhotoCaptureSource as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<PhotoCaptureSource>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureInitializationSettings {
        type Vtable = IMediaCaptureInitializationSettings_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2541927024,60005,18688,[147,86,140,168,135,114,104,132],);
        
      }#[repr(C)]pub struct IMediaCaptureInitializationSettings_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:StreamingCaptureMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut StreamingCaptureMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:PhotoCaptureSource,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut PhotoCaptureSource,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureInitializationSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{9782ba70-ea65-4900-9356-8ca887726884}")
        };
        
      }impl::std::convert::From<IMediaCaptureInitializationSettings>for::winrt::Object {
        fn from(value:IMediaCaptureInitializationSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureInitializationSettings>for::winrt::Object {
        fn from(value: &IMediaCaptureInitializationSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct MediaCategory(i32);
      impl::std::convert::From<i32>for MediaCategory {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for MediaCategory {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for MediaCategory {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for MediaCategory {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for MediaCategory {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCategory{}
      impl::std::marker::Copy for MediaCategory{}
      impl MediaCategory {
        #![allow(non_upper_case_globals)]pub const Other:Self = Self(0i32);
        pub const Communications:Self = Self(1i32);
        pub const Media:Self = Self(2i32);
        pub const GameChat:Self = Self(3i32);
        pub const Speech:Self = Self(4i32);
        
      }unsafe impl::winrt::Abi for MediaCategory {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for MediaCategory {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.MediaCategory;i4)",);
        
      }#[repr(transparent)]pub struct IMediaCaptureInitializationSettings2(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureInitializationSettings2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureInitializationSettings2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureInitializationSettings2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureInitializationSettings2{}
      impl IMediaCaptureInitializationSettings2 {
        pub fn set_media_category(&self,value:MediaCategory) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn media_category(&self) ->  ::winrt::Result<MediaCategory>{
          let this = self;
          unsafe {
            let mut result__: <MediaCategory as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaCategory>(result__)
          }
        }pub fn set_audio_processing(&self,value:super::AudioProcessing,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn audio_processing(&self) ->  ::winrt::Result<super::AudioProcessing>{
          let this = self;
          unsafe {
            let mut result__: <super::AudioProcessing as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::AudioProcessing>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureInitializationSettings2 {
        type Vtable = IMediaCaptureInitializationSettings2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1078855206,51676,17385,[174,228,230,191,27,87,180,76],);
        
      }#[repr(C)]pub struct IMediaCaptureInitializationSettings2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:MediaCategory,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut MediaCategory,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::AudioProcessing,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::AudioProcessing,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureInitializationSettings2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{404e0626-c9dc-43e9-aee4-e6bf1b57b44c}")
        };
        
      }impl::std::convert::From<IMediaCaptureInitializationSettings2>for::winrt::Object {
        fn from(value:IMediaCaptureInitializationSettings2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureInitializationSettings2>for::winrt::Object {
        fn from(value: &IMediaCaptureInitializationSettings2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureInitializationSettings2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureInitializationSettings2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaCaptureInitializationSettings3(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureInitializationSettings3 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureInitializationSettings3 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureInitializationSettings3 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureInitializationSettings3{}
      impl IMediaCaptureInitializationSettings3 {
        pub fn set_audio_source< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::core::IMediaSource>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn audio_source(&self) ->  ::winrt::Result<super::core::IMediaSource>{
          let this = self;
          unsafe {
            let mut result__: <super::core::IMediaSource as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::core::IMediaSource>(result__)
          }
        }pub fn set_video_source< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::core::IMediaSource>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn video_source(&self) ->  ::winrt::Result<super::core::IMediaSource>{
          let this = self;
          unsafe {
            let mut result__: <super::core::IMediaSource as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::core::IMediaSource>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureInitializationSettings3 {
        type Vtable = IMediaCaptureInitializationSettings3_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1096831389,48712,18224,[129,4,12,246,233,233,121,72],);
        
      }#[repr(C)]pub struct IMediaCaptureInitializationSettings3_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureInitializationSettings3 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{4160519d-be48-4730-8104-0cf6e9e97948}")
        };
        
      }impl::std::convert::From<IMediaCaptureInitializationSettings3>for::winrt::Object {
        fn from(value:IMediaCaptureInitializationSettings3) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureInitializationSettings3>for::winrt::Object {
        fn from(value: &IMediaCaptureInitializationSettings3) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureInitializationSettings3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureInitializationSettings3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaCaptureVideoProfileMediaDescription(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureVideoProfileMediaDescription {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureVideoProfileMediaDescription {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureVideoProfileMediaDescription {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureVideoProfileMediaDescription{}
      impl IMediaCaptureVideoProfileMediaDescription {
        pub fn width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn frame_rate(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<f64>(result__)
          }
        }pub fn is_variable_photo_sequence_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn is_hdr_video_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureVideoProfileMediaDescription {
        type Vtable = IMediaCaptureVideoProfileMediaDescription_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2148708335,46737,18943,[131,242,193,231,110,170,234,27],);
        
      }#[repr(C)]pub struct IMediaCaptureVideoProfileMediaDescription_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureVideoProfileMediaDescription {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{8012afef-b691-49ff-83f2-c1e76eaaea1b}")
        };
        
      }impl::std::convert::From<IMediaCaptureVideoProfileMediaDescription>for::winrt::Object {
        fn from(value:IMediaCaptureVideoProfileMediaDescription) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureVideoProfileMediaDescription>for::winrt::Object {
        fn from(value: &IMediaCaptureVideoProfileMediaDescription) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureVideoProfileMediaDescription {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureVideoProfileMediaDescription {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaCaptureVideoProfileMediaDescription2(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureVideoProfileMediaDescription2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureVideoProfileMediaDescription2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureVideoProfileMediaDescription2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureVideoProfileMediaDescription2{}
      impl IMediaCaptureVideoProfileMediaDescription2 {
        pub fn subtype(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn properties(&self,) ->  ::winrt::Result<super::super::foundation::collections::IMapView<::winrt::Guid, ::winrt::Object>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureVideoProfileMediaDescription2 {
        type Vtable = IMediaCaptureVideoProfileMediaDescription2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3332828947,12845,16698,[184,90,104,168,142,2,244,233],);
        
      }#[repr(C)]pub struct IMediaCaptureVideoProfileMediaDescription2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureVideoProfileMediaDescription2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c6a6ef13-322d-413a-b85a-68a88e02f4e9}")
        };
        
      }impl::std::convert::From<IMediaCaptureVideoProfileMediaDescription2>for::winrt::Object {
        fn from(value:IMediaCaptureVideoProfileMediaDescription2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureVideoProfileMediaDescription2>for::winrt::Object {
        fn from(value: &IMediaCaptureVideoProfileMediaDescription2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureVideoProfileMediaDescription2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureVideoProfileMediaDescription2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct MediaCaptureVideoProfileMediaDescription(::winrt::Object);
      impl MediaCaptureVideoProfileMediaDescription {
        pub fn width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn frame_rate(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<f64>(result__)
          }
        }pub fn is_variable_photo_sequence_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn is_hdr_video_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn subtype(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureVideoProfileMediaDescription2, >(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn properties(&self,) ->  ::winrt::Result<super::super::foundation::collections::IMapView<::winrt::Guid, ::winrt::Object>, >{
          let this =  &::winrt::Interface::cast::<IMediaCaptureVideoProfileMediaDescription2, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >>(result__)
          }
        }
      }impl::std::clone::Clone for MediaCaptureVideoProfileMediaDescription {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaCaptureVideoProfileMediaDescription {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCaptureVideoProfileMediaDescription{}
      impl::std::fmt::Debug for MediaCaptureVideoProfileMediaDescription {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MediaCaptureVideoProfileMediaDescription {
        const NAME: & 'static str = "Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription";
        
      }unsafe impl::winrt::Interface for MediaCaptureVideoProfileMediaDescription {
        type Vtable = IMediaCaptureVideoProfileMediaDescription_abi;
        const IID: ::winrt::Guid =  <IMediaCaptureVideoProfileMediaDescription as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for MediaCaptureVideoProfileMediaDescription {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription;{8012afef-b691-49ff-83f2-c1e76eaaea1b})");
        
      }impl::std::convert::From<MediaCaptureVideoProfileMediaDescription>for::winrt::Object {
        fn from(value:MediaCaptureVideoProfileMediaDescription) -> Self {
          value.0
        }
      }impl::std::convert::From<&MediaCaptureVideoProfileMediaDescription>for::winrt::Object {
        fn from(value: &MediaCaptureVideoProfileMediaDescription) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaCaptureVideoProfileMediaDescription {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaCaptureVideoProfileMediaDescription {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCaptureVideoProfileMediaDescription>for IMediaCaptureVideoProfileMediaDescription {
        fn from(value:MediaCaptureVideoProfileMediaDescription) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MediaCaptureVideoProfileMediaDescription>for IMediaCaptureVideoProfileMediaDescription {
        fn from(value: &MediaCaptureVideoProfileMediaDescription) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureVideoProfileMediaDescription>>for MediaCaptureVideoProfileMediaDescription {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureVideoProfileMediaDescription>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureVideoProfileMediaDescription, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureVideoProfileMediaDescription>>for& 'a MediaCaptureVideoProfileMediaDescription {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureVideoProfileMediaDescription>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureVideoProfileMediaDescription, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<MediaCaptureVideoProfileMediaDescription>for IMediaCaptureVideoProfileMediaDescription2 {
        fn from(value:MediaCaptureVideoProfileMediaDescription) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCaptureVideoProfileMediaDescription>for IMediaCaptureVideoProfileMediaDescription2 {
        fn from(value: &MediaCaptureVideoProfileMediaDescription) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureVideoProfileMediaDescription2>>for MediaCaptureVideoProfileMediaDescription {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureVideoProfileMediaDescription2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureVideoProfileMediaDescription2, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureVideoProfileMediaDescription2>>for& 'a MediaCaptureVideoProfileMediaDescription {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureVideoProfileMediaDescription2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureVideoProfileMediaDescription2, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for MediaCaptureVideoProfileMediaDescription{}
      unsafe impl::std::marker::Sync for MediaCaptureVideoProfileMediaDescription{}
      #[repr(transparent)]pub struct IMediaCaptureVideoProfile(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureVideoProfile {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureVideoProfile {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureVideoProfile {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureVideoProfile{}
      impl IMediaCaptureVideoProfile {
        pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn video_device_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn supported_preview_media_description(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >>(result__)
          }
        }pub fn supported_record_media_description(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >>(result__)
          }
        }pub fn supported_photo_media_description(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >>(result__)
          }
        }pub fn get_concurrency(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfile>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<MediaCaptureVideoProfile, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <MediaCaptureVideoProfile> >(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureVideoProfile {
        type Vtable = IMediaCaptureVideoProfile_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(564163519,41966,20175,[158,246,80,176,188,78,19,5],);
        
      }#[repr(C)]pub struct IMediaCaptureVideoProfile_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureVideoProfile {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{21a073bf-a3ee-4ecf-9ef6-50b0bc4e1305}")
        };
        
      }impl::std::convert::From<IMediaCaptureVideoProfile>for::winrt::Object {
        fn from(value:IMediaCaptureVideoProfile) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureVideoProfile>for::winrt::Object {
        fn from(value: &IMediaCaptureVideoProfile) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureVideoProfile {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureVideoProfile {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct MediaStreamType(i32);
      impl::std::convert::From<i32>for MediaStreamType {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for MediaStreamType {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for MediaStreamType {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for MediaStreamType {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for MediaStreamType {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaStreamType{}
      impl::std::marker::Copy for MediaStreamType{}
      impl MediaStreamType {
        #![allow(non_upper_case_globals)]pub const VideoPreview:Self = Self(0i32);
        pub const VideoRecord:Self = Self(1i32);
        pub const Audio:Self = Self(2i32);
        pub const Photo:Self = Self(3i32);
        
      }unsafe impl::winrt::Abi for MediaStreamType {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for MediaStreamType {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.MediaStreamType;i4)",);
        
      }#[repr(transparent)]pub struct IMediaCaptureVideoProfile2(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureVideoProfile2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureVideoProfile2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureVideoProfile2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureVideoProfile2{}
      impl IMediaCaptureVideoProfile2 {
        pub fn frame_source_infos(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<frames::MediaFrameSourceInfo, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<frames::MediaFrameSourceInfo, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IVectorView<frames::MediaFrameSourceInfo, >>(result__)
          }
        }pub fn properties(&self,) ->  ::winrt::Result<super::super::foundation::collections::IMapView<::winrt::Guid, ::winrt::Object>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureVideoProfile2 {
        type Vtable = IMediaCaptureVideoProfile2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2547894623,38094,18063,[147,22,252,91,194,99,143,107],);
        
      }#[repr(C)]pub struct IMediaCaptureVideoProfile2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureVideoProfile2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{97ddc95f-94ce-468f-9316-fc5bc2638f6b}")
        };
        
      }impl::std::convert::From<IMediaCaptureVideoProfile2>for::winrt::Object {
        fn from(value:IMediaCaptureVideoProfile2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureVideoProfile2>for::winrt::Object {
        fn from(value: &IMediaCaptureVideoProfile2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureVideoProfile2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureVideoProfile2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct MediaCaptureVideoProfile(::winrt::Object);
      impl MediaCaptureVideoProfile {
        pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn video_device_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn supported_preview_media_description(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >>(result__)
          }
        }pub fn supported_record_media_description(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >>(result__)
          }
        }pub fn supported_photo_media_description(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfileMediaDescription, >>(result__)
          }
        }pub fn get_concurrency(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfile>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<MediaCaptureVideoProfile, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <MediaCaptureVideoProfile> >(result__)
          }
        }pub fn frame_source_infos(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<frames::MediaFrameSourceInfo, >, >{
          let this =  &::winrt::Interface::cast::<IMediaCaptureVideoProfile2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<frames::MediaFrameSourceInfo, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IVectorView<frames::MediaFrameSourceInfo, >>(result__)
          }
        }pub fn properties(&self,) ->  ::winrt::Result<super::super::foundation::collections::IMapView<::winrt::Guid, ::winrt::Object>, >{
          let this =  &::winrt::Interface::cast::<IMediaCaptureVideoProfile2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >>(result__)
          }
        }
      }impl::std::clone::Clone for MediaCaptureVideoProfile {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaCaptureVideoProfile {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCaptureVideoProfile{}
      impl::std::fmt::Debug for MediaCaptureVideoProfile {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MediaCaptureVideoProfile {
        const NAME: & 'static str = "Windows.Media.Capture.MediaCaptureVideoProfile";
        
      }unsafe impl::winrt::Interface for MediaCaptureVideoProfile {
        type Vtable = IMediaCaptureVideoProfile_abi;
        const IID: ::winrt::Guid =  <IMediaCaptureVideoProfile as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for MediaCaptureVideoProfile {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.MediaCaptureVideoProfile;{21a073bf-a3ee-4ecf-9ef6-50b0bc4e1305})");
        
      }impl::std::convert::From<MediaCaptureVideoProfile>for::winrt::Object {
        fn from(value:MediaCaptureVideoProfile) -> Self {
          value.0
        }
      }impl::std::convert::From<&MediaCaptureVideoProfile>for::winrt::Object {
        fn from(value: &MediaCaptureVideoProfile) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaCaptureVideoProfile {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaCaptureVideoProfile {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCaptureVideoProfile>for IMediaCaptureVideoProfile {
        fn from(value:MediaCaptureVideoProfile) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MediaCaptureVideoProfile>for IMediaCaptureVideoProfile {
        fn from(value: &MediaCaptureVideoProfile) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureVideoProfile>>for MediaCaptureVideoProfile {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureVideoProfile>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureVideoProfile>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureVideoProfile>>for& 'a MediaCaptureVideoProfile {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureVideoProfile>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureVideoProfile>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCaptureVideoProfile>for IMediaCaptureVideoProfile2 {
        fn from(value:MediaCaptureVideoProfile) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCaptureVideoProfile>for IMediaCaptureVideoProfile2 {
        fn from(value: &MediaCaptureVideoProfile) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureVideoProfile2>>for MediaCaptureVideoProfile {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureVideoProfile2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureVideoProfile2>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureVideoProfile2>>for& 'a MediaCaptureVideoProfile {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureVideoProfile2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureVideoProfile2>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for MediaCaptureVideoProfile{}
      unsafe impl::std::marker::Sync for MediaCaptureVideoProfile{}
      #[repr(transparent)]pub struct IMediaCaptureInitializationSettings4(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureInitializationSettings4 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureInitializationSettings4 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureInitializationSettings4 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureInitializationSettings4{}
      impl IMediaCaptureInitializationSettings4 {
        pub fn video_profile(&self) ->  ::winrt::Result<MediaCaptureVideoProfile>{
          let this = self;
          unsafe {
            let mut result__: <MediaCaptureVideoProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaCaptureVideoProfile>(result__)
          }
        }pub fn set_video_profile< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,MediaCaptureVideoProfile>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn preview_media_description(&self,) ->  ::winrt::Result<MediaCaptureVideoProfileMediaDescription>{
          let this = self;
          unsafe {
            let mut result__: <MediaCaptureVideoProfileMediaDescription as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaCaptureVideoProfileMediaDescription>(result__)
          }
        }pub fn set_preview_media_description< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,MediaCaptureVideoProfileMediaDescription>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn record_media_description(&self,) ->  ::winrt::Result<MediaCaptureVideoProfileMediaDescription>{
          let this = self;
          unsafe {
            let mut result__: <MediaCaptureVideoProfileMediaDescription as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaCaptureVideoProfileMediaDescription>(result__)
          }
        }pub fn set_record_media_description< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,MediaCaptureVideoProfileMediaDescription>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn photo_media_description(&self,) ->  ::winrt::Result<MediaCaptureVideoProfileMediaDescription>{
          let this = self;
          unsafe {
            let mut result__: <MediaCaptureVideoProfileMediaDescription as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaCaptureVideoProfileMediaDescription>(result__)
          }
        }pub fn set_photo_media_description< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,MediaCaptureVideoProfileMediaDescription>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureInitializationSettings4 {
        type Vtable = IMediaCaptureInitializationSettings4_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4110591287,19639,19752,[149,237,79,159,1,46,5,24],);
        
      }#[repr(C)]pub struct IMediaCaptureInitializationSettings4_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureInitializationSettings4 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{f502a537-4cb7-4d28-95ed-4f9f012e0518}")
        };
        
      }impl::std::convert::From<IMediaCaptureInitializationSettings4>for::winrt::Object {
        fn from(value:IMediaCaptureInitializationSettings4) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureInitializationSettings4>for::winrt::Object {
        fn from(value: &IMediaCaptureInitializationSettings4) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureInitializationSettings4 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureInitializationSettings4 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct MediaCaptureSharingMode(i32);
      impl::std::convert::From<i32>for MediaCaptureSharingMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for MediaCaptureSharingMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for MediaCaptureSharingMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for MediaCaptureSharingMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for MediaCaptureSharingMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCaptureSharingMode{}
      impl::std::marker::Copy for MediaCaptureSharingMode{}
      impl MediaCaptureSharingMode {
        #![allow(non_upper_case_globals)]pub const ExclusiveControl:Self = Self(0i32);
        pub const SharedReadOnly:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for MediaCaptureSharingMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for MediaCaptureSharingMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.MediaCaptureSharingMode;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct MediaCaptureMemoryPreference(i32);
      impl::std::convert::From<i32>for MediaCaptureMemoryPreference {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for MediaCaptureMemoryPreference {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for MediaCaptureMemoryPreference {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for MediaCaptureMemoryPreference {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for MediaCaptureMemoryPreference {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCaptureMemoryPreference{}
      impl::std::marker::Copy for MediaCaptureMemoryPreference{}
      impl MediaCaptureMemoryPreference {
        #![allow(non_upper_case_globals)]pub const Auto:Self = Self(0i32);
        pub const Cpu:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for MediaCaptureMemoryPreference {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for MediaCaptureMemoryPreference {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.MediaCaptureMemoryPreference;i4)",);
        
      }#[repr(transparent)]pub struct IMediaCaptureInitializationSettings5(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureInitializationSettings5 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureInitializationSettings5 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureInitializationSettings5 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureInitializationSettings5{}
      impl IMediaCaptureInitializationSettings5 {
        pub fn source_group(&self) ->  ::winrt::Result<frames::MediaFrameSourceGroup>{
          let this = self;
          unsafe {
            let mut result__: <frames::MediaFrameSourceGroup as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<frames::MediaFrameSourceGroup>(result__)
          }
        }pub fn set_source_group< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,frames::MediaFrameSourceGroup>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn sharing_mode(&self) ->  ::winrt::Result<MediaCaptureSharingMode>{
          let this = self;
          unsafe {
            let mut result__: <MediaCaptureSharingMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaCaptureSharingMode>(result__)
          }
        }pub fn set_sharing_mode(&self,value:MediaCaptureSharingMode,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn memory_preference(&self) ->  ::winrt::Result<MediaCaptureMemoryPreference>{
          let this = self;
          unsafe {
            let mut result__: <MediaCaptureMemoryPreference as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaCaptureMemoryPreference>(result__)
          }
        }pub fn set_memory_preference(&self,value:MediaCaptureMemoryPreference,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureInitializationSettings5 {
        type Vtable = IMediaCaptureInitializationSettings5_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3584222136,9766,20116,[183,179,83,8,160,246,75,26],);
        
      }#[repr(C)]pub struct IMediaCaptureInitializationSettings5_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut MediaCaptureSharingMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:MediaCaptureSharingMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut MediaCaptureMemoryPreference,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:MediaCaptureMemoryPreference,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureInitializationSettings5 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{d5a2e3b8-2626-4e94-b7b3-5308a0f64b1a}")
        };
        
      }impl::std::convert::From<IMediaCaptureInitializationSettings5>for::winrt::Object {
        fn from(value:IMediaCaptureInitializationSettings5) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureInitializationSettings5>for::winrt::Object {
        fn from(value: &IMediaCaptureInitializationSettings5) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureInitializationSettings5 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureInitializationSettings5 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaCaptureInitializationSettings6(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureInitializationSettings6 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureInitializationSettings6 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureInitializationSettings6 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureInitializationSettings6{}
      impl IMediaCaptureInitializationSettings6 {
        pub fn always_play_system_shutter_sound(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_always_play_system_shutter_sound(&self,value:bool,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureInitializationSettings6 {
        type Vtable = IMediaCaptureInitializationSettings6_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3001183047,15793,19763,[171,99,15,250,9,5,101,133],);
        
      }#[repr(C)]pub struct IMediaCaptureInitializationSettings6_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureInitializationSettings6 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{b2e26b47-3db1-4d33-ab63-0ffa09056585}")
        };
        
      }impl::std::convert::From<IMediaCaptureInitializationSettings6>for::winrt::Object {
        fn from(value:IMediaCaptureInitializationSettings6) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureInitializationSettings6>for::winrt::Object {
        fn from(value: &IMediaCaptureInitializationSettings6) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureInitializationSettings6 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureInitializationSettings6 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaCaptureInitializationSettings7(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureInitializationSettings7 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureInitializationSettings7 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureInitializationSettings7 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureInitializationSettings7{}
      impl IMediaCaptureInitializationSettings7 {
        pub fn device_uri_password_credential(&self,) ->  ::winrt::Result<super::super::security::credentials::PasswordCredential>{
          let this = self;
          unsafe {
            let mut result__: <super::super::security::credentials::PasswordCredential as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::security::credentials::PasswordCredential>(result__,)
          }
        }pub fn set_device_uri_password_credential< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::security::credentials::PasswordCredential>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn device_uri(&self) ->  ::winrt::Result<super::super::foundation::Uri>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Uri as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::Uri>(result__)
          }
        }pub fn set_device_uri< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Uri>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureInitializationSettings7 {
        type Vtable = IMediaCaptureInitializationSettings7_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1096051047,62858,23938,[158,244,237,87,47,181,227,78],);
        
      }#[repr(C)]pub struct IMediaCaptureInitializationSettings7_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureInitializationSettings7 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{41546967-f58a-5d82-9ef4-ed572fb5e34e}")
        };
        
      }impl::std::convert::From<IMediaCaptureInitializationSettings7>for::winrt::Object {
        fn from(value:IMediaCaptureInitializationSettings7) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureInitializationSettings7>for::winrt::Object {
        fn from(value: &IMediaCaptureInitializationSettings7) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureInitializationSettings7 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureInitializationSettings7 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct MediaCaptureInitializationSettings(::winrt::Object);
      impl MediaCaptureInitializationSettings {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn set_audio_device_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn audio_device_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_video_device_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn video_device_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_streaming_capture_mode(&self,value:StreamingCaptureMode,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn streaming_capture_mode(&self) ->  ::winrt::Result<StreamingCaptureMode>{
          let this = self;
          unsafe {
            let mut result__: <StreamingCaptureMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<StreamingCaptureMode>(result__)
          }
        }pub fn set_photo_capture_source(&self,value:PhotoCaptureSource,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn photo_capture_source(&self) ->  ::winrt::Result<PhotoCaptureSource>{
          let this = self;
          unsafe {
            let mut result__: <PhotoCaptureSource as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<PhotoCaptureSource>(result__)
          }
        }pub fn set_media_category(&self,value:MediaCategory) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn media_category(&self) ->  ::winrt::Result<MediaCategory>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings2>(self).unwrap();
          unsafe {
            let mut result__: <MediaCategory as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaCategory>(result__)
          }
        }pub fn set_audio_processing(&self,value:super::AudioProcessing,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn audio_processing(&self) ->  ::winrt::Result<super::AudioProcessing>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings2>(self).unwrap();
          unsafe {
            let mut result__: <super::AudioProcessing as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::AudioProcessing>(result__)
          }
        }pub fn set_audio_source< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::core::IMediaSource>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings3>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn audio_source(&self) ->  ::winrt::Result<super::core::IMediaSource>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings3>(self).unwrap();
          unsafe {
            let mut result__: <super::core::IMediaSource as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::core::IMediaSource>(result__)
          }
        }pub fn set_video_source< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::core::IMediaSource>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings3>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn video_source(&self) ->  ::winrt::Result<super::core::IMediaSource>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings3>(self).unwrap();
          unsafe {
            let mut result__: <super::core::IMediaSource as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::core::IMediaSource>(result__)
          }
        }pub fn video_profile(&self) ->  ::winrt::Result<MediaCaptureVideoProfile>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings4>(self).unwrap();
          unsafe {
            let mut result__: <MediaCaptureVideoProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaCaptureVideoProfile>(result__)
          }
        }pub fn set_video_profile< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,MediaCaptureVideoProfile>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings4>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn preview_media_description(&self,) ->  ::winrt::Result<MediaCaptureVideoProfileMediaDescription>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings4>(self).unwrap();
          unsafe {
            let mut result__: <MediaCaptureVideoProfileMediaDescription as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaCaptureVideoProfileMediaDescription>(result__)
          }
        }pub fn set_preview_media_description< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,MediaCaptureVideoProfileMediaDescription>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings4>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn record_media_description(&self,) ->  ::winrt::Result<MediaCaptureVideoProfileMediaDescription>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings4>(self).unwrap();
          unsafe {
            let mut result__: <MediaCaptureVideoProfileMediaDescription as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaCaptureVideoProfileMediaDescription>(result__)
          }
        }pub fn set_record_media_description< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,MediaCaptureVideoProfileMediaDescription>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings4>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn photo_media_description(&self,) ->  ::winrt::Result<MediaCaptureVideoProfileMediaDescription>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings4>(self).unwrap();
          unsafe {
            let mut result__: <MediaCaptureVideoProfileMediaDescription as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaCaptureVideoProfileMediaDescription>(result__)
          }
        }pub fn set_photo_media_description< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,MediaCaptureVideoProfileMediaDescription>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings4>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn source_group(&self) ->  ::winrt::Result<frames::MediaFrameSourceGroup>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings5>(self).unwrap();
          unsafe {
            let mut result__: <frames::MediaFrameSourceGroup as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<frames::MediaFrameSourceGroup>(result__)
          }
        }pub fn set_source_group< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,frames::MediaFrameSourceGroup>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings5>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn sharing_mode(&self) ->  ::winrt::Result<MediaCaptureSharingMode>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings5>(self).unwrap();
          unsafe {
            let mut result__: <MediaCaptureSharingMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaCaptureSharingMode>(result__)
          }
        }pub fn set_sharing_mode(&self,value:MediaCaptureSharingMode,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings5>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn memory_preference(&self) ->  ::winrt::Result<MediaCaptureMemoryPreference>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings5>(self).unwrap();
          unsafe {
            let mut result__: <MediaCaptureMemoryPreference as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaCaptureMemoryPreference>(result__)
          }
        }pub fn set_memory_preference(&self,value:MediaCaptureMemoryPreference,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings5>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn always_play_system_shutter_sound(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings6>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_always_play_system_shutter_sound(&self,value:bool,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings6>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn device_uri_password_credential(&self,) ->  ::winrt::Result<super::super::security::credentials::PasswordCredential>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings7>(self).unwrap();
          unsafe {
            let mut result__: <super::super::security::credentials::PasswordCredential as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::security::credentials::PasswordCredential>(result__,)
          }
        }pub fn set_device_uri_password_credential< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::security::credentials::PasswordCredential>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings7>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn device_uri(&self) ->  ::winrt::Result<super::super::foundation::Uri>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings7>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::Uri as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::Uri>(result__)
          }
        }pub fn set_device_uri< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Uri>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureInitializationSettings7>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<MediaCaptureInitializationSettings, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for MediaCaptureInitializationSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaCaptureInitializationSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCaptureInitializationSettings{}
      impl::std::fmt::Debug for MediaCaptureInitializationSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MediaCaptureInitializationSettings {
        const NAME: & 'static str = "Windows.Media.Capture.MediaCaptureInitializationSettings";
        
      }unsafe impl::winrt::Interface for MediaCaptureInitializationSettings {
        type Vtable = IMediaCaptureInitializationSettings_abi;
        const IID: ::winrt::Guid =  <IMediaCaptureInitializationSettings as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for MediaCaptureInitializationSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.MediaCaptureInitializationSettings;{9782ba70-ea65-4900-9356-8ca887726884})");
        
      }impl::std::convert::From<MediaCaptureInitializationSettings>for::winrt::Object {
        fn from(value:MediaCaptureInitializationSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&MediaCaptureInitializationSettings>for::winrt::Object {
        fn from(value: &MediaCaptureInitializationSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCaptureInitializationSettings>for IMediaCaptureInitializationSettings {
        fn from(value:MediaCaptureInitializationSettings) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MediaCaptureInitializationSettings>for IMediaCaptureInitializationSettings {
        fn from(value: &MediaCaptureInitializationSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureInitializationSettings>>for MediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureInitializationSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureInitializationSettings>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureInitializationSettings>>for& 'a MediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureInitializationSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureInitializationSettings>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<MediaCaptureInitializationSettings>for IMediaCaptureInitializationSettings2 {
        fn from(value:MediaCaptureInitializationSettings) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCaptureInitializationSettings>for IMediaCaptureInitializationSettings2 {
        fn from(value: &MediaCaptureInitializationSettings) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureInitializationSettings2>>for MediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureInitializationSettings2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureInitializationSettings2, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureInitializationSettings2>>for& 'a MediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureInitializationSettings2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureInitializationSettings2, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<MediaCaptureInitializationSettings>for IMediaCaptureInitializationSettings3 {
        fn from(value:MediaCaptureInitializationSettings) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCaptureInitializationSettings>for IMediaCaptureInitializationSettings3 {
        fn from(value: &MediaCaptureInitializationSettings) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureInitializationSettings3>>for MediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureInitializationSettings3>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureInitializationSettings3, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureInitializationSettings3>>for& 'a MediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureInitializationSettings3>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureInitializationSettings3, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<MediaCaptureInitializationSettings>for IMediaCaptureInitializationSettings4 {
        fn from(value:MediaCaptureInitializationSettings) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCaptureInitializationSettings>for IMediaCaptureInitializationSettings4 {
        fn from(value: &MediaCaptureInitializationSettings) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureInitializationSettings4>>for MediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureInitializationSettings4>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureInitializationSettings4, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureInitializationSettings4>>for& 'a MediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureInitializationSettings4>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureInitializationSettings4, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<MediaCaptureInitializationSettings>for IMediaCaptureInitializationSettings5 {
        fn from(value:MediaCaptureInitializationSettings) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCaptureInitializationSettings>for IMediaCaptureInitializationSettings5 {
        fn from(value: &MediaCaptureInitializationSettings) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureInitializationSettings5>>for MediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureInitializationSettings5>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureInitializationSettings5, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureInitializationSettings5>>for& 'a MediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureInitializationSettings5>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureInitializationSettings5, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<MediaCaptureInitializationSettings>for IMediaCaptureInitializationSettings6 {
        fn from(value:MediaCaptureInitializationSettings) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCaptureInitializationSettings>for IMediaCaptureInitializationSettings6 {
        fn from(value: &MediaCaptureInitializationSettings) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureInitializationSettings6>>for MediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureInitializationSettings6>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureInitializationSettings6, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureInitializationSettings6>>for& 'a MediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureInitializationSettings6>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureInitializationSettings6, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<MediaCaptureInitializationSettings>for IMediaCaptureInitializationSettings7 {
        fn from(value:MediaCaptureInitializationSettings) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCaptureInitializationSettings>for IMediaCaptureInitializationSettings7 {
        fn from(value: &MediaCaptureInitializationSettings) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureInitializationSettings7>>for MediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureInitializationSettings7>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureInitializationSettings7, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureInitializationSettings7>>for& 'a MediaCaptureInitializationSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureInitializationSettings7>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureInitializationSettings7, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for MediaCaptureInitializationSettings{}
      unsafe impl::std::marker::Sync for MediaCaptureInitializationSettings{}
      #[repr(transparent)]pub struct IMediaCaptureFailedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureFailedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureFailedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureFailedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureFailedEventArgs{}
      impl IMediaCaptureFailedEventArgs {
        pub fn message(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn code(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureFailedEventArgs {
        type Vtable = IMediaCaptureFailedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2164122612,21700,17088,[141,25,206,161,168,124,161,139],);
        
      }#[repr(C)]pub struct IMediaCaptureFailedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureFailedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{80fde3f4-54c4-42c0-8d19-cea1a87ca18b}")
        };
        
      }impl::std::convert::From<IMediaCaptureFailedEventArgs>for::winrt::Object {
        fn from(value:IMediaCaptureFailedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureFailedEventArgs>for::winrt::Object {
        fn from(value: &IMediaCaptureFailedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureFailedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureFailedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct MediaCaptureFailedEventArgs(::winrt::Object);
      impl MediaCaptureFailedEventArgs {
        pub fn message(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn code(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }impl::std::clone::Clone for MediaCaptureFailedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaCaptureFailedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCaptureFailedEventArgs{}
      impl::std::fmt::Debug for MediaCaptureFailedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MediaCaptureFailedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.MediaCaptureFailedEventArgs";
        
      }unsafe impl::winrt::Interface for MediaCaptureFailedEventArgs {
        type Vtable = IMediaCaptureFailedEventArgs_abi;
        const IID: ::winrt::Guid =  <IMediaCaptureFailedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for MediaCaptureFailedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.MediaCaptureFailedEventArgs;{80fde3f4-54c4-42c0-8d19-cea1a87ca18b})");
        
      }impl::std::convert::From<MediaCaptureFailedEventArgs>for::winrt::Object {
        fn from(value:MediaCaptureFailedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&MediaCaptureFailedEventArgs>for::winrt::Object {
        fn from(value: &MediaCaptureFailedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaCaptureFailedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaCaptureFailedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCaptureFailedEventArgs>for IMediaCaptureFailedEventArgs {
        fn from(value:MediaCaptureFailedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MediaCaptureFailedEventArgs>for IMediaCaptureFailedEventArgs {
        fn from(value: &MediaCaptureFailedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureFailedEventArgs>>for MediaCaptureFailedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureFailedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureFailedEventArgs>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureFailedEventArgs>>for& 'a MediaCaptureFailedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureFailedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureFailedEventArgs>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct MediaCaptureFailedEventHandler(::winrt::IUnknown);
      impl::std::clone::Clone for MediaCaptureFailedEventHandler {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaCaptureFailedEventHandler {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCaptureFailedEventHandler{}
      impl::std::fmt::Debug for MediaCaptureFailedEventHandler {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }unsafe impl::winrt::Interface for MediaCaptureFailedEventHandler {
        type Vtable = MediaCaptureFailedEventHandler_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(538243067,23768,20232,[163,20,13,54,13,165,159,20],);
        
      }unsafe impl::winrt::RuntimeType for MediaCaptureFailedEventHandler {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"delegate({2014effb-5cd8-4f08-a314-0d360da59f14})",)
        };
        
      }#[repr(C)]pub struct MediaCaptureFailedEventHandler_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,sender: ::winrt::RawPtr,error_event_args: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      impl MediaCaptureFailedEventHandler {
        pub fn invoke< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,MediaCapture>>,T1__: ::std::convert::Into<::winrt::Param< 'a ,MediaCaptureFailedEventArgs>>, >(&self,sender:T0__,error_event_args:T1__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).3)(::winrt::Abi::abi(this),sender.into().abi(),error_event_args.into().abi(),).ok()
          }
        }pub fn new<F:FnMut(&::std::option::Option<MediaCapture>, &::std::option::Option<MediaCaptureFailedEventArgs>,) ->  ::winrt::Result<()> + 'static , >(invoke:F,) -> Self {
          let com = MediaCaptureFailedEventHandler_box::<F>{
            vtable: &MediaCaptureFailedEventHandler_box::<F>::VTABLE,count: ::winrt::RefCount::new(),invoke,
          };
          unsafe {
            std::mem::transmute(::std::boxed::Box::new(com))
          }
        }
      }#[repr(C)]struct MediaCaptureFailedEventHandler_box<F:FnMut(&::std::option::Option<MediaCapture>, &::std::option::Option<MediaCaptureFailedEventArgs>,) ->  ::winrt::Result<()> + 'static , >{
        vtable: *const MediaCaptureFailedEventHandler_abi,invoke:F,count: ::winrt::RefCount,
      }#[allow(non_snake_case)]impl<F:FnMut(&::std::option::Option<MediaCapture>, &::std::option::Option<MediaCaptureFailedEventArgs>,) ->  ::winrt::Result<()> + 'static , >MediaCaptureFailedEventHandler_box<F>{
        const VTABLE:MediaCaptureFailedEventHandler_abi = MediaCaptureFailedEventHandler_abi(Self::QueryInterface,Self::AddRef,Self::Release,Self::Invoke,);
        unsafe extern "system" fn QueryInterface(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode {
          let this = this as*mut::winrt::RawPtr as*mut Self;
          *interface = if iid== &<MediaCaptureFailedEventHandler as::winrt::Interface>::IID||iid== &<::winrt::IUnknown as::winrt::Interface>::IID||iid== &<::winrt::IAgileObject as::winrt::Interface>::IID {
            &mut(*this).vtable as *mut _ as _
          }else {
            ::std::ptr::null_mut()
          };
          if(*interface).is_null(){
            ::winrt::ErrorCode::E_NOINTERFACE
          }else {
            (*this).count.add_ref();
            ::winrt::ErrorCode::S_OK
          }
        }unsafe extern "system" fn AddRef(this: ::winrt::RawPtr) -> u32 {
          let this = this as*mut::winrt::RawPtr as*mut Self;
          (*this).count.add_ref()
        }unsafe extern "system" fn Release(this: ::winrt::RawPtr) -> u32 {
          let this = this as*mut::winrt::RawPtr as*mut Self;
          let remaining = (*this).count.release();
          if remaining==0 {
            Box::from_raw(this);
            
          }remaining
        }unsafe extern "system" fn Invoke(this: ::winrt::RawPtr,sender: ::winrt::RawPtr,error_event_args: ::winrt::RawPtr,) ->  ::winrt::ErrorCode {
          let this = this as*mut::winrt::RawPtr as*mut Self;
          ((*this).invoke)(& *(&sender as*const<MediaCapture as::winrt::Abi> ::Abi as*const<MediaCapture as::winrt::RuntimeType> ::DefaultType), & *(&error_event_args as*const<MediaCaptureFailedEventArgs as::winrt::Abi> ::Abi as*const<MediaCaptureFailedEventArgs as::winrt::RuntimeType> ::DefaultType),).into()
        }
      }#[repr(transparent)]pub struct RecordLimitationExceededEventHandler(::winrt::IUnknown);
      impl::std::clone::Clone for RecordLimitationExceededEventHandler {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for RecordLimitationExceededEventHandler {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for RecordLimitationExceededEventHandler{}
      impl::std::fmt::Debug for RecordLimitationExceededEventHandler {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }unsafe impl::winrt::Interface for RecordLimitationExceededEventHandler {
        type Vtable = RecordLimitationExceededEventHandler_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1068404526,20449,20477,[170,186,225,241,51,125,78,83],);
        
      }unsafe impl::winrt::RuntimeType for RecordLimitationExceededEventHandler {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"delegate({3fae8f2e-4fe1-4ffd-aaba-e1f1337d4e53})",)
        };
        
      }#[repr(C)]pub struct RecordLimitationExceededEventHandler_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,sender: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      impl RecordLimitationExceededEventHandler {
        pub fn invoke< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,MediaCapture>>>(&self,sender:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).3)(::winrt::Abi::abi(this),sender.into().abi(),).ok()
          }
        }pub fn new<F:FnMut(&::std::option::Option<MediaCapture>) ->  ::winrt::Result<()> + 'static , >(invoke:F,) -> Self {
          let com = RecordLimitationExceededEventHandler_box::<F>{
            vtable: &RecordLimitationExceededEventHandler_box::<F>::VTABLE,count: ::winrt::RefCount::new(),invoke,
          };
          unsafe {
            std::mem::transmute(::std::boxed::Box::new(com))
          }
        }
      }#[repr(C)]struct RecordLimitationExceededEventHandler_box<F:FnMut(&::std::option::Option<MediaCapture>) ->  ::winrt::Result<()> + 'static , >{
        vtable: *const RecordLimitationExceededEventHandler_abi,invoke:F,count: ::winrt::RefCount,
      }#[allow(non_snake_case)]impl<F:FnMut(&::std::option::Option<MediaCapture>) ->  ::winrt::Result<()> + 'static , >RecordLimitationExceededEventHandler_box<F>{
        const VTABLE:RecordLimitationExceededEventHandler_abi = RecordLimitationExceededEventHandler_abi(Self::QueryInterface,Self::AddRef,Self::Release,Self::Invoke,);
        unsafe extern "system" fn QueryInterface(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode {
          let this = this as*mut::winrt::RawPtr as*mut Self;
          *interface = if iid== &<RecordLimitationExceededEventHandler as::winrt::Interface>::IID||iid== &<::winrt::IUnknown as::winrt::Interface>::IID||iid== &<::winrt::IAgileObject as::winrt::Interface>::IID {
            &mut(*this).vtable as *mut _ as _
          }else {
            ::std::ptr::null_mut()
          };
          if(*interface).is_null(){
            ::winrt::ErrorCode::E_NOINTERFACE
          }else {
            (*this).count.add_ref();
            ::winrt::ErrorCode::S_OK
          }
        }unsafe extern "system" fn AddRef(this: ::winrt::RawPtr) -> u32 {
          let this = this as*mut::winrt::RawPtr as*mut Self;
          (*this).count.add_ref()
        }unsafe extern "system" fn Release(this: ::winrt::RawPtr) -> u32 {
          let this = this as*mut::winrt::RawPtr as*mut Self;
          let remaining = (*this).count.release();
          if remaining==0 {
            Box::from_raw(this);
            
          }remaining
        }unsafe extern "system" fn Invoke(this: ::winrt::RawPtr,sender: ::winrt::RawPtr,) ->  ::winrt::ErrorCode {
          let this = this as*mut::winrt::RawPtr as*mut Self;
          ((*this).invoke)(&*(&sender as*const<MediaCapture as::winrt::Abi>::Abi as*const<MediaCapture as::winrt::RuntimeType>::DefaultType),).into()
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct VideoDeviceCharacteristic(i32);
      impl::std::convert::From<i32>for VideoDeviceCharacteristic {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for VideoDeviceCharacteristic {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for VideoDeviceCharacteristic {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for VideoDeviceCharacteristic {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for VideoDeviceCharacteristic {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for VideoDeviceCharacteristic{}
      impl::std::marker::Copy for VideoDeviceCharacteristic{}
      impl VideoDeviceCharacteristic {
        #![allow(non_upper_case_globals)]pub const AllStreamsIndependent:Self = Self(0i32);
        pub const PreviewRecordStreamsIdentical:Self = Self(1i32);
        pub const PreviewPhotoStreamsIdentical:Self = Self(2i32);
        pub const RecordPhotoStreamsIdentical:Self = Self(3i32);
        pub const AllStreamsIdentical:Self = Self(4i32);
        
      }unsafe impl::winrt::Abi for VideoDeviceCharacteristic {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for VideoDeviceCharacteristic {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.VideoDeviceCharacteristic;i4)",);
        
      }#[repr(transparent)]pub struct IMediaCaptureSettings(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureSettings{}
      impl IMediaCaptureSettings {
        pub fn audio_device_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn video_device_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn streaming_capture_mode(&self) ->  ::winrt::Result<StreamingCaptureMode>{
          let this = self;
          unsafe {
            let mut result__: <StreamingCaptureMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<StreamingCaptureMode>(result__)
          }
        }pub fn photo_capture_source(&self) ->  ::winrt::Result<PhotoCaptureSource>{
          let this = self;
          unsafe {
            let mut result__: <PhotoCaptureSource as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<PhotoCaptureSource>(result__)
          }
        }pub fn video_device_characteristic(&self,) ->  ::winrt::Result<VideoDeviceCharacteristic>{
          let this = self;
          unsafe {
            let mut result__: <VideoDeviceCharacteristic as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoDeviceCharacteristic>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureSettings {
        type Vtable = IMediaCaptureSettings_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(495168254,27973,17527,[141,196,172,91,192,28,64,145],);
        
      }#[repr(C)]pub struct IMediaCaptureSettings_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut StreamingCaptureMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut PhotoCaptureSource,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut VideoDeviceCharacteristic,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{1d83aafe-6d45-4477-8dc4-ac5bc01c4091}")
        };
        
      }impl::std::convert::From<IMediaCaptureSettings>for::winrt::Object {
        fn from(value:IMediaCaptureSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureSettings>for::winrt::Object {
        fn from(value: &IMediaCaptureSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaCaptureSettings2(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureSettings2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureSettings2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureSettings2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureSettings2{}
      impl IMediaCaptureSettings2 {
        pub fn concurrent_record_and_photo_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn concurrent_record_and_photo_sequence_supported(&self,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn camera_sound_required_for_region(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn horizontal35mm_equivalent_focal_length(&self,) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn pitch_offset_degrees(&self,) ->  ::winrt::Result<super::super::foundation::IReference<i32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <i32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<i32>>(result__)
          }
        }pub fn vertical35mm_equivalent_focal_length(&self,) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn media_category(&self) ->  ::winrt::Result<MediaCategory>{
          let this = self;
          unsafe {
            let mut result__: <MediaCategory as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaCategory>(result__)
          }
        }pub fn audio_processing(&self) ->  ::winrt::Result<super::AudioProcessing>{
          let this = self;
          unsafe {
            let mut result__: <super::AudioProcessing as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::AudioProcessing>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureSettings2 {
        type Vtable = IMediaCaptureSettings2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1872657659,64159,19219,[156,190,90,185,79,31,52,147],);
        
      }#[repr(C)]pub struct IMediaCaptureSettings2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut MediaCategory,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::AudioProcessing,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureSettings2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{6f9e7cfb-fa9f-4b13-9cbe-5ab94f1f3493}")
        };
        
      }impl::std::convert::From<IMediaCaptureSettings2>for::winrt::Object {
        fn from(value:IMediaCaptureSettings2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureSettings2>for::winrt::Object {
        fn from(value: &IMediaCaptureSettings2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureSettings2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureSettings2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaCaptureSettings3(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureSettings3 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureSettings3 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureSettings3 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureSettings3{}
      impl IMediaCaptureSettings3 {
        pub fn direct3d11_device(&self,) ->  ::winrt::Result<super::super::graphics::directx::direct3d11::IDirect3DDevice>{
          let this = self;
          unsafe {
            let mut result__: <super::super::graphics::directx::direct3d11::IDirect3DDevice as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::graphics::directx::direct3d11::IDirect3DDevice>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureSettings3 {
        type Vtable = IMediaCaptureSettings3_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(809265090,32856,19227,[184,119,140,46,243,82,132,64],);
        
      }#[repr(C)]pub struct IMediaCaptureSettings3_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureSettings3 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{303c67c2-8058-4b1b-b877-8c2ef3528440}")
        };
        
      }impl::std::convert::From<IMediaCaptureSettings3>for::winrt::Object {
        fn from(value:IMediaCaptureSettings3) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureSettings3>for::winrt::Object {
        fn from(value: &IMediaCaptureSettings3) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureSettings3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureSettings3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct MediaCaptureSettings(::winrt::Object);
      impl MediaCaptureSettings {
        pub fn audio_device_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn video_device_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn streaming_capture_mode(&self) ->  ::winrt::Result<StreamingCaptureMode>{
          let this = self;
          unsafe {
            let mut result__: <StreamingCaptureMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<StreamingCaptureMode>(result__)
          }
        }pub fn photo_capture_source(&self) ->  ::winrt::Result<PhotoCaptureSource>{
          let this = self;
          unsafe {
            let mut result__: <PhotoCaptureSource as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<PhotoCaptureSource>(result__)
          }
        }pub fn video_device_characteristic(&self,) ->  ::winrt::Result<VideoDeviceCharacteristic>{
          let this = self;
          unsafe {
            let mut result__: <VideoDeviceCharacteristic as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoDeviceCharacteristic>(result__)
          }
        }pub fn concurrent_record_and_photo_supported(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureSettings2>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn concurrent_record_and_photo_sequence_supported(&self,) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureSettings2>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn camera_sound_required_for_region(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureSettings2>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn horizontal35mm_equivalent_focal_length(&self,) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureSettings2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn pitch_offset_degrees(&self,) ->  ::winrt::Result<super::super::foundation::IReference<i32>>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureSettings2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <i32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<i32>>(result__)
          }
        }pub fn vertical35mm_equivalent_focal_length(&self,) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureSettings2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn media_category(&self) ->  ::winrt::Result<MediaCategory>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureSettings2>(self).unwrap();
          unsafe {
            let mut result__: <MediaCategory as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaCategory>(result__)
          }
        }pub fn audio_processing(&self) ->  ::winrt::Result<super::AudioProcessing>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureSettings2>(self).unwrap();
          unsafe {
            let mut result__: <super::AudioProcessing as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::AudioProcessing>(result__)
          }
        }pub fn direct3d11_device(&self,) ->  ::winrt::Result<super::super::graphics::directx::direct3d11::IDirect3DDevice>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureSettings3>(self).unwrap();
          unsafe {
            let mut result__: <super::super::graphics::directx::direct3d11::IDirect3DDevice as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::graphics::directx::direct3d11::IDirect3DDevice>(result__)
          }
        }
      }impl::std::clone::Clone for MediaCaptureSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaCaptureSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCaptureSettings{}
      impl::std::fmt::Debug for MediaCaptureSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MediaCaptureSettings {
        const NAME: & 'static str = "Windows.Media.Capture.MediaCaptureSettings";
        
      }unsafe impl::winrt::Interface for MediaCaptureSettings {
        type Vtable = IMediaCaptureSettings_abi;
        const IID: ::winrt::Guid =  <IMediaCaptureSettings as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for MediaCaptureSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.MediaCaptureSettings;{1d83aafe-6d45-4477-8dc4-ac5bc01c4091})");
        
      }impl::std::convert::From<MediaCaptureSettings>for::winrt::Object {
        fn from(value:MediaCaptureSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&MediaCaptureSettings>for::winrt::Object {
        fn from(value: &MediaCaptureSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCaptureSettings>for IMediaCaptureSettings {
        fn from(value:MediaCaptureSettings) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MediaCaptureSettings>for IMediaCaptureSettings {
        fn from(value: &MediaCaptureSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureSettings>>for MediaCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureSettings>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureSettings>>for& 'a MediaCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureSettings>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCaptureSettings>for IMediaCaptureSettings2 {
        fn from(value:MediaCaptureSettings) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCaptureSettings>for IMediaCaptureSettings2 {
        fn from(value: &MediaCaptureSettings) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureSettings2>>for MediaCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureSettings2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureSettings2>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureSettings2>>for& 'a MediaCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureSettings2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureSettings2>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCaptureSettings>for IMediaCaptureSettings3 {
        fn from(value:MediaCaptureSettings) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCaptureSettings>for IMediaCaptureSettings3 {
        fn from(value: &MediaCaptureSettings) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureSettings3>>for MediaCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureSettings3>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureSettings3>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureSettings3>>for& 'a MediaCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureSettings3>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureSettings3>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct PowerlineFrequency(i32);
      impl::std::convert::From<i32>for PowerlineFrequency {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for PowerlineFrequency {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for PowerlineFrequency {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for PowerlineFrequency {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for PowerlineFrequency {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for PowerlineFrequency{}
      impl::std::marker::Copy for PowerlineFrequency{}
      impl PowerlineFrequency {
        #![allow(non_upper_case_globals)]pub const Disabled:Self = Self(0i32);
        pub const FiftyHertz:Self = Self(1i32);
        pub const SixtyHertz:Self = Self(2i32);
        pub const Auto:Self = Self(3i32);
        
      }unsafe impl::winrt::Abi for PowerlineFrequency {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for PowerlineFrequency {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.PowerlineFrequency;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct VideoRotation(i32);
      impl::std::convert::From<i32>for VideoRotation {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for VideoRotation {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for VideoRotation {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for VideoRotation {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for VideoRotation {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for VideoRotation{}
      impl::std::marker::Copy for VideoRotation{}
      impl VideoRotation {
        #![allow(non_upper_case_globals)]pub const None:Self = Self(0i32);
        pub const Clockwise90Degrees:Self = Self(1i32);
        pub const Clockwise180Degrees:Self = Self(2i32);
        pub const Clockwise270Degrees:Self = Self(3i32);
        
      }unsafe impl::winrt::Abi for VideoRotation {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for VideoRotation {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.VideoRotation;i4)",);
        
      }#[repr(transparent)]pub struct IMediaCapture(::winrt::Object);
      impl::std::clone::Clone for IMediaCapture {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCapture {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCapture {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCapture{}
      impl IMediaCapture {
        pub fn initialize_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn initialize_with_settings_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,MediaCaptureInitializationSettings>>, >(&self,media_capture_initialization_settings:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),media_capture_initialization_settings.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn start_record_to_storage_file_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::super::storage::IStorageFile>>, >(&self,encoding_profile:T0__,file:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),encoding_profile.into().abi(),file.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn start_record_to_stream_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>, >, >(&self,encoding_profile:T0__,stream:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),encoding_profile.into().abi(),stream.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn start_record_to_custom_sink_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::IMediaExtension>>, >(&self,encoding_profile:T0__,custom_media_sink:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),encoding_profile.into().abi(),custom_media_sink.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn start_record_to_custom_sink_id_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T2__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IPropertySet>, >, >(&self,encoding_profile:T0__,custom_sink_activation_id:T1__,custom_sink_settings:T2__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),encoding_profile.into().abi(),custom_sink_activation_id.into().abi(),custom_sink_settings.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn stop_record_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn capture_photo_to_storage_file_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::ImageEncodingProperties>, >,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::super::storage::IStorageFile>>, >(&self,r#type:T0__,file:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),r#type.into().abi(),file.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn capture_photo_to_stream_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::ImageEncodingProperties>, >,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>, >, >(&self,r#type:T0__,stream:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),r#type.into().abi(),stream.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn add_effect_async< 'a ,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T2__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IPropertySet>, >, >(&self,media_stream_type:MediaStreamType,effect_activation_id:T1__,effect_settings:T2__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),media_stream_type,effect_activation_id.into().abi(),effect_settings.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn clear_effects_async(&self,media_stream_type:MediaStreamType,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),media_stream_type, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn set_encoder_property< 'a ,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Guid>>,T2__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,media_stream_type:MediaStreamType,property_id:T1__,property_value:T2__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),media_stream_type,property_id.into().abi(),property_value.into().abi(),).ok()
          }
        }pub fn get_encoder_property< 'a ,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Guid>>, >(&self,media_stream_type:MediaStreamType,property_id:T1__,) ->  ::winrt::Result<::winrt::Object>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::Object as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),media_stream_type,property_id.into().abi(), &mut result__,).from_abi::<::winrt::Object>(result__)
          }
        }pub fn failed< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,MediaCaptureFailedEventHandler>>, >(&self,error_event_handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this),error_event_handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_failed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn record_limitation_exceeded< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,RecordLimitationExceededEventHandler>>, >(&self,record_limitation_exceeded_event_handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this),record_limitation_exceeded_event_handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_record_limitation_exceeded< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn media_capture_settings(&self) ->  ::winrt::Result<MediaCaptureSettings>{
          let this = self;
          unsafe {
            let mut result__: <MediaCaptureSettings as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).23)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaCaptureSettings>(result__)
          }
        }pub fn audio_device_controller(&self,) ->  ::winrt::Result<super::devices::AudioDeviceController>{
          let this = self;
          unsafe {
            let mut result__: <super::devices::AudioDeviceController as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).24)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::devices::AudioDeviceController>(result__)
          }
        }pub fn video_device_controller(&self,) ->  ::winrt::Result<super::devices::VideoDeviceController>{
          let this = self;
          unsafe {
            let mut result__: <super::devices::VideoDeviceController as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).25)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::devices::VideoDeviceController>(result__)
          }
        }pub fn set_preview_mirroring(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).26)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn get_preview_mirroring(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).27)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_preview_rotation(&self,value:VideoRotation) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).28)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn get_preview_rotation(&self) ->  ::winrt::Result<VideoRotation>{
          let this = self;
          unsafe {
            let mut result__: <VideoRotation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).29)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoRotation>(result__)
          }
        }pub fn set_record_rotation(&self,value:VideoRotation) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).30)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn get_record_rotation(&self) ->  ::winrt::Result<VideoRotation>{
          let this = self;
          unsafe {
            let mut result__: <VideoRotation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).31)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoRotation>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCapture {
        type Vtable = IMediaCapture_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3323657140,64272,18996,[172,24,202,128,217,200,231,238],);
        
      }#[repr(C)]pub struct IMediaCapture_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,media_capture_initialization_settings: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,encoding_profile: ::winrt::RawPtr,file: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,encoding_profile: ::winrt::RawPtr,stream: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,encoding_profile: ::winrt::RawPtr,custom_media_sink: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,encoding_profile: ::winrt::RawPtr,custom_sink_activation_id: ::winrt::RawPtr,custom_sink_settings: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,r#type: ::winrt::RawPtr,file: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,r#type: ::winrt::RawPtr,stream: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,media_stream_type:MediaStreamType,effect_activation_id: ::winrt::RawPtr,effect_settings: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,media_stream_type:MediaStreamType,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,media_stream_type:MediaStreamType,property_id: ::winrt::Guid,property_value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,media_stream_type:MediaStreamType,property_id: ::winrt::Guid,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,error_event_handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,event_cookie:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,record_limitation_exceeded_event_handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,event_cookie:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:VideoRotation,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut VideoRotation,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:VideoRotation,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut VideoRotation,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCapture {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c61afbb4-fb10-4a34-ac18-ca80d9c8e7ee}")
        };
        
      }impl::std::convert::From<IMediaCapture>for::winrt::Object {
        fn from(value:IMediaCapture) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCapture>for::winrt::Object {
        fn from(value: &IMediaCapture) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ILowLagMediaRecording(::winrt::Object);
      impl::std::clone::Clone for ILowLagMediaRecording {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ILowLagMediaRecording {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ILowLagMediaRecording {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ILowLagMediaRecording{}
      impl ILowLagMediaRecording {
        pub fn start_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn stop_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn finish_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ILowLagMediaRecording {
        type Vtable = ILowLagMediaRecording_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1103674103,65343,18928,[164,119,241,149,227,206,81,8],);
        
      }#[repr(C)]pub struct ILowLagMediaRecording_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ILowLagMediaRecording {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{41c8baf7-ff3f-49f0-a477-f195e3ce5108}")
        };
        
      }impl::std::convert::From<ILowLagMediaRecording>for::winrt::Object {
        fn from(value:ILowLagMediaRecording) -> Self {
          value.0
        }
      }impl::std::convert::From<&ILowLagMediaRecording>for::winrt::Object {
        fn from(value: &ILowLagMediaRecording) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ILowLagMediaRecording {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ILowLagMediaRecording {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ILowLagMediaRecording2(::winrt::Object);
      impl::std::clone::Clone for ILowLagMediaRecording2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ILowLagMediaRecording2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ILowLagMediaRecording2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ILowLagMediaRecording2{}
      impl ILowLagMediaRecording2 {
        pub fn pause_async(&self,behavior:super::devices::MediaCapturePauseBehavior,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),behavior, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn resume_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ILowLagMediaRecording2 {
        type Vtable = ILowLagMediaRecording2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1667876696,22084,16866,[151,175,142,245,106,37,226,37],);
        
      }#[repr(C)]pub struct ILowLagMediaRecording2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,behavior:super::devices::MediaCapturePauseBehavior,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ILowLagMediaRecording2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{6369c758-5644-41e2-97af-8ef56a25e225}")
        };
        
      }impl::std::convert::From<ILowLagMediaRecording2>for::winrt::Object {
        fn from(value:ILowLagMediaRecording2) -> Self {
          value.0
        }
      }impl::std::convert::From<&ILowLagMediaRecording2>for::winrt::Object {
        fn from(value: &ILowLagMediaRecording2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ILowLagMediaRecording2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ILowLagMediaRecording2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaCapturePauseResult(::winrt::Object);
      impl::std::clone::Clone for IMediaCapturePauseResult {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCapturePauseResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCapturePauseResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCapturePauseResult{}
      impl IMediaCapturePauseResult {
        pub fn last_frame(&self) ->  ::winrt::Result<super::VideoFrame>{
          let this = self;
          unsafe {
            let mut result__: <super::VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::VideoFrame>(result__)
          }
        }pub fn record_duration(&self,) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCapturePauseResult {
        type Vtable = IMediaCapturePauseResult_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2932112547,17527,19204,[160,111,44,28,81,130,254,157],);
        
      }#[repr(C)]pub struct IMediaCapturePauseResult_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCapturePauseResult {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{aec47ca3-4477-4b04-a06f-2c1c5182fe9d}")
        };
        
      }impl::std::convert::From<IMediaCapturePauseResult>for::winrt::Object {
        fn from(value:IMediaCapturePauseResult) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCapturePauseResult>for::winrt::Object {
        fn from(value: &IMediaCapturePauseResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCapturePauseResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCapturePauseResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct MediaCapturePauseResult(::winrt::Object);
      impl MediaCapturePauseResult {
        pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn last_frame(&self) ->  ::winrt::Result<super::VideoFrame>{
          let this = self;
          unsafe {
            let mut result__: <super::VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::VideoFrame>(result__)
          }
        }pub fn record_duration(&self,) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }
      }impl::std::clone::Clone for MediaCapturePauseResult {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaCapturePauseResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCapturePauseResult{}
      impl::std::fmt::Debug for MediaCapturePauseResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MediaCapturePauseResult {
        const NAME: & 'static str = "Windows.Media.Capture.MediaCapturePauseResult";
        
      }unsafe impl::winrt::Interface for MediaCapturePauseResult {
        type Vtable = IMediaCapturePauseResult_abi;
        const IID: ::winrt::Guid =  <IMediaCapturePauseResult as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for MediaCapturePauseResult {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.MediaCapturePauseResult;{aec47ca3-4477-4b04-a06f-2c1c5182fe9d})");
        
      }impl::std::convert::From<MediaCapturePauseResult>for::winrt::Object {
        fn from(value:MediaCapturePauseResult) -> Self {
          value.0
        }
      }impl::std::convert::From<&MediaCapturePauseResult>for::winrt::Object {
        fn from(value: &MediaCapturePauseResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaCapturePauseResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaCapturePauseResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCapturePauseResult>for super::super::foundation::IClosable {
        fn from(value:MediaCapturePauseResult) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCapturePauseResult>for super::super::foundation::IClosable {
        fn from(value: &MediaCapturePauseResult) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for MediaCapturePauseResult {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a MediaCapturePauseResult {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<MediaCapturePauseResult>for IMediaCapturePauseResult {
        fn from(value:MediaCapturePauseResult) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MediaCapturePauseResult>for IMediaCapturePauseResult {
        fn from(value: &MediaCapturePauseResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCapturePauseResult>>for MediaCapturePauseResult {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCapturePauseResult>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCapturePauseResult>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCapturePauseResult>>for& 'a MediaCapturePauseResult {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCapturePauseResult>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCapturePauseResult>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaCaptureStopResult(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureStopResult {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureStopResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureStopResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureStopResult{}
      impl IMediaCaptureStopResult {
        pub fn last_frame(&self) ->  ::winrt::Result<super::VideoFrame>{
          let this = self;
          unsafe {
            let mut result__: <super::VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::VideoFrame>(result__)
          }
        }pub fn record_duration(&self,) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureStopResult {
        type Vtable = IMediaCaptureStopResult_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4191906346,41106,19153,[151,212,242,1,249,208,130,219],);
        
      }#[repr(C)]pub struct IMediaCaptureStopResult_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureStopResult {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{f9db6a2a-a092-4ad1-97d4-f201f9d082db}")
        };
        
      }impl::std::convert::From<IMediaCaptureStopResult>for::winrt::Object {
        fn from(value:IMediaCaptureStopResult) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureStopResult>for::winrt::Object {
        fn from(value: &IMediaCaptureStopResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureStopResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureStopResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct MediaCaptureStopResult(::winrt::Object);
      impl MediaCaptureStopResult {
        pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn last_frame(&self) ->  ::winrt::Result<super::VideoFrame>{
          let this = self;
          unsafe {
            let mut result__: <super::VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::VideoFrame>(result__)
          }
        }pub fn record_duration(&self,) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }
      }impl::std::clone::Clone for MediaCaptureStopResult {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaCaptureStopResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCaptureStopResult{}
      impl::std::fmt::Debug for MediaCaptureStopResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MediaCaptureStopResult {
        const NAME: & 'static str = "Windows.Media.Capture.MediaCaptureStopResult";
        
      }unsafe impl::winrt::Interface for MediaCaptureStopResult {
        type Vtable = IMediaCaptureStopResult_abi;
        const IID: ::winrt::Guid =  <IMediaCaptureStopResult as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for MediaCaptureStopResult {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.MediaCaptureStopResult;{f9db6a2a-a092-4ad1-97d4-f201f9d082db})");
        
      }impl::std::convert::From<MediaCaptureStopResult>for::winrt::Object {
        fn from(value:MediaCaptureStopResult) -> Self {
          value.0
        }
      }impl::std::convert::From<&MediaCaptureStopResult>for::winrt::Object {
        fn from(value: &MediaCaptureStopResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaCaptureStopResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaCaptureStopResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCaptureStopResult>for super::super::foundation::IClosable {
        fn from(value:MediaCaptureStopResult) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCaptureStopResult>for super::super::foundation::IClosable {
        fn from(value: &MediaCaptureStopResult) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for MediaCaptureStopResult {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a MediaCaptureStopResult {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<MediaCaptureStopResult>for IMediaCaptureStopResult {
        fn from(value:MediaCaptureStopResult) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MediaCaptureStopResult>for IMediaCaptureStopResult {
        fn from(value: &MediaCaptureStopResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureStopResult>>for MediaCaptureStopResult {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureStopResult>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureStopResult>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureStopResult>>for& 'a MediaCaptureStopResult {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureStopResult>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureStopResult>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ILowLagMediaRecording3(::winrt::Object);
      impl::std::clone::Clone for ILowLagMediaRecording3 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ILowLagMediaRecording3 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ILowLagMediaRecording3 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ILowLagMediaRecording3{}
      impl ILowLagMediaRecording3 {
        pub fn pause_with_result_async(&self,behavior:super::devices::MediaCapturePauseBehavior,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<MediaCapturePauseResult>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<MediaCapturePauseResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),behavior, &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <MediaCapturePauseResult> >(result__)
          }
        }pub fn stop_with_result_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<MediaCaptureStopResult>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<MediaCaptureStopResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <MediaCaptureStopResult> >(result__)
          }
        }
      }unsafe impl::winrt::Interface for ILowLagMediaRecording3 {
        type Vtable = ILowLagMediaRecording3_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1546890002,18679,18394,[180,30,144,136,10,95,224,236],);
        
      }#[repr(C)]pub struct ILowLagMediaRecording3_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,behavior:super::devices::MediaCapturePauseBehavior,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ILowLagMediaRecording3 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{5c33ab12-48f7-47da-b41e-90880a5fe0ec}")
        };
        
      }impl::std::convert::From<ILowLagMediaRecording3>for::winrt::Object {
        fn from(value:ILowLagMediaRecording3) -> Self {
          value.0
        }
      }impl::std::convert::From<&ILowLagMediaRecording3>for::winrt::Object {
        fn from(value: &ILowLagMediaRecording3) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ILowLagMediaRecording3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ILowLagMediaRecording3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct LowLagMediaRecording(::winrt::Object);
      impl LowLagMediaRecording {
        pub fn start_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn stop_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn finish_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn pause_async(&self,behavior:super::devices::MediaCapturePauseBehavior,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<ILowLagMediaRecording2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),behavior, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn resume_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<ILowLagMediaRecording2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn pause_with_result_async(&self,behavior:super::devices::MediaCapturePauseBehavior,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<MediaCapturePauseResult>, >{
          let this =  &::winrt::Interface::cast::<ILowLagMediaRecording3>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<MediaCapturePauseResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),behavior, &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <MediaCapturePauseResult> >(result__)
          }
        }pub fn stop_with_result_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<MediaCaptureStopResult>, >{
          let this =  &::winrt::Interface::cast::<ILowLagMediaRecording3>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<MediaCaptureStopResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <MediaCaptureStopResult> >(result__)
          }
        }
      }impl::std::clone::Clone for LowLagMediaRecording {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for LowLagMediaRecording {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for LowLagMediaRecording{}
      impl::std::fmt::Debug for LowLagMediaRecording {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for LowLagMediaRecording {
        const NAME: & 'static str = "Windows.Media.Capture.LowLagMediaRecording";
        
      }unsafe impl::winrt::Interface for LowLagMediaRecording {
        type Vtable = ILowLagMediaRecording_abi;
        const IID: ::winrt::Guid =  <ILowLagMediaRecording as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for LowLagMediaRecording {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.LowLagMediaRecording;{41c8baf7-ff3f-49f0-a477-f195e3ce5108})");
        
      }impl::std::convert::From<LowLagMediaRecording>for::winrt::Object {
        fn from(value:LowLagMediaRecording) -> Self {
          value.0
        }
      }impl::std::convert::From<&LowLagMediaRecording>for::winrt::Object {
        fn from(value: &LowLagMediaRecording) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for LowLagMediaRecording {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a LowLagMediaRecording {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<LowLagMediaRecording>for ILowLagMediaRecording {
        fn from(value:LowLagMediaRecording) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&LowLagMediaRecording>for ILowLagMediaRecording {
        fn from(value: &LowLagMediaRecording) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ILowLagMediaRecording>>for LowLagMediaRecording {
        fn into(self) ->  ::winrt::Param< 'a ,ILowLagMediaRecording>{
          ::winrt::Param::Owned(::std::convert::Into::<ILowLagMediaRecording>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ILowLagMediaRecording>>for& 'a LowLagMediaRecording {
        fn into(self) ->  ::winrt::Param< 'a ,ILowLagMediaRecording>{
          ::winrt::Param::Owned(::std::convert::Into::<ILowLagMediaRecording>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<LowLagMediaRecording>for ILowLagMediaRecording2 {
        fn from(value:LowLagMediaRecording) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&LowLagMediaRecording>for ILowLagMediaRecording2 {
        fn from(value: &LowLagMediaRecording) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ILowLagMediaRecording2>>for LowLagMediaRecording {
        fn into(self) ->  ::winrt::Param< 'a ,ILowLagMediaRecording2>{
          ::winrt::Param::Owned(::std::convert::Into::<ILowLagMediaRecording2>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ILowLagMediaRecording2>>for& 'a LowLagMediaRecording {
        fn into(self) ->  ::winrt::Param< 'a ,ILowLagMediaRecording2>{
          ::winrt::Param::Owned(::std::convert::Into::<ILowLagMediaRecording2>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<LowLagMediaRecording>for ILowLagMediaRecording3 {
        fn from(value:LowLagMediaRecording) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&LowLagMediaRecording>for ILowLagMediaRecording3 {
        fn from(value: &LowLagMediaRecording) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ILowLagMediaRecording3>>for LowLagMediaRecording {
        fn into(self) ->  ::winrt::Param< 'a ,ILowLagMediaRecording3>{
          ::winrt::Param::Owned(::std::convert::Into::<ILowLagMediaRecording3>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ILowLagMediaRecording3>>for& 'a LowLagMediaRecording {
        fn into(self) ->  ::winrt::Param< 'a ,ILowLagMediaRecording3>{
          ::winrt::Param::Owned(::std::convert::Into::<ILowLagMediaRecording3>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ICapturedPhoto(::winrt::Object);
      impl::std::clone::Clone for ICapturedPhoto {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ICapturedPhoto {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ICapturedPhoto {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ICapturedPhoto{}
      impl ICapturedPhoto {
        pub fn frame(&self) ->  ::winrt::Result<CapturedFrame>{
          let this = self;
          unsafe {
            let mut result__: <CapturedFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CapturedFrame>(result__)
          }
        }pub fn thumbnail(&self) ->  ::winrt::Result<CapturedFrame>{
          let this = self;
          unsafe {
            let mut result__: <CapturedFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<CapturedFrame>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ICapturedPhoto {
        type Vtable = ICapturedPhoto_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2966322778,53196,19820,[138,209,8,105,32,138,202,22],);
        
      }#[repr(C)]pub struct ICapturedPhoto_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ICapturedPhoto {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{b0ce7e5a-cfcc-4d6c-8ad1-0869208aca16}")
        };
        
      }impl::std::convert::From<ICapturedPhoto>for::winrt::Object {
        fn from(value:ICapturedPhoto) -> Self {
          value.0
        }
      }impl::std::convert::From<&ICapturedPhoto>for::winrt::Object {
        fn from(value: &ICapturedPhoto) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ICapturedPhoto {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ICapturedPhoto {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct CapturedPhoto(::winrt::Object);
      impl CapturedPhoto {
        pub fn frame(&self) ->  ::winrt::Result<CapturedFrame>{
          let this = self;
          unsafe {
            let mut result__: <CapturedFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CapturedFrame>(result__)
          }
        }pub fn thumbnail(&self) ->  ::winrt::Result<CapturedFrame>{
          let this = self;
          unsafe {
            let mut result__: <CapturedFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<CapturedFrame>(result__)
          }
        }
      }impl::std::clone::Clone for CapturedPhoto {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for CapturedPhoto {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for CapturedPhoto{}
      impl::std::fmt::Debug for CapturedPhoto {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for CapturedPhoto {
        const NAME: & 'static str = "Windows.Media.Capture.CapturedPhoto";
        
      }unsafe impl::winrt::Interface for CapturedPhoto {
        type Vtable = ICapturedPhoto_abi;
        const IID: ::winrt::Guid =  <ICapturedPhoto as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for CapturedPhoto {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.CapturedPhoto;{b0ce7e5a-cfcc-4d6c-8ad1-0869208aca16})");
        
      }impl::std::convert::From<CapturedPhoto>for::winrt::Object {
        fn from(value:CapturedPhoto) -> Self {
          value.0
        }
      }impl::std::convert::From<&CapturedPhoto>for::winrt::Object {
        fn from(value: &CapturedPhoto) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for CapturedPhoto {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a CapturedPhoto {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<CapturedPhoto>for ICapturedPhoto {
        fn from(value:CapturedPhoto) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&CapturedPhoto>for ICapturedPhoto {
        fn from(value: &CapturedPhoto) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICapturedPhoto>>for CapturedPhoto {
        fn into(self) ->  ::winrt::Param< 'a ,ICapturedPhoto>{
          ::winrt::Param::Owned(::std::convert::Into::<ICapturedPhoto>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICapturedPhoto>>for& 'a CapturedPhoto {
        fn into(self) ->  ::winrt::Param< 'a ,ICapturedPhoto>{
          ::winrt::Param::Owned(::std::convert::Into::<ICapturedPhoto>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for CapturedPhoto{}
      unsafe impl::std::marker::Sync for CapturedPhoto{}
      #[repr(transparent)]pub struct ILowLagPhotoCapture(::winrt::Object);
      impl::std::clone::Clone for ILowLagPhotoCapture {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ILowLagPhotoCapture {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ILowLagPhotoCapture {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ILowLagPhotoCapture{}
      impl ILowLagPhotoCapture {
        pub fn capture_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<CapturedPhoto>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <CapturedPhoto>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<CapturedPhoto>>(result__,)
          }
        }pub fn finish_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ILowLagPhotoCapture {
        type Vtable = ILowLagPhotoCapture_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2742178231,27460,18237,[143,36,247,3,214,192,236,68],);
        
      }#[repr(C)]pub struct ILowLagPhotoCapture_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ILowLagPhotoCapture {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{a37251b7-6b44-473d-8f24-f703d6c0ec44}")
        };
        
      }impl::std::convert::From<ILowLagPhotoCapture>for::winrt::Object {
        fn from(value:ILowLagPhotoCapture) -> Self {
          value.0
        }
      }impl::std::convert::From<&ILowLagPhotoCapture>for::winrt::Object {
        fn from(value: &ILowLagPhotoCapture) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ILowLagPhotoCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ILowLagPhotoCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct LowLagPhotoCapture(::winrt::Object);
      impl LowLagPhotoCapture {
        pub fn capture_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<CapturedPhoto>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <CapturedPhoto>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<CapturedPhoto>>(result__,)
          }
        }pub fn finish_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }impl::std::clone::Clone for LowLagPhotoCapture {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for LowLagPhotoCapture {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for LowLagPhotoCapture{}
      impl::std::fmt::Debug for LowLagPhotoCapture {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for LowLagPhotoCapture {
        const NAME: & 'static str = "Windows.Media.Capture.LowLagPhotoCapture";
        
      }unsafe impl::winrt::Interface for LowLagPhotoCapture {
        type Vtable = ILowLagPhotoCapture_abi;
        const IID: ::winrt::Guid =  <ILowLagPhotoCapture as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for LowLagPhotoCapture {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.LowLagPhotoCapture;{a37251b7-6b44-473d-8f24-f703d6c0ec44})");
        
      }impl::std::convert::From<LowLagPhotoCapture>for::winrt::Object {
        fn from(value:LowLagPhotoCapture) -> Self {
          value.0
        }
      }impl::std::convert::From<&LowLagPhotoCapture>for::winrt::Object {
        fn from(value: &LowLagPhotoCapture) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for LowLagPhotoCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a LowLagPhotoCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<LowLagPhotoCapture>for ILowLagPhotoCapture {
        fn from(value:LowLagPhotoCapture) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&LowLagPhotoCapture>for ILowLagPhotoCapture {
        fn from(value: &LowLagPhotoCapture) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ILowLagPhotoCapture>>for LowLagPhotoCapture {
        fn into(self) ->  ::winrt::Param< 'a ,ILowLagPhotoCapture>{
          ::winrt::Param::Owned(::std::convert::Into::<ILowLagPhotoCapture>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ILowLagPhotoCapture>>for& 'a LowLagPhotoCapture {
        fn into(self) ->  ::winrt::Param< 'a ,ILowLagPhotoCapture>{
          ::winrt::Param::Owned(::std::convert::Into::<ILowLagPhotoCapture>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IPhotoCapturedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IPhotoCapturedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IPhotoCapturedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IPhotoCapturedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IPhotoCapturedEventArgs{}
      impl IPhotoCapturedEventArgs {
        pub fn frame(&self) ->  ::winrt::Result<CapturedFrame>{
          let this = self;
          unsafe {
            let mut result__: <CapturedFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CapturedFrame>(result__)
          }
        }pub fn thumbnail(&self) ->  ::winrt::Result<CapturedFrame>{
          let this = self;
          unsafe {
            let mut result__: <CapturedFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<CapturedFrame>(result__)
          }
        }pub fn capture_time_offset(&self,) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IPhotoCapturedEventArgs {
        type Vtable = IPhotoCapturedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(926677953,38990,20464,[191,133,28,0,170,188,90,69],);
        
      }#[repr(C)]pub struct IPhotoCapturedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IPhotoCapturedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{373bfbc1-984e-4ff0-bf85-1c00aabc5a45}")
        };
        
      }impl::std::convert::From<IPhotoCapturedEventArgs>for::winrt::Object {
        fn from(value:IPhotoCapturedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IPhotoCapturedEventArgs>for::winrt::Object {
        fn from(value: &IPhotoCapturedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IPhotoCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IPhotoCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct PhotoCapturedEventArgs(::winrt::Object);
      impl PhotoCapturedEventArgs {
        pub fn frame(&self) ->  ::winrt::Result<CapturedFrame>{
          let this = self;
          unsafe {
            let mut result__: <CapturedFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CapturedFrame>(result__)
          }
        }pub fn thumbnail(&self) ->  ::winrt::Result<CapturedFrame>{
          let this = self;
          unsafe {
            let mut result__: <CapturedFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<CapturedFrame>(result__)
          }
        }pub fn capture_time_offset(&self,) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }
      }impl::std::clone::Clone for PhotoCapturedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for PhotoCapturedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for PhotoCapturedEventArgs{}
      impl::std::fmt::Debug for PhotoCapturedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for PhotoCapturedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.PhotoCapturedEventArgs";
        
      }unsafe impl::winrt::Interface for PhotoCapturedEventArgs {
        type Vtable = IPhotoCapturedEventArgs_abi;
        const IID: ::winrt::Guid =  <IPhotoCapturedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for PhotoCapturedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.PhotoCapturedEventArgs;{373bfbc1-984e-4ff0-bf85-1c00aabc5a45})");
        
      }impl::std::convert::From<PhotoCapturedEventArgs>for::winrt::Object {
        fn from(value:PhotoCapturedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&PhotoCapturedEventArgs>for::winrt::Object {
        fn from(value: &PhotoCapturedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for PhotoCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a PhotoCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<PhotoCapturedEventArgs>for IPhotoCapturedEventArgs {
        fn from(value:PhotoCapturedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&PhotoCapturedEventArgs>for IPhotoCapturedEventArgs {
        fn from(value: &PhotoCapturedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IPhotoCapturedEventArgs>>for PhotoCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IPhotoCapturedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IPhotoCapturedEventArgs>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IPhotoCapturedEventArgs>>for& 'a PhotoCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IPhotoCapturedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IPhotoCapturedEventArgs>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for PhotoCapturedEventArgs{}
      unsafe impl::std::marker::Sync for PhotoCapturedEventArgs{}
      #[repr(transparent)]pub struct ILowLagPhotoSequenceCapture(::winrt::Object);
      impl::std::clone::Clone for ILowLagPhotoSequenceCapture {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ILowLagPhotoSequenceCapture {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ILowLagPhotoSequenceCapture {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ILowLagPhotoSequenceCapture{}
      impl ILowLagPhotoSequenceCapture {
        pub fn start_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn stop_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn finish_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn photo_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<LowLagPhotoSequenceCapture,PhotoCapturedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_photo_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for ILowLagPhotoSequenceCapture {
        type Vtable = ILowLagPhotoSequenceCapture_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2093172411,47529,19601,[143,250,40,126,156,102,134,105],);
        
      }#[repr(C)]pub struct ILowLagPhotoSequenceCapture_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ILowLagPhotoSequenceCapture {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{7cc346bb-b9a9-4c91-8ffa-287e9c668669}")
        };
        
      }impl::std::convert::From<ILowLagPhotoSequenceCapture>for::winrt::Object {
        fn from(value:ILowLagPhotoSequenceCapture) -> Self {
          value.0
        }
      }impl::std::convert::From<&ILowLagPhotoSequenceCapture>for::winrt::Object {
        fn from(value: &ILowLagPhotoSequenceCapture) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ILowLagPhotoSequenceCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ILowLagPhotoSequenceCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct LowLagPhotoSequenceCapture(::winrt::Object);
      impl LowLagPhotoSequenceCapture {
        pub fn start_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn stop_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn finish_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn photo_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<LowLagPhotoSequenceCapture,PhotoCapturedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_photo_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for LowLagPhotoSequenceCapture {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for LowLagPhotoSequenceCapture {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for LowLagPhotoSequenceCapture{}
      impl::std::fmt::Debug for LowLagPhotoSequenceCapture {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for LowLagPhotoSequenceCapture {
        const NAME: & 'static str = "Windows.Media.Capture.LowLagPhotoSequenceCapture";
        
      }unsafe impl::winrt::Interface for LowLagPhotoSequenceCapture {
        type Vtable = ILowLagPhotoSequenceCapture_abi;
        const IID: ::winrt::Guid =  <ILowLagPhotoSequenceCapture as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for LowLagPhotoSequenceCapture {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.LowLagPhotoSequenceCapture;{7cc346bb-b9a9-4c91-8ffa-287e9c668669})");
        
      }impl::std::convert::From<LowLagPhotoSequenceCapture>for::winrt::Object {
        fn from(value:LowLagPhotoSequenceCapture) -> Self {
          value.0
        }
      }impl::std::convert::From<&LowLagPhotoSequenceCapture>for::winrt::Object {
        fn from(value: &LowLagPhotoSequenceCapture) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for LowLagPhotoSequenceCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a LowLagPhotoSequenceCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<LowLagPhotoSequenceCapture>for ILowLagPhotoSequenceCapture {
        fn from(value:LowLagPhotoSequenceCapture) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&LowLagPhotoSequenceCapture>for ILowLagPhotoSequenceCapture {
        fn from(value: &LowLagPhotoSequenceCapture) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ILowLagPhotoSequenceCapture>>for LowLagPhotoSequenceCapture {
        fn into(self) ->  ::winrt::Param< 'a ,ILowLagPhotoSequenceCapture>{
          ::winrt::Param::Owned(::std::convert::Into::<ILowLagPhotoSequenceCapture>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ILowLagPhotoSequenceCapture>>for& 'a LowLagPhotoSequenceCapture {
        fn into(self) ->  ::winrt::Param< 'a ,ILowLagPhotoSequenceCapture>{
          ::winrt::Param::Owned(::std::convert::Into::<ILowLagPhotoSequenceCapture>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct IMediaCapture2(::winrt::Object);
      impl::std::clone::Clone for IMediaCapture2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCapture2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCapture2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCapture2{}
      impl IMediaCapture2 {
        pub fn prepare_low_lag_record_to_storage_file_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::super::storage::IStorageFile>>, >(&self,encoding_profile:T0__,file:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<LowLagMediaRecording>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<LowLagMediaRecording, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),encoding_profile.into().abi(),file.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <LowLagMediaRecording> >(result__)
          }
        }pub fn prepare_low_lag_record_to_stream_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>, >, >(&self,encoding_profile:T0__,stream:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<LowLagMediaRecording>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<LowLagMediaRecording, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),encoding_profile.into().abi(),stream.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <LowLagMediaRecording> >(result__)
          }
        }pub fn prepare_low_lag_record_to_custom_sink_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::IMediaExtension>>, >(&self,encoding_profile:T0__,custom_media_sink:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<LowLagMediaRecording>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<LowLagMediaRecording, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),encoding_profile.into().abi(),custom_media_sink.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <LowLagMediaRecording> >(result__)
          }
        }pub fn prepare_low_lag_record_to_custom_sink_id_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T2__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IPropertySet>, >, >(&self,encoding_profile:T0__,custom_sink_activation_id:T1__,custom_sink_settings:T2__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<LowLagMediaRecording>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<LowLagMediaRecording, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),encoding_profile.into().abi(),custom_sink_activation_id.into().abi(),custom_sink_settings.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <LowLagMediaRecording> >(result__)
          }
        }pub fn prepare_low_lag_photo_capture_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::ImageEncodingProperties>, >, >(&self,r#type:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<LowLagPhotoCapture>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<LowLagPhotoCapture, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),r#type.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<LowLagPhotoCapture>>(result__,)
          }
        }pub fn prepare_low_lag_photo_sequence_capture_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::ImageEncodingProperties>, >, >(&self,r#type:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<LowLagPhotoSequenceCapture>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<LowLagPhotoSequenceCapture, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),r#type.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <LowLagPhotoSequenceCapture> >(result__)
          }
        }pub fn set_encoding_properties_async< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::IMediaEncodingProperties>, >,T2__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaPropertySet>, >, >(&self,media_stream_type:MediaStreamType,media_encoding_properties:T1__,encoder_properties:T2__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),media_stream_type,media_encoding_properties.into().abi(),encoder_properties.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCapture2 {
        type Vtable = IMediaCapture2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2630255200,32161,16451,[182,82,33,184,135,141,175,249],);
        
      }#[repr(C)]pub struct IMediaCapture2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,encoding_profile: ::winrt::RawPtr,file: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,encoding_profile: ::winrt::RawPtr,stream: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,encoding_profile: ::winrt::RawPtr,custom_media_sink: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,encoding_profile: ::winrt::RawPtr,custom_sink_activation_id: ::winrt::RawPtr,custom_sink_settings: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,r#type: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,r#type: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,media_stream_type:MediaStreamType,media_encoding_properties: ::winrt::RawPtr,encoder_properties: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCapture2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{9cc68260-7da1-4043-b652-21b8878daff9}")
        };
        
      }impl::std::convert::From<IMediaCapture2>for::winrt::Object {
        fn from(value:IMediaCapture2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCapture2>for::winrt::Object {
        fn from(value: &IMediaCapture2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCapture2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCapture2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaCaptureFocusChangedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureFocusChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureFocusChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureFocusChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureFocusChangedEventArgs{}
      impl IMediaCaptureFocusChangedEventArgs {
        pub fn focus_state(&self,) ->  ::winrt::Result<super::devices::MediaCaptureFocusState>{
          let this = self;
          unsafe {
            let mut result__: <super::devices::MediaCaptureFocusState as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::devices::MediaCaptureFocusState>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureFocusChangedEventArgs {
        type Vtable = IMediaCaptureFocusChangedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2179054719,8823,18750,[171,238,211,244,79,249,140,4],);
        
      }#[repr(C)]pub struct IMediaCaptureFocusChangedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::devices::MediaCaptureFocusState,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureFocusChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{81e1bc7f-2277-493e-abee-d3f44ff98c04}")
        };
        
      }impl::std::convert::From<IMediaCaptureFocusChangedEventArgs>for::winrt::Object {
        fn from(value:IMediaCaptureFocusChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureFocusChangedEventArgs>for::winrt::Object {
        fn from(value: &IMediaCaptureFocusChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureFocusChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureFocusChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct MediaCaptureFocusChangedEventArgs(::winrt::Object);
      impl MediaCaptureFocusChangedEventArgs {
        pub fn focus_state(&self,) ->  ::winrt::Result<super::devices::MediaCaptureFocusState>{
          let this = self;
          unsafe {
            let mut result__: <super::devices::MediaCaptureFocusState as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::devices::MediaCaptureFocusState>(result__)
          }
        }
      }impl::std::clone::Clone for MediaCaptureFocusChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaCaptureFocusChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCaptureFocusChangedEventArgs{}
      impl::std::fmt::Debug for MediaCaptureFocusChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MediaCaptureFocusChangedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.MediaCaptureFocusChangedEventArgs";
        
      }unsafe impl::winrt::Interface for MediaCaptureFocusChangedEventArgs {
        type Vtable = IMediaCaptureFocusChangedEventArgs_abi;
        const IID: ::winrt::Guid =  <IMediaCaptureFocusChangedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for MediaCaptureFocusChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.MediaCaptureFocusChangedEventArgs;{81e1bc7f-2277-493e-abee-d3f44ff98c04})");
        
      }impl::std::convert::From<MediaCaptureFocusChangedEventArgs>for::winrt::Object {
        fn from(value:MediaCaptureFocusChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&MediaCaptureFocusChangedEventArgs>for::winrt::Object {
        fn from(value: &MediaCaptureFocusChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaCaptureFocusChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaCaptureFocusChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCaptureFocusChangedEventArgs>for IMediaCaptureFocusChangedEventArgs {
        fn from(value:MediaCaptureFocusChangedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MediaCaptureFocusChangedEventArgs>for IMediaCaptureFocusChangedEventArgs {
        fn from(value: &MediaCaptureFocusChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureFocusChangedEventArgs>>for MediaCaptureFocusChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureFocusChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureFocusChangedEventArgs>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureFocusChangedEventArgs>>for& 'a MediaCaptureFocusChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureFocusChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureFocusChangedEventArgs>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for MediaCaptureFocusChangedEventArgs{}
      unsafe impl::std::marker::Sync for MediaCaptureFocusChangedEventArgs{}
      #[repr(transparent)]pub struct IPhotoConfirmationCapturedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IPhotoConfirmationCapturedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IPhotoConfirmationCapturedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IPhotoConfirmationCapturedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IPhotoConfirmationCapturedEventArgs{}
      impl IPhotoConfirmationCapturedEventArgs {
        pub fn frame(&self) ->  ::winrt::Result<CapturedFrame>{
          let this = self;
          unsafe {
            let mut result__: <CapturedFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CapturedFrame>(result__)
          }
        }pub fn capture_time_offset(&self,) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IPhotoConfirmationCapturedEventArgs {
        type Vtable = IPhotoConfirmationCapturedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2873570930,49802,18471,[143,141,54,54,211,190,181,30],);
        
      }#[repr(C)]pub struct IPhotoConfirmationCapturedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IPhotoConfirmationCapturedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{ab473672-c28a-4827-8f8d-3636d3beb51e}")
        };
        
      }impl::std::convert::From<IPhotoConfirmationCapturedEventArgs>for::winrt::Object {
        fn from(value:IPhotoConfirmationCapturedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IPhotoConfirmationCapturedEventArgs>for::winrt::Object {
        fn from(value: &IPhotoConfirmationCapturedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IPhotoConfirmationCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IPhotoConfirmationCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct PhotoConfirmationCapturedEventArgs(::winrt::Object);
      impl PhotoConfirmationCapturedEventArgs {
        pub fn frame(&self) ->  ::winrt::Result<CapturedFrame>{
          let this = self;
          unsafe {
            let mut result__: <CapturedFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<CapturedFrame>(result__)
          }
        }pub fn capture_time_offset(&self,) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }
      }impl::std::clone::Clone for PhotoConfirmationCapturedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for PhotoConfirmationCapturedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for PhotoConfirmationCapturedEventArgs{}
      impl::std::fmt::Debug for PhotoConfirmationCapturedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for PhotoConfirmationCapturedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.PhotoConfirmationCapturedEventArgs";
        
      }unsafe impl::winrt::Interface for PhotoConfirmationCapturedEventArgs {
        type Vtable = IPhotoConfirmationCapturedEventArgs_abi;
        const IID: ::winrt::Guid =  <IPhotoConfirmationCapturedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for PhotoConfirmationCapturedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.PhotoConfirmationCapturedEventArgs;{ab473672-c28a-4827-8f8d-3636d3beb51e})");
        
      }impl::std::convert::From<PhotoConfirmationCapturedEventArgs>for::winrt::Object {
        fn from(value:PhotoConfirmationCapturedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&PhotoConfirmationCapturedEventArgs>for::winrt::Object {
        fn from(value: &PhotoConfirmationCapturedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for PhotoConfirmationCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a PhotoConfirmationCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<PhotoConfirmationCapturedEventArgs>for IPhotoConfirmationCapturedEventArgs {
        fn from(value:PhotoConfirmationCapturedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&PhotoConfirmationCapturedEventArgs>for IPhotoConfirmationCapturedEventArgs {
        fn from(value: &PhotoConfirmationCapturedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IPhotoConfirmationCapturedEventArgs>>for PhotoConfirmationCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IPhotoConfirmationCapturedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IPhotoConfirmationCapturedEventArgs>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IPhotoConfirmationCapturedEventArgs>>for& 'a PhotoConfirmationCapturedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IPhotoConfirmationCapturedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IPhotoConfirmationCapturedEventArgs>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for PhotoConfirmationCapturedEventArgs{}
      unsafe impl::std::marker::Sync for PhotoConfirmationCapturedEventArgs{}
      #[repr(transparent)]pub struct IMediaCapture3(::winrt::Object);
      impl::std::clone::Clone for IMediaCapture3 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCapture3 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCapture3 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCapture3{}
      impl IMediaCapture3 {
        pub fn prepare_variable_photo_sequence_capture_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::ImageEncodingProperties>, >, >(&self,r#type:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<core::VariablePhotoSequenceCapture>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<core::VariablePhotoSequenceCapture, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),r#type.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<core::VariablePhotoSequenceCapture, >>(result__)
          }
        }pub fn focus_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<MediaCapture,MediaCaptureFocusChangedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_focus_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn photo_confirmation_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<MediaCapture,PhotoConfirmationCapturedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_photo_confirmation_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IMediaCapture3 {
        type Vtable = IMediaCapture3_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3558043440,5476,18030,[188,10,175,148,224,42,176,22],);
        
      }#[repr(C)]pub struct IMediaCapture3_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,r#type: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCapture3 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{d4136f30-1564-466e-bc0a-af94e02ab016}")
        };
        
      }impl::std::convert::From<IMediaCapture3>for::winrt::Object {
        fn from(value:IMediaCapture3) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCapture3>for::winrt::Object {
        fn from(value: &IMediaCapture3) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCapture3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCapture3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct MediaCaptureThermalStatus(i32);
      impl::std::convert::From<i32>for MediaCaptureThermalStatus {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for MediaCaptureThermalStatus {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for MediaCaptureThermalStatus {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for MediaCaptureThermalStatus {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for MediaCaptureThermalStatus {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCaptureThermalStatus{}
      impl::std::marker::Copy for MediaCaptureThermalStatus{}
      impl MediaCaptureThermalStatus {
        #![allow(non_upper_case_globals)]pub const Normal:Self = Self(0i32);
        pub const Overheated:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for MediaCaptureThermalStatus {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for MediaCaptureThermalStatus {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.MediaCaptureThermalStatus;i4)",);
        
      }#[repr(transparent)]pub struct IMediaCapture4(::winrt::Object);
      impl::std::clone::Clone for IMediaCapture4 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCapture4 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCapture4 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCapture4{}
      impl IMediaCapture4 {
        pub fn add_audio_effect_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::effects::IAudioEffectDefinition>, >, >(&self,definition:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::IMediaExtension>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::IMediaExtension, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),definition.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <super::IMediaExtension> >(result__)
          }
        }pub fn add_video_effect_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::effects::IVideoEffectDefinition>, >, >(&self,definition:T0__,media_stream_type:MediaStreamType,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::IMediaExtension>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::IMediaExtension, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),definition.into().abi(),media_stream_type, &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <super::IMediaExtension> >(result__)
          }
        }pub fn pause_record_async(&self,behavior:super::devices::MediaCapturePauseBehavior,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),behavior, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn resume_record_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn camera_stream_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<MediaCapture, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_camera_stream_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn camera_stream_state(&self,) ->  ::winrt::Result<super::devices::CameraStreamState>{
          let this = self;
          unsafe {
            let mut result__: <super::devices::CameraStreamState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::devices::CameraStreamState>(result__)
          }
        }pub fn get_preview_frame_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::VideoFrame>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::VideoFrame, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::VideoFrame>>(result__,)
          }
        }pub fn get_preview_frame_copy_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::VideoFrame>>, >(&self,destination:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::VideoFrame>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::VideoFrame, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),destination.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::VideoFrame>>(result__,)
          }
        }pub fn thermal_status_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<MediaCapture, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_thermal_status_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn thermal_status(&self) ->  ::winrt::Result<MediaCaptureThermalStatus>{
          let this = self;
          unsafe {
            let mut result__: <MediaCaptureThermalStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaCaptureThermalStatus>(result__)
          }
        }pub fn prepare_advanced_photo_capture_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::ImageEncodingProperties>, >, >(&self,encoding_properties:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<AdvancedPhotoCapture>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<AdvancedPhotoCapture, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),encoding_properties.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <AdvancedPhotoCapture> >(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCapture4 {
        type Vtable = IMediaCapture4_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3134025686,64264,18759,[174,162,206,20,239,240,206,19],);
        
      }#[repr(C)]pub struct IMediaCapture4_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,definition: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,definition: ::winrt::RawPtr,media_stream_type:MediaStreamType,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,behavior:super::devices::MediaCapturePauseBehavior,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::devices::CameraStreamState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,destination: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut MediaCaptureThermalStatus,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,encoding_properties: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCapture4 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{bacd6fd6-fb08-4947-aea2-ce14eff0ce13}")
        };
        
      }impl::std::convert::From<IMediaCapture4>for::winrt::Object {
        fn from(value:IMediaCapture4) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCapture4>for::winrt::Object {
        fn from(value: &IMediaCapture4) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCapture4 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCapture4 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaCapture5(::winrt::Object);
      impl::std::clone::Clone for IMediaCapture5 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCapture5 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCapture5 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCapture5{}
      impl IMediaCapture5 {
        pub fn remove_effect_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::IMediaExtension>>, >(&self,effect:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),effect.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn pause_record_with_result_async(&self,behavior:super::devices::MediaCapturePauseBehavior,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<MediaCapturePauseResult>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<MediaCapturePauseResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),behavior, &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <MediaCapturePauseResult> >(result__)
          }
        }pub fn stop_record_with_result_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<MediaCaptureStopResult>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<MediaCaptureStopResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <MediaCaptureStopResult> >(result__)
          }
        }pub fn frame_sources(&self,) ->  ::winrt::Result<super::super::foundation::collections::IMapView< ::winrt::HString,frames::MediaFrameSource, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IMapView< ::winrt::HString,frames::MediaFrameSource, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IMapView< ::winrt::HString,frames::MediaFrameSource, >>(result__)
          }
        }pub fn create_frame_reader_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,frames::MediaFrameSource>>, >(&self,input_source:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<frames::MediaFrameReader>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<frames::MediaFrameReader, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),input_source.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <frames::MediaFrameReader> >(result__)
          }
        }pub fn create_frame_reader_with_subtype_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,frames::MediaFrameSource>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,input_source:T0__,output_subtype:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<frames::MediaFrameReader>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<frames::MediaFrameReader, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),input_source.into().abi(),output_subtype.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <frames::MediaFrameReader> >(result__)
          }
        }pub fn create_frame_reader_with_subtype_and_size_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,frames::MediaFrameSource>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T2__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::graphics::imaging::BitmapSize>, >, >(&self,input_source:T0__,output_subtype:T1__,output_size:T2__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<frames::MediaFrameReader>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<frames::MediaFrameReader, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),input_source.into().abi(),output_subtype.into().abi(),output_size.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <frames::MediaFrameReader> >(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCapture5 {
        type Vtable = IMediaCapture5_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3665329186,15003,18208,[167,30,151,144,10,49,110,90],);
        
      }#[repr(C)]pub struct IMediaCapture5_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,effect: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,behavior:super::devices::MediaCapturePauseBehavior,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,input_source: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,input_source: ::winrt::RawPtr,output_subtype: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,input_source: ::winrt::RawPtr,output_subtype: ::winrt::RawPtr,output_size:super::super::graphics::imaging::BitmapSize_abi,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCapture5 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{da787c22-3a9b-4720-a71e-97900a316e5a}")
        };
        
      }impl::std::convert::From<IMediaCapture5>for::winrt::Object {
        fn from(value:IMediaCapture5) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCapture5>for::winrt::Object {
        fn from(value: &IMediaCapture5) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCapture5 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCapture5 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct MediaCaptureDeviceExclusiveControlStatus(i32);
      impl::std::convert::From<i32>for MediaCaptureDeviceExclusiveControlStatus {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for MediaCaptureDeviceExclusiveControlStatus {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for MediaCaptureDeviceExclusiveControlStatus {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for MediaCaptureDeviceExclusiveControlStatus {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for MediaCaptureDeviceExclusiveControlStatus {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCaptureDeviceExclusiveControlStatus{}
      impl::std::marker::Copy for MediaCaptureDeviceExclusiveControlStatus{}
      impl MediaCaptureDeviceExclusiveControlStatus {
        #![allow(non_upper_case_globals)]pub const ExclusiveControlAvailable:Self = Self(0i32);
        pub const SharedReadOnlyAvailable:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for MediaCaptureDeviceExclusiveControlStatus {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for MediaCaptureDeviceExclusiveControlStatus {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.MediaCaptureDeviceExclusiveControlStatus;i4)",);
        
      }#[repr(transparent)]pub struct IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs{}
      impl IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        pub fn device_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn status(&self) ->  ::winrt::Result<MediaCaptureDeviceExclusiveControlStatus>{
          let this = self;
          unsafe {
            let mut result__: <MediaCaptureDeviceExclusiveControlStatus as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaCaptureDeviceExclusiveControlStatus>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        type Vtable = IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2637140493,42376,17350,[137,214,90,211,34,175,0,106],);
        
      }#[repr(C)]pub struct IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut MediaCaptureDeviceExclusiveControlStatus,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{9d2f920d-a588-43c6-89d6-5ad322af006a}")
        };
        
      }impl::std::convert::From<IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs>for::winrt::Object {
        fn from(value:IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs>for::winrt::Object {
        fn from(value: &IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct MediaCaptureDeviceExclusiveControlStatusChangedEventArgs(::winrt::Object);
      impl MediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        pub fn device_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn status(&self) ->  ::winrt::Result<MediaCaptureDeviceExclusiveControlStatus>{
          let this = self;
          unsafe {
            let mut result__: <MediaCaptureDeviceExclusiveControlStatus as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaCaptureDeviceExclusiveControlStatus>(result__)
          }
        }
      }impl::std::clone::Clone for MediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCaptureDeviceExclusiveControlStatusChangedEventArgs{}
      impl::std::fmt::Debug for MediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.MediaCaptureDeviceExclusiveControlStatusChangedEventArgs";
        
      }unsafe impl::winrt::Interface for MediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        type Vtable = IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs_abi;
        const IID: ::winrt::Guid =  <IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs as::winrt::Interface> ::IID;
        
      }unsafe impl::winrt::RuntimeType for MediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.MediaCaptureDeviceExclusiveControlStatusChangedEventArgs;{9d2f920d-a588-43c6-89d6-5ad322af006a})");
        
      }impl::std::convert::From<MediaCaptureDeviceExclusiveControlStatusChangedEventArgs>for::winrt::Object {
        fn from(value:MediaCaptureDeviceExclusiveControlStatusChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&MediaCaptureDeviceExclusiveControlStatusChangedEventArgs>for::winrt::Object {
        fn from(value: &MediaCaptureDeviceExclusiveControlStatusChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCaptureDeviceExclusiveControlStatusChangedEventArgs>for IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        fn from(value:MediaCaptureDeviceExclusiveControlStatusChangedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MediaCaptureDeviceExclusiveControlStatusChangedEventArgs>for IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        fn from(value: &MediaCaptureDeviceExclusiveControlStatusChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs>, >for MediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        fn into(self,) ->  ::winrt::Param< 'a ,IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs>, >for& 'a MediaCaptureDeviceExclusiveControlStatusChangedEventArgs {
        fn into(self,) ->  ::winrt::Param< 'a ,IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for MediaCaptureDeviceExclusiveControlStatusChangedEventArgs{}
      unsafe impl::std::marker::Sync for MediaCaptureDeviceExclusiveControlStatusChangedEventArgs{}
      #[repr(transparent)]pub struct IMediaCapture6(::winrt::Object);
      impl::std::clone::Clone for IMediaCapture6 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCapture6 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCapture6 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCapture6{}
      impl IMediaCapture6 {
        pub fn capture_device_exclusive_control_status_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<MediaCapture,MediaCaptureDeviceExclusiveControlStatusChangedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_capture_device_exclusive_control_status_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn create_multi_source_frame_reader_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<frames::MediaFrameSource, >, >, >, >(&self,input_sources:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<frames::MultiSourceMediaFrameReader>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<frames::MultiSourceMediaFrameReader, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),input_sources.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<frames::MultiSourceMediaFrameReader, >>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCapture6 {
        type Vtable = IMediaCapture6_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(579422397,19232,19377,[159,214,165,131,33,42,16,18],);
        
      }#[repr(C)]pub struct IMediaCapture6_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,input_sources: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCapture6 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{228948bd-4b20-4bb1-9fd6-a583212a1012}")
        };
        
      }impl::std::convert::From<IMediaCapture6>for::winrt::Object {
        fn from(value:IMediaCapture6) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCapture6>for::winrt::Object {
        fn from(value: &IMediaCapture6) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCapture6 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCapture6 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaCaptureRelativePanelWatcher(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureRelativePanelWatcher {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureRelativePanelWatcher {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureRelativePanelWatcher {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureRelativePanelWatcher{}
      impl IMediaCaptureRelativePanelWatcher {
        pub fn relative_panel(&self,) ->  ::winrt::Result<super::super::devices::enumeration::Panel>{
          let this = self;
          unsafe {
            let mut result__: <super::super::devices::enumeration::Panel as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::devices::enumeration::Panel>(result__)
          }
        }pub fn changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<MediaCaptureRelativePanelWatcher, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn start(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn stop(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this)).ok()
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureRelativePanelWatcher {
        type Vtable = IMediaCaptureRelativePanelWatcher_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2106156390,1214,23433,[179,14,189,52,169,241,45,176],);
        
      }#[repr(C)]pub struct IMediaCaptureRelativePanelWatcher_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::devices::enumeration::Panel,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureRelativePanelWatcher {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{7d896566-04be-5b89-b30e-bd34a9f12db0}")
        };
        
      }impl::std::convert::From<IMediaCaptureRelativePanelWatcher>for::winrt::Object {
        fn from(value:IMediaCaptureRelativePanelWatcher) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureRelativePanelWatcher>for::winrt::Object {
        fn from(value: &IMediaCaptureRelativePanelWatcher) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureRelativePanelWatcher {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureRelativePanelWatcher {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct MediaCaptureRelativePanelWatcher(::winrt::Object);
      impl MediaCaptureRelativePanelWatcher {
        pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn relative_panel(&self,) ->  ::winrt::Result<super::super::devices::enumeration::Panel>{
          let this = self;
          unsafe {
            let mut result__: <super::super::devices::enumeration::Panel as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::devices::enumeration::Panel>(result__)
          }
        }pub fn changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<MediaCaptureRelativePanelWatcher, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn start(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn stop(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this)).ok()
          }
        }
      }impl::std::clone::Clone for MediaCaptureRelativePanelWatcher {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaCaptureRelativePanelWatcher {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCaptureRelativePanelWatcher{}
      impl::std::fmt::Debug for MediaCaptureRelativePanelWatcher {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MediaCaptureRelativePanelWatcher {
        const NAME: & 'static str = "Windows.Media.Capture.MediaCaptureRelativePanelWatcher";
        
      }unsafe impl::winrt::Interface for MediaCaptureRelativePanelWatcher {
        type Vtable = IMediaCaptureRelativePanelWatcher_abi;
        const IID: ::winrt::Guid =  <IMediaCaptureRelativePanelWatcher as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for MediaCaptureRelativePanelWatcher {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.MediaCaptureRelativePanelWatcher;{7d896566-04be-5b89-b30e-bd34a9f12db0})");
        
      }impl::std::convert::From<MediaCaptureRelativePanelWatcher>for::winrt::Object {
        fn from(value:MediaCaptureRelativePanelWatcher) -> Self {
          value.0
        }
      }impl::std::convert::From<&MediaCaptureRelativePanelWatcher>for::winrt::Object {
        fn from(value: &MediaCaptureRelativePanelWatcher) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaCaptureRelativePanelWatcher {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaCaptureRelativePanelWatcher {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCaptureRelativePanelWatcher>for super::super::foundation::IClosable {
        fn from(value:MediaCaptureRelativePanelWatcher) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCaptureRelativePanelWatcher>for super::super::foundation::IClosable {
        fn from(value: &MediaCaptureRelativePanelWatcher) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for MediaCaptureRelativePanelWatcher {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a MediaCaptureRelativePanelWatcher {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<MediaCaptureRelativePanelWatcher>for IMediaCaptureRelativePanelWatcher {
        fn from(value:MediaCaptureRelativePanelWatcher) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MediaCaptureRelativePanelWatcher>for IMediaCaptureRelativePanelWatcher {
        fn from(value: &MediaCaptureRelativePanelWatcher) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureRelativePanelWatcher>>for MediaCaptureRelativePanelWatcher {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureRelativePanelWatcher>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureRelativePanelWatcher>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureRelativePanelWatcher>>for& 'a MediaCaptureRelativePanelWatcher {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureRelativePanelWatcher>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureRelativePanelWatcher>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for MediaCaptureRelativePanelWatcher{}
      unsafe impl::std::marker::Sync for MediaCaptureRelativePanelWatcher{}
      #[repr(transparent)]pub struct IMediaCapture7(::winrt::Object);
      impl::std::clone::Clone for IMediaCapture7 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCapture7 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCapture7 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCapture7{}
      impl IMediaCapture7 {
        pub fn create_relative_panel_watcher< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::ui::window_management::DisplayRegion>, >, >(&self,capture_mode:StreamingCaptureMode,display_region:T1__,) ->  ::winrt::Result<MediaCaptureRelativePanelWatcher>{
          let this = self;
          unsafe {
            let mut result__: <MediaCaptureRelativePanelWatcher as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),capture_mode,display_region.into().abi(), &mut result__,).from_abi::<MediaCaptureRelativePanelWatcher>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCapture7 {
        type Vtable = IMediaCapture7_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2439639298,34952,21530,[149,188,36,228,212,98,84,42],);
        
      }#[repr(C)]pub struct IMediaCapture7_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,capture_mode:StreamingCaptureMode,display_region: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCapture7 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{9169f102-8888-541a-95bc-24e4d462542a}")
        };
        
      }impl::std::convert::From<IMediaCapture7>for::winrt::Object {
        fn from(value:IMediaCapture7) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCapture7>for::winrt::Object {
        fn from(value: &IMediaCapture7) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCapture7 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCapture7 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct KnownVideoProfile(i32);
      impl::std::convert::From<i32>for KnownVideoProfile {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for KnownVideoProfile {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for KnownVideoProfile {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for KnownVideoProfile {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for KnownVideoProfile {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for KnownVideoProfile{}
      impl::std::marker::Copy for KnownVideoProfile{}
      impl KnownVideoProfile {
        #![allow(non_upper_case_globals)]pub const VideoRecording:Self = Self(0i32);
        pub const HighQualityPhoto:Self = Self(1i32);
        pub const BalancedVideoAndPhoto:Self = Self(2i32);
        pub const VideoConferencing:Self = Self(3i32);
        pub const PhotoSequence:Self = Self(4i32);
        pub const HighFrameRate:Self = Self(5i32);
        pub const VariablePhotoSequence:Self = Self(6i32);
        pub const HdrWithWcgVideo:Self = Self(7i32);
        pub const HdrWithWcgPhoto:Self = Self(8i32);
        pub const VideoHdr8:Self = Self(9i32);
        
      }unsafe impl::winrt::Abi for KnownVideoProfile {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for KnownVideoProfile {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.KnownVideoProfile;i4)",);
        
      }#[repr(transparent)]pub struct IMediaCaptureStatics(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureStatics{}
      impl IMediaCaptureStatics {
        pub fn is_video_profile_supported< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,video_device_id:T0__,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),video_device_id.into().abi(), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn find_all_video_profiles< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,video_device_id:T0__,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfile>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<MediaCaptureVideoProfile, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),video_device_id.into().abi(), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <MediaCaptureVideoProfile> >(result__)
          }
        }pub fn find_concurrent_profiles< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,video_device_id:T0__,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfile>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<MediaCaptureVideoProfile, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),video_device_id.into().abi(), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <MediaCaptureVideoProfile> >(result__)
          }
        }pub fn find_known_video_profiles< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,video_device_id:T0__,name:KnownVideoProfile,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfile>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<MediaCaptureVideoProfile, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),video_device_id.into().abi(),name, &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <MediaCaptureVideoProfile> >(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureStatics {
        type Vtable = IMediaCaptureStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2901377535,39405,17989,[150,94,25,37,207,198,56,52],);
        
      }#[repr(C)]pub struct IMediaCaptureStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,video_device_id: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,video_device_id: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,video_device_id: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,video_device_id: ::winrt::RawPtr,name:KnownVideoProfile,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{acef81ff-99ed-4645-965e-1925cfc63834}")
        };
        
      }impl::std::convert::From<IMediaCaptureStatics>for::winrt::Object {
        fn from(value:IMediaCaptureStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureStatics>for::winrt::Object {
        fn from(value: &IMediaCaptureStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaCaptureVideoPreview(::winrt::Object);
      impl::std::clone::Clone for IMediaCaptureVideoPreview {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaCaptureVideoPreview {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaCaptureVideoPreview {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaCaptureVideoPreview{}
      impl IMediaCaptureVideoPreview {
        pub fn start_preview_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn start_preview_to_custom_sink_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::IMediaExtension>>, >(&self,encoding_profile:T0__,custom_media_sink:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),encoding_profile.into().abi(),custom_media_sink.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn start_preview_to_custom_sink_id_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T2__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IPropertySet>, >, >(&self,encoding_profile:T0__,custom_sink_activation_id:T1__,custom_sink_settings:T2__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),encoding_profile.into().abi(),custom_sink_activation_id.into().abi(),custom_sink_settings.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn stop_preview_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaCaptureVideoPreview {
        type Vtable = IMediaCaptureVideoPreview_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(661811315,21662,17535,[162,10,79,3,196,121,216,192],);
        
      }#[repr(C)]pub struct IMediaCaptureVideoPreview_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,encoding_profile: ::winrt::RawPtr,custom_media_sink: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,encoding_profile: ::winrt::RawPtr,custom_sink_activation_id: ::winrt::RawPtr,custom_sink_settings: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaCaptureVideoPreview {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{27727073-549e-447f-a20a-4f03c479d8c0}")
        };
        
      }impl::std::convert::From<IMediaCaptureVideoPreview>for::winrt::Object {
        fn from(value:IMediaCaptureVideoPreview) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaCaptureVideoPreview>for::winrt::Object {
        fn from(value: &IMediaCaptureVideoPreview) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaCaptureVideoPreview {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaCaptureVideoPreview {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct MediaCapture(::winrt::Object);
      impl MediaCapture {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn initialize_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn initialize_with_settings_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,MediaCaptureInitializationSettings>>, >(&self,media_capture_initialization_settings:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),media_capture_initialization_settings.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn start_record_to_storage_file_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::super::storage::IStorageFile>>, >(&self,encoding_profile:T0__,file:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),encoding_profile.into().abi(),file.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn start_record_to_stream_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>, >, >(&self,encoding_profile:T0__,stream:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),encoding_profile.into().abi(),stream.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn start_record_to_custom_sink_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::IMediaExtension>>, >(&self,encoding_profile:T0__,custom_media_sink:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),encoding_profile.into().abi(),custom_media_sink.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn start_record_to_custom_sink_id_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T2__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IPropertySet>, >, >(&self,encoding_profile:T0__,custom_sink_activation_id:T1__,custom_sink_settings:T2__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),encoding_profile.into().abi(),custom_sink_activation_id.into().abi(),custom_sink_settings.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn stop_record_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn capture_photo_to_storage_file_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::ImageEncodingProperties>, >,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::super::storage::IStorageFile>>, >(&self,r#type:T0__,file:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),r#type.into().abi(),file.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn capture_photo_to_stream_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::ImageEncodingProperties>, >,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>, >, >(&self,r#type:T0__,stream:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),r#type.into().abi(),stream.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn add_effect_async< 'a ,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T2__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IPropertySet>, >, >(&self,media_stream_type:MediaStreamType,effect_activation_id:T1__,effect_settings:T2__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),media_stream_type,effect_activation_id.into().abi(),effect_settings.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn clear_effects_async(&self,media_stream_type:MediaStreamType,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),media_stream_type, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn set_encoder_property< 'a ,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Guid>>,T2__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,media_stream_type:MediaStreamType,property_id:T1__,property_value:T2__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),media_stream_type,property_id.into().abi(),property_value.into().abi(),).ok()
          }
        }pub fn get_encoder_property< 'a ,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Guid>>, >(&self,media_stream_type:MediaStreamType,property_id:T1__,) ->  ::winrt::Result<::winrt::Object>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::Object as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),media_stream_type,property_id.into().abi(), &mut result__,).from_abi::<::winrt::Object>(result__)
          }
        }pub fn failed< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,MediaCaptureFailedEventHandler>>, >(&self,error_event_handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this),error_event_handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_failed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn record_limitation_exceeded< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,RecordLimitationExceededEventHandler>>, >(&self,record_limitation_exceeded_event_handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this),record_limitation_exceeded_event_handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_record_limitation_exceeded< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn media_capture_settings(&self) ->  ::winrt::Result<MediaCaptureSettings>{
          let this = self;
          unsafe {
            let mut result__: <MediaCaptureSettings as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).23)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaCaptureSettings>(result__)
          }
        }pub fn audio_device_controller(&self,) ->  ::winrt::Result<super::devices::AudioDeviceController>{
          let this = self;
          unsafe {
            let mut result__: <super::devices::AudioDeviceController as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).24)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::devices::AudioDeviceController>(result__)
          }
        }pub fn video_device_controller(&self,) ->  ::winrt::Result<super::devices::VideoDeviceController>{
          let this = self;
          unsafe {
            let mut result__: <super::devices::VideoDeviceController as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).25)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::devices::VideoDeviceController>(result__)
          }
        }pub fn set_preview_mirroring(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).26)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn get_preview_mirroring(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).27)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_preview_rotation(&self,value:VideoRotation) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).28)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn get_preview_rotation(&self) ->  ::winrt::Result<VideoRotation>{
          let this = self;
          unsafe {
            let mut result__: <VideoRotation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).29)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoRotation>(result__)
          }
        }pub fn set_record_rotation(&self,value:VideoRotation) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).30)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn get_record_rotation(&self) ->  ::winrt::Result<VideoRotation>{
          let this = self;
          unsafe {
            let mut result__: <VideoRotation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).31)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoRotation>(result__)
          }
        }pub fn prepare_low_lag_record_to_storage_file_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::super::storage::IStorageFile>>, >(&self,encoding_profile:T0__,file:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<LowLagMediaRecording>>{
          let this =  &::winrt::Interface::cast::<IMediaCapture2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<LowLagMediaRecording, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),encoding_profile.into().abi(),file.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <LowLagMediaRecording> >(result__)
          }
        }pub fn prepare_low_lag_record_to_stream_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>, >, >(&self,encoding_profile:T0__,stream:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<LowLagMediaRecording>>{
          let this =  &::winrt::Interface::cast::<IMediaCapture2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<LowLagMediaRecording, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),encoding_profile.into().abi(),stream.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <LowLagMediaRecording> >(result__)
          }
        }pub fn prepare_low_lag_record_to_custom_sink_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::IMediaExtension>>, >(&self,encoding_profile:T0__,custom_media_sink:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<LowLagMediaRecording>>{
          let this =  &::winrt::Interface::cast::<IMediaCapture2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<LowLagMediaRecording, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),encoding_profile.into().abi(),custom_media_sink.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <LowLagMediaRecording> >(result__)
          }
        }pub fn prepare_low_lag_record_to_custom_sink_id_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T2__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IPropertySet>, >, >(&self,encoding_profile:T0__,custom_sink_activation_id:T1__,custom_sink_settings:T2__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<LowLagMediaRecording>>{
          let this =  &::winrt::Interface::cast::<IMediaCapture2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<LowLagMediaRecording, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),encoding_profile.into().abi(),custom_sink_activation_id.into().abi(),custom_sink_settings.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <LowLagMediaRecording> >(result__)
          }
        }pub fn prepare_low_lag_photo_capture_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::ImageEncodingProperties>, >, >(&self,r#type:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<LowLagPhotoCapture>>{
          let this =  &::winrt::Interface::cast::<IMediaCapture2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<LowLagPhotoCapture, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),r#type.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<LowLagPhotoCapture>>(result__,)
          }
        }pub fn prepare_low_lag_photo_sequence_capture_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::ImageEncodingProperties>, >, >(&self,r#type:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<LowLagPhotoSequenceCapture>, >{
          let this =  &::winrt::Interface::cast::<IMediaCapture2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<LowLagPhotoSequenceCapture, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),r#type.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <LowLagPhotoSequenceCapture> >(result__)
          }
        }pub fn set_encoding_properties_async< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::IMediaEncodingProperties>, >,T2__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaPropertySet>, >, >(&self,media_stream_type:MediaStreamType,media_encoding_properties:T1__,encoder_properties:T2__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IMediaCapture2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),media_stream_type,media_encoding_properties.into().abi(),encoder_properties.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn prepare_variable_photo_sequence_capture_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::ImageEncodingProperties>, >, >(&self,r#type:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<core::VariablePhotoSequenceCapture>, >{
          let this =  &::winrt::Interface::cast::<IMediaCapture3>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<core::VariablePhotoSequenceCapture, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),r#type.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<core::VariablePhotoSequenceCapture, >>(result__)
          }
        }pub fn focus_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<MediaCapture,MediaCaptureFocusChangedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IMediaCapture3>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_focus_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCapture3>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn photo_confirmation_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<MediaCapture,PhotoConfirmationCapturedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IMediaCapture3>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_photo_confirmation_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCapture3>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn add_audio_effect_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::effects::IAudioEffectDefinition>, >, >(&self,definition:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::IMediaExtension>, >{
          let this =  &::winrt::Interface::cast::<IMediaCapture4>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::IMediaExtension, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),definition.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <super::IMediaExtension> >(result__)
          }
        }pub fn add_video_effect_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::effects::IVideoEffectDefinition>, >, >(&self,definition:T0__,media_stream_type:MediaStreamType,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::IMediaExtension>, >{
          let this =  &::winrt::Interface::cast::<IMediaCapture4>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::IMediaExtension, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),definition.into().abi(),media_stream_type, &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <super::IMediaExtension> >(result__)
          }
        }pub fn pause_record_async(&self,behavior:super::devices::MediaCapturePauseBehavior,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IMediaCapture4>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),behavior, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn resume_record_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IMediaCapture4>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn camera_stream_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<MediaCapture, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IMediaCapture4>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_camera_stream_state_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCapture4>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn camera_stream_state(&self,) ->  ::winrt::Result<super::devices::CameraStreamState>{
          let this =  &::winrt::Interface::cast::<IMediaCapture4>(self).unwrap();
          unsafe {
            let mut result__: <super::devices::CameraStreamState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::devices::CameraStreamState>(result__)
          }
        }pub fn get_preview_frame_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::VideoFrame>>{
          let this =  &::winrt::Interface::cast::<IMediaCapture4>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::VideoFrame, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::VideoFrame>>(result__,)
          }
        }pub fn get_preview_frame_copy_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::VideoFrame>>, >(&self,destination:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::VideoFrame>>{
          let this =  &::winrt::Interface::cast::<IMediaCapture4>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::VideoFrame, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),destination.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::VideoFrame>>(result__,)
          }
        }pub fn thermal_status_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<MediaCapture, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IMediaCapture4>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_thermal_status_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCapture4>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn thermal_status(&self) ->  ::winrt::Result<MediaCaptureThermalStatus>{
          let this =  &::winrt::Interface::cast::<IMediaCapture4>(self).unwrap();
          unsafe {
            let mut result__: <MediaCaptureThermalStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaCaptureThermalStatus>(result__)
          }
        }pub fn prepare_advanced_photo_capture_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::ImageEncodingProperties>, >, >(&self,encoding_properties:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<AdvancedPhotoCapture>>{
          let this =  &::winrt::Interface::cast::<IMediaCapture4>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<AdvancedPhotoCapture, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),encoding_properties.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <AdvancedPhotoCapture> >(result__)
          }
        }pub fn remove_effect_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::IMediaExtension>>, >(&self,effect:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IMediaCapture5>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),effect.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn pause_record_with_result_async(&self,behavior:super::devices::MediaCapturePauseBehavior,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<MediaCapturePauseResult>, >{
          let this =  &::winrt::Interface::cast::<IMediaCapture5>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<MediaCapturePauseResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),behavior, &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <MediaCapturePauseResult> >(result__)
          }
        }pub fn stop_record_with_result_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<MediaCaptureStopResult>, >{
          let this =  &::winrt::Interface::cast::<IMediaCapture5>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<MediaCaptureStopResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <MediaCaptureStopResult> >(result__)
          }
        }pub fn frame_sources(&self,) ->  ::winrt::Result<super::super::foundation::collections::IMapView< ::winrt::HString,frames::MediaFrameSource, >, >{
          let this =  &::winrt::Interface::cast::<IMediaCapture5>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IMapView< ::winrt::HString,frames::MediaFrameSource, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IMapView< ::winrt::HString,frames::MediaFrameSource, >>(result__)
          }
        }pub fn create_frame_reader_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,frames::MediaFrameSource>>, >(&self,input_source:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<frames::MediaFrameReader>, >{
          let this =  &::winrt::Interface::cast::<IMediaCapture5>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<frames::MediaFrameReader, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),input_source.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <frames::MediaFrameReader> >(result__)
          }
        }pub fn create_frame_reader_with_subtype_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,frames::MediaFrameSource>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,input_source:T0__,output_subtype:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<frames::MediaFrameReader>, >{
          let this =  &::winrt::Interface::cast::<IMediaCapture5>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<frames::MediaFrameReader, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),input_source.into().abi(),output_subtype.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <frames::MediaFrameReader> >(result__)
          }
        }pub fn create_frame_reader_with_subtype_and_size_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,frames::MediaFrameSource>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T2__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::graphics::imaging::BitmapSize>, >, >(&self,input_source:T0__,output_subtype:T1__,output_size:T2__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<frames::MediaFrameReader>, >{
          let this =  &::winrt::Interface::cast::<IMediaCapture5>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<frames::MediaFrameReader, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),input_source.into().abi(),output_subtype.into().abi(),output_size.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <frames::MediaFrameReader> >(result__)
          }
        }pub fn capture_device_exclusive_control_status_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<MediaCapture,MediaCaptureDeviceExclusiveControlStatusChangedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IMediaCapture6>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_capture_device_exclusive_control_status_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaCapture6>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn create_multi_source_frame_reader_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<frames::MediaFrameSource, >, >, >, >(&self,input_sources:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<frames::MultiSourceMediaFrameReader>, >{
          let this =  &::winrt::Interface::cast::<IMediaCapture6>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<frames::MultiSourceMediaFrameReader, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),input_sources.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<frames::MultiSourceMediaFrameReader, >>(result__)
          }
        }pub fn create_relative_panel_watcher< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::ui::window_management::DisplayRegion>, >, >(&self,capture_mode:StreamingCaptureMode,display_region:T1__,) ->  ::winrt::Result<MediaCaptureRelativePanelWatcher>{
          let this =  &::winrt::Interface::cast::<IMediaCapture7>(self).unwrap();
          unsafe {
            let mut result__: <MediaCaptureRelativePanelWatcher as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),capture_mode,display_region.into().abi(), &mut result__,).from_abi::<MediaCaptureRelativePanelWatcher>(result__)
          }
        }pub fn is_video_profile_supported< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(video_device_id:T0__,) ->  ::winrt::Result<bool>{
          Self::IMediaCaptureStatics(|this|unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),video_device_id.into().abi(), &mut result__,).from_abi::<bool>(result__)
          })
        }pub fn find_all_video_profiles< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(video_device_id:T0__,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfile>, >{
          Self::IMediaCaptureStatics(|this|unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<MediaCaptureVideoProfile, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),video_device_id.into().abi(), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <MediaCaptureVideoProfile> >(result__)
          })
        }pub fn find_concurrent_profiles< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(video_device_id:T0__,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfile>, >{
          Self::IMediaCaptureStatics(|this|unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<MediaCaptureVideoProfile, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),video_device_id.into().abi(), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <MediaCaptureVideoProfile> >(result__)
          })
        }pub fn find_known_video_profiles< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(video_device_id:T0__,name:KnownVideoProfile,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<MediaCaptureVideoProfile>, >{
          Self::IMediaCaptureStatics(|this|unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<MediaCaptureVideoProfile, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),video_device_id.into().abi(),name, &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <MediaCaptureVideoProfile> >(result__)
          })
        }pub fn start_preview_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureVideoPreview>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn start_preview_to_custom_sink_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::IMediaExtension>>, >(&self,encoding_profile:T0__,custom_media_sink:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureVideoPreview>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),encoding_profile.into().abi(),custom_media_sink.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn start_preview_to_custom_sink_id_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::MediaEncodingProfile>, >,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T2__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IPropertySet>, >, >(&self,encoding_profile:T0__,custom_sink_activation_id:T1__,custom_sink_settings:T2__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureVideoPreview>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),encoding_profile.into().abi(),custom_sink_activation_id.into().abi(),custom_sink_settings.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn stop_preview_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IMediaCaptureVideoPreview>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<MediaCapture, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn IMediaCaptureStatics<R,F:FnOnce(&IMediaCaptureStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<MediaCapture,IMediaCaptureStatics>  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for MediaCapture {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaCapture {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCapture{}
      impl::std::fmt::Debug for MediaCapture {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MediaCapture {
        const NAME: & 'static str = "Windows.Media.Capture.MediaCapture";
        
      }unsafe impl::winrt::Interface for MediaCapture {
        type Vtable = IMediaCapture_abi;
        const IID: ::winrt::Guid =  <IMediaCapture as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for MediaCapture {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.MediaCapture;{c61afbb4-fb10-4a34-ac18-ca80d9c8e7ee})");
        
      }impl::std::convert::From<MediaCapture>for::winrt::Object {
        fn from(value:MediaCapture) -> Self {
          value.0
        }
      }impl::std::convert::From<&MediaCapture>for::winrt::Object {
        fn from(value: &MediaCapture) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCapture>for super::super::foundation::IClosable {
        fn from(value:MediaCapture) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCapture>for super::super::foundation::IClosable {
        fn from(value: &MediaCapture) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<MediaCapture>for IMediaCapture {
        fn from(value:MediaCapture) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MediaCapture>for IMediaCapture {
        fn from(value: &MediaCapture) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCapture>>for MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCapture>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCapture>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCapture>>for& 'a MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCapture>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCapture>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCapture>for IMediaCapture2 {
        fn from(value:MediaCapture) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCapture>for IMediaCapture2 {
        fn from(value: &MediaCapture) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCapture2>>for MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCapture2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCapture2>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCapture2>>for& 'a MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCapture2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCapture2>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCapture>for IMediaCapture3 {
        fn from(value:MediaCapture) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCapture>for IMediaCapture3 {
        fn from(value: &MediaCapture) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCapture3>>for MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCapture3>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCapture3>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCapture3>>for& 'a MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCapture3>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCapture3>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCapture>for IMediaCapture4 {
        fn from(value:MediaCapture) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCapture>for IMediaCapture4 {
        fn from(value: &MediaCapture) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCapture4>>for MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCapture4>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCapture4>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCapture4>>for& 'a MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCapture4>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCapture4>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCapture>for IMediaCapture5 {
        fn from(value:MediaCapture) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCapture>for IMediaCapture5 {
        fn from(value: &MediaCapture) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCapture5>>for MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCapture5>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCapture5>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCapture5>>for& 'a MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCapture5>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCapture5>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCapture>for IMediaCapture6 {
        fn from(value:MediaCapture) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCapture>for IMediaCapture6 {
        fn from(value: &MediaCapture) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCapture6>>for MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCapture6>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCapture6>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCapture6>>for& 'a MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCapture6>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCapture6>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCapture>for IMediaCapture7 {
        fn from(value:MediaCapture) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCapture>for IMediaCapture7 {
        fn from(value: &MediaCapture) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCapture7>>for MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCapture7>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCapture7>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCapture7>>for& 'a MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCapture7>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCapture7>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaCapture>for IMediaCaptureVideoPreview {
        fn from(value:MediaCapture) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaCapture>for IMediaCaptureVideoPreview {
        fn from(value: &MediaCapture) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureVideoPreview>>for MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureVideoPreview>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureVideoPreview>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaCaptureVideoPreview>>for& 'a MediaCapture {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaCaptureVideoPreview>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaCaptureVideoPreview>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ICameraOptionsUIStatics(::winrt::Object);
      impl::std::clone::Clone for ICameraOptionsUIStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ICameraOptionsUIStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ICameraOptionsUIStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ICameraOptionsUIStatics{}
      impl ICameraOptionsUIStatics {
        pub fn show< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,MediaCapture>>>(&self,media_capture:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),media_capture.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for ICameraOptionsUIStatics {
        type Vtable = ICameraOptionsUIStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(990731828,14598,19325,[148,108,123,222,132,68,153,174],);
        
      }#[repr(C)]pub struct ICameraOptionsUIStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,media_capture: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ICameraOptionsUIStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{3b0d5e34-3906-4b7d-946c-7bde844499ae}")
        };
        
      }impl::std::convert::From<ICameraOptionsUIStatics>for::winrt::Object {
        fn from(value:ICameraOptionsUIStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&ICameraOptionsUIStatics>for::winrt::Object {
        fn from(value: &ICameraOptionsUIStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ICameraOptionsUIStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ICameraOptionsUIStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }pub struct CameraOptionsUI{}
      impl CameraOptionsUI {
        pub fn show< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,MediaCapture>>>(media_capture:T0__,) ->  ::winrt::Result<()>{
          Self::ICameraOptionsUIStatics(|this|unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),media_capture.into().abi(),).ok()
          })
        }#[allow(non_snake_case)]fn ICameraOptionsUIStatics<R,F:FnOnce(&ICameraOptionsUIStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<CameraOptionsUI,ICameraOptionsUIStatics, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::winrt::RuntimeName for CameraOptionsUI {
        const NAME: & 'static str = "Windows.Media.Capture.CameraOptionsUI";
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct ForegroundActivationArgument(i32);
      impl::std::convert::From<i32>for ForegroundActivationArgument {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for ForegroundActivationArgument {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for ForegroundActivationArgument {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for ForegroundActivationArgument {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ForegroundActivationArgument {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ForegroundActivationArgument{}
      impl::std::marker::Copy for ForegroundActivationArgument{}
      impl ForegroundActivationArgument {
        #![allow(non_upper_case_globals)]pub const SignInRequired:Self = Self(0i32);
        pub const MoreSettings:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for ForegroundActivationArgument {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for ForegroundActivationArgument {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.ForegroundActivationArgument;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct GameBarCommand(i32);
      impl::std::convert::From<i32>for GameBarCommand {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for GameBarCommand {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for GameBarCommand {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for GameBarCommand {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for GameBarCommand {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for GameBarCommand{}
      impl::std::marker::Copy for GameBarCommand{}
      impl GameBarCommand {
        #![allow(non_upper_case_globals)]pub const OpenGameBar:Self = Self(0i32);
        pub const RecordHistoricalBuffer:Self = Self(1i32);
        pub const ToggleStartStopRecord:Self = Self(2i32);
        pub const StartRecord:Self = Self(3i32);
        pub const StopRecord:Self = Self(4i32);
        pub const TakeScreenshot:Self = Self(5i32);
        pub const StartBroadcast:Self = Self(6i32);
        pub const StopBroadcast:Self = Self(7i32);
        pub const PauseBroadcast:Self = Self(8i32);
        pub const ResumeBroadcast:Self = Self(9i32);
        pub const ToggleStartStopBroadcast:Self = Self(10i32);
        pub const ToggleMicrophoneCapture:Self = Self(11i32);
        pub const ToggleCameraCapture:Self = Self(12i32);
        pub const ToggleRecordingIndicator:Self = Self(13i32);
        
      }unsafe impl::winrt::Abi for GameBarCommand {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for GameBarCommand {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.GameBarCommand;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct GameBarCommandOrigin(i32);
      impl::std::convert::From<i32>for GameBarCommandOrigin {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for GameBarCommandOrigin {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for GameBarCommandOrigin {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for GameBarCommandOrigin {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for GameBarCommandOrigin {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for GameBarCommandOrigin{}
      impl::std::marker::Copy for GameBarCommandOrigin{}
      impl GameBarCommandOrigin {
        #![allow(non_upper_case_globals)]pub const ShortcutKey:Self = Self(0i32);
        pub const Cortana:Self = Self(1i32);
        pub const AppCommand:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for GameBarCommandOrigin {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for GameBarCommandOrigin {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.GameBarCommandOrigin;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct GameBarTargetCapturePolicy(i32);
      impl::std::convert::From<i32>for GameBarTargetCapturePolicy {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for GameBarTargetCapturePolicy {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for GameBarTargetCapturePolicy {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for GameBarTargetCapturePolicy {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for GameBarTargetCapturePolicy {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for GameBarTargetCapturePolicy{}
      impl::std::marker::Copy for GameBarTargetCapturePolicy{}
      impl GameBarTargetCapturePolicy {
        #![allow(non_upper_case_globals)]pub const EnabledBySystem:Self = Self(0i32);
        pub const EnabledByUser:Self = Self(1i32);
        pub const NotEnabled:Self = Self(2i32);
        pub const ProhibitedBySystem:Self = Self(3i32);
        pub const ProhibitedByPublisher:Self = Self(4i32);
        
      }unsafe impl::winrt::Abi for GameBarTargetCapturePolicy {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for GameBarTargetCapturePolicy {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.GameBarTargetCapturePolicy;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct GameBarServicesDisplayMode(i32);
      impl::std::convert::From<i32>for GameBarServicesDisplayMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for GameBarServicesDisplayMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for GameBarServicesDisplayMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for GameBarServicesDisplayMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for GameBarServicesDisplayMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for GameBarServicesDisplayMode{}
      impl::std::marker::Copy for GameBarServicesDisplayMode{}
      impl GameBarServicesDisplayMode {
        #![allow(non_upper_case_globals)]pub const Windowed:Self = Self(0i32);
        pub const FullScreenExclusive:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for GameBarServicesDisplayMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for GameBarServicesDisplayMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.GameBarServicesDisplayMode;i4)",);
        
      }#[repr(transparent)]pub struct IGameBarServicesTargetInfo(::winrt::Object);
      impl::std::clone::Clone for IGameBarServicesTargetInfo {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IGameBarServicesTargetInfo {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IGameBarServicesTargetInfo {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IGameBarServicesTargetInfo{}
      impl IGameBarServicesTargetInfo {
        pub fn display_name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn app_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn title_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn display_mode(&self) ->  ::winrt::Result<GameBarServicesDisplayMode>{
          let this = self;
          unsafe {
            let mut result__: <GameBarServicesDisplayMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<GameBarServicesDisplayMode>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IGameBarServicesTargetInfo {
        type Vtable = IGameBarServicesTargetInfo_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3022008210,5649,19973,[182,239,223,215,55,174,51,176],);
        
      }#[repr(C)]pub struct IGameBarServicesTargetInfo_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut GameBarServicesDisplayMode,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IGameBarServicesTargetInfo {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{b4202f92-1611-4e05-b6ef-dfd737ae33b0}")
        };
        
      }impl::std::convert::From<IGameBarServicesTargetInfo>for::winrt::Object {
        fn from(value:IGameBarServicesTargetInfo) -> Self {
          value.0
        }
      }impl::std::convert::From<&IGameBarServicesTargetInfo>for::winrt::Object {
        fn from(value: &IGameBarServicesTargetInfo) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IGameBarServicesTargetInfo {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IGameBarServicesTargetInfo {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct GameBarServicesTargetInfo(::winrt::Object);
      impl GameBarServicesTargetInfo {
        pub fn display_name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn app_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn title_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn display_mode(&self) ->  ::winrt::Result<GameBarServicesDisplayMode>{
          let this = self;
          unsafe {
            let mut result__: <GameBarServicesDisplayMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<GameBarServicesDisplayMode>(result__)
          }
        }
      }impl::std::clone::Clone for GameBarServicesTargetInfo {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for GameBarServicesTargetInfo {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for GameBarServicesTargetInfo{}
      impl::std::fmt::Debug for GameBarServicesTargetInfo {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for GameBarServicesTargetInfo {
        const NAME: & 'static str = "Windows.Media.Capture.GameBarServicesTargetInfo";
        
      }unsafe impl::winrt::Interface for GameBarServicesTargetInfo {
        type Vtable = IGameBarServicesTargetInfo_abi;
        const IID: ::winrt::Guid =  <IGameBarServicesTargetInfo as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for GameBarServicesTargetInfo {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.GameBarServicesTargetInfo;{b4202f92-1611-4e05-b6ef-dfd737ae33b0})");
        
      }impl::std::convert::From<GameBarServicesTargetInfo>for::winrt::Object {
        fn from(value:GameBarServicesTargetInfo) -> Self {
          value.0
        }
      }impl::std::convert::From<&GameBarServicesTargetInfo>for::winrt::Object {
        fn from(value: &GameBarServicesTargetInfo) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for GameBarServicesTargetInfo {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a GameBarServicesTargetInfo {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<GameBarServicesTargetInfo>for IGameBarServicesTargetInfo {
        fn from(value:GameBarServicesTargetInfo) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&GameBarServicesTargetInfo>for IGameBarServicesTargetInfo {
        fn from(value: &GameBarServicesTargetInfo) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IGameBarServicesTargetInfo>>for GameBarServicesTargetInfo {
        fn into(self) ->  ::winrt::Param< 'a ,IGameBarServicesTargetInfo>{
          ::winrt::Param::Owned(::std::convert::Into::<IGameBarServicesTargetInfo>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IGameBarServicesTargetInfo>>for& 'a GameBarServicesTargetInfo {
        fn into(self) ->  ::winrt::Param< 'a ,IGameBarServicesTargetInfo>{
          ::winrt::Param::Owned(::std::convert::Into::<IGameBarServicesTargetInfo>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for GameBarServicesTargetInfo{}
      unsafe impl::std::marker::Sync for GameBarServicesTargetInfo{}
      #[repr(transparent)]pub struct IGameBarServicesCommandEventArgs(::winrt::Object);
      impl::std::clone::Clone for IGameBarServicesCommandEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IGameBarServicesCommandEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IGameBarServicesCommandEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IGameBarServicesCommandEventArgs{}
      impl IGameBarServicesCommandEventArgs {
        pub fn command(&self) ->  ::winrt::Result<GameBarCommand>{
          let this = self;
          unsafe {
            let mut result__: <GameBarCommand as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<GameBarCommand>(result__)
          }
        }pub fn origin(&self) ->  ::winrt::Result<GameBarCommandOrigin>{
          let this = self;
          unsafe {
            let mut result__: <GameBarCommandOrigin as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<GameBarCommandOrigin>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IGameBarServicesCommandEventArgs {
        type Vtable = IGameBarServicesCommandEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2806130354,61814,20431,[143,187,207,105,139,46,184,224],);
        
      }#[repr(C)]pub struct IGameBarServicesCommandEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut GameBarCommand,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut GameBarCommandOrigin,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IGameBarServicesCommandEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{a74226b2-f176-4fcf-8fbb-cf698b2eb8e0}")
        };
        
      }impl::std::convert::From<IGameBarServicesCommandEventArgs>for::winrt::Object {
        fn from(value:IGameBarServicesCommandEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IGameBarServicesCommandEventArgs>for::winrt::Object {
        fn from(value: &IGameBarServicesCommandEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IGameBarServicesCommandEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IGameBarServicesCommandEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct GameBarServicesCommandEventArgs(::winrt::Object);
      impl GameBarServicesCommandEventArgs {
        pub fn command(&self) ->  ::winrt::Result<GameBarCommand>{
          let this = self;
          unsafe {
            let mut result__: <GameBarCommand as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<GameBarCommand>(result__)
          }
        }pub fn origin(&self) ->  ::winrt::Result<GameBarCommandOrigin>{
          let this = self;
          unsafe {
            let mut result__: <GameBarCommandOrigin as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<GameBarCommandOrigin>(result__)
          }
        }
      }impl::std::clone::Clone for GameBarServicesCommandEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for GameBarServicesCommandEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for GameBarServicesCommandEventArgs{}
      impl::std::fmt::Debug for GameBarServicesCommandEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for GameBarServicesCommandEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.GameBarServicesCommandEventArgs";
        
      }unsafe impl::winrt::Interface for GameBarServicesCommandEventArgs {
        type Vtable = IGameBarServicesCommandEventArgs_abi;
        const IID: ::winrt::Guid =  <IGameBarServicesCommandEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for GameBarServicesCommandEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.GameBarServicesCommandEventArgs;{a74226b2-f176-4fcf-8fbb-cf698b2eb8e0})");
        
      }impl::std::convert::From<GameBarServicesCommandEventArgs>for::winrt::Object {
        fn from(value:GameBarServicesCommandEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&GameBarServicesCommandEventArgs>for::winrt::Object {
        fn from(value: &GameBarServicesCommandEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for GameBarServicesCommandEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a GameBarServicesCommandEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<GameBarServicesCommandEventArgs>for IGameBarServicesCommandEventArgs {
        fn from(value:GameBarServicesCommandEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&GameBarServicesCommandEventArgs>for IGameBarServicesCommandEventArgs {
        fn from(value: &GameBarServicesCommandEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IGameBarServicesCommandEventArgs>>for GameBarServicesCommandEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IGameBarServicesCommandEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IGameBarServicesCommandEventArgs>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IGameBarServicesCommandEventArgs>>for& 'a GameBarServicesCommandEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IGameBarServicesCommandEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IGameBarServicesCommandEventArgs>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for GameBarServicesCommandEventArgs{}
      unsafe impl::std::marker::Sync for GameBarServicesCommandEventArgs{}
      #[repr(transparent)]pub struct IGameBarServices(::winrt::Object);
      impl::std::clone::Clone for IGameBarServices {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IGameBarServices {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IGameBarServices {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IGameBarServices{}
      impl IGameBarServices {
        pub fn target_capture_policy(&self) ->  ::winrt::Result<GameBarTargetCapturePolicy>{
          let this = self;
          unsafe {
            let mut result__: <GameBarTargetCapturePolicy as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<GameBarTargetCapturePolicy>(result__)
          }
        }pub fn enable_capture(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn disable_capture(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn target_info(&self) ->  ::winrt::Result<GameBarServicesTargetInfo>{
          let this = self;
          unsafe {
            let mut result__: <GameBarServicesTargetInfo as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<GameBarServicesTargetInfo>(result__)
          }
        }pub fn session_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn app_broadcast_services(&self) ->  ::winrt::Result<AppBroadcastServices>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastServices as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastServices>(result__)
          }
        }pub fn app_capture_services(&self) ->  ::winrt::Result<AppCaptureServices>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureServices as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppCaptureServices>(result__)
          }
        }pub fn command_received< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<GameBarServices,GameBarServicesCommandEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_command_received< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IGameBarServices {
        type Vtable = IGameBarServices_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(767470935,20646,18846,[140,108,211,48,167,49,23,150],);
        
      }#[repr(C)]pub struct IGameBarServices_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut GameBarTargetCapturePolicy,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IGameBarServices {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{2dbead57-50a6-499e-8c6c-d330a7311796}")
        };
        
      }impl::std::convert::From<IGameBarServices>for::winrt::Object {
        fn from(value:IGameBarServices) -> Self {
          value.0
        }
      }impl::std::convert::From<&IGameBarServices>for::winrt::Object {
        fn from(value: &IGameBarServices) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IGameBarServices {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IGameBarServices {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct GameBarServices(::winrt::Object);
      impl GameBarServices {
        pub fn target_capture_policy(&self) ->  ::winrt::Result<GameBarTargetCapturePolicy>{
          let this = self;
          unsafe {
            let mut result__: <GameBarTargetCapturePolicy as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<GameBarTargetCapturePolicy>(result__)
          }
        }pub fn enable_capture(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn disable_capture(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn target_info(&self) ->  ::winrt::Result<GameBarServicesTargetInfo>{
          let this = self;
          unsafe {
            let mut result__: <GameBarServicesTargetInfo as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<GameBarServicesTargetInfo>(result__)
          }
        }pub fn session_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn app_broadcast_services(&self) ->  ::winrt::Result<AppBroadcastServices>{
          let this = self;
          unsafe {
            let mut result__: <AppBroadcastServices as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppBroadcastServices>(result__)
          }
        }pub fn app_capture_services(&self) ->  ::winrt::Result<AppCaptureServices>{
          let this = self;
          unsafe {
            let mut result__: <AppCaptureServices as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AppCaptureServices>(result__)
          }
        }pub fn command_received< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<GameBarServices,GameBarServicesCommandEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_command_received< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for GameBarServices {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for GameBarServices {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for GameBarServices{}
      impl::std::fmt::Debug for GameBarServices {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for GameBarServices {
        const NAME: & 'static str = "Windows.Media.Capture.GameBarServices";
        
      }unsafe impl::winrt::Interface for GameBarServices {
        type Vtable = IGameBarServices_abi;
        const IID: ::winrt::Guid =  <IGameBarServices as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for GameBarServices {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.GameBarServices;{2dbead57-50a6-499e-8c6c-d330a7311796})");
        
      }impl::std::convert::From<GameBarServices>for::winrt::Object {
        fn from(value:GameBarServices) -> Self {
          value.0
        }
      }impl::std::convert::From<&GameBarServices>for::winrt::Object {
        fn from(value: &GameBarServices) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for GameBarServices {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a GameBarServices {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<GameBarServices>for IGameBarServices {
        fn from(value:GameBarServices) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&GameBarServices>for IGameBarServices {
        fn from(value: &GameBarServices) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IGameBarServices>>for GameBarServices {
        fn into(self) ->  ::winrt::Param< 'a ,IGameBarServices>{
          ::winrt::Param::Owned(::std::convert::Into::<IGameBarServices>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IGameBarServices>>for& 'a GameBarServices {
        fn into(self) ->  ::winrt::Param< 'a ,IGameBarServices>{
          ::winrt::Param::Owned(::std::convert::Into::<IGameBarServices>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for GameBarServices{}
      unsafe impl::std::marker::Sync for GameBarServices{}
      #[repr(transparent)]pub struct IGameBarServicesManagerGameBarServicesCreatedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IGameBarServicesManagerGameBarServicesCreatedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IGameBarServicesManagerGameBarServicesCreatedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IGameBarServicesManagerGameBarServicesCreatedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IGameBarServicesManagerGameBarServicesCreatedEventArgs{}
      impl IGameBarServicesManagerGameBarServicesCreatedEventArgs {
        pub fn game_bar_services(&self) ->  ::winrt::Result<GameBarServices>{
          let this = self;
          unsafe {
            let mut result__: <GameBarServices as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<GameBarServices>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IGameBarServicesManagerGameBarServicesCreatedEventArgs {
        type Vtable = IGameBarServicesManagerGameBarServicesCreatedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3991780764,5182,18851,[165,234,11,25,149,200,212,110],);
        
      }#[repr(C)]pub struct IGameBarServicesManagerGameBarServicesCreatedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IGameBarServicesManagerGameBarServicesCreatedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{ededbd9c-143e-49a3-a5ea-0b1995c8d46e}")
        };
        
      }impl::std::convert::From<IGameBarServicesManagerGameBarServicesCreatedEventArgs>for::winrt::Object {
        fn from(value:IGameBarServicesManagerGameBarServicesCreatedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IGameBarServicesManagerGameBarServicesCreatedEventArgs>for::winrt::Object {
        fn from(value: &IGameBarServicesManagerGameBarServicesCreatedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IGameBarServicesManagerGameBarServicesCreatedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IGameBarServicesManagerGameBarServicesCreatedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct GameBarServicesManagerGameBarServicesCreatedEventArgs(::winrt::Object);
      impl GameBarServicesManagerGameBarServicesCreatedEventArgs {
        pub fn game_bar_services(&self) ->  ::winrt::Result<GameBarServices>{
          let this = self;
          unsafe {
            let mut result__: <GameBarServices as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<GameBarServices>(result__)
          }
        }
      }impl::std::clone::Clone for GameBarServicesManagerGameBarServicesCreatedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for GameBarServicesManagerGameBarServicesCreatedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for GameBarServicesManagerGameBarServicesCreatedEventArgs{}
      impl::std::fmt::Debug for GameBarServicesManagerGameBarServicesCreatedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for GameBarServicesManagerGameBarServicesCreatedEventArgs {
        const NAME: & 'static str = "Windows.Media.Capture.GameBarServicesManagerGameBarServicesCreatedEventArgs";
        
      }unsafe impl::winrt::Interface for GameBarServicesManagerGameBarServicesCreatedEventArgs {
        type Vtable = IGameBarServicesManagerGameBarServicesCreatedEventArgs_abi;
        const IID: ::winrt::Guid =  <IGameBarServicesManagerGameBarServicesCreatedEventArgs as::winrt::Interface> ::IID;
        
      }unsafe impl::winrt::RuntimeType for GameBarServicesManagerGameBarServicesCreatedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.GameBarServicesManagerGameBarServicesCreatedEventArgs;{ededbd9c-143e-49a3-a5ea-0b1995c8d46e})");
        
      }impl::std::convert::From<GameBarServicesManagerGameBarServicesCreatedEventArgs>for::winrt::Object {
        fn from(value:GameBarServicesManagerGameBarServicesCreatedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&GameBarServicesManagerGameBarServicesCreatedEventArgs>for::winrt::Object {
        fn from(value: &GameBarServicesManagerGameBarServicesCreatedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for GameBarServicesManagerGameBarServicesCreatedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a GameBarServicesManagerGameBarServicesCreatedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<GameBarServicesManagerGameBarServicesCreatedEventArgs>for IGameBarServicesManagerGameBarServicesCreatedEventArgs {
        fn from(value:GameBarServicesManagerGameBarServicesCreatedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&GameBarServicesManagerGameBarServicesCreatedEventArgs>for IGameBarServicesManagerGameBarServicesCreatedEventArgs {
        fn from(value: &GameBarServicesManagerGameBarServicesCreatedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,IGameBarServicesManagerGameBarServicesCreatedEventArgs>, >for GameBarServicesManagerGameBarServicesCreatedEventArgs {
        fn into(self,) ->  ::winrt::Param< 'a ,IGameBarServicesManagerGameBarServicesCreatedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IGameBarServicesManagerGameBarServicesCreatedEventArgs, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,IGameBarServicesManagerGameBarServicesCreatedEventArgs>, >for& 'a GameBarServicesManagerGameBarServicesCreatedEventArgs {
        fn into(self,) ->  ::winrt::Param< 'a ,IGameBarServicesManagerGameBarServicesCreatedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IGameBarServicesManagerGameBarServicesCreatedEventArgs, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for GameBarServicesManagerGameBarServicesCreatedEventArgs{}
      unsafe impl::std::marker::Sync for GameBarServicesManagerGameBarServicesCreatedEventArgs{}
      #[repr(transparent)]pub struct IGameBarServicesManager(::winrt::Object);
      impl::std::clone::Clone for IGameBarServicesManager {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IGameBarServicesManager {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IGameBarServicesManager {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IGameBarServicesManager{}
      impl IGameBarServicesManager {
        pub fn game_bar_services_created< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<GameBarServicesManager,GameBarServicesManagerGameBarServicesCreatedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_game_bar_services_created< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IGameBarServicesManager {
        type Vtable = IGameBarServicesManager_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(978033914,32651,19552,[157,187,11,205,38,45,255,198],);
        
      }#[repr(C)]pub struct IGameBarServicesManager_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IGameBarServicesManager {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{3a4b9cfa-7f8b-4c60-9dbb-0bcd262dffc6}")
        };
        
      }impl::std::convert::From<IGameBarServicesManager>for::winrt::Object {
        fn from(value:IGameBarServicesManager) -> Self {
          value.0
        }
      }impl::std::convert::From<&IGameBarServicesManager>for::winrt::Object {
        fn from(value: &IGameBarServicesManager) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IGameBarServicesManager {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IGameBarServicesManager {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IGameBarServicesManagerStatics(::winrt::Object);
      impl::std::clone::Clone for IGameBarServicesManagerStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IGameBarServicesManagerStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IGameBarServicesManagerStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IGameBarServicesManagerStatics{}
      impl IGameBarServicesManagerStatics {
        pub fn get_default(&self) ->  ::winrt::Result<GameBarServicesManager>{
          let this = self;
          unsafe {
            let mut result__: <GameBarServicesManager as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<GameBarServicesManager>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IGameBarServicesManagerStatics {
        type Vtable = IGameBarServicesManagerStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(885110294,65317,18322,[152,242,211,117,63,21,172,19],);
        
      }#[repr(C)]pub struct IGameBarServicesManagerStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IGameBarServicesManagerStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{34c1b616-ff25-4792-98f2-d3753f15ac13}")
        };
        
      }impl::std::convert::From<IGameBarServicesManagerStatics>for::winrt::Object {
        fn from(value:IGameBarServicesManagerStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&IGameBarServicesManagerStatics>for::winrt::Object {
        fn from(value: &IGameBarServicesManagerStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IGameBarServicesManagerStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IGameBarServicesManagerStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct GameBarServicesManager(::winrt::Object);
      impl GameBarServicesManager {
        pub fn game_bar_services_created< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<GameBarServicesManager,GameBarServicesManagerGameBarServicesCreatedEventArgs, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_game_bar_services_created< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn get_default() ->  ::winrt::Result<GameBarServicesManager>{
          Self::IGameBarServicesManagerStatics(|this|unsafe {
            let mut result__: <GameBarServicesManager as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<GameBarServicesManager>(result__)
          })
        }#[allow(non_snake_case)]fn IGameBarServicesManagerStatics<R,F:FnOnce(&IGameBarServicesManagerStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<GameBarServicesManager,IGameBarServicesManagerStatics, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for GameBarServicesManager {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for GameBarServicesManager {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for GameBarServicesManager{}
      impl::std::fmt::Debug for GameBarServicesManager {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for GameBarServicesManager {
        const NAME: & 'static str = "Windows.Media.Capture.GameBarServicesManager";
        
      }unsafe impl::winrt::Interface for GameBarServicesManager {
        type Vtable = IGameBarServicesManager_abi;
        const IID: ::winrt::Guid =  <IGameBarServicesManager as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for GameBarServicesManager {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.GameBarServicesManager;{3a4b9cfa-7f8b-4c60-9dbb-0bcd262dffc6})");
        
      }impl::std::convert::From<GameBarServicesManager>for::winrt::Object {
        fn from(value:GameBarServicesManager) -> Self {
          value.0
        }
      }impl::std::convert::From<&GameBarServicesManager>for::winrt::Object {
        fn from(value: &GameBarServicesManager) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for GameBarServicesManager {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a GameBarServicesManager {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<GameBarServicesManager>for IGameBarServicesManager {
        fn from(value:GameBarServicesManager) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&GameBarServicesManager>for IGameBarServicesManager {
        fn from(value: &GameBarServicesManager) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IGameBarServicesManager>>for GameBarServicesManager {
        fn into(self) ->  ::winrt::Param< 'a ,IGameBarServicesManager>{
          ::winrt::Param::Owned(::std::convert::Into::<IGameBarServicesManager>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IGameBarServicesManager>>for& 'a GameBarServicesManager {
        fn into(self) ->  ::winrt::Param< 'a ,IGameBarServicesManager>{
          ::winrt::Param::Owned(::std::convert::Into::<IGameBarServicesManager>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for GameBarServicesManager{}
      unsafe impl::std::marker::Sync for GameBarServicesManager{}
      #[repr(transparent)]pub struct IVideoStreamConfiguration(::winrt::Object);
      impl::std::clone::Clone for IVideoStreamConfiguration {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IVideoStreamConfiguration {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IVideoStreamConfiguration {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IVideoStreamConfiguration{}
      impl IVideoStreamConfiguration {
        pub fn input_properties(&self,) ->  ::winrt::Result<super::media_properties::VideoEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::VideoEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::media_properties::VideoEncodingProperties>(result__)
          }
        }pub fn output_properties(&self,) ->  ::winrt::Result<super::media_properties::VideoEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::VideoEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::media_properties::VideoEncodingProperties>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IVideoStreamConfiguration {
        type Vtable = IVideoStreamConfiguration_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3631680111,17296,19294,[173,62,15,138,240,150,52,144],);
        
      }#[repr(C)]pub struct IVideoStreamConfiguration_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IVideoStreamConfiguration {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{d8770a6f-4390-4b5e-ad3e-0f8af0963490}")
        };
        
      }impl::std::convert::From<IVideoStreamConfiguration>for::winrt::Object {
        fn from(value:IVideoStreamConfiguration) -> Self {
          value.0
        }
      }impl::std::convert::From<&IVideoStreamConfiguration>for::winrt::Object {
        fn from(value: &IVideoStreamConfiguration) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoStreamConfiguration {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoStreamConfiguration {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct VideoStreamConfiguration(::winrt::Object);
      impl VideoStreamConfiguration {
        pub fn input_properties(&self,) ->  ::winrt::Result<super::media_properties::VideoEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::VideoEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::media_properties::VideoEncodingProperties>(result__)
          }
        }pub fn output_properties(&self,) ->  ::winrt::Result<super::media_properties::VideoEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::VideoEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::media_properties::VideoEncodingProperties>(result__)
          }
        }
      }impl::std::clone::Clone for VideoStreamConfiguration {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for VideoStreamConfiguration {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for VideoStreamConfiguration{}
      impl::std::fmt::Debug for VideoStreamConfiguration {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for VideoStreamConfiguration {
        const NAME: & 'static str = "Windows.Media.Capture.VideoStreamConfiguration";
        
      }unsafe impl::winrt::Interface for VideoStreamConfiguration {
        type Vtable = IVideoStreamConfiguration_abi;
        const IID: ::winrt::Guid =  <IVideoStreamConfiguration as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for VideoStreamConfiguration {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.VideoStreamConfiguration;{d8770a6f-4390-4b5e-ad3e-0f8af0963490})");
        
      }impl::std::convert::From<VideoStreamConfiguration>for::winrt::Object {
        fn from(value:VideoStreamConfiguration) -> Self {
          value.0
        }
      }impl::std::convert::From<&VideoStreamConfiguration>for::winrt::Object {
        fn from(value: &VideoStreamConfiguration) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for VideoStreamConfiguration {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a VideoStreamConfiguration {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<VideoStreamConfiguration>for IVideoStreamConfiguration {
        fn from(value:VideoStreamConfiguration) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&VideoStreamConfiguration>for IVideoStreamConfiguration {
        fn from(value: &VideoStreamConfiguration) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoStreamConfiguration>>for VideoStreamConfiguration {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoStreamConfiguration>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoStreamConfiguration>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoStreamConfiguration>>for& 'a VideoStreamConfiguration {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoStreamConfiguration>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoStreamConfiguration>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for VideoStreamConfiguration{}
      unsafe impl::std::marker::Sync for VideoStreamConfiguration{}
      #[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod core {
        #[repr(transparent)]pub struct IVariablePhotoCapturedEventArgs(::winrt::Object);
        impl::std::clone::Clone for IVariablePhotoCapturedEventArgs {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IVariablePhotoCapturedEventArgs {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IVariablePhotoCapturedEventArgs {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IVariablePhotoCapturedEventArgs{}
        impl IVariablePhotoCapturedEventArgs {
          pub fn frame(&self) ->  ::winrt::Result<super::CapturedFrame>{
            let this = self;
            unsafe {
              let mut result__: <super::CapturedFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::CapturedFrame>(result__)
            }
          }pub fn capture_time_offset(&self,) ->  ::winrt::Result<super::super::super::foundation::TimeSpan>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::TimeSpan>(result__)
            }
          }pub fn used_frame_controller_index(&self,) ->  ::winrt::Result<super::super::super::foundation::IReference<u32>>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IReference<u32>>(result__)
            }
          }pub fn captured_frame_control_values(&self,) ->  ::winrt::Result<super::CapturedFrameControlValues>{
            let this = self;
            unsafe {
              let mut result__: <super::CapturedFrameControlValues as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::CapturedFrameControlValues>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IVariablePhotoCapturedEventArgs {
          type Vtable = IVariablePhotoCapturedEventArgs_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3521858652,6995,20042,[139,92,219,120,135,172,148,155],);
          
        }#[repr(C)]pub struct IVariablePhotoCapturedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IVariablePhotoCapturedEventArgs {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{d1eb4c5c-1b53-4e4a-8b5c-db7887ac949b}")
          };
          
        }impl::std::convert::From<IVariablePhotoCapturedEventArgs>for::winrt::Object {
          fn from(value:IVariablePhotoCapturedEventArgs) -> Self {
            value.0
          }
        }impl::std::convert::From<&IVariablePhotoCapturedEventArgs>for::winrt::Object {
          fn from(value: &IVariablePhotoCapturedEventArgs) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVariablePhotoCapturedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVariablePhotoCapturedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct VariablePhotoCapturedEventArgs(::winrt::Object);
        impl VariablePhotoCapturedEventArgs {
          pub fn frame(&self) ->  ::winrt::Result<super::CapturedFrame>{
            let this = self;
            unsafe {
              let mut result__: <super::CapturedFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::CapturedFrame>(result__)
            }
          }pub fn capture_time_offset(&self,) ->  ::winrt::Result<super::super::super::foundation::TimeSpan>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::TimeSpan>(result__)
            }
          }pub fn used_frame_controller_index(&self,) ->  ::winrt::Result<super::super::super::foundation::IReference<u32>>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IReference<u32>>(result__)
            }
          }pub fn captured_frame_control_values(&self,) ->  ::winrt::Result<super::CapturedFrameControlValues>{
            let this = self;
            unsafe {
              let mut result__: <super::CapturedFrameControlValues as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::CapturedFrameControlValues>(result__)
            }
          }
        }impl::std::clone::Clone for VariablePhotoCapturedEventArgs {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for VariablePhotoCapturedEventArgs {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for VariablePhotoCapturedEventArgs{}
        impl::std::fmt::Debug for VariablePhotoCapturedEventArgs {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for VariablePhotoCapturedEventArgs {
          const NAME: & 'static str = "Windows.Media.Capture.Core.VariablePhotoCapturedEventArgs";
          
        }unsafe impl::winrt::Interface for VariablePhotoCapturedEventArgs {
          type Vtable = IVariablePhotoCapturedEventArgs_abi;
          const IID: ::winrt::Guid =  <IVariablePhotoCapturedEventArgs as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for VariablePhotoCapturedEventArgs {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Core.VariablePhotoCapturedEventArgs;{d1eb4c5c-1b53-4e4a-8b5c-db7887ac949b})");
          
        }impl::std::convert::From<VariablePhotoCapturedEventArgs>for::winrt::Object {
          fn from(value:VariablePhotoCapturedEventArgs) -> Self {
            value.0
          }
        }impl::std::convert::From<&VariablePhotoCapturedEventArgs>for::winrt::Object {
          fn from(value: &VariablePhotoCapturedEventArgs) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for VariablePhotoCapturedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a VariablePhotoCapturedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<VariablePhotoCapturedEventArgs>for IVariablePhotoCapturedEventArgs {
          fn from(value:VariablePhotoCapturedEventArgs) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&VariablePhotoCapturedEventArgs>for IVariablePhotoCapturedEventArgs {
          fn from(value: &VariablePhotoCapturedEventArgs) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVariablePhotoCapturedEventArgs>>for VariablePhotoCapturedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a ,IVariablePhotoCapturedEventArgs>{
            ::winrt::Param::Owned(::std::convert::Into::<IVariablePhotoCapturedEventArgs>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVariablePhotoCapturedEventArgs>>for& 'a VariablePhotoCapturedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a ,IVariablePhotoCapturedEventArgs>{
            ::winrt::Param::Owned(::std::convert::Into::<IVariablePhotoCapturedEventArgs>::into(::std::clone::Clone::clone(self),),)
          }
        }unsafe impl::std::marker::Send for VariablePhotoCapturedEventArgs{}
        unsafe impl::std::marker::Sync for VariablePhotoCapturedEventArgs{}
        #[repr(transparent)]pub struct IVariablePhotoSequenceCapture(::winrt::Object);
        impl::std::clone::Clone for IVariablePhotoSequenceCapture {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IVariablePhotoSequenceCapture {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IVariablePhotoSequenceCapture {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IVariablePhotoSequenceCapture{}
        impl IVariablePhotoSequenceCapture {
          pub fn start_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncAction>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncAction>(result__)
            }
          }pub fn stop_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncAction>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncAction>(result__)
            }
          }pub fn finish_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncAction>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncAction>(result__)
            }
          }pub fn photo_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::TypedEventHandler<VariablePhotoSequenceCapture,VariablePhotoCapturedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::super::foundation::EventRegistrationToken>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::EventRegistrationToken>(result__,)
            }
          }pub fn remove_photo_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::EventRegistrationToken, >, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),token.into().abi(),).ok()
            }
          }pub fn stopped< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::TypedEventHandler<VariablePhotoSequenceCapture, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::super::foundation::EventRegistrationToken>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::EventRegistrationToken>(result__,)
            }
          }pub fn remove_stopped< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::EventRegistrationToken, >, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),token.into().abi(),).ok()
            }
          }
        }unsafe impl::winrt::Interface for IVariablePhotoSequenceCapture {
          type Vtable = IVariablePhotoSequenceCapture_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3490786589,798,16449,[166,214,189,116,36,118,168,238],);
          
        }#[repr(C)]pub struct IVariablePhotoSequenceCapture_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IVariablePhotoSequenceCapture {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{d0112d1d-031e-4041-a6d6-bd742476a8ee}")
          };
          
        }impl::std::convert::From<IVariablePhotoSequenceCapture>for::winrt::Object {
          fn from(value:IVariablePhotoSequenceCapture) -> Self {
            value.0
          }
        }impl::std::convert::From<&IVariablePhotoSequenceCapture>for::winrt::Object {
          fn from(value: &IVariablePhotoSequenceCapture) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVariablePhotoSequenceCapture {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVariablePhotoSequenceCapture {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct IVariablePhotoSequenceCapture2(::winrt::Object);
        impl::std::clone::Clone for IVariablePhotoSequenceCapture2 {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IVariablePhotoSequenceCapture2 {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IVariablePhotoSequenceCapture2 {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IVariablePhotoSequenceCapture2{}
        impl IVariablePhotoSequenceCapture2 {
          pub fn update_settings_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncAction>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncAction>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IVariablePhotoSequenceCapture2 {
          type Vtable = IVariablePhotoSequenceCapture2_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4264321724,20656,17379,[145,124,227,185,39,152,148,47],);
          
        }#[repr(C)]pub struct IVariablePhotoSequenceCapture2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IVariablePhotoSequenceCapture2 {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{fe2c62bc-50b0-43e3-917c-e3b92798942f}")
          };
          
        }impl::std::convert::From<IVariablePhotoSequenceCapture2>for::winrt::Object {
          fn from(value:IVariablePhotoSequenceCapture2) -> Self {
            value.0
          }
        }impl::std::convert::From<&IVariablePhotoSequenceCapture2>for::winrt::Object {
          fn from(value: &IVariablePhotoSequenceCapture2) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVariablePhotoSequenceCapture2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVariablePhotoSequenceCapture2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct VariablePhotoSequenceCapture(::winrt::Object);
        impl VariablePhotoSequenceCapture {
          pub fn start_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncAction>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncAction>(result__)
            }
          }pub fn stop_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncAction>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncAction>(result__)
            }
          }pub fn finish_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncAction>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncAction>(result__)
            }
          }pub fn photo_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::TypedEventHandler<VariablePhotoSequenceCapture,VariablePhotoCapturedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::super::foundation::EventRegistrationToken>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::EventRegistrationToken>(result__,)
            }
          }pub fn remove_photo_captured< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::EventRegistrationToken, >, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),token.into().abi(),).ok()
            }
          }pub fn stopped< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::TypedEventHandler<VariablePhotoSequenceCapture, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::super::foundation::EventRegistrationToken>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::EventRegistrationToken>(result__,)
            }
          }pub fn remove_stopped< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::EventRegistrationToken, >, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),token.into().abi(),).ok()
            }
          }pub fn update_settings_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncAction>{
            let this =  &::winrt::Interface::cast::<IVariablePhotoSequenceCapture2>(self).unwrap();
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncAction>(result__)
            }
          }
        }impl::std::clone::Clone for VariablePhotoSequenceCapture {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for VariablePhotoSequenceCapture {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for VariablePhotoSequenceCapture{}
        impl::std::fmt::Debug for VariablePhotoSequenceCapture {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for VariablePhotoSequenceCapture {
          const NAME: & 'static str = "Windows.Media.Capture.Core.VariablePhotoSequenceCapture";
          
        }unsafe impl::winrt::Interface for VariablePhotoSequenceCapture {
          type Vtable = IVariablePhotoSequenceCapture_abi;
          const IID: ::winrt::Guid =  <IVariablePhotoSequenceCapture as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for VariablePhotoSequenceCapture {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Core.VariablePhotoSequenceCapture;{d0112d1d-031e-4041-a6d6-bd742476a8ee})");
          
        }impl::std::convert::From<VariablePhotoSequenceCapture>for::winrt::Object {
          fn from(value:VariablePhotoSequenceCapture) -> Self {
            value.0
          }
        }impl::std::convert::From<&VariablePhotoSequenceCapture>for::winrt::Object {
          fn from(value: &VariablePhotoSequenceCapture) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for VariablePhotoSequenceCapture {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a VariablePhotoSequenceCapture {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<VariablePhotoSequenceCapture>for IVariablePhotoSequenceCapture {
          fn from(value:VariablePhotoSequenceCapture) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&VariablePhotoSequenceCapture>for IVariablePhotoSequenceCapture {
          fn from(value: &VariablePhotoSequenceCapture) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVariablePhotoSequenceCapture>>for VariablePhotoSequenceCapture {
          fn into(self) ->  ::winrt::Param< 'a ,IVariablePhotoSequenceCapture>{
            ::winrt::Param::Owned(::std::convert::Into::<IVariablePhotoSequenceCapture>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVariablePhotoSequenceCapture>>for& 'a VariablePhotoSequenceCapture {
          fn into(self) ->  ::winrt::Param< 'a ,IVariablePhotoSequenceCapture>{
            ::winrt::Param::Owned(::std::convert::Into::<IVariablePhotoSequenceCapture>::into(::std::clone::Clone::clone(self),),)
          }
        }impl::std::convert::From<VariablePhotoSequenceCapture>for IVariablePhotoSequenceCapture2 {
          fn from(value:VariablePhotoSequenceCapture) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&VariablePhotoSequenceCapture>for IVariablePhotoSequenceCapture2 {
          fn from(value: &VariablePhotoSequenceCapture) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVariablePhotoSequenceCapture2>>for VariablePhotoSequenceCapture {
          fn into(self) ->  ::winrt::Param< 'a ,IVariablePhotoSequenceCapture2>{
            ::winrt::Param::Owned(::std::convert::Into::<IVariablePhotoSequenceCapture2>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVariablePhotoSequenceCapture2>>for& 'a VariablePhotoSequenceCapture {
          fn into(self) ->  ::winrt::Param< 'a ,IVariablePhotoSequenceCapture2>{
            ::winrt::Param::Owned(::std::convert::Into::<IVariablePhotoSequenceCapture2>::into(::std::clone::Clone::clone(self),),)
          }
        }
      }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod frames {
        #[allow(non_camel_case_types)]#[repr(transparent)]pub struct MediaFrameSourceKind(i32);
        impl::std::convert::From<i32>for MediaFrameSourceKind {
          fn from(value:i32) -> Self {
            Self(value)
          }
        }impl::std::clone::Clone for MediaFrameSourceKind {
          fn clone(&self) -> Self {
            Self(self.0)
          }
        }impl::std::default::Default for MediaFrameSourceKind {
          fn default() -> Self {
            Self(0)
          }
        }impl::std::fmt::Debug for MediaFrameSourceKind {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for MediaFrameSourceKind {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MediaFrameSourceKind{}
        impl::std::marker::Copy for MediaFrameSourceKind{}
        impl MediaFrameSourceKind {
          #![allow(non_upper_case_globals)]pub const Custom:Self = Self(0i32);
          pub const Color:Self = Self(1i32);
          pub const Infrared:Self = Self(2i32);
          pub const Depth:Self = Self(3i32);
          pub const Audio:Self = Self(4i32);
          pub const Image:Self = Self(5i32);
          
        }unsafe impl::winrt::Abi for MediaFrameSourceKind {
          type Abi = Self;
          
        }unsafe impl::winrt::RuntimeType for MediaFrameSourceKind {
          type DefaultType = Self;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.Frames.MediaFrameSourceKind;i4)",);
          
        }#[repr(transparent)]pub struct IMediaFrameSourceGroup(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameSourceGroup {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameSourceGroup {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameSourceGroup {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameSourceGroup{}
        impl IMediaFrameSourceGroup {
          pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
            let this = self;
            unsafe {
              let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
            }
          }pub fn display_name(&self) ->  ::winrt::Result<::winrt::HString>{
            let this = self;
            unsafe {
              let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
            }
          }pub fn source_infos(&self,) ->  ::winrt::Result<super::super::super::foundation::collections::IVectorView<MediaFrameSourceInfo, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::collections::IVectorView:: <MediaFrameSourceInfo>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::collections::IVectorView<MediaFrameSourceInfo, >>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMediaFrameSourceGroup {
          type Vtable = IMediaFrameSourceGroup_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2137021319,18482,19295,[174,61,65,47,170,179,125,52],);
          
        }#[repr(C)]pub struct IMediaFrameSourceGroup_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameSourceGroup {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{7f605b87-4832-4b5f-ae3d-412faab37d34}")
          };
          
        }impl::std::convert::From<IMediaFrameSourceGroup>for::winrt::Object {
          fn from(value:IMediaFrameSourceGroup) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameSourceGroup>for::winrt::Object {
          fn from(value: &IMediaFrameSourceGroup) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameSourceGroup {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameSourceGroup {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct IMediaFrameSourceGroupStatics(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameSourceGroupStatics {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameSourceGroupStatics {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameSourceGroupStatics {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameSourceGroupStatics{}
        impl IMediaFrameSourceGroupStatics {
          pub fn find_all_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncOperation<super::super::super::foundation::collections::IVectorView<MediaFrameSourceGroup, >, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncOperation<super::super::super::foundation::collections::IVectorView<MediaFrameSourceGroup, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncOperation<super::super::super::foundation::collections::IVectorView<MediaFrameSourceGroup, >, >>(result__)
            }
          }pub fn from_id_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,id:T0__,) ->  ::winrt::Result<super::super::super::foundation::IAsyncOperation<MediaFrameSourceGroup>, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncOperation<MediaFrameSourceGroup, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),id.into().abi(), &mut result__).from_abi:: <super::super::super::foundation::IAsyncOperation:: <MediaFrameSourceGroup> >(result__)
            }
          }pub fn get_device_selector(&self) ->  ::winrt::Result<::winrt::HString>{
            let this = self;
            unsafe {
              let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMediaFrameSourceGroupStatics {
          type Vtable = IMediaFrameSourceGroupStatics_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(474529733,17263,17672,[148,207,213,216,183,50,100,69],);
          
        }#[repr(C)]pub struct IMediaFrameSourceGroupStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,id: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameSourceGroupStatics {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{1c48bfc5-436f-4508-94cf-d5d8b7326445}")
          };
          
        }impl::std::convert::From<IMediaFrameSourceGroupStatics>for::winrt::Object {
          fn from(value:IMediaFrameSourceGroupStatics) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameSourceGroupStatics>for::winrt::Object {
          fn from(value: &IMediaFrameSourceGroupStatics) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameSourceGroupStatics {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameSourceGroupStatics {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct MediaFrameSourceGroup(::winrt::Object);
        impl MediaFrameSourceGroup {
          pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
            let this = self;
            unsafe {
              let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
            }
          }pub fn display_name(&self) ->  ::winrt::Result<::winrt::HString>{
            let this = self;
            unsafe {
              let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
            }
          }pub fn source_infos(&self,) ->  ::winrt::Result<super::super::super::foundation::collections::IVectorView<MediaFrameSourceInfo, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::collections::IVectorView:: <MediaFrameSourceInfo>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::collections::IVectorView<MediaFrameSourceInfo, >>(result__)
            }
          }pub fn find_all_async() ->  ::winrt::Result<super::super::super::foundation::IAsyncOperation<super::super::super::foundation::collections::IVectorView<MediaFrameSourceGroup, >, >, >{
            Self::IMediaFrameSourceGroupStatics(|this|unsafe {
              let mut result__: <super::super::super::foundation::IAsyncOperation<super::super::super::foundation::collections::IVectorView<MediaFrameSourceGroup, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncOperation<super::super::super::foundation::collections::IVectorView<MediaFrameSourceGroup, >, >>(result__)
            })
          }pub fn from_id_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(id:T0__,) ->  ::winrt::Result<super::super::super::foundation::IAsyncOperation<MediaFrameSourceGroup>, >{
            Self::IMediaFrameSourceGroupStatics(|this|unsafe {
              let mut result__: <super::super::super::foundation::IAsyncOperation<MediaFrameSourceGroup, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),id.into().abi(), &mut result__).from_abi:: <super::super::super::foundation::IAsyncOperation:: <MediaFrameSourceGroup> >(result__)
            })
          }pub fn get_device_selector() ->  ::winrt::Result<::winrt::HString>{
            Self::IMediaFrameSourceGroupStatics(|this|unsafe {
              let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
            })
          }#[allow(non_snake_case)]fn IMediaFrameSourceGroupStatics<R,F:FnOnce(&IMediaFrameSourceGroupStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
            static mut SHARED: ::winrt::FactoryCache<MediaFrameSourceGroup,IMediaFrameSourceGroupStatics, >  =  ::winrt::FactoryCache::new();
            unsafe {
              SHARED.call(callback)
            }
          }
        }impl::std::clone::Clone for MediaFrameSourceGroup {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for MediaFrameSourceGroup {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MediaFrameSourceGroup{}
        impl::std::fmt::Debug for MediaFrameSourceGroup {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for MediaFrameSourceGroup {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.MediaFrameSourceGroup";
          
        }unsafe impl::winrt::Interface for MediaFrameSourceGroup {
          type Vtable = IMediaFrameSourceGroup_abi;
          const IID: ::winrt::Guid =  <IMediaFrameSourceGroup as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for MediaFrameSourceGroup {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.MediaFrameSourceGroup;{7f605b87-4832-4b5f-ae3d-412faab37d34})");
          
        }impl::std::convert::From<MediaFrameSourceGroup>for::winrt::Object {
          fn from(value:MediaFrameSourceGroup) -> Self {
            value.0
          }
        }impl::std::convert::From<&MediaFrameSourceGroup>for::winrt::Object {
          fn from(value: &MediaFrameSourceGroup) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaFrameSourceGroup {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaFrameSourceGroup {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MediaFrameSourceGroup>for IMediaFrameSourceGroup {
          fn from(value:MediaFrameSourceGroup) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&MediaFrameSourceGroup>for IMediaFrameSourceGroup {
          fn from(value: &MediaFrameSourceGroup) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSourceGroup>>for MediaFrameSourceGroup {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSourceGroup>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSourceGroup>::into(self,))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSourceGroup>>for& 'a MediaFrameSourceGroup {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSourceGroup>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSourceGroup>::into(::std::clone::Clone::clone(self),))
          }
        }unsafe impl::std::marker::Send for MediaFrameSourceGroup{}
        unsafe impl::std::marker::Sync for MediaFrameSourceGroup{}
        #[repr(transparent)]pub struct IMediaFrameSourceInfo(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameSourceInfo {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameSourceInfo {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameSourceInfo {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameSourceInfo{}
        impl IMediaFrameSourceInfo {
          pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
            let this = self;
            unsafe {
              let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
            }
          }pub fn media_stream_type(&self) ->  ::winrt::Result<super::MediaStreamType>{
            let this = self;
            unsafe {
              let mut result__: <super::MediaStreamType as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::MediaStreamType>(result__)
            }
          }pub fn source_kind(&self) ->  ::winrt::Result<MediaFrameSourceKind>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameSourceKind as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameSourceKind>(result__)
            }
          }pub fn source_group(&self) ->  ::winrt::Result<MediaFrameSourceGroup>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameSourceGroup as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameSourceGroup>(result__)
            }
          }pub fn device_information(&self,) ->  ::winrt::Result<super::super::super::devices::enumeration::DeviceInformation>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::devices::enumeration::DeviceInformation as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::super::devices::enumeration::DeviceInformation>(result__)
            }
          }pub fn properties(&self,) ->  ::winrt::Result<super::super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::collections::IMapView:: < ::winrt::Guid, ::winrt::Object>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >>(result__)
            }
          }pub fn coordinate_system(&self,) ->  ::winrt::Result<super::super::super::perception::spatial::SpatialCoordinateSystem, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::perception::spatial::SpatialCoordinateSystem as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::super::perception::spatial::SpatialCoordinateSystem>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMediaFrameSourceInfo {
          type Vtable = IMediaFrameSourceInfo_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2277362125,17921,16527,[145,207,3,131,24,205,10,243],);
          
        }#[repr(C)]pub struct IMediaFrameSourceInfo_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::MediaStreamType,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut MediaFrameSourceKind,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameSourceInfo {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{87bdc9cd-4601-408f-91cf-038318cd0af3}")
          };
          
        }impl::std::convert::From<IMediaFrameSourceInfo>for::winrt::Object {
          fn from(value:IMediaFrameSourceInfo) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameSourceInfo>for::winrt::Object {
          fn from(value: &IMediaFrameSourceInfo) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameSourceInfo {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameSourceInfo {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct IMediaFrameSourceInfo2(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameSourceInfo2 {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameSourceInfo2 {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameSourceInfo2 {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameSourceInfo2{}
        impl IMediaFrameSourceInfo2 {
          pub fn profile_id(&self) ->  ::winrt::Result<::winrt::HString>{
            let this = self;
            unsafe {
              let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
            }
          }pub fn video_profile_media_description(&self,) ->  ::winrt::Result<super::super::super::foundation::collections::IVectorView<super::MediaCaptureVideoProfileMediaDescription, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::collections::IVectorView:: <super::MediaCaptureVideoProfileMediaDescription>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::collections::IVectorView<super::MediaCaptureVideoProfileMediaDescription, >>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMediaFrameSourceInfo2 {
          type Vtable = IMediaFrameSourceInfo2_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(425359445,25687,17094,[167,105,25,182,91,211,46,110],);
          
        }#[repr(C)]pub struct IMediaFrameSourceInfo2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameSourceInfo2 {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{195a7855-6457-42c6-a769-19b65bd32e6e}")
          };
          
        }impl::std::convert::From<IMediaFrameSourceInfo2>for::winrt::Object {
          fn from(value:IMediaFrameSourceInfo2) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameSourceInfo2>for::winrt::Object {
          fn from(value: &IMediaFrameSourceInfo2) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameSourceInfo2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameSourceInfo2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct IMediaFrameSourceInfo3(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameSourceInfo3 {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameSourceInfo3 {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameSourceInfo3 {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameSourceInfo3{}
        impl IMediaFrameSourceInfo3 {
          pub fn get_relative_panel< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::ui::window_management::DisplayRegion, >, >, >(&self,display_region:T0__,) ->  ::winrt::Result<super::super::super::devices::enumeration::Panel>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::devices::enumeration::Panel as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),display_region.into().abi(), &mut result__,).from_abi::<super::super::super::devices::enumeration::Panel>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMediaFrameSourceInfo3 {
          type Vtable = IMediaFrameSourceInfo3_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3397536438,26346,22661,[162,182,38,192,238,236,60,123],);
          
        }#[repr(C)]pub struct IMediaFrameSourceInfo3_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,display_region: ::winrt::RawPtr,result__: *mut super::super::super::devices::enumeration::Panel,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameSourceInfo3 {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{ca824ab6-66ea-5885-a2b6-26c0eeec3c7b}")
          };
          
        }impl::std::convert::From<IMediaFrameSourceInfo3>for::winrt::Object {
          fn from(value:IMediaFrameSourceInfo3) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameSourceInfo3>for::winrt::Object {
          fn from(value: &IMediaFrameSourceInfo3) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameSourceInfo3 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameSourceInfo3 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct MediaFrameSourceInfo(::winrt::Object);
        impl MediaFrameSourceInfo {
          pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
            let this = self;
            unsafe {
              let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
            }
          }pub fn media_stream_type(&self) ->  ::winrt::Result<super::MediaStreamType>{
            let this = self;
            unsafe {
              let mut result__: <super::MediaStreamType as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::MediaStreamType>(result__)
            }
          }pub fn source_kind(&self) ->  ::winrt::Result<MediaFrameSourceKind>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameSourceKind as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameSourceKind>(result__)
            }
          }pub fn source_group(&self) ->  ::winrt::Result<MediaFrameSourceGroup>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameSourceGroup as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameSourceGroup>(result__)
            }
          }pub fn device_information(&self,) ->  ::winrt::Result<super::super::super::devices::enumeration::DeviceInformation>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::devices::enumeration::DeviceInformation as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::super::devices::enumeration::DeviceInformation>(result__)
            }
          }pub fn properties(&self,) ->  ::winrt::Result<super::super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::collections::IMapView:: < ::winrt::Guid, ::winrt::Object>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >>(result__)
            }
          }pub fn coordinate_system(&self,) ->  ::winrt::Result<super::super::super::perception::spatial::SpatialCoordinateSystem, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::perception::spatial::SpatialCoordinateSystem as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::super::perception::spatial::SpatialCoordinateSystem>(result__)
            }
          }pub fn profile_id(&self) ->  ::winrt::Result<::winrt::HString>{
            let this =  &::winrt::Interface::cast::<IMediaFrameSourceInfo2>(self).unwrap();
            unsafe {
              let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
            }
          }pub fn video_profile_media_description(&self,) ->  ::winrt::Result<super::super::super::foundation::collections::IVectorView<super::MediaCaptureVideoProfileMediaDescription, >, >{
            let this =  &::winrt::Interface::cast::<IMediaFrameSourceInfo2>(self).unwrap();
            unsafe {
              let mut result__: <super::super::super::foundation::collections::IVectorView:: <super::MediaCaptureVideoProfileMediaDescription>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::collections::IVectorView<super::MediaCaptureVideoProfileMediaDescription, >>(result__)
            }
          }pub fn get_relative_panel< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::ui::window_management::DisplayRegion, >, >, >(&self,display_region:T0__,) ->  ::winrt::Result<super::super::super::devices::enumeration::Panel>{
            let this =  &::winrt::Interface::cast::<IMediaFrameSourceInfo3>(self).unwrap();
            unsafe {
              let mut result__: <super::super::super::devices::enumeration::Panel as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),display_region.into().abi(), &mut result__,).from_abi::<super::super::super::devices::enumeration::Panel>(result__)
            }
          }
        }impl::std::clone::Clone for MediaFrameSourceInfo {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for MediaFrameSourceInfo {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MediaFrameSourceInfo{}
        impl::std::fmt::Debug for MediaFrameSourceInfo {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for MediaFrameSourceInfo {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.MediaFrameSourceInfo";
          
        }unsafe impl::winrt::Interface for MediaFrameSourceInfo {
          type Vtable = IMediaFrameSourceInfo_abi;
          const IID: ::winrt::Guid =  <IMediaFrameSourceInfo as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for MediaFrameSourceInfo {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.MediaFrameSourceInfo;{87bdc9cd-4601-408f-91cf-038318cd0af3})");
          
        }impl::std::convert::From<MediaFrameSourceInfo>for::winrt::Object {
          fn from(value:MediaFrameSourceInfo) -> Self {
            value.0
          }
        }impl::std::convert::From<&MediaFrameSourceInfo>for::winrt::Object {
          fn from(value: &MediaFrameSourceInfo) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaFrameSourceInfo {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaFrameSourceInfo {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MediaFrameSourceInfo>for IMediaFrameSourceInfo {
          fn from(value:MediaFrameSourceInfo) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&MediaFrameSourceInfo>for IMediaFrameSourceInfo {
          fn from(value: &MediaFrameSourceInfo) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSourceInfo>>for MediaFrameSourceInfo {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSourceInfo>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSourceInfo>::into(self,))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSourceInfo>>for& 'a MediaFrameSourceInfo {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSourceInfo>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSourceInfo>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MediaFrameSourceInfo>for IMediaFrameSourceInfo2 {
          fn from(value:MediaFrameSourceInfo) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&MediaFrameSourceInfo>for IMediaFrameSourceInfo2 {
          fn from(value: &MediaFrameSourceInfo) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSourceInfo2>>for MediaFrameSourceInfo {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSourceInfo2>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSourceInfo2>::into(self,))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSourceInfo2>>for& 'a MediaFrameSourceInfo {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSourceInfo2>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSourceInfo2>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MediaFrameSourceInfo>for IMediaFrameSourceInfo3 {
          fn from(value:MediaFrameSourceInfo) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&MediaFrameSourceInfo>for IMediaFrameSourceInfo3 {
          fn from(value: &MediaFrameSourceInfo) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSourceInfo3>>for MediaFrameSourceInfo {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSourceInfo3>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSourceInfo3>::into(self,))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSourceInfo3>>for& 'a MediaFrameSourceInfo {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSourceInfo3>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSourceInfo3>::into(::std::clone::Clone::clone(self),))
          }
        }unsafe impl::std::marker::Send for MediaFrameSourceInfo{}
        unsafe impl::std::marker::Sync for MediaFrameSourceInfo{}
        #[allow(non_camel_case_types)]#[repr(transparent)]pub struct MediaFrameSourceGetPropertyStatus(i32);
        impl::std::convert::From<i32>for MediaFrameSourceGetPropertyStatus {
          fn from(value:i32) -> Self {
            Self(value)
          }
        }impl::std::clone::Clone for MediaFrameSourceGetPropertyStatus {
          fn clone(&self) -> Self {
            Self(self.0)
          }
        }impl::std::default::Default for MediaFrameSourceGetPropertyStatus {
          fn default() -> Self {
            Self(0)
          }
        }impl::std::fmt::Debug for MediaFrameSourceGetPropertyStatus {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for MediaFrameSourceGetPropertyStatus {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MediaFrameSourceGetPropertyStatus{}
        impl::std::marker::Copy for MediaFrameSourceGetPropertyStatus{}
        impl MediaFrameSourceGetPropertyStatus {
          #![allow(non_upper_case_globals)]pub const Success:Self = Self(0i32);
          pub const UnknownFailure:Self = Self(1i32);
          pub const NotSupported:Self = Self(2i32);
          pub const DeviceNotAvailable:Self = Self(3i32);
          pub const MaxPropertyValueSizeTooSmall:Self = Self(4i32);
          pub const MaxPropertyValueSizeRequired:Self = Self(5i32);
          
        }unsafe impl::winrt::Abi for MediaFrameSourceGetPropertyStatus {
          type Abi = Self;
          
        }unsafe impl::winrt::RuntimeType for MediaFrameSourceGetPropertyStatus {
          type DefaultType = Self;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.Frames.MediaFrameSourceGetPropertyStatus;i4)",);
          
        }#[repr(transparent)]pub struct IMediaFrameSourceGetPropertyResult(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameSourceGetPropertyResult {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameSourceGetPropertyResult {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameSourceGetPropertyResult {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameSourceGetPropertyResult{}
        impl IMediaFrameSourceGetPropertyResult {
          pub fn status(&self) ->  ::winrt::Result<MediaFrameSourceGetPropertyStatus>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameSourceGetPropertyStatus as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameSourceGetPropertyStatus>(result__)
            }
          }pub fn value(&self) ->  ::winrt::Result<::winrt::Object>{
            let this = self;
            unsafe {
              let mut result__: <::winrt::Object as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::Object>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMediaFrameSourceGetPropertyResult {
          type Vtable = IMediaFrameSourceGetPropertyResult_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(143005378,14948,19413,[189,43,231,200,152,210,243,122],);
          
        }#[repr(C)]pub struct IMediaFrameSourceGetPropertyResult_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut MediaFrameSourceGetPropertyStatus,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameSourceGetPropertyResult {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{088616c2-3a64-4bd5-bd2b-e7c898d2f37a}")
          };
          
        }impl::std::convert::From<IMediaFrameSourceGetPropertyResult>for::winrt::Object {
          fn from(value:IMediaFrameSourceGetPropertyResult) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameSourceGetPropertyResult>for::winrt::Object {
          fn from(value: &IMediaFrameSourceGetPropertyResult) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameSourceGetPropertyResult {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameSourceGetPropertyResult {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct MediaFrameSourceGetPropertyResult(::winrt::Object);
        impl MediaFrameSourceGetPropertyResult {
          pub fn status(&self) ->  ::winrt::Result<MediaFrameSourceGetPropertyStatus>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameSourceGetPropertyStatus as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameSourceGetPropertyStatus>(result__)
            }
          }pub fn value(&self) ->  ::winrt::Result<::winrt::Object>{
            let this = self;
            unsafe {
              let mut result__: <::winrt::Object as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::Object>(result__)
            }
          }
        }impl::std::clone::Clone for MediaFrameSourceGetPropertyResult {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for MediaFrameSourceGetPropertyResult {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MediaFrameSourceGetPropertyResult{}
        impl::std::fmt::Debug for MediaFrameSourceGetPropertyResult {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for MediaFrameSourceGetPropertyResult {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.MediaFrameSourceGetPropertyResult";
          
        }unsafe impl::winrt::Interface for MediaFrameSourceGetPropertyResult {
          type Vtable = IMediaFrameSourceGetPropertyResult_abi;
          const IID: ::winrt::Guid =  <IMediaFrameSourceGetPropertyResult as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for MediaFrameSourceGetPropertyResult {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.MediaFrameSourceGetPropertyResult;{088616c2-3a64-4bd5-bd2b-e7c898d2f37a})");
          
        }impl::std::convert::From<MediaFrameSourceGetPropertyResult>for::winrt::Object {
          fn from(value:MediaFrameSourceGetPropertyResult) -> Self {
            value.0
          }
        }impl::std::convert::From<&MediaFrameSourceGetPropertyResult>for::winrt::Object {
          fn from(value: &MediaFrameSourceGetPropertyResult) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaFrameSourceGetPropertyResult {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaFrameSourceGetPropertyResult {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MediaFrameSourceGetPropertyResult>for IMediaFrameSourceGetPropertyResult {
          fn from(value:MediaFrameSourceGetPropertyResult) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&MediaFrameSourceGetPropertyResult>for IMediaFrameSourceGetPropertyResult {
          fn from(value: &MediaFrameSourceGetPropertyResult) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSourceGetPropertyResult>>for MediaFrameSourceGetPropertyResult {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSourceGetPropertyResult>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSourceGetPropertyResult, >::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSourceGetPropertyResult>>for& 'a MediaFrameSourceGetPropertyResult {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSourceGetPropertyResult>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSourceGetPropertyResult, >::into(::std::clone::Clone::clone(self)))
          }
        }unsafe impl::std::marker::Send for MediaFrameSourceGetPropertyResult{}
        unsafe impl::std::marker::Sync for MediaFrameSourceGetPropertyResult{}
        #[allow(non_camel_case_types)]#[repr(transparent)]pub struct MediaFrameSourceSetPropertyStatus(i32);
        impl::std::convert::From<i32>for MediaFrameSourceSetPropertyStatus {
          fn from(value:i32) -> Self {
            Self(value)
          }
        }impl::std::clone::Clone for MediaFrameSourceSetPropertyStatus {
          fn clone(&self) -> Self {
            Self(self.0)
          }
        }impl::std::default::Default for MediaFrameSourceSetPropertyStatus {
          fn default() -> Self {
            Self(0)
          }
        }impl::std::fmt::Debug for MediaFrameSourceSetPropertyStatus {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for MediaFrameSourceSetPropertyStatus {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MediaFrameSourceSetPropertyStatus{}
        impl::std::marker::Copy for MediaFrameSourceSetPropertyStatus{}
        impl MediaFrameSourceSetPropertyStatus {
          #![allow(non_upper_case_globals)]pub const Success:Self = Self(0i32);
          pub const UnknownFailure:Self = Self(1i32);
          pub const NotSupported:Self = Self(2i32);
          pub const InvalidValue:Self = Self(3i32);
          pub const DeviceNotAvailable:Self = Self(4i32);
          pub const NotInControl:Self = Self(5i32);
          
        }unsafe impl::winrt::Abi for MediaFrameSourceSetPropertyStatus {
          type Abi = Self;
          
        }unsafe impl::winrt::RuntimeType for MediaFrameSourceSetPropertyStatus {
          type DefaultType = Self;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.Frames.MediaFrameSourceSetPropertyStatus;i4)",);
          
        }#[repr(transparent)]pub struct IMediaFrameSourceController(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameSourceController {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameSourceController {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameSourceController {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameSourceController{}
        impl IMediaFrameSourceController {
          pub fn get_property_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,property_id:T0__,) ->  ::winrt::Result<super::super::super::foundation::IAsyncOperation<MediaFrameSourceGetPropertyResult, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncOperation<MediaFrameSourceGetPropertyResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),property_id.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::IAsyncOperation<MediaFrameSourceGetPropertyResult, >>(result__)
            }
          }pub fn set_property_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,property_id:T0__,property_value:T1__,) ->  ::winrt::Result<super::super::super::foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),property_id.into().abi(),property_value.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus, >>(result__)
            }
          }pub fn video_device_controller(&self,) ->  ::winrt::Result<super::super::devices::VideoDeviceController>{
            let this = self;
            unsafe {
              let mut result__: <super::super::devices::VideoDeviceController as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::devices::VideoDeviceController>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMediaFrameSourceController {
          type Vtable = IMediaFrameSourceController_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1829201461,12653,19343,[183,182,238,176,74,140,101,37],);
          
        }#[repr(C)]pub struct IMediaFrameSourceController_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,property_id: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,property_id: ::winrt::RawPtr,property_value: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameSourceController {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{6d076635-316d-4b8f-b7b6-eeb04a8c6525}")
          };
          
        }impl::std::convert::From<IMediaFrameSourceController>for::winrt::Object {
          fn from(value:IMediaFrameSourceController) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameSourceController>for::winrt::Object {
          fn from(value: &IMediaFrameSourceController) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameSourceController {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameSourceController {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct IMediaFrameSourceController2(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameSourceController2 {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameSourceController2 {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameSourceController2 {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameSourceController2{}
        impl IMediaFrameSourceController2 {
          pub fn get_property_by_extended_id_async< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IReference<u32>>, >, >(&self,extended_property_id: &[<u8 as::winrt::RuntimeType>::DefaultType],max_property_value_size:T1__,) ->  ::winrt::Result<super::super::super::foundation::IAsyncOperation<MediaFrameSourceGetPropertyResult, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncOperation<MediaFrameSourceGetPropertyResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),extended_property_id.len()as u32, ::std::mem::transmute(extended_property_id.as_ptr()),max_property_value_size.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::IAsyncOperation<MediaFrameSourceGetPropertyResult, >>(result__)
            }
          }pub fn set_property_by_extended_id_async(&self,extended_property_id: &[<u8 as::winrt::RuntimeType>::DefaultType],property_value: &[<u8 as::winrt::RuntimeType>::DefaultType],) ->  ::winrt::Result<super::super::super::foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),extended_property_id.len()as u32, ::std::mem::transmute(extended_property_id.as_ptr()),property_value.len()as u32, ::std::mem::transmute(property_value.as_ptr()), &mut result__,).from_abi::<super::super::super::foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus, >>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMediaFrameSourceController2 {
          type Vtable = IMediaFrameSourceController2_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4022640596,64754,18947,[180,228,172,150,40,115,155,238],);
          
        }#[repr(C)]pub struct IMediaFrameSourceController2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_extended_property_id:u32,extended_property_id: *const u8,max_property_value_size: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_extended_property_id:u32,extended_property_id: *const u8,array_size_property_value:u32,property_value: *const u8,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameSourceController2 {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{efc49fd4-fcf2-4a03-b4e4-ac9628739bee}")
          };
          
        }impl::std::convert::From<IMediaFrameSourceController2>for::winrt::Object {
          fn from(value:IMediaFrameSourceController2) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameSourceController2>for::winrt::Object {
          fn from(value: &IMediaFrameSourceController2) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameSourceController2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameSourceController2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct IMediaFrameSourceController3(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameSourceController3 {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameSourceController3 {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameSourceController3 {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameSourceController3{}
        impl IMediaFrameSourceController3 {
          pub fn audio_device_controller(&self,) ->  ::winrt::Result<super::super::devices::AudioDeviceController>{
            let this = self;
            unsafe {
              let mut result__: <super::super::devices::AudioDeviceController as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::devices::AudioDeviceController>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMediaFrameSourceController3 {
          type Vtable = IMediaFrameSourceController3_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(520943637,9316,18001,[177,232,74,130,219,219,84,222],);
          
        }#[repr(C)]pub struct IMediaFrameSourceController3_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameSourceController3 {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{1f0cf815-2464-4651-b1e8-4a82dbdb54de}")
          };
          
        }impl::std::convert::From<IMediaFrameSourceController3>for::winrt::Object {
          fn from(value:IMediaFrameSourceController3) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameSourceController3>for::winrt::Object {
          fn from(value: &IMediaFrameSourceController3) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameSourceController3 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameSourceController3 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct MediaFrameSourceController(::winrt::Object);
        impl MediaFrameSourceController {
          pub fn get_property_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,property_id:T0__,) ->  ::winrt::Result<super::super::super::foundation::IAsyncOperation<MediaFrameSourceGetPropertyResult, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncOperation<MediaFrameSourceGetPropertyResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),property_id.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::IAsyncOperation<MediaFrameSourceGetPropertyResult, >>(result__)
            }
          }pub fn set_property_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,property_id:T0__,property_value:T1__,) ->  ::winrt::Result<super::super::super::foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),property_id.into().abi(),property_value.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus, >>(result__)
            }
          }pub fn video_device_controller(&self,) ->  ::winrt::Result<super::super::devices::VideoDeviceController>{
            let this = self;
            unsafe {
              let mut result__: <super::super::devices::VideoDeviceController as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::devices::VideoDeviceController>(result__)
            }
          }pub fn get_property_by_extended_id_async< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IReference<u32>>, >, >(&self,extended_property_id: &[<u8 as::winrt::RuntimeType>::DefaultType],max_property_value_size:T1__,) ->  ::winrt::Result<super::super::super::foundation::IAsyncOperation<MediaFrameSourceGetPropertyResult, >, >{
            let this =  &::winrt::Interface::cast::<IMediaFrameSourceController2>(self).unwrap();
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncOperation<MediaFrameSourceGetPropertyResult, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),extended_property_id.len()as u32, ::std::mem::transmute(extended_property_id.as_ptr()),max_property_value_size.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::IAsyncOperation<MediaFrameSourceGetPropertyResult, >>(result__)
            }
          }pub fn set_property_by_extended_id_async(&self,extended_property_id: &[<u8 as::winrt::RuntimeType>::DefaultType],property_value: &[<u8 as::winrt::RuntimeType>::DefaultType],) ->  ::winrt::Result<super::super::super::foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus, >, >{
            let this =  &::winrt::Interface::cast::<IMediaFrameSourceController2>(self).unwrap();
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),extended_property_id.len()as u32, ::std::mem::transmute(extended_property_id.as_ptr()),property_value.len()as u32, ::std::mem::transmute(property_value.as_ptr()), &mut result__,).from_abi::<super::super::super::foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus, >>(result__)
            }
          }pub fn audio_device_controller(&self,) ->  ::winrt::Result<super::super::devices::AudioDeviceController>{
            let this =  &::winrt::Interface::cast::<IMediaFrameSourceController3>(self).unwrap();
            unsafe {
              let mut result__: <super::super::devices::AudioDeviceController as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::devices::AudioDeviceController>(result__)
            }
          }
        }impl::std::clone::Clone for MediaFrameSourceController {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for MediaFrameSourceController {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MediaFrameSourceController{}
        impl::std::fmt::Debug for MediaFrameSourceController {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for MediaFrameSourceController {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.MediaFrameSourceController";
          
        }unsafe impl::winrt::Interface for MediaFrameSourceController {
          type Vtable = IMediaFrameSourceController_abi;
          const IID: ::winrt::Guid =  <IMediaFrameSourceController as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for MediaFrameSourceController {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.MediaFrameSourceController;{6d076635-316d-4b8f-b7b6-eeb04a8c6525})");
          
        }impl::std::convert::From<MediaFrameSourceController>for::winrt::Object {
          fn from(value:MediaFrameSourceController) -> Self {
            value.0
          }
        }impl::std::convert::From<&MediaFrameSourceController>for::winrt::Object {
          fn from(value: &MediaFrameSourceController) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaFrameSourceController {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaFrameSourceController {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MediaFrameSourceController>for IMediaFrameSourceController {
          fn from(value:MediaFrameSourceController) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&MediaFrameSourceController>for IMediaFrameSourceController {
          fn from(value: &MediaFrameSourceController) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSourceController>>for MediaFrameSourceController {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSourceController>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSourceController>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSourceController>>for& 'a MediaFrameSourceController {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSourceController>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSourceController>::into(::std::clone::Clone::clone(self),),)
          }
        }impl::std::convert::From<MediaFrameSourceController>for IMediaFrameSourceController2 {
          fn from(value:MediaFrameSourceController) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&MediaFrameSourceController>for IMediaFrameSourceController2 {
          fn from(value: &MediaFrameSourceController) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSourceController2>>for MediaFrameSourceController {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSourceController2>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSourceController2>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSourceController2>>for& 'a MediaFrameSourceController {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSourceController2>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSourceController2>::into(::std::clone::Clone::clone(self),),)
          }
        }impl::std::convert::From<MediaFrameSourceController>for IMediaFrameSourceController3 {
          fn from(value:MediaFrameSourceController) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&MediaFrameSourceController>for IMediaFrameSourceController3 {
          fn from(value: &MediaFrameSourceController) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSourceController3>>for MediaFrameSourceController {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSourceController3>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSourceController3>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSourceController3>>for& 'a MediaFrameSourceController {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSourceController3>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSourceController3>::into(::std::clone::Clone::clone(self),),)
          }
        }unsafe impl::std::marker::Send for MediaFrameSourceController{}
        unsafe impl::std::marker::Sync for MediaFrameSourceController{}
        #[repr(transparent)]pub struct IDepthMediaFrameFormat(::winrt::Object);
        impl::std::clone::Clone for IDepthMediaFrameFormat {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IDepthMediaFrameFormat {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IDepthMediaFrameFormat {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IDepthMediaFrameFormat{}
        impl IDepthMediaFrameFormat {
          pub fn video_format(&self) ->  ::winrt::Result<VideoMediaFrameFormat>{
            let this = self;
            unsafe {
              let mut result__: <VideoMediaFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoMediaFrameFormat>(result__)
            }
          }pub fn depth_scale_in_meters(&self) ->  ::winrt::Result<f64>{
            let this = self;
            unsafe {
              let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f64>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IDepthMediaFrameFormat {
          type Vtable = IDepthMediaFrameFormat_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3272789824,55081,17726,[135,128,46,4,241,64,210,142],);
          
        }#[repr(C)]pub struct IDepthMediaFrameFormat_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f64,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IDepthMediaFrameFormat {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{c312cf40-d729-453e-8780-2e04f140d28e}")
          };
          
        }impl::std::convert::From<IDepthMediaFrameFormat>for::winrt::Object {
          fn from(value:IDepthMediaFrameFormat) -> Self {
            value.0
          }
        }impl::std::convert::From<&IDepthMediaFrameFormat>for::winrt::Object {
          fn from(value: &IDepthMediaFrameFormat) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDepthMediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDepthMediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct DepthMediaFrameFormat(::winrt::Object);
        impl DepthMediaFrameFormat {
          pub fn video_format(&self) ->  ::winrt::Result<VideoMediaFrameFormat>{
            let this = self;
            unsafe {
              let mut result__: <VideoMediaFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoMediaFrameFormat>(result__)
            }
          }pub fn depth_scale_in_meters(&self) ->  ::winrt::Result<f64>{
            let this = self;
            unsafe {
              let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f64>(result__)
            }
          }
        }impl::std::clone::Clone for DepthMediaFrameFormat {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for DepthMediaFrameFormat {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for DepthMediaFrameFormat{}
        impl::std::fmt::Debug for DepthMediaFrameFormat {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for DepthMediaFrameFormat {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.DepthMediaFrameFormat";
          
        }unsafe impl::winrt::Interface for DepthMediaFrameFormat {
          type Vtable = IDepthMediaFrameFormat_abi;
          const IID: ::winrt::Guid =  <IDepthMediaFrameFormat as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for DepthMediaFrameFormat {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.DepthMediaFrameFormat;{c312cf40-d729-453e-8780-2e04f140d28e})");
          
        }impl::std::convert::From<DepthMediaFrameFormat>for::winrt::Object {
          fn from(value:DepthMediaFrameFormat) -> Self {
            value.0
          }
        }impl::std::convert::From<&DepthMediaFrameFormat>for::winrt::Object {
          fn from(value: &DepthMediaFrameFormat) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DepthMediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DepthMediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<DepthMediaFrameFormat>for IDepthMediaFrameFormat {
          fn from(value:DepthMediaFrameFormat) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&DepthMediaFrameFormat>for IDepthMediaFrameFormat {
          fn from(value: &DepthMediaFrameFormat) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDepthMediaFrameFormat>>for DepthMediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a ,IDepthMediaFrameFormat>{
            ::winrt::Param::Owned(::std::convert::Into::<IDepthMediaFrameFormat>::into(self,))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDepthMediaFrameFormat>>for& 'a DepthMediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a ,IDepthMediaFrameFormat>{
            ::winrt::Param::Owned(::std::convert::Into::<IDepthMediaFrameFormat>::into(::std::clone::Clone::clone(self),))
          }
        }unsafe impl::std::marker::Send for DepthMediaFrameFormat{}
        unsafe impl::std::marker::Sync for DepthMediaFrameFormat{}
        #[repr(transparent)]pub struct IVideoMediaFrameFormat(::winrt::Object);
        impl::std::clone::Clone for IVideoMediaFrameFormat {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IVideoMediaFrameFormat {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IVideoMediaFrameFormat {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IVideoMediaFrameFormat{}
        impl IVideoMediaFrameFormat {
          pub fn media_frame_format(&self) ->  ::winrt::Result<MediaFrameFormat>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameFormat>(result__)
            }
          }pub fn depth_format(&self) ->  ::winrt::Result<DepthMediaFrameFormat>{
            let this = self;
            unsafe {
              let mut result__: <DepthMediaFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<DepthMediaFrameFormat>(result__)
            }
          }pub fn width(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }pub fn height(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IVideoMediaFrameFormat {
          type Vtable = IVideoMediaFrameFormat_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1174568896,55067,17863,[143,20,109,154,10,230,4,228],);
          
        }#[repr(C)]pub struct IVideoMediaFrameFormat_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IVideoMediaFrameFormat {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{46027fc0-d71b-45c7-8f14-6d9a0ae604e4}")
          };
          
        }impl::std::convert::From<IVideoMediaFrameFormat>for::winrt::Object {
          fn from(value:IVideoMediaFrameFormat) -> Self {
            value.0
          }
        }impl::std::convert::From<&IVideoMediaFrameFormat>for::winrt::Object {
          fn from(value: &IVideoMediaFrameFormat) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoMediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoMediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct VideoMediaFrameFormat(::winrt::Object);
        impl VideoMediaFrameFormat {
          pub fn media_frame_format(&self) ->  ::winrt::Result<MediaFrameFormat>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameFormat>(result__)
            }
          }pub fn depth_format(&self) ->  ::winrt::Result<DepthMediaFrameFormat>{
            let this = self;
            unsafe {
              let mut result__: <DepthMediaFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<DepthMediaFrameFormat>(result__)
            }
          }pub fn width(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }pub fn height(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }
        }impl::std::clone::Clone for VideoMediaFrameFormat {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for VideoMediaFrameFormat {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for VideoMediaFrameFormat{}
        impl::std::fmt::Debug for VideoMediaFrameFormat {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for VideoMediaFrameFormat {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.VideoMediaFrameFormat";
          
        }unsafe impl::winrt::Interface for VideoMediaFrameFormat {
          type Vtable = IVideoMediaFrameFormat_abi;
          const IID: ::winrt::Guid =  <IVideoMediaFrameFormat as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for VideoMediaFrameFormat {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.VideoMediaFrameFormat;{46027fc0-d71b-45c7-8f14-6d9a0ae604e4})");
          
        }impl::std::convert::From<VideoMediaFrameFormat>for::winrt::Object {
          fn from(value:VideoMediaFrameFormat) -> Self {
            value.0
          }
        }impl::std::convert::From<&VideoMediaFrameFormat>for::winrt::Object {
          fn from(value: &VideoMediaFrameFormat) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for VideoMediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a VideoMediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<VideoMediaFrameFormat>for IVideoMediaFrameFormat {
          fn from(value:VideoMediaFrameFormat) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&VideoMediaFrameFormat>for IVideoMediaFrameFormat {
          fn from(value: &VideoMediaFrameFormat) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoMediaFrameFormat>>for VideoMediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a ,IVideoMediaFrameFormat>{
            ::winrt::Param::Owned(::std::convert::Into::<IVideoMediaFrameFormat>::into(self,))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoMediaFrameFormat>>for& 'a VideoMediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a ,IVideoMediaFrameFormat>{
            ::winrt::Param::Owned(::std::convert::Into::<IVideoMediaFrameFormat>::into(::std::clone::Clone::clone(self),))
          }
        }unsafe impl::std::marker::Send for VideoMediaFrameFormat{}
        unsafe impl::std::marker::Sync for VideoMediaFrameFormat{}
        #[repr(transparent)]pub struct IMediaFrameFormat(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameFormat {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameFormat {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameFormat {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameFormat{}
        impl IMediaFrameFormat {
          pub fn major_type(&self) ->  ::winrt::Result<::winrt::HString>{
            let this = self;
            unsafe {
              let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
            }
          }pub fn subtype(&self) ->  ::winrt::Result<::winrt::HString>{
            let this = self;
            unsafe {
              let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
            }
          }pub fn frame_rate(&self,) ->  ::winrt::Result<super::super::media_properties::MediaRatio>{
            let this = self;
            unsafe {
              let mut result__: <super::super::media_properties::MediaRatio as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::media_properties::MediaRatio>(result__)
            }
          }pub fn properties(&self,) ->  ::winrt::Result<super::super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::collections::IMapView:: < ::winrt::Guid, ::winrt::Object>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >>(result__)
            }
          }pub fn video_format(&self) ->  ::winrt::Result<VideoMediaFrameFormat>{
            let this = self;
            unsafe {
              let mut result__: <VideoMediaFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoMediaFrameFormat>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMediaFrameFormat {
          type Vtable = IMediaFrameFormat_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1905273678,45689,19095,[169,219,189,90,47,183,143,57],);
          
        }#[repr(C)]pub struct IMediaFrameFormat_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameFormat {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{71902b4e-b279-4a97-a9db-bd5a2fb78f39}")
          };
          
        }impl::std::convert::From<IMediaFrameFormat>for::winrt::Object {
          fn from(value:IMediaFrameFormat) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameFormat>for::winrt::Object {
          fn from(value: &IMediaFrameFormat) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct IMediaFrameFormat2(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameFormat2 {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameFormat2 {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameFormat2 {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameFormat2{}
        impl IMediaFrameFormat2 {
          pub fn audio_encoding_properties(&self,) ->  ::winrt::Result<super::super::media_properties::AudioEncodingProperties>{
            let this = self;
            unsafe {
              let mut result__: <super::super::media_properties::AudioEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::media_properties::AudioEncodingProperties>(result__,)
            }
          }
        }unsafe impl::winrt::Interface for IMediaFrameFormat2 {
          type Vtable = IMediaFrameFormat2_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1669686080,24199,19472,[134,209,109,240,151,166,198,168],);
          
        }#[repr(C)]pub struct IMediaFrameFormat2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameFormat2 {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{63856340-5e87-4c10-86d1-6df097a6c6a8}")
          };
          
        }impl::std::convert::From<IMediaFrameFormat2>for::winrt::Object {
          fn from(value:IMediaFrameFormat2) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameFormat2>for::winrt::Object {
          fn from(value: &IMediaFrameFormat2) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameFormat2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameFormat2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct MediaFrameFormat(::winrt::Object);
        impl MediaFrameFormat {
          pub fn major_type(&self) ->  ::winrt::Result<::winrt::HString>{
            let this = self;
            unsafe {
              let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
            }
          }pub fn subtype(&self) ->  ::winrt::Result<::winrt::HString>{
            let this = self;
            unsafe {
              let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
            }
          }pub fn frame_rate(&self,) ->  ::winrt::Result<super::super::media_properties::MediaRatio>{
            let this = self;
            unsafe {
              let mut result__: <super::super::media_properties::MediaRatio as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::media_properties::MediaRatio>(result__)
            }
          }pub fn properties(&self,) ->  ::winrt::Result<super::super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::collections::IMapView:: < ::winrt::Guid, ::winrt::Object>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >>(result__)
            }
          }pub fn video_format(&self) ->  ::winrt::Result<VideoMediaFrameFormat>{
            let this = self;
            unsafe {
              let mut result__: <VideoMediaFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoMediaFrameFormat>(result__)
            }
          }pub fn audio_encoding_properties(&self,) ->  ::winrt::Result<super::super::media_properties::AudioEncodingProperties>{
            let this =  &::winrt::Interface::cast::<IMediaFrameFormat2>(self).unwrap();
            unsafe {
              let mut result__: <super::super::media_properties::AudioEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::media_properties::AudioEncodingProperties>(result__,)
            }
          }
        }impl::std::clone::Clone for MediaFrameFormat {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for MediaFrameFormat {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MediaFrameFormat{}
        impl::std::fmt::Debug for MediaFrameFormat {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for MediaFrameFormat {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.MediaFrameFormat";
          
        }unsafe impl::winrt::Interface for MediaFrameFormat {
          type Vtable = IMediaFrameFormat_abi;
          const IID: ::winrt::Guid =  <IMediaFrameFormat as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for MediaFrameFormat {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.MediaFrameFormat;{71902b4e-b279-4a97-a9db-bd5a2fb78f39})");
          
        }impl::std::convert::From<MediaFrameFormat>for::winrt::Object {
          fn from(value:MediaFrameFormat) -> Self {
            value.0
          }
        }impl::std::convert::From<&MediaFrameFormat>for::winrt::Object {
          fn from(value: &MediaFrameFormat) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MediaFrameFormat>for IMediaFrameFormat {
          fn from(value:MediaFrameFormat) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&MediaFrameFormat>for IMediaFrameFormat {
          fn from(value: &MediaFrameFormat) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameFormat>>for MediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameFormat>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameFormat>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameFormat>>for& 'a MediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameFormat>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameFormat>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MediaFrameFormat>for IMediaFrameFormat2 {
          fn from(value:MediaFrameFormat) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&MediaFrameFormat>for IMediaFrameFormat2 {
          fn from(value: &MediaFrameFormat) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameFormat2>>for MediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameFormat2>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameFormat2>::into(self,))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameFormat2>>for& 'a MediaFrameFormat {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameFormat2>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameFormat2>::into(::std::clone::Clone::clone(self),))
          }
        }unsafe impl::std::marker::Send for MediaFrameFormat{}
        unsafe impl::std::marker::Sync for MediaFrameFormat{}
        #[repr(transparent)]pub struct IMediaFrameSource(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameSource {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameSource {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameSource {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameSource{}
        impl IMediaFrameSource {
          pub fn info(&self) ->  ::winrt::Result<MediaFrameSourceInfo>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameSourceInfo as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameSourceInfo>(result__)
            }
          }pub fn controller(&self) ->  ::winrt::Result<MediaFrameSourceController>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameSourceController as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameSourceController>(result__)
            }
          }pub fn supported_formats(&self,) ->  ::winrt::Result<super::super::super::foundation::collections::IVectorView<MediaFrameFormat>, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::collections::IVectorView:: <MediaFrameFormat>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::collections::IVectorView<MediaFrameFormat, >>(result__)
            }
          }pub fn current_format(&self) ->  ::winrt::Result<MediaFrameFormat>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameFormat>(result__)
            }
          }pub fn set_format_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,MediaFrameFormat>>, >(&self,format:T0__,) ->  ::winrt::Result<super::super::super::foundation::IAsyncAction>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),format.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::IAsyncAction>(result__)
            }
          }pub fn format_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::TypedEventHandler<MediaFrameSource, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::super::foundation::EventRegistrationToken>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::EventRegistrationToken>(result__,)
            }
          }pub fn remove_format_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::EventRegistrationToken, >, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),token.into().abi(),).ok()
            }
          }pub fn try_get_camera_intrinsics< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,MediaFrameFormat>>, >(&self,format:T0__,) ->  ::winrt::Result<super::super::devices::core::CameraIntrinsics>{
            let this = self;
            unsafe {
              let mut result__: <super::super::devices::core::CameraIntrinsics as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),format.into().abi(), &mut result__,).from_abi::<super::super::devices::core::CameraIntrinsics>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMediaFrameSource {
          type Vtable = IMediaFrameSource_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3598199123,37083,18088,[138,221,42,168,132,168,210,83],);
          
        }#[repr(C)]pub struct IMediaFrameSource_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,format: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,format: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameSource {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{d6782953-90db-46a8-8add-2aa884a8d253}")
          };
          
        }impl::std::convert::From<IMediaFrameSource>for::winrt::Object {
          fn from(value:IMediaFrameSource) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameSource>for::winrt::Object {
          fn from(value: &IMediaFrameSource) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameSource {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameSource {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct MediaFrameSource(::winrt::Object);
        impl MediaFrameSource {
          pub fn info(&self) ->  ::winrt::Result<MediaFrameSourceInfo>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameSourceInfo as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameSourceInfo>(result__)
            }
          }pub fn controller(&self) ->  ::winrt::Result<MediaFrameSourceController>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameSourceController as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameSourceController>(result__)
            }
          }pub fn supported_formats(&self,) ->  ::winrt::Result<super::super::super::foundation::collections::IVectorView<MediaFrameFormat>, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::collections::IVectorView:: <MediaFrameFormat>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::collections::IVectorView<MediaFrameFormat, >>(result__)
            }
          }pub fn current_format(&self) ->  ::winrt::Result<MediaFrameFormat>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameFormat>(result__)
            }
          }pub fn set_format_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,MediaFrameFormat>>, >(&self,format:T0__,) ->  ::winrt::Result<super::super::super::foundation::IAsyncAction>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),format.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::IAsyncAction>(result__)
            }
          }pub fn format_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::TypedEventHandler<MediaFrameSource, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::super::foundation::EventRegistrationToken>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::EventRegistrationToken>(result__,)
            }
          }pub fn remove_format_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::EventRegistrationToken, >, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),token.into().abi(),).ok()
            }
          }pub fn try_get_camera_intrinsics< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,MediaFrameFormat>>, >(&self,format:T0__,) ->  ::winrt::Result<super::super::devices::core::CameraIntrinsics>{
            let this = self;
            unsafe {
              let mut result__: <super::super::devices::core::CameraIntrinsics as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),format.into().abi(), &mut result__,).from_abi::<super::super::devices::core::CameraIntrinsics>(result__)
            }
          }
        }impl::std::clone::Clone for MediaFrameSource {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for MediaFrameSource {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MediaFrameSource{}
        impl::std::fmt::Debug for MediaFrameSource {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for MediaFrameSource {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.MediaFrameSource";
          
        }unsafe impl::winrt::Interface for MediaFrameSource {
          type Vtable = IMediaFrameSource_abi;
          const IID: ::winrt::Guid =  <IMediaFrameSource as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for MediaFrameSource {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.MediaFrameSource;{d6782953-90db-46a8-8add-2aa884a8d253})");
          
        }impl::std::convert::From<MediaFrameSource>for::winrt::Object {
          fn from(value:MediaFrameSource) -> Self {
            value.0
          }
        }impl::std::convert::From<&MediaFrameSource>for::winrt::Object {
          fn from(value: &MediaFrameSource) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaFrameSource {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaFrameSource {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MediaFrameSource>for IMediaFrameSource {
          fn from(value:MediaFrameSource) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&MediaFrameSource>for IMediaFrameSource {
          fn from(value: &MediaFrameSource) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSource>>for MediaFrameSource {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSource>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSource>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameSource>>for& 'a MediaFrameSource {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameSource>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameSource>::into(::std::clone::Clone::clone(self),))
          }
        }unsafe impl::std::marker::Send for MediaFrameSource{}
        unsafe impl::std::marker::Sync for MediaFrameSource{}
        #[repr(transparent)]pub struct IMediaFrameArrivedEventArgs(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameArrivedEventArgs {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameArrivedEventArgs {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameArrivedEventArgs {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameArrivedEventArgs{}
        impl IMediaFrameArrivedEventArgs{}
        unsafe impl::winrt::Interface for IMediaFrameArrivedEventArgs {
          type Vtable = IMediaFrameArrivedEventArgs_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(188943069,42128,17461,[173,161,154,255,213,82,57,247],);
          
        }#[repr(C)]pub struct IMediaFrameArrivedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameArrivedEventArgs {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{0b430add-a490-4435-ada1-9affd55239f7}")
          };
          
        }impl::std::convert::From<IMediaFrameArrivedEventArgs>for::winrt::Object {
          fn from(value:IMediaFrameArrivedEventArgs) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameArrivedEventArgs>for::winrt::Object {
          fn from(value: &IMediaFrameArrivedEventArgs) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameArrivedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameArrivedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct MediaFrameArrivedEventArgs(::winrt::Object);
        impl MediaFrameArrivedEventArgs{}
        impl::std::clone::Clone for MediaFrameArrivedEventArgs {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for MediaFrameArrivedEventArgs {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MediaFrameArrivedEventArgs{}
        impl::std::fmt::Debug for MediaFrameArrivedEventArgs {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for MediaFrameArrivedEventArgs {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.MediaFrameArrivedEventArgs";
          
        }unsafe impl::winrt::Interface for MediaFrameArrivedEventArgs {
          type Vtable = IMediaFrameArrivedEventArgs_abi;
          const IID: ::winrt::Guid =  <IMediaFrameArrivedEventArgs as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for MediaFrameArrivedEventArgs {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.MediaFrameArrivedEventArgs;{0b430add-a490-4435-ada1-9affd55239f7})");
          
        }impl::std::convert::From<MediaFrameArrivedEventArgs>for::winrt::Object {
          fn from(value:MediaFrameArrivedEventArgs) -> Self {
            value.0
          }
        }impl::std::convert::From<&MediaFrameArrivedEventArgs>for::winrt::Object {
          fn from(value: &MediaFrameArrivedEventArgs) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaFrameArrivedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaFrameArrivedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MediaFrameArrivedEventArgs>for IMediaFrameArrivedEventArgs {
          fn from(value:MediaFrameArrivedEventArgs) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&MediaFrameArrivedEventArgs>for IMediaFrameArrivedEventArgs {
          fn from(value: &MediaFrameArrivedEventArgs) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameArrivedEventArgs>>for MediaFrameArrivedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameArrivedEventArgs>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameArrivedEventArgs>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameArrivedEventArgs>>for& 'a MediaFrameArrivedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameArrivedEventArgs>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameArrivedEventArgs>::into(::std::clone::Clone::clone(self),),)
          }
        }unsafe impl::std::marker::Send for MediaFrameArrivedEventArgs{}
        unsafe impl::std::marker::Sync for MediaFrameArrivedEventArgs{}
        #[repr(transparent)]pub struct IBufferMediaFrame(::winrt::Object);
        impl::std::clone::Clone for IBufferMediaFrame {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IBufferMediaFrame {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IBufferMediaFrame {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IBufferMediaFrame{}
        impl IBufferMediaFrame {
          pub fn frame_reference(&self) ->  ::winrt::Result<MediaFrameReference>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameReference as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameReference>(result__)
            }
          }pub fn buffer(&self,) ->  ::winrt::Result<super::super::super::storage::streams::IBuffer>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::storage::streams::IBuffer as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::storage::streams::IBuffer>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IBufferMediaFrame {
          type Vtable = IBufferMediaFrame_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3048297415,39812,16482,[183,156,163,101,178,89,104,84],);
          
        }#[repr(C)]pub struct IBufferMediaFrame_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IBufferMediaFrame {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{b5b153c7-9b84-4062-b79c-a365b2596854}")
          };
          
        }impl::std::convert::From<IBufferMediaFrame>for::winrt::Object {
          fn from(value:IBufferMediaFrame) -> Self {
            value.0
          }
        }impl::std::convert::From<&IBufferMediaFrame>for::winrt::Object {
          fn from(value: &IBufferMediaFrame) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IBufferMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IBufferMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct BufferMediaFrame(::winrt::Object);
        impl BufferMediaFrame {
          pub fn frame_reference(&self) ->  ::winrt::Result<MediaFrameReference>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameReference as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameReference>(result__)
            }
          }pub fn buffer(&self,) ->  ::winrt::Result<super::super::super::storage::streams::IBuffer>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::storage::streams::IBuffer as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::storage::streams::IBuffer>(result__)
            }
          }
        }impl::std::clone::Clone for BufferMediaFrame {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for BufferMediaFrame {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for BufferMediaFrame{}
        impl::std::fmt::Debug for BufferMediaFrame {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for BufferMediaFrame {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.BufferMediaFrame";
          
        }unsafe impl::winrt::Interface for BufferMediaFrame {
          type Vtable = IBufferMediaFrame_abi;
          const IID: ::winrt::Guid =  <IBufferMediaFrame as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for BufferMediaFrame {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.BufferMediaFrame;{b5b153c7-9b84-4062-b79c-a365b2596854})");
          
        }impl::std::convert::From<BufferMediaFrame>for::winrt::Object {
          fn from(value:BufferMediaFrame) -> Self {
            value.0
          }
        }impl::std::convert::From<&BufferMediaFrame>for::winrt::Object {
          fn from(value: &BufferMediaFrame) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for BufferMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a BufferMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<BufferMediaFrame>for IBufferMediaFrame {
          fn from(value:BufferMediaFrame) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&BufferMediaFrame>for IBufferMediaFrame {
          fn from(value: &BufferMediaFrame) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IBufferMediaFrame>>for BufferMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a ,IBufferMediaFrame>{
            ::winrt::Param::Owned(::std::convert::Into::<IBufferMediaFrame>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IBufferMediaFrame>>for& 'a BufferMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a ,IBufferMediaFrame>{
            ::winrt::Param::Owned(::std::convert::Into::<IBufferMediaFrame>::into(::std::clone::Clone::clone(self),))
          }
        }unsafe impl::std::marker::Send for BufferMediaFrame{}
        unsafe impl::std::marker::Sync for BufferMediaFrame{}
        #[repr(transparent)]pub struct IInfraredMediaFrame(::winrt::Object);
        impl::std::clone::Clone for IInfraredMediaFrame {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IInfraredMediaFrame {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IInfraredMediaFrame {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IInfraredMediaFrame{}
        impl IInfraredMediaFrame {
          pub fn frame_reference(&self) ->  ::winrt::Result<MediaFrameReference>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameReference as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameReference>(result__)
            }
          }pub fn video_media_frame(&self) ->  ::winrt::Result<VideoMediaFrame>{
            let this = self;
            unsafe {
              let mut result__: <VideoMediaFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoMediaFrame>(result__)
            }
          }pub fn is_illuminated(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IInfraredMediaFrame {
          type Vtable = IInfraredMediaFrame_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1070675203,75,20238,[145,172,70,82,153,180,22,88],);
          
        }#[repr(C)]pub struct IInfraredMediaFrame_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IInfraredMediaFrame {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{3fd13503-004b-4f0e-91ac-465299b41658}")
          };
          
        }impl::std::convert::From<IInfraredMediaFrame>for::winrt::Object {
          fn from(value:IInfraredMediaFrame) -> Self {
            value.0
          }
        }impl::std::convert::From<&IInfraredMediaFrame>for::winrt::Object {
          fn from(value: &IInfraredMediaFrame) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IInfraredMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IInfraredMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct InfraredMediaFrame(::winrt::Object);
        impl InfraredMediaFrame {
          pub fn frame_reference(&self) ->  ::winrt::Result<MediaFrameReference>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameReference as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameReference>(result__)
            }
          }pub fn video_media_frame(&self) ->  ::winrt::Result<VideoMediaFrame>{
            let this = self;
            unsafe {
              let mut result__: <VideoMediaFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoMediaFrame>(result__)
            }
          }pub fn is_illuminated(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }
        }impl::std::clone::Clone for InfraredMediaFrame {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for InfraredMediaFrame {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for InfraredMediaFrame{}
        impl::std::fmt::Debug for InfraredMediaFrame {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for InfraredMediaFrame {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.InfraredMediaFrame";
          
        }unsafe impl::winrt::Interface for InfraredMediaFrame {
          type Vtable = IInfraredMediaFrame_abi;
          const IID: ::winrt::Guid =  <IInfraredMediaFrame as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for InfraredMediaFrame {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.InfraredMediaFrame;{3fd13503-004b-4f0e-91ac-465299b41658})");
          
        }impl::std::convert::From<InfraredMediaFrame>for::winrt::Object {
          fn from(value:InfraredMediaFrame) -> Self {
            value.0
          }
        }impl::std::convert::From<&InfraredMediaFrame>for::winrt::Object {
          fn from(value: &InfraredMediaFrame) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for InfraredMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a InfraredMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<InfraredMediaFrame>for IInfraredMediaFrame {
          fn from(value:InfraredMediaFrame) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&InfraredMediaFrame>for IInfraredMediaFrame {
          fn from(value: &InfraredMediaFrame) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IInfraredMediaFrame>>for InfraredMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a ,IInfraredMediaFrame>{
            ::winrt::Param::Owned(::std::convert::Into::<IInfraredMediaFrame>::into(self,))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IInfraredMediaFrame>>for& 'a InfraredMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a ,IInfraredMediaFrame>{
            ::winrt::Param::Owned(::std::convert::Into::<IInfraredMediaFrame>::into(::std::clone::Clone::clone(self),))
          }
        }unsafe impl::std::marker::Send for InfraredMediaFrame{}
        unsafe impl::std::marker::Sync for InfraredMediaFrame{}
        #[repr(transparent)]pub struct IDepthMediaFrame(::winrt::Object);
        impl::std::clone::Clone for IDepthMediaFrame {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IDepthMediaFrame {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IDepthMediaFrame {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IDepthMediaFrame{}
        impl IDepthMediaFrame {
          pub fn frame_reference(&self) ->  ::winrt::Result<MediaFrameReference>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameReference as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameReference>(result__)
            }
          }pub fn video_media_frame(&self) ->  ::winrt::Result<VideoMediaFrame>{
            let this = self;
            unsafe {
              let mut result__: <VideoMediaFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoMediaFrame>(result__)
            }
          }pub fn depth_format(&self) ->  ::winrt::Result<DepthMediaFrameFormat>{
            let this = self;
            unsafe {
              let mut result__: <DepthMediaFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<DepthMediaFrameFormat>(result__)
            }
          }pub fn try_create_coordinate_mapper< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::devices::core::CameraIntrinsics>, >,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::perception::spatial::SpatialCoordinateSystem, >, >, >(&self,camera_intrinsics:T0__,coordinate_system:T1__,) ->  ::winrt::Result<super::super::devices::core::DepthCorrelatedCoordinateMapper>{
            let this = self;
            unsafe {
              let mut result__: <super::super::devices::core::DepthCorrelatedCoordinateMapper as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),camera_intrinsics.into().abi(),coordinate_system.into().abi(), &mut result__).from_abi:: <super::super::devices::core::DepthCorrelatedCoordinateMapper>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IDepthMediaFrame {
          type Vtable = IDepthMediaFrame_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1192451663,34121,17856,[146,91,128,211,94,253,177,10],);
          
        }#[repr(C)]pub struct IDepthMediaFrame_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,camera_intrinsics: ::winrt::RawPtr,coordinate_system: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IDepthMediaFrame {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{47135e4f-8549-45c0-925b-80d35efdb10a}")
          };
          
        }impl::std::convert::From<IDepthMediaFrame>for::winrt::Object {
          fn from(value:IDepthMediaFrame) -> Self {
            value.0
          }
        }impl::std::convert::From<&IDepthMediaFrame>for::winrt::Object {
          fn from(value: &IDepthMediaFrame) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDepthMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDepthMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct IDepthMediaFrame2(::winrt::Object);
        impl::std::clone::Clone for IDepthMediaFrame2 {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IDepthMediaFrame2 {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IDepthMediaFrame2 {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IDepthMediaFrame2{}
        impl IDepthMediaFrame2 {
          pub fn max_reliable_depth(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }pub fn min_reliable_depth(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IDepthMediaFrame2 {
          type Vtable = IDepthMediaFrame2_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1825195837,50340,16758,[176,205,51,234,227,179,90,163],);
          
        }#[repr(C)]pub struct IDepthMediaFrame2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IDepthMediaFrame2 {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{6cca473d-c4a4-4176-b0cd-33eae3b35aa3}")
          };
          
        }impl::std::convert::From<IDepthMediaFrame2>for::winrt::Object {
          fn from(value:IDepthMediaFrame2) -> Self {
            value.0
          }
        }impl::std::convert::From<&IDepthMediaFrame2>for::winrt::Object {
          fn from(value: &IDepthMediaFrame2) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDepthMediaFrame2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDepthMediaFrame2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct DepthMediaFrame(::winrt::Object);
        impl DepthMediaFrame {
          pub fn frame_reference(&self) ->  ::winrt::Result<MediaFrameReference>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameReference as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameReference>(result__)
            }
          }pub fn video_media_frame(&self) ->  ::winrt::Result<VideoMediaFrame>{
            let this = self;
            unsafe {
              let mut result__: <VideoMediaFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoMediaFrame>(result__)
            }
          }pub fn depth_format(&self) ->  ::winrt::Result<DepthMediaFrameFormat>{
            let this = self;
            unsafe {
              let mut result__: <DepthMediaFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<DepthMediaFrameFormat>(result__)
            }
          }pub fn try_create_coordinate_mapper< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::devices::core::CameraIntrinsics>, >,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::perception::spatial::SpatialCoordinateSystem, >, >, >(&self,camera_intrinsics:T0__,coordinate_system:T1__,) ->  ::winrt::Result<super::super::devices::core::DepthCorrelatedCoordinateMapper>{
            let this = self;
            unsafe {
              let mut result__: <super::super::devices::core::DepthCorrelatedCoordinateMapper as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),camera_intrinsics.into().abi(),coordinate_system.into().abi(), &mut result__).from_abi:: <super::super::devices::core::DepthCorrelatedCoordinateMapper>(result__)
            }
          }pub fn max_reliable_depth(&self) ->  ::winrt::Result<u32>{
            let this =  &::winrt::Interface::cast::<IDepthMediaFrame2>(self).unwrap();
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }pub fn min_reliable_depth(&self) ->  ::winrt::Result<u32>{
            let this =  &::winrt::Interface::cast::<IDepthMediaFrame2>(self).unwrap();
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }
        }impl::std::clone::Clone for DepthMediaFrame {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for DepthMediaFrame {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for DepthMediaFrame{}
        impl::std::fmt::Debug for DepthMediaFrame {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for DepthMediaFrame {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.DepthMediaFrame";
          
        }unsafe impl::winrt::Interface for DepthMediaFrame {
          type Vtable = IDepthMediaFrame_abi;
          const IID: ::winrt::Guid =  <IDepthMediaFrame as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for DepthMediaFrame {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.DepthMediaFrame;{47135e4f-8549-45c0-925b-80d35efdb10a})");
          
        }impl::std::convert::From<DepthMediaFrame>for::winrt::Object {
          fn from(value:DepthMediaFrame) -> Self {
            value.0
          }
        }impl::std::convert::From<&DepthMediaFrame>for::winrt::Object {
          fn from(value: &DepthMediaFrame) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DepthMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DepthMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<DepthMediaFrame>for IDepthMediaFrame {
          fn from(value:DepthMediaFrame) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&DepthMediaFrame>for IDepthMediaFrame {
          fn from(value: &DepthMediaFrame) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDepthMediaFrame>>for DepthMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a ,IDepthMediaFrame>{
            ::winrt::Param::Owned(::std::convert::Into::<IDepthMediaFrame>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDepthMediaFrame>>for& 'a DepthMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a ,IDepthMediaFrame>{
            ::winrt::Param::Owned(::std::convert::Into::<IDepthMediaFrame>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<DepthMediaFrame>for IDepthMediaFrame2 {
          fn from(value:DepthMediaFrame) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&DepthMediaFrame>for IDepthMediaFrame2 {
          fn from(value: &DepthMediaFrame) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDepthMediaFrame2>>for DepthMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a ,IDepthMediaFrame2>{
            ::winrt::Param::Owned(::std::convert::Into::<IDepthMediaFrame2>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDepthMediaFrame2>>for& 'a DepthMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a ,IDepthMediaFrame2>{
            ::winrt::Param::Owned(::std::convert::Into::<IDepthMediaFrame2>::into(::std::clone::Clone::clone(self),))
          }
        }unsafe impl::std::marker::Send for DepthMediaFrame{}
        unsafe impl::std::marker::Sync for DepthMediaFrame{}
        #[repr(transparent)]pub struct IVideoMediaFrame(::winrt::Object);
        impl::std::clone::Clone for IVideoMediaFrame {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IVideoMediaFrame {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IVideoMediaFrame {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IVideoMediaFrame{}
        impl IVideoMediaFrame {
          pub fn frame_reference(&self) ->  ::winrt::Result<MediaFrameReference>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameReference as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameReference>(result__)
            }
          }pub fn video_format(&self) ->  ::winrt::Result<VideoMediaFrameFormat>{
            let this = self;
            unsafe {
              let mut result__: <VideoMediaFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoMediaFrameFormat>(result__)
            }
          }pub fn software_bitmap(&self,) ->  ::winrt::Result<super::super::super::graphics::imaging::SoftwareBitmap>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::graphics::imaging::SoftwareBitmap as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::graphics::imaging::SoftwareBitmap>(result__,)
            }
          }pub fn direct3d_surface(&self,) ->  ::winrt::Result<super::super::super::graphics::directx::direct3d11::IDirect3DSurface, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::graphics::directx::direct3d11::IDirect3DSurface as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::super::graphics::directx::direct3d11::IDirect3DSurface>(result__)
            }
          }pub fn camera_intrinsics(&self,) ->  ::winrt::Result<super::super::devices::core::CameraIntrinsics>{
            let this = self;
            unsafe {
              let mut result__: <super::super::devices::core::CameraIntrinsics as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::devices::core::CameraIntrinsics>(result__)
            }
          }pub fn infrared_media_frame(&self) ->  ::winrt::Result<InfraredMediaFrame>{
            let this = self;
            unsafe {
              let mut result__: <InfraredMediaFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<InfraredMediaFrame>(result__)
            }
          }pub fn depth_media_frame(&self) ->  ::winrt::Result<DepthMediaFrame>{
            let this = self;
            unsafe {
              let mut result__: <DepthMediaFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<DepthMediaFrame>(result__)
            }
          }pub fn get_video_frame(&self) ->  ::winrt::Result<super::super::VideoFrame>{
            let this = self;
            unsafe {
              let mut result__: <super::super::VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::VideoFrame>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IVideoMediaFrame {
          type Vtable = IVideoMediaFrame_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(14503115,12989,20449,[160,19,124,193,60,245,219,207],);
          
        }#[repr(C)]pub struct IVideoMediaFrame_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IVideoMediaFrame {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{00dd4ccb-32bd-4fe1-a013-7cc13cf5dbcf}")
          };
          
        }impl::std::convert::From<IVideoMediaFrame>for::winrt::Object {
          fn from(value:IVideoMediaFrame) -> Self {
            value.0
          }
        }impl::std::convert::From<&IVideoMediaFrame>for::winrt::Object {
          fn from(value: &IVideoMediaFrame) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct VideoMediaFrame(::winrt::Object);
        impl VideoMediaFrame {
          pub fn frame_reference(&self) ->  ::winrt::Result<MediaFrameReference>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameReference as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameReference>(result__)
            }
          }pub fn video_format(&self) ->  ::winrt::Result<VideoMediaFrameFormat>{
            let this = self;
            unsafe {
              let mut result__: <VideoMediaFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoMediaFrameFormat>(result__)
            }
          }pub fn software_bitmap(&self,) ->  ::winrt::Result<super::super::super::graphics::imaging::SoftwareBitmap>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::graphics::imaging::SoftwareBitmap as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::graphics::imaging::SoftwareBitmap>(result__,)
            }
          }pub fn direct3d_surface(&self,) ->  ::winrt::Result<super::super::super::graphics::directx::direct3d11::IDirect3DSurface, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::graphics::directx::direct3d11::IDirect3DSurface as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::super::graphics::directx::direct3d11::IDirect3DSurface>(result__)
            }
          }pub fn camera_intrinsics(&self,) ->  ::winrt::Result<super::super::devices::core::CameraIntrinsics>{
            let this = self;
            unsafe {
              let mut result__: <super::super::devices::core::CameraIntrinsics as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::devices::core::CameraIntrinsics>(result__)
            }
          }pub fn infrared_media_frame(&self) ->  ::winrt::Result<InfraredMediaFrame>{
            let this = self;
            unsafe {
              let mut result__: <InfraredMediaFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<InfraredMediaFrame>(result__)
            }
          }pub fn depth_media_frame(&self) ->  ::winrt::Result<DepthMediaFrame>{
            let this = self;
            unsafe {
              let mut result__: <DepthMediaFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<DepthMediaFrame>(result__)
            }
          }pub fn get_video_frame(&self) ->  ::winrt::Result<super::super::VideoFrame>{
            let this = self;
            unsafe {
              let mut result__: <super::super::VideoFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::VideoFrame>(result__)
            }
          }
        }impl::std::clone::Clone for VideoMediaFrame {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for VideoMediaFrame {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for VideoMediaFrame{}
        impl::std::fmt::Debug for VideoMediaFrame {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for VideoMediaFrame {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.VideoMediaFrame";
          
        }unsafe impl::winrt::Interface for VideoMediaFrame {
          type Vtable = IVideoMediaFrame_abi;
          const IID: ::winrt::Guid =  <IVideoMediaFrame as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for VideoMediaFrame {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.VideoMediaFrame;{00dd4ccb-32bd-4fe1-a013-7cc13cf5dbcf})");
          
        }impl::std::convert::From<VideoMediaFrame>for::winrt::Object {
          fn from(value:VideoMediaFrame) -> Self {
            value.0
          }
        }impl::std::convert::From<&VideoMediaFrame>for::winrt::Object {
          fn from(value: &VideoMediaFrame) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for VideoMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a VideoMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<VideoMediaFrame>for IVideoMediaFrame {
          fn from(value:VideoMediaFrame) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&VideoMediaFrame>for IVideoMediaFrame {
          fn from(value: &VideoMediaFrame) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoMediaFrame>>for VideoMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a ,IVideoMediaFrame>{
            ::winrt::Param::Owned(::std::convert::Into::<IVideoMediaFrame>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoMediaFrame>>for& 'a VideoMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a ,IVideoMediaFrame>{
            ::winrt::Param::Owned(::std::convert::Into::<IVideoMediaFrame>::into(::std::clone::Clone::clone(self),))
          }
        }unsafe impl::std::marker::Send for VideoMediaFrame{}
        unsafe impl::std::marker::Sync for VideoMediaFrame{}
        #[repr(transparent)]pub struct IMediaFrameReference(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameReference {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameReference {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameReference {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameReference{}
        impl IMediaFrameReference {
          pub fn close(&self) ->  ::winrt::Result<()>{
            let this =  &::winrt::Interface::cast::<super::super::super::foundation::IClosable, >(self).unwrap();
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
            }
          }pub fn source_kind(&self) ->  ::winrt::Result<MediaFrameSourceKind>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameSourceKind as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameSourceKind>(result__)
            }
          }pub fn format(&self) ->  ::winrt::Result<MediaFrameFormat>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameFormat>(result__)
            }
          }pub fn system_relative_time(&self,) ->  ::winrt::Result<super::super::super::foundation::IReference<super::super::super::foundation::TimeSpan, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IReference<super::super::super::foundation::TimeSpan, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IReference<super::super::super::foundation::TimeSpan, >>(result__)
            }
          }pub fn duration(&self,) ->  ::winrt::Result<super::super::super::foundation::TimeSpan>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::TimeSpan>(result__)
            }
          }pub fn properties(&self,) ->  ::winrt::Result<super::super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::collections::IMapView:: < ::winrt::Guid, ::winrt::Object>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >>(result__)
            }
          }pub fn buffer_media_frame(&self) ->  ::winrt::Result<BufferMediaFrame>{
            let this = self;
            unsafe {
              let mut result__: <BufferMediaFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<BufferMediaFrame>(result__)
            }
          }pub fn video_media_frame(&self) ->  ::winrt::Result<VideoMediaFrame>{
            let this = self;
            unsafe {
              let mut result__: <VideoMediaFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoMediaFrame>(result__)
            }
          }pub fn coordinate_system(&self,) ->  ::winrt::Result<super::super::super::perception::spatial::SpatialCoordinateSystem, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::perception::spatial::SpatialCoordinateSystem as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::super::perception::spatial::SpatialCoordinateSystem>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMediaFrameReference {
          type Vtable = IMediaFrameReference_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4139288129,61660,16452,[141,201,150,28,237,208,91,173],);
          
        }#[repr(C)]pub struct IMediaFrameReference_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut MediaFrameSourceKind,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameReference {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{f6b88641-f0dc-4044-8dc9-961cedd05bad}")
          };
          
        }impl::std::convert::From<IMediaFrameReference>for::winrt::Object {
          fn from(value:IMediaFrameReference) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameReference>for::winrt::Object {
          fn from(value: &IMediaFrameReference) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameReference {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameReference {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<IMediaFrameReference>for super::super::super::foundation::IClosable {
          fn from(value:IMediaFrameReference) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&IMediaFrameReference>for super::super::super::foundation::IClosable {
          fn from(value: &IMediaFrameReference) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for IMediaFrameReference {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(self))
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for& 'a IMediaFrameReference {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(::std::clone::Clone::clone(self)))
          }
        }#[repr(transparent)]pub struct IAudioMediaFrame(::winrt::Object);
        impl::std::clone::Clone for IAudioMediaFrame {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IAudioMediaFrame {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IAudioMediaFrame {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IAudioMediaFrame{}
        impl IAudioMediaFrame {
          pub fn frame_reference(&self) ->  ::winrt::Result<MediaFrameReference>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameReference as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameReference>(result__)
            }
          }pub fn audio_encoding_properties(&self,) ->  ::winrt::Result<super::super::media_properties::AudioEncodingProperties>{
            let this = self;
            unsafe {
              let mut result__: <super::super::media_properties::AudioEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::media_properties::AudioEncodingProperties>(result__,)
            }
          }pub fn get_audio_frame(&self) ->  ::winrt::Result<super::super::AudioFrame>{
            let this = self;
            unsafe {
              let mut result__: <super::super::AudioFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::AudioFrame>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IAudioMediaFrame {
          type Vtable = IAudioMediaFrame_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2745827071,32801,17435,[154,70,231,240,19,123,121,129],);
          
        }#[repr(C)]pub struct IAudioMediaFrame_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IAudioMediaFrame {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{a3a9feff-8021-441b-9a46-e7f0137b7981}")
          };
          
        }impl::std::convert::From<IAudioMediaFrame>for::winrt::Object {
          fn from(value:IAudioMediaFrame) -> Self {
            value.0
          }
        }impl::std::convert::From<&IAudioMediaFrame>for::winrt::Object {
          fn from(value: &IAudioMediaFrame) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAudioMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAudioMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct AudioMediaFrame(::winrt::Object);
        impl AudioMediaFrame {
          pub fn frame_reference(&self) ->  ::winrt::Result<MediaFrameReference>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameReference as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameReference>(result__)
            }
          }pub fn audio_encoding_properties(&self,) ->  ::winrt::Result<super::super::media_properties::AudioEncodingProperties>{
            let this = self;
            unsafe {
              let mut result__: <super::super::media_properties::AudioEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::media_properties::AudioEncodingProperties>(result__,)
            }
          }pub fn get_audio_frame(&self) ->  ::winrt::Result<super::super::AudioFrame>{
            let this = self;
            unsafe {
              let mut result__: <super::super::AudioFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::AudioFrame>(result__)
            }
          }
        }impl::std::clone::Clone for AudioMediaFrame {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for AudioMediaFrame {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for AudioMediaFrame{}
        impl::std::fmt::Debug for AudioMediaFrame {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for AudioMediaFrame {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.AudioMediaFrame";
          
        }unsafe impl::winrt::Interface for AudioMediaFrame {
          type Vtable = IAudioMediaFrame_abi;
          const IID: ::winrt::Guid =  <IAudioMediaFrame as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for AudioMediaFrame {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.AudioMediaFrame;{a3a9feff-8021-441b-9a46-e7f0137b7981})");
          
        }impl::std::convert::From<AudioMediaFrame>for::winrt::Object {
          fn from(value:AudioMediaFrame) -> Self {
            value.0
          }
        }impl::std::convert::From<&AudioMediaFrame>for::winrt::Object {
          fn from(value: &AudioMediaFrame) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AudioMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AudioMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<AudioMediaFrame>for IAudioMediaFrame {
          fn from(value:AudioMediaFrame) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&AudioMediaFrame>for IAudioMediaFrame {
          fn from(value: &AudioMediaFrame) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioMediaFrame>>for AudioMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a ,IAudioMediaFrame>{
            ::winrt::Param::Owned(::std::convert::Into::<IAudioMediaFrame>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioMediaFrame>>for& 'a AudioMediaFrame {
          fn into(self) ->  ::winrt::Param< 'a ,IAudioMediaFrame>{
            ::winrt::Param::Owned(::std::convert::Into::<IAudioMediaFrame>::into(::std::clone::Clone::clone(self),))
          }
        }unsafe impl::std::marker::Send for AudioMediaFrame{}
        unsafe impl::std::marker::Sync for AudioMediaFrame{}
        #[repr(transparent)]pub struct IMediaFrameReference2(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameReference2 {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameReference2 {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameReference2 {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameReference2{}
        impl IMediaFrameReference2 {
          pub fn audio_media_frame(&self) ->  ::winrt::Result<AudioMediaFrame>{
            let this = self;
            unsafe {
              let mut result__: <AudioMediaFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AudioMediaFrame>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMediaFrameReference2 {
          type Vtable = IMediaFrameReference2_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3720101580,54706,18927,[131,106,148,125,152,155,128,193],);
          
        }#[repr(C)]pub struct IMediaFrameReference2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameReference2 {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{ddbc3ecc-d5b2-49ef-836a-947d989b80c1}")
          };
          
        }impl::std::convert::From<IMediaFrameReference2>for::winrt::Object {
          fn from(value:IMediaFrameReference2) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameReference2>for::winrt::Object {
          fn from(value: &IMediaFrameReference2) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameReference2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameReference2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct MediaFrameReference(::winrt::Object);
        impl MediaFrameReference {
          pub fn close(&self) ->  ::winrt::Result<()>{
            let this =  &::winrt::Interface::cast::<super::super::super::foundation::IClosable, >(self).unwrap();
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
            }
          }pub fn source_kind(&self) ->  ::winrt::Result<MediaFrameSourceKind>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameSourceKind as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameSourceKind>(result__)
            }
          }pub fn format(&self) ->  ::winrt::Result<MediaFrameFormat>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameFormat>(result__)
            }
          }pub fn system_relative_time(&self,) ->  ::winrt::Result<super::super::super::foundation::IReference<super::super::super::foundation::TimeSpan, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IReference<super::super::super::foundation::TimeSpan, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IReference<super::super::super::foundation::TimeSpan, >>(result__)
            }
          }pub fn duration(&self,) ->  ::winrt::Result<super::super::super::foundation::TimeSpan>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::TimeSpan>(result__)
            }
          }pub fn properties(&self,) ->  ::winrt::Result<super::super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::collections::IMapView:: < ::winrt::Guid, ::winrt::Object>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >>(result__)
            }
          }pub fn buffer_media_frame(&self) ->  ::winrt::Result<BufferMediaFrame>{
            let this = self;
            unsafe {
              let mut result__: <BufferMediaFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<BufferMediaFrame>(result__)
            }
          }pub fn video_media_frame(&self) ->  ::winrt::Result<VideoMediaFrame>{
            let this = self;
            unsafe {
              let mut result__: <VideoMediaFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoMediaFrame>(result__)
            }
          }pub fn coordinate_system(&self,) ->  ::winrt::Result<super::super::super::perception::spatial::SpatialCoordinateSystem, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::perception::spatial::SpatialCoordinateSystem as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::super::perception::spatial::SpatialCoordinateSystem>(result__)
            }
          }pub fn audio_media_frame(&self) ->  ::winrt::Result<AudioMediaFrame>{
            let this =  &::winrt::Interface::cast::<IMediaFrameReference2>(self).unwrap();
            unsafe {
              let mut result__: <AudioMediaFrame as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AudioMediaFrame>(result__)
            }
          }
        }impl::std::clone::Clone for MediaFrameReference {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for MediaFrameReference {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MediaFrameReference{}
        impl::std::fmt::Debug for MediaFrameReference {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for MediaFrameReference {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.MediaFrameReference";
          
        }unsafe impl::winrt::Interface for MediaFrameReference {
          type Vtable = IMediaFrameReference_abi;
          const IID: ::winrt::Guid =  <IMediaFrameReference as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for MediaFrameReference {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.MediaFrameReference;{f6b88641-f0dc-4044-8dc9-961cedd05bad})");
          
        }impl::std::convert::From<MediaFrameReference>for::winrt::Object {
          fn from(value:MediaFrameReference) -> Self {
            value.0
          }
        }impl::std::convert::From<&MediaFrameReference>for::winrt::Object {
          fn from(value: &MediaFrameReference) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaFrameReference {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaFrameReference {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MediaFrameReference>for super::super::super::foundation::IClosable {
          fn from(value:MediaFrameReference) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&MediaFrameReference>for super::super::super::foundation::IClosable {
          fn from(value: &MediaFrameReference) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for MediaFrameReference {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(self))
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for& 'a MediaFrameReference {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(::std::clone::Clone::clone(self)))
          }
        }impl::std::convert::From<MediaFrameReference>for IMediaFrameReference {
          fn from(value:MediaFrameReference) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&MediaFrameReference>for IMediaFrameReference {
          fn from(value: &MediaFrameReference) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameReference>>for MediaFrameReference {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameReference>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameReference>::into(self,))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameReference>>for& 'a MediaFrameReference {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameReference>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameReference>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MediaFrameReference>for IMediaFrameReference2 {
          fn from(value:MediaFrameReference) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&MediaFrameReference>for IMediaFrameReference2 {
          fn from(value: &MediaFrameReference) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameReference2>>for MediaFrameReference {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameReference2>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameReference2>::into(self,))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameReference2>>for& 'a MediaFrameReference {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameReference2>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameReference2>::into(::std::clone::Clone::clone(self),))
          }
        }unsafe impl::std::marker::Send for MediaFrameReference{}
        unsafe impl::std::marker::Sync for MediaFrameReference{}
        #[allow(non_camel_case_types)]#[repr(transparent)]pub struct MediaFrameReaderStartStatus(i32);
        impl::std::convert::From<i32>for MediaFrameReaderStartStatus {
          fn from(value:i32) -> Self {
            Self(value)
          }
        }impl::std::clone::Clone for MediaFrameReaderStartStatus {
          fn clone(&self) -> Self {
            Self(self.0)
          }
        }impl::std::default::Default for MediaFrameReaderStartStatus {
          fn default() -> Self {
            Self(0)
          }
        }impl::std::fmt::Debug for MediaFrameReaderStartStatus {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for MediaFrameReaderStartStatus {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MediaFrameReaderStartStatus{}
        impl::std::marker::Copy for MediaFrameReaderStartStatus{}
        impl MediaFrameReaderStartStatus {
          #![allow(non_upper_case_globals)]pub const Success:Self = Self(0i32);
          pub const UnknownFailure:Self = Self(1i32);
          pub const DeviceNotAvailable:Self = Self(2i32);
          pub const OutputFormatNotSupported:Self = Self(3i32);
          pub const ExclusiveControlNotAvailable:Self = Self(4i32);
          
        }unsafe impl::winrt::Abi for MediaFrameReaderStartStatus {
          type Abi = Self;
          
        }unsafe impl::winrt::RuntimeType for MediaFrameReaderStartStatus {
          type DefaultType = Self;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.Frames.MediaFrameReaderStartStatus;i4)",);
          
        }#[repr(transparent)]pub struct IMediaFrameReader(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameReader {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameReader {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameReader {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameReader{}
        impl IMediaFrameReader {
          pub fn close(&self) ->  ::winrt::Result<()>{
            let this =  &::winrt::Interface::cast::<super::super::super::foundation::IClosable, >(self).unwrap();
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
            }
          }pub fn frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::TypedEventHandler<MediaFrameReader,MediaFrameArrivedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::super::foundation::EventRegistrationToken>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::EventRegistrationToken>(result__,)
            }
          }pub fn remove_frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::EventRegistrationToken, >, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),token.into().abi(),).ok()
            }
          }pub fn try_acquire_latest_frame(&self) ->  ::winrt::Result<MediaFrameReference>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameReference as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameReference>(result__)
            }
          }pub fn start_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncOperation<MediaFrameReaderStartStatus, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncOperation<MediaFrameReaderStartStatus, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncOperation<MediaFrameReaderStartStatus, >>(result__)
            }
          }pub fn stop_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncAction>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncAction>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMediaFrameReader {
          type Vtable = IMediaFrameReader_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3838395285,8232,18669,[144,176,209,193,177,98,226,76],);
          
        }#[repr(C)]pub struct IMediaFrameReader_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameReader {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{e4c94395-2028-48ed-90b0-d1c1b162e24c}")
          };
          
        }impl::std::convert::From<IMediaFrameReader>for::winrt::Object {
          fn from(value:IMediaFrameReader) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameReader>for::winrt::Object {
          fn from(value: &IMediaFrameReader) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameReader {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameReader {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<IMediaFrameReader>for super::super::super::foundation::IClosable {
          fn from(value:IMediaFrameReader) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&IMediaFrameReader>for super::super::super::foundation::IClosable {
          fn from(value: &IMediaFrameReader) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for IMediaFrameReader {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(self))
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for& 'a IMediaFrameReader {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(::std::clone::Clone::clone(self)))
          }
        }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct MediaFrameReaderAcquisitionMode(i32);
        impl::std::convert::From<i32>for MediaFrameReaderAcquisitionMode {
          fn from(value:i32) -> Self {
            Self(value)
          }
        }impl::std::clone::Clone for MediaFrameReaderAcquisitionMode {
          fn clone(&self) -> Self {
            Self(self.0)
          }
        }impl::std::default::Default for MediaFrameReaderAcquisitionMode {
          fn default() -> Self {
            Self(0)
          }
        }impl::std::fmt::Debug for MediaFrameReaderAcquisitionMode {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for MediaFrameReaderAcquisitionMode {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MediaFrameReaderAcquisitionMode{}
        impl::std::marker::Copy for MediaFrameReaderAcquisitionMode{}
        impl MediaFrameReaderAcquisitionMode {
          #![allow(non_upper_case_globals)]pub const Realtime:Self = Self(0i32);
          pub const Buffered:Self = Self(1i32);
          
        }unsafe impl::winrt::Abi for MediaFrameReaderAcquisitionMode {
          type Abi = Self;
          
        }unsafe impl::winrt::RuntimeType for MediaFrameReaderAcquisitionMode {
          type DefaultType = Self;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.Frames.MediaFrameReaderAcquisitionMode;i4)",);
          
        }#[repr(transparent)]pub struct IMediaFrameReader2(::winrt::Object);
        impl::std::clone::Clone for IMediaFrameReader2 {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMediaFrameReader2 {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMediaFrameReader2 {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMediaFrameReader2{}
        impl IMediaFrameReader2 {
          pub fn set_acquisition_mode(&self,value:MediaFrameReaderAcquisitionMode,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
            }
          }pub fn acquisition_mode(&self,) ->  ::winrt::Result<MediaFrameReaderAcquisitionMode>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameReaderAcquisitionMode as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameReaderAcquisitionMode>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMediaFrameReader2 {
          type Vtable = IMediaFrameReader2_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2266048435,34097,16464,[135,204,161,55,51,207,62,155],);
          
        }#[repr(C)]pub struct IMediaFrameReader2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:MediaFrameReaderAcquisitionMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut MediaFrameReaderAcquisitionMode,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMediaFrameReader2 {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{871127b3-8531-4050-87cc-a13733cf3e9b}")
          };
          
        }impl::std::convert::From<IMediaFrameReader2>for::winrt::Object {
          fn from(value:IMediaFrameReader2) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMediaFrameReader2>for::winrt::Object {
          fn from(value: &IMediaFrameReader2) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaFrameReader2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaFrameReader2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct MediaFrameReader(::winrt::Object);
        impl MediaFrameReader {
          pub fn close(&self) ->  ::winrt::Result<()>{
            let this =  &::winrt::Interface::cast::<super::super::super::foundation::IClosable, >(self).unwrap();
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
            }
          }pub fn frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::TypedEventHandler<MediaFrameReader,MediaFrameArrivedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::super::foundation::EventRegistrationToken>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::EventRegistrationToken>(result__,)
            }
          }pub fn remove_frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::EventRegistrationToken, >, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),token.into().abi(),).ok()
            }
          }pub fn try_acquire_latest_frame(&self) ->  ::winrt::Result<MediaFrameReference>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameReference as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameReference>(result__)
            }
          }pub fn start_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncOperation<MediaFrameReaderStartStatus, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncOperation<MediaFrameReaderStartStatus, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncOperation<MediaFrameReaderStartStatus, >>(result__)
            }
          }pub fn stop_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncAction>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncAction>(result__)
            }
          }pub fn set_acquisition_mode(&self,value:MediaFrameReaderAcquisitionMode,) ->  ::winrt::Result<()>{
            let this =  &::winrt::Interface::cast::<IMediaFrameReader2>(self).unwrap();
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
            }
          }pub fn acquisition_mode(&self,) ->  ::winrt::Result<MediaFrameReaderAcquisitionMode>{
            let this =  &::winrt::Interface::cast::<IMediaFrameReader2>(self).unwrap();
            unsafe {
              let mut result__: <MediaFrameReaderAcquisitionMode as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameReaderAcquisitionMode>(result__)
            }
          }
        }impl::std::clone::Clone for MediaFrameReader {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for MediaFrameReader {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MediaFrameReader{}
        impl::std::fmt::Debug for MediaFrameReader {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for MediaFrameReader {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.MediaFrameReader";
          
        }unsafe impl::winrt::Interface for MediaFrameReader {
          type Vtable = IMediaFrameReader_abi;
          const IID: ::winrt::Guid =  <IMediaFrameReader as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for MediaFrameReader {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.MediaFrameReader;{e4c94395-2028-48ed-90b0-d1c1b162e24c})");
          
        }impl::std::convert::From<MediaFrameReader>for::winrt::Object {
          fn from(value:MediaFrameReader) -> Self {
            value.0
          }
        }impl::std::convert::From<&MediaFrameReader>for::winrt::Object {
          fn from(value: &MediaFrameReader) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaFrameReader {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaFrameReader {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MediaFrameReader>for super::super::super::foundation::IClosable {
          fn from(value:MediaFrameReader) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&MediaFrameReader>for super::super::super::foundation::IClosable {
          fn from(value: &MediaFrameReader) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for MediaFrameReader {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(self))
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for& 'a MediaFrameReader {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(::std::clone::Clone::clone(self)))
          }
        }impl::std::convert::From<MediaFrameReader>for IMediaFrameReader {
          fn from(value:MediaFrameReader) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&MediaFrameReader>for IMediaFrameReader {
          fn from(value: &MediaFrameReader) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameReader>>for MediaFrameReader {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameReader>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameReader>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameReader>>for& 'a MediaFrameReader {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameReader>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameReader>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MediaFrameReader>for IMediaFrameReader2 {
          fn from(value:MediaFrameReader) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&MediaFrameReader>for IMediaFrameReader2 {
          fn from(value: &MediaFrameReader) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameReader2>>for MediaFrameReader {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameReader2>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameReader2>::into(self,))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaFrameReader2>>for& 'a MediaFrameReader {
          fn into(self) ->  ::winrt::Param< 'a ,IMediaFrameReader2>{
            ::winrt::Param::Owned(::std::convert::Into::<IMediaFrameReader2>::into(::std::clone::Clone::clone(self),))
          }
        }unsafe impl::std::marker::Send for MediaFrameReader{}
        unsafe impl::std::marker::Sync for MediaFrameReader{}
        #[repr(transparent)]pub struct IMultiSourceMediaFrameArrivedEventArgs(::winrt::Object);
        impl::std::clone::Clone for IMultiSourceMediaFrameArrivedEventArgs {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMultiSourceMediaFrameArrivedEventArgs {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMultiSourceMediaFrameArrivedEventArgs {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMultiSourceMediaFrameArrivedEventArgs{}
        impl IMultiSourceMediaFrameArrivedEventArgs{}
        unsafe impl::winrt::Interface for IMultiSourceMediaFrameArrivedEventArgs {
          type Vtable = IMultiSourceMediaFrameArrivedEventArgs_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1662082561,53073,18685,[170,176,109,105,62,180,129,39],);
          
        }#[repr(C)]pub struct IMultiSourceMediaFrameArrivedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMultiSourceMediaFrameArrivedEventArgs {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{63115e01-cf51-48fd-aab0-6d693eb48127}")
          };
          
        }impl::std::convert::From<IMultiSourceMediaFrameArrivedEventArgs>for::winrt::Object {
          fn from(value:IMultiSourceMediaFrameArrivedEventArgs) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMultiSourceMediaFrameArrivedEventArgs>for::winrt::Object {
          fn from(value: &IMultiSourceMediaFrameArrivedEventArgs) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMultiSourceMediaFrameArrivedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMultiSourceMediaFrameArrivedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct MultiSourceMediaFrameArrivedEventArgs(::winrt::Object);
        impl MultiSourceMediaFrameArrivedEventArgs{}
        impl::std::clone::Clone for MultiSourceMediaFrameArrivedEventArgs {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for MultiSourceMediaFrameArrivedEventArgs {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MultiSourceMediaFrameArrivedEventArgs{}
        impl::std::fmt::Debug for MultiSourceMediaFrameArrivedEventArgs {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for MultiSourceMediaFrameArrivedEventArgs {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.MultiSourceMediaFrameArrivedEventArgs";
          
        }unsafe impl::winrt::Interface for MultiSourceMediaFrameArrivedEventArgs {
          type Vtable = IMultiSourceMediaFrameArrivedEventArgs_abi;
          const IID: ::winrt::Guid =  <IMultiSourceMediaFrameArrivedEventArgs as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for MultiSourceMediaFrameArrivedEventArgs {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.MultiSourceMediaFrameArrivedEventArgs;{63115e01-cf51-48fd-aab0-6d693eb48127})");
          
        }impl::std::convert::From<MultiSourceMediaFrameArrivedEventArgs>for::winrt::Object {
          fn from(value:MultiSourceMediaFrameArrivedEventArgs) -> Self {
            value.0
          }
        }impl::std::convert::From<&MultiSourceMediaFrameArrivedEventArgs>for::winrt::Object {
          fn from(value: &MultiSourceMediaFrameArrivedEventArgs) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MultiSourceMediaFrameArrivedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MultiSourceMediaFrameArrivedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MultiSourceMediaFrameArrivedEventArgs>for IMultiSourceMediaFrameArrivedEventArgs {
          fn from(value:MultiSourceMediaFrameArrivedEventArgs) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&MultiSourceMediaFrameArrivedEventArgs>for IMultiSourceMediaFrameArrivedEventArgs {
          fn from(value: &MultiSourceMediaFrameArrivedEventArgs) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMultiSourceMediaFrameArrivedEventArgs>>for MultiSourceMediaFrameArrivedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a ,IMultiSourceMediaFrameArrivedEventArgs>{
            ::winrt::Param::Owned(::std::convert::Into::<IMultiSourceMediaFrameArrivedEventArgs, >::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMultiSourceMediaFrameArrivedEventArgs>>for& 'a MultiSourceMediaFrameArrivedEventArgs {
          fn into(self) ->  ::winrt::Param< 'a ,IMultiSourceMediaFrameArrivedEventArgs>{
            ::winrt::Param::Owned(::std::convert::Into::<IMultiSourceMediaFrameArrivedEventArgs, >::into(::std::clone::Clone::clone(self)))
          }
        }unsafe impl::std::marker::Send for MultiSourceMediaFrameArrivedEventArgs{}
        unsafe impl::std::marker::Sync for MultiSourceMediaFrameArrivedEventArgs{}
        #[repr(transparent)]pub struct IMultiSourceMediaFrameReference(::winrt::Object);
        impl::std::clone::Clone for IMultiSourceMediaFrameReference {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMultiSourceMediaFrameReference {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMultiSourceMediaFrameReference {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMultiSourceMediaFrameReference{}
        impl IMultiSourceMediaFrameReference {
          pub fn close(&self) ->  ::winrt::Result<()>{
            let this =  &::winrt::Interface::cast::<super::super::super::foundation::IClosable, >(self).unwrap();
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
            }
          }pub fn try_get_frame_reference_by_source_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,source_id:T0__,) ->  ::winrt::Result<MediaFrameReference>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameReference as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),source_id.into().abi(), &mut result__,).from_abi::<MediaFrameReference>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMultiSourceMediaFrameReference {
          type Vtable = IMultiSourceMediaFrameReference_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(563497754,32738,17622,[146,229,41,142,109,40,16,233],);
          
        }#[repr(C)]pub struct IMultiSourceMediaFrameReference_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,source_id: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMultiSourceMediaFrameReference {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{21964b1a-7fe2-44d6-92e5-298e6d2810e9}")
          };
          
        }impl::std::convert::From<IMultiSourceMediaFrameReference>for::winrt::Object {
          fn from(value:IMultiSourceMediaFrameReference) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMultiSourceMediaFrameReference>for::winrt::Object {
          fn from(value: &IMultiSourceMediaFrameReference) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMultiSourceMediaFrameReference {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMultiSourceMediaFrameReference {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<IMultiSourceMediaFrameReference>for super::super::super::foundation::IClosable {
          fn from(value:IMultiSourceMediaFrameReference) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&IMultiSourceMediaFrameReference>for super::super::super::foundation::IClosable {
          fn from(value: &IMultiSourceMediaFrameReference) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for IMultiSourceMediaFrameReference {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(self))
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for& 'a IMultiSourceMediaFrameReference {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(::std::clone::Clone::clone(self)))
          }
        }#[repr(transparent)]pub struct MultiSourceMediaFrameReference(::winrt::Object);
        impl MultiSourceMediaFrameReference {
          pub fn close(&self) ->  ::winrt::Result<()>{
            let this =  &::winrt::Interface::cast::<super::super::super::foundation::IClosable, >(self).unwrap();
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
            }
          }pub fn try_get_frame_reference_by_source_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,source_id:T0__,) ->  ::winrt::Result<MediaFrameReference>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameReference as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),source_id.into().abi(), &mut result__,).from_abi::<MediaFrameReference>(result__)
            }
          }
        }impl::std::clone::Clone for MultiSourceMediaFrameReference {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for MultiSourceMediaFrameReference {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MultiSourceMediaFrameReference{}
        impl::std::fmt::Debug for MultiSourceMediaFrameReference {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for MultiSourceMediaFrameReference {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.MultiSourceMediaFrameReference";
          
        }unsafe impl::winrt::Interface for MultiSourceMediaFrameReference {
          type Vtable = IMultiSourceMediaFrameReference_abi;
          const IID: ::winrt::Guid =  <IMultiSourceMediaFrameReference as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for MultiSourceMediaFrameReference {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.MultiSourceMediaFrameReference;{21964b1a-7fe2-44d6-92e5-298e6d2810e9})");
          
        }impl::std::convert::From<MultiSourceMediaFrameReference>for::winrt::Object {
          fn from(value:MultiSourceMediaFrameReference) -> Self {
            value.0
          }
        }impl::std::convert::From<&MultiSourceMediaFrameReference>for::winrt::Object {
          fn from(value: &MultiSourceMediaFrameReference) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MultiSourceMediaFrameReference {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MultiSourceMediaFrameReference {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MultiSourceMediaFrameReference>for super::super::super::foundation::IClosable {
          fn from(value:MultiSourceMediaFrameReference) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&MultiSourceMediaFrameReference>for super::super::super::foundation::IClosable {
          fn from(value: &MultiSourceMediaFrameReference) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for MultiSourceMediaFrameReference {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(self))
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for& 'a MultiSourceMediaFrameReference {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(::std::clone::Clone::clone(self)))
          }
        }impl::std::convert::From<MultiSourceMediaFrameReference>for IMultiSourceMediaFrameReference {
          fn from(value:MultiSourceMediaFrameReference) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&MultiSourceMediaFrameReference>for IMultiSourceMediaFrameReference {
          fn from(value: &MultiSourceMediaFrameReference) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMultiSourceMediaFrameReference>>for MultiSourceMediaFrameReference {
          fn into(self) ->  ::winrt::Param< 'a ,IMultiSourceMediaFrameReference>{
            ::winrt::Param::Owned(::std::convert::Into::<IMultiSourceMediaFrameReference>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMultiSourceMediaFrameReference>>for& 'a MultiSourceMediaFrameReference {
          fn into(self) ->  ::winrt::Param< 'a ,IMultiSourceMediaFrameReference>{
            ::winrt::Param::Owned(::std::convert::Into::<IMultiSourceMediaFrameReference>::into(::std::clone::Clone::clone(self),),)
          }
        }unsafe impl::std::marker::Send for MultiSourceMediaFrameReference{}
        unsafe impl::std::marker::Sync for MultiSourceMediaFrameReference{}
        #[allow(non_camel_case_types)]#[repr(transparent)]pub struct MultiSourceMediaFrameReaderStartStatus(i32);
        impl::std::convert::From<i32>for MultiSourceMediaFrameReaderStartStatus {
          fn from(value:i32) -> Self {
            Self(value)
          }
        }impl::std::clone::Clone for MultiSourceMediaFrameReaderStartStatus {
          fn clone(&self) -> Self {
            Self(self.0)
          }
        }impl::std::default::Default for MultiSourceMediaFrameReaderStartStatus {
          fn default() -> Self {
            Self(0)
          }
        }impl::std::fmt::Debug for MultiSourceMediaFrameReaderStartStatus {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for MultiSourceMediaFrameReaderStartStatus {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MultiSourceMediaFrameReaderStartStatus{}
        impl::std::marker::Copy for MultiSourceMediaFrameReaderStartStatus{}
        impl MultiSourceMediaFrameReaderStartStatus {
          #![allow(non_upper_case_globals)]pub const Success:Self = Self(0i32);
          pub const NotSupported:Self = Self(1i32);
          pub const InsufficientResources:Self = Self(2i32);
          pub const DeviceNotAvailable:Self = Self(3i32);
          pub const UnknownFailure:Self = Self(4i32);
          
        }unsafe impl::winrt::Abi for MultiSourceMediaFrameReaderStartStatus {
          type Abi = Self;
          
        }unsafe impl::winrt::RuntimeType for MultiSourceMediaFrameReaderStartStatus {
          type DefaultType = Self;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Capture.Frames.MultiSourceMediaFrameReaderStartStatus;i4)");
          
        }#[repr(transparent)]pub struct IMultiSourceMediaFrameReader(::winrt::Object);
        impl::std::clone::Clone for IMultiSourceMediaFrameReader {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMultiSourceMediaFrameReader {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMultiSourceMediaFrameReader {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMultiSourceMediaFrameReader{}
        impl IMultiSourceMediaFrameReader {
          pub fn close(&self) ->  ::winrt::Result<()>{
            let this =  &::winrt::Interface::cast::<super::super::super::foundation::IClosable, >(self).unwrap();
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
            }
          }pub fn frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::TypedEventHandler<MultiSourceMediaFrameReader,MultiSourceMediaFrameArrivedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::super::foundation::EventRegistrationToken>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::EventRegistrationToken>(result__,)
            }
          }pub fn remove_frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::EventRegistrationToken, >, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),token.into().abi(),).ok()
            }
          }pub fn try_acquire_latest_frame(&self,) ->  ::winrt::Result<MultiSourceMediaFrameReference>{
            let this = self;
            unsafe {
              let mut result__: <MultiSourceMediaFrameReference as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MultiSourceMediaFrameReference>(result__)
            }
          }pub fn start_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncOperation<MultiSourceMediaFrameReaderStartStatus, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncOperation<MultiSourceMediaFrameReaderStartStatus, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncOperation<MultiSourceMediaFrameReaderStartStatus, >>(result__)
            }
          }pub fn stop_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncAction>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncAction>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMultiSourceMediaFrameReader {
          type Vtable = IMultiSourceMediaFrameReader_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2366915586,63331,18573,[152,242,180,55,188,240,117,231],);
          
        }#[repr(C)]pub struct IMultiSourceMediaFrameReader_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMultiSourceMediaFrameReader {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{8d144402-f763-488d-98f2-b437bcf075e7}")
          };
          
        }impl::std::convert::From<IMultiSourceMediaFrameReader>for::winrt::Object {
          fn from(value:IMultiSourceMediaFrameReader) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMultiSourceMediaFrameReader>for::winrt::Object {
          fn from(value: &IMultiSourceMediaFrameReader) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMultiSourceMediaFrameReader {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMultiSourceMediaFrameReader {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<IMultiSourceMediaFrameReader>for super::super::super::foundation::IClosable {
          fn from(value:IMultiSourceMediaFrameReader) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&IMultiSourceMediaFrameReader>for super::super::super::foundation::IClosable {
          fn from(value: &IMultiSourceMediaFrameReader) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for IMultiSourceMediaFrameReader {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(self))
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for& 'a IMultiSourceMediaFrameReader {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(::std::clone::Clone::clone(self)))
          }
        }#[repr(transparent)]pub struct IMultiSourceMediaFrameReader2(::winrt::Object);
        impl::std::clone::Clone for IMultiSourceMediaFrameReader2 {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IMultiSourceMediaFrameReader2 {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IMultiSourceMediaFrameReader2 {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IMultiSourceMediaFrameReader2{}
        impl IMultiSourceMediaFrameReader2 {
          pub fn set_acquisition_mode(&self,value:MediaFrameReaderAcquisitionMode,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
            }
          }pub fn acquisition_mode(&self,) ->  ::winrt::Result<MediaFrameReaderAcquisitionMode>{
            let this = self;
            unsafe {
              let mut result__: <MediaFrameReaderAcquisitionMode as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameReaderAcquisitionMode>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IMultiSourceMediaFrameReader2 {
          type Vtable = IMultiSourceMediaFrameReader2_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4015819453,64604,19563,[157,129,60,185,204,99,124,38],);
          
        }#[repr(C)]pub struct IMultiSourceMediaFrameReader2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:MediaFrameReaderAcquisitionMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut MediaFrameReaderAcquisitionMode,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IMultiSourceMediaFrameReader2 {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{ef5c8abd-fc5c-4c6b-9d81-3cb9cc637c26}")
          };
          
        }impl::std::convert::From<IMultiSourceMediaFrameReader2>for::winrt::Object {
          fn from(value:IMultiSourceMediaFrameReader2) -> Self {
            value.0
          }
        }impl::std::convert::From<&IMultiSourceMediaFrameReader2>for::winrt::Object {
          fn from(value: &IMultiSourceMediaFrameReader2) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMultiSourceMediaFrameReader2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMultiSourceMediaFrameReader2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct MultiSourceMediaFrameReader(::winrt::Object);
        impl MultiSourceMediaFrameReader {
          pub fn close(&self) ->  ::winrt::Result<()>{
            let this =  &::winrt::Interface::cast::<super::super::super::foundation::IClosable, >(self).unwrap();
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
            }
          }pub fn frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::TypedEventHandler<MultiSourceMediaFrameReader,MultiSourceMediaFrameArrivedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::super::foundation::EventRegistrationToken>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::EventRegistrationToken>(result__,)
            }
          }pub fn remove_frame_arrived< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::EventRegistrationToken, >, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),token.into().abi(),).ok()
            }
          }pub fn try_acquire_latest_frame(&self,) ->  ::winrt::Result<MultiSourceMediaFrameReference>{
            let this = self;
            unsafe {
              let mut result__: <MultiSourceMediaFrameReference as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MultiSourceMediaFrameReference>(result__)
            }
          }pub fn start_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncOperation<MultiSourceMediaFrameReaderStartStatus, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncOperation<MultiSourceMediaFrameReaderStartStatus, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncOperation<MultiSourceMediaFrameReaderStartStatus, >>(result__)
            }
          }pub fn stop_async(&self,) ->  ::winrt::Result<super::super::super::foundation::IAsyncAction>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IAsyncAction>(result__)
            }
          }pub fn set_acquisition_mode(&self,value:MediaFrameReaderAcquisitionMode,) ->  ::winrt::Result<()>{
            let this =  &::winrt::Interface::cast::<IMultiSourceMediaFrameReader2>(self).unwrap();
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
            }
          }pub fn acquisition_mode(&self,) ->  ::winrt::Result<MediaFrameReaderAcquisitionMode>{
            let this =  &::winrt::Interface::cast::<IMultiSourceMediaFrameReader2>(self).unwrap();
            unsafe {
              let mut result__: <MediaFrameReaderAcquisitionMode as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaFrameReaderAcquisitionMode>(result__)
            }
          }
        }impl::std::clone::Clone for MultiSourceMediaFrameReader {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for MultiSourceMediaFrameReader {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for MultiSourceMediaFrameReader{}
        impl::std::fmt::Debug for MultiSourceMediaFrameReader {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for MultiSourceMediaFrameReader {
          const NAME: & 'static str = "Windows.Media.Capture.Frames.MultiSourceMediaFrameReader";
          
        }unsafe impl::winrt::Interface for MultiSourceMediaFrameReader {
          type Vtable = IMultiSourceMediaFrameReader_abi;
          const IID: ::winrt::Guid =  <IMultiSourceMediaFrameReader as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for MultiSourceMediaFrameReader {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Capture.Frames.MultiSourceMediaFrameReader;{8d144402-f763-488d-98f2-b437bcf075e7})");
          
        }impl::std::convert::From<MultiSourceMediaFrameReader>for::winrt::Object {
          fn from(value:MultiSourceMediaFrameReader) -> Self {
            value.0
          }
        }impl::std::convert::From<&MultiSourceMediaFrameReader>for::winrt::Object {
          fn from(value: &MultiSourceMediaFrameReader) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MultiSourceMediaFrameReader {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MultiSourceMediaFrameReader {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<MultiSourceMediaFrameReader>for super::super::super::foundation::IClosable {
          fn from(value:MultiSourceMediaFrameReader) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&MultiSourceMediaFrameReader>for super::super::super::foundation::IClosable {
          fn from(value: &MultiSourceMediaFrameReader) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for MultiSourceMediaFrameReader {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(self))
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for& 'a MultiSourceMediaFrameReader {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(::std::clone::Clone::clone(self)))
          }
        }impl::std::convert::From<MultiSourceMediaFrameReader>for IMultiSourceMediaFrameReader {
          fn from(value:MultiSourceMediaFrameReader) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&MultiSourceMediaFrameReader>for IMultiSourceMediaFrameReader {
          fn from(value: &MultiSourceMediaFrameReader) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMultiSourceMediaFrameReader>>for MultiSourceMediaFrameReader {
          fn into(self) ->  ::winrt::Param< 'a ,IMultiSourceMediaFrameReader>{
            ::winrt::Param::Owned(::std::convert::Into::<IMultiSourceMediaFrameReader>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMultiSourceMediaFrameReader>>for& 'a MultiSourceMediaFrameReader {
          fn into(self) ->  ::winrt::Param< 'a ,IMultiSourceMediaFrameReader>{
            ::winrt::Param::Owned(::std::convert::Into::<IMultiSourceMediaFrameReader>::into(::std::clone::Clone::clone(self),),)
          }
        }impl::std::convert::From<MultiSourceMediaFrameReader>for IMultiSourceMediaFrameReader2 {
          fn from(value:MultiSourceMediaFrameReader) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&MultiSourceMediaFrameReader>for IMultiSourceMediaFrameReader2 {
          fn from(value: &MultiSourceMediaFrameReader) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMultiSourceMediaFrameReader2>>for MultiSourceMediaFrameReader {
          fn into(self) ->  ::winrt::Param< 'a ,IMultiSourceMediaFrameReader2>{
            ::winrt::Param::Owned(::std::convert::Into::<IMultiSourceMediaFrameReader2>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMultiSourceMediaFrameReader2>>for& 'a MultiSourceMediaFrameReader {
          fn into(self) ->  ::winrt::Param< 'a ,IMultiSourceMediaFrameReader2>{
            ::winrt::Param::Owned(::std::convert::Into::<IMultiSourceMediaFrameReader2>::into(::std::clone::Clone::clone(self),),)
          }
        }unsafe impl::std::marker::Send for MultiSourceMediaFrameReader{}
        unsafe impl::std::marker::Sync for MultiSourceMediaFrameReader{}
        
      }
    }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod core {
      #[repr(transparent)]pub struct IMediaSource(::winrt::Object);
      impl::std::clone::Clone for IMediaSource {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaSource {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaSource {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaSource{}
      impl IMediaSource{}
      unsafe impl::winrt::Interface for IMediaSource {
        type Vtable = IMediaSource_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3888100761,41117,19489,[188,223,32,175,79,134,179,217],);
        
      }#[repr(C)]pub struct IMediaSource_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaSource {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{e7bfb599-a09d-4c21-bcdf-20af4f86b3d9}")
        };
        
      }impl::std::convert::From<IMediaSource>for::winrt::Object {
        fn from(value:IMediaSource) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaSource>for::winrt::Object {
        fn from(value: &IMediaSource) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaSource {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaSource {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaStreamDescriptor(::winrt::Object);
      impl::std::clone::Clone for IMediaStreamDescriptor {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaStreamDescriptor {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaStreamDescriptor {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaStreamDescriptor{}
      impl IMediaStreamDescriptor {
        pub fn is_selected(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_name< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_language< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn language(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaStreamDescriptor {
        type Vtable = IMediaStreamDescriptor_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2163306094,37623,17694,[151,210,175,216,7,66,218,112],);
        
      }#[repr(C)]pub struct IMediaStreamDescriptor_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaStreamDescriptor {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{80f16e6e-92f7-451e-97d2-afd80742da70}")
        };
        
      }impl::std::convert::From<IMediaStreamDescriptor>for::winrt::Object {
        fn from(value:IMediaStreamDescriptor) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaStreamDescriptor>for::winrt::Object {
        fn from(value: &IMediaStreamDescriptor) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAudioStreamDescriptor(::winrt::Object);
      impl::std::clone::Clone for IAudioStreamDescriptor {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAudioStreamDescriptor {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAudioStreamDescriptor {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAudioStreamDescriptor{}
      impl IAudioStreamDescriptor {
        pub fn encoding_properties(&self,) ->  ::winrt::Result<super::media_properties::AudioEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::AudioEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::media_properties::AudioEncodingProperties>(result__)
          }
        }pub fn is_selected(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_name< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_language< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn language(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAudioStreamDescriptor {
        type Vtable = IAudioStreamDescriptor_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(506893028,16423,18503,[167,11,223,29,154,42,123,4],);
        
      }#[repr(C)]pub struct IAudioStreamDescriptor_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAudioStreamDescriptor {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{1e3692e4-4027-4847-a70b-df1d9a2a7b04}")
        };
        
      }impl::std::convert::From<IAudioStreamDescriptor>for::winrt::Object {
        fn from(value:IAudioStreamDescriptor) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAudioStreamDescriptor>for::winrt::Object {
        fn from(value: &IAudioStreamDescriptor) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAudioStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAudioStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IAudioStreamDescriptor>for IMediaStreamDescriptor {
        fn from(value:IAudioStreamDescriptor) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IAudioStreamDescriptor>for IMediaStreamDescriptor {
        fn from(value: &IAudioStreamDescriptor) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor>>for IAudioStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor>>for& 'a IAudioStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAudioStreamDescriptor2(::winrt::Object);
      impl::std::clone::Clone for IAudioStreamDescriptor2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAudioStreamDescriptor2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAudioStreamDescriptor2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAudioStreamDescriptor2{}
      impl IAudioStreamDescriptor2 {
        pub fn set_leading_encoder_padding< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::IReference<u32>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn leading_encoder_padding(&self,) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn set_trailing_encoder_padding< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::IReference<u32>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn trailing_encoder_padding(&self,) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn is_selected(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_name< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_language< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn language(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAudioStreamDescriptor2 {
        type Vtable = IAudioStreamDescriptor2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(778629622,42056,18811,[136,64,133,8,38,101,172,249],);
        
      }#[repr(C)]pub struct IAudioStreamDescriptor2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAudioStreamDescriptor2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{2e68f1f6-a448-497b-8840-85082665acf9}")
        };
        
      }impl::std::convert::From<IAudioStreamDescriptor2>for::winrt::Object {
        fn from(value:IAudioStreamDescriptor2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAudioStreamDescriptor2>for::winrt::Object {
        fn from(value: &IAudioStreamDescriptor2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAudioStreamDescriptor2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAudioStreamDescriptor2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IAudioStreamDescriptor2>for IMediaStreamDescriptor {
        fn from(value:IAudioStreamDescriptor2) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IAudioStreamDescriptor2>for IMediaStreamDescriptor {
        fn from(value: &IAudioStreamDescriptor2) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor>>for IAudioStreamDescriptor2 {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor>>for& 'a IAudioStreamDescriptor2 {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAudioStreamDescriptor3(::winrt::Object);
      impl::std::clone::Clone for IAudioStreamDescriptor3 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAudioStreamDescriptor3 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAudioStreamDescriptor3 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAudioStreamDescriptor3{}
      impl IAudioStreamDescriptor3 {
        pub fn copy(&self) ->  ::winrt::Result<AudioStreamDescriptor>{
          let this = self;
          unsafe {
            let mut result__: <AudioStreamDescriptor as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AudioStreamDescriptor>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAudioStreamDescriptor3 {
        type Vtable = IAudioStreamDescriptor3_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1294077345,36483,17647,[137,115,47,99,233,147,243,107],);
        
      }#[repr(C)]pub struct IAudioStreamDescriptor3_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAudioStreamDescriptor3 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{4d220da1-8e83-44ef-8973-2f63e993f36b}")
        };
        
      }impl::std::convert::From<IAudioStreamDescriptor3>for::winrt::Object {
        fn from(value:IAudioStreamDescriptor3) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAudioStreamDescriptor3>for::winrt::Object {
        fn from(value: &IAudioStreamDescriptor3) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAudioStreamDescriptor3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAudioStreamDescriptor3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAudioStreamDescriptorFactory(::winrt::Object);
      impl::std::clone::Clone for IAudioStreamDescriptorFactory {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAudioStreamDescriptorFactory {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAudioStreamDescriptorFactory {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAudioStreamDescriptorFactory{}
      impl IAudioStreamDescriptorFactory {
        pub fn create< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::AudioEncodingProperties>, >, >(&self,encoding_properties:T0__,) ->  ::winrt::Result<AudioStreamDescriptor>{
          let this = self;
          unsafe {
            let mut result__: <AudioStreamDescriptor as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),encoding_properties.into().abi(), &mut result__,).from_abi::<AudioStreamDescriptor>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAudioStreamDescriptorFactory {
        type Vtable = IAudioStreamDescriptorFactory_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1250348702,19633,17280,[142,12,131,80,75,127,91,243],);
        
      }#[repr(C)]pub struct IAudioStreamDescriptorFactory_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,encoding_properties: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAudioStreamDescriptorFactory {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{4a86ce9e-4cb1-4380-8e0c-83504b7f5bf3}")
        };
        
      }impl::std::convert::From<IAudioStreamDescriptorFactory>for::winrt::Object {
        fn from(value:IAudioStreamDescriptorFactory) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAudioStreamDescriptorFactory>for::winrt::Object {
        fn from(value: &IAudioStreamDescriptorFactory) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAudioStreamDescriptorFactory {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAudioStreamDescriptorFactory {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaStreamDescriptor2(::winrt::Object);
      impl::std::clone::Clone for IMediaStreamDescriptor2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaStreamDescriptor2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaStreamDescriptor2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaStreamDescriptor2{}
      impl IMediaStreamDescriptor2 {
        pub fn is_selected(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_name< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_language< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn language(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_label< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn label(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaStreamDescriptor2 {
        type Vtable = IMediaStreamDescriptor2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1349714191,59570,16497,[176,11,235,243,55,167,107,88],);
        
      }#[repr(C)]pub struct IMediaStreamDescriptor2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaStreamDescriptor2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{5073010f-e8b2-4071-b00b-ebf337a76b58}")
        };
        
      }impl::std::convert::From<IMediaStreamDescriptor2>for::winrt::Object {
        fn from(value:IMediaStreamDescriptor2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaStreamDescriptor2>for::winrt::Object {
        fn from(value: &IMediaStreamDescriptor2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaStreamDescriptor2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaStreamDescriptor2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IMediaStreamDescriptor2>for IMediaStreamDescriptor {
        fn from(value:IMediaStreamDescriptor2) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IMediaStreamDescriptor2>for IMediaStreamDescriptor {
        fn from(value: &IMediaStreamDescriptor2) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor>>for IMediaStreamDescriptor2 {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor>>for& 'a IMediaStreamDescriptor2 {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AudioStreamDescriptor(::winrt::Object);
      impl AudioStreamDescriptor {
        pub fn encoding_properties(&self,) ->  ::winrt::Result<super::media_properties::AudioEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::AudioEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::media_properties::AudioEncodingProperties>(result__)
          }
        }pub fn set_leading_encoder_padding< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::IReference<u32>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAudioStreamDescriptor2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn leading_encoder_padding(&self,) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this =  &::winrt::Interface::cast::<IAudioStreamDescriptor2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn set_trailing_encoder_padding< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::IReference<u32>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAudioStreamDescriptor2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn trailing_encoder_padding(&self,) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this =  &::winrt::Interface::cast::<IAudioStreamDescriptor2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn copy(&self) ->  ::winrt::Result<AudioStreamDescriptor>{
          let this =  &::winrt::Interface::cast::<IAudioStreamDescriptor3>(self).unwrap();
          unsafe {
            let mut result__: <AudioStreamDescriptor as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AudioStreamDescriptor>(result__)
          }
        }pub fn create< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::AudioEncodingProperties>, >, >(encoding_properties:T0__,) ->  ::winrt::Result<AudioStreamDescriptor>{
          Self::IAudioStreamDescriptorFactory(|this|unsafe {
            let mut result__: <AudioStreamDescriptor as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),encoding_properties.into().abi(), &mut result__,).from_abi::<AudioStreamDescriptor>(result__)
          })
        }pub fn is_selected(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_name< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_language< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn language(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_label< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn label(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor2>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }#[allow(non_snake_case)]fn IAudioStreamDescriptorFactory<R,F:FnOnce(&IAudioStreamDescriptorFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<AudioStreamDescriptor,IAudioStreamDescriptorFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for AudioStreamDescriptor {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AudioStreamDescriptor {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AudioStreamDescriptor{}
      impl::std::fmt::Debug for AudioStreamDescriptor {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AudioStreamDescriptor {
        const NAME: & 'static str = "Windows.Media.Core.AudioStreamDescriptor";
        
      }unsafe impl::winrt::Interface for AudioStreamDescriptor {
        type Vtable = IAudioStreamDescriptor_abi;
        const IID: ::winrt::Guid =  <IAudioStreamDescriptor as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AudioStreamDescriptor {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Core.AudioStreamDescriptor;{1e3692e4-4027-4847-a70b-df1d9a2a7b04})");
        
      }impl::std::convert::From<AudioStreamDescriptor>for::winrt::Object {
        fn from(value:AudioStreamDescriptor) -> Self {
          value.0
        }
      }impl::std::convert::From<&AudioStreamDescriptor>for::winrt::Object {
        fn from(value: &AudioStreamDescriptor) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AudioStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AudioStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AudioStreamDescriptor>for IAudioStreamDescriptor {
        fn from(value:AudioStreamDescriptor) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AudioStreamDescriptor>for IAudioStreamDescriptor {
        fn from(value: &AudioStreamDescriptor) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioStreamDescriptor>>for AudioStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IAudioStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IAudioStreamDescriptor>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioStreamDescriptor>>for& 'a AudioStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IAudioStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IAudioStreamDescriptor>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AudioStreamDescriptor>for IAudioStreamDescriptor2 {
        fn from(value:AudioStreamDescriptor) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AudioStreamDescriptor>for IAudioStreamDescriptor2 {
        fn from(value: &AudioStreamDescriptor) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioStreamDescriptor2>>for AudioStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IAudioStreamDescriptor2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAudioStreamDescriptor2>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioStreamDescriptor2>>for& 'a AudioStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IAudioStreamDescriptor2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAudioStreamDescriptor2>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AudioStreamDescriptor>for IAudioStreamDescriptor3 {
        fn from(value:AudioStreamDescriptor) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AudioStreamDescriptor>for IAudioStreamDescriptor3 {
        fn from(value: &AudioStreamDescriptor) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioStreamDescriptor3>>for AudioStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IAudioStreamDescriptor3>{
          ::winrt::Param::Owned(::std::convert::Into::<IAudioStreamDescriptor3>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioStreamDescriptor3>>for& 'a AudioStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IAudioStreamDescriptor3>{
          ::winrt::Param::Owned(::std::convert::Into::<IAudioStreamDescriptor3>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AudioStreamDescriptor>for IMediaStreamDescriptor {
        fn from(value:AudioStreamDescriptor) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AudioStreamDescriptor>for IMediaStreamDescriptor {
        fn from(value: &AudioStreamDescriptor) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor>>for AudioStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor>>for& 'a AudioStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AudioStreamDescriptor>for IMediaStreamDescriptor2 {
        fn from(value:AudioStreamDescriptor) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AudioStreamDescriptor>for IMediaStreamDescriptor2 {
        fn from(value: &AudioStreamDescriptor) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor2>>for AudioStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor2>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor2>>for& 'a AudioStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor2>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for AudioStreamDescriptor{}
      unsafe impl::std::marker::Sync for AudioStreamDescriptor{}
      #[repr(transparent)]pub struct IVideoStreamDescriptor(::winrt::Object);
      impl::std::clone::Clone for IVideoStreamDescriptor {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IVideoStreamDescriptor {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IVideoStreamDescriptor {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IVideoStreamDescriptor{}
      impl IVideoStreamDescriptor {
        pub fn is_selected(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_name< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_language< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn language(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn encoding_properties(&self,) ->  ::winrt::Result<super::media_properties::VideoEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::VideoEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::media_properties::VideoEncodingProperties>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IVideoStreamDescriptor {
        type Vtable = IVideoStreamDescriptor_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(317590869,39979,17472,[128,87,44,122,144,240,203,236],);
        
      }#[repr(C)]pub struct IVideoStreamDescriptor_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IVideoStreamDescriptor {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{12ee0d55-9c2b-4440-8057-2c7a90f0cbec}")
        };
        
      }impl::std::convert::From<IVideoStreamDescriptor>for::winrt::Object {
        fn from(value:IVideoStreamDescriptor) -> Self {
          value.0
        }
      }impl::std::convert::From<&IVideoStreamDescriptor>for::winrt::Object {
        fn from(value: &IVideoStreamDescriptor) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IVideoStreamDescriptor>for IMediaStreamDescriptor {
        fn from(value:IVideoStreamDescriptor) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IVideoStreamDescriptor>for IMediaStreamDescriptor {
        fn from(value: &IVideoStreamDescriptor) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor>>for IVideoStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor>>for& 'a IVideoStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IVideoStreamDescriptor2(::winrt::Object);
      impl::std::clone::Clone for IVideoStreamDescriptor2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IVideoStreamDescriptor2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IVideoStreamDescriptor2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IVideoStreamDescriptor2{}
      impl IVideoStreamDescriptor2 {
        pub fn copy(&self) ->  ::winrt::Result<VideoStreamDescriptor>{
          let this = self;
          unsafe {
            let mut result__: <VideoStreamDescriptor as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoStreamDescriptor>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IVideoStreamDescriptor2 {
        type Vtable = IVideoStreamDescriptor2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2335206928,17726,16520,[131,45,195,111,164,249,74,243],);
        
      }#[repr(C)]pub struct IVideoStreamDescriptor2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IVideoStreamDescriptor2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{8b306e10-453e-4088-832d-c36fa4f94af3}")
        };
        
      }impl::std::convert::From<IVideoStreamDescriptor2>for::winrt::Object {
        fn from(value:IVideoStreamDescriptor2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IVideoStreamDescriptor2>for::winrt::Object {
        fn from(value: &IVideoStreamDescriptor2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoStreamDescriptor2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoStreamDescriptor2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IVideoStreamDescriptorFactory(::winrt::Object);
      impl::std::clone::Clone for IVideoStreamDescriptorFactory {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IVideoStreamDescriptorFactory {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IVideoStreamDescriptorFactory {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IVideoStreamDescriptorFactory{}
      impl IVideoStreamDescriptorFactory {
        pub fn create< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::VideoEncodingProperties>, >, >(&self,encoding_properties:T0__,) ->  ::winrt::Result<VideoStreamDescriptor>{
          let this = self;
          unsafe {
            let mut result__: <VideoStreamDescriptor as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),encoding_properties.into().abi(), &mut result__,).from_abi::<VideoStreamDescriptor>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IVideoStreamDescriptorFactory {
        type Vtable = IVideoStreamDescriptorFactory_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1229911761,47989,17362,[158,94,123,121,163,175,206,212],);
        
      }#[repr(C)]pub struct IVideoStreamDescriptorFactory_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,encoding_properties: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IVideoStreamDescriptorFactory {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{494ef6d1-bb75-43d2-9e5e-7b79a3afced4}")
        };
        
      }impl::std::convert::From<IVideoStreamDescriptorFactory>for::winrt::Object {
        fn from(value:IVideoStreamDescriptorFactory) -> Self {
          value.0
        }
      }impl::std::convert::From<&IVideoStreamDescriptorFactory>for::winrt::Object {
        fn from(value: &IVideoStreamDescriptorFactory) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoStreamDescriptorFactory {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoStreamDescriptorFactory {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct VideoStreamDescriptor(::winrt::Object);
      impl VideoStreamDescriptor {
        pub fn is_selected(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_name< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_language< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn language(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_label< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn label(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor2>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn encoding_properties(&self,) ->  ::winrt::Result<super::media_properties::VideoEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::VideoEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::media_properties::VideoEncodingProperties>(result__)
          }
        }pub fn copy(&self) ->  ::winrt::Result<VideoStreamDescriptor>{
          let this =  &::winrt::Interface::cast::<IVideoStreamDescriptor2>(self).unwrap();
          unsafe {
            let mut result__: <VideoStreamDescriptor as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoStreamDescriptor>(result__)
          }
        }pub fn create< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::VideoEncodingProperties>, >, >(encoding_properties:T0__,) ->  ::winrt::Result<VideoStreamDescriptor>{
          Self::IVideoStreamDescriptorFactory(|this|unsafe {
            let mut result__: <VideoStreamDescriptor as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),encoding_properties.into().abi(), &mut result__,).from_abi::<VideoStreamDescriptor>(result__)
          })
        }#[allow(non_snake_case)]fn IVideoStreamDescriptorFactory<R,F:FnOnce(&IVideoStreamDescriptorFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<VideoStreamDescriptor,IVideoStreamDescriptorFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for VideoStreamDescriptor {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for VideoStreamDescriptor {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for VideoStreamDescriptor{}
      impl::std::fmt::Debug for VideoStreamDescriptor {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for VideoStreamDescriptor {
        const NAME: & 'static str = "Windows.Media.Core.VideoStreamDescriptor";
        
      }unsafe impl::winrt::Interface for VideoStreamDescriptor {
        type Vtable = IVideoStreamDescriptor_abi;
        const IID: ::winrt::Guid =  <IVideoStreamDescriptor as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for VideoStreamDescriptor {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Core.VideoStreamDescriptor;{12ee0d55-9c2b-4440-8057-2c7a90f0cbec})");
        
      }impl::std::convert::From<VideoStreamDescriptor>for::winrt::Object {
        fn from(value:VideoStreamDescriptor) -> Self {
          value.0
        }
      }impl::std::convert::From<&VideoStreamDescriptor>for::winrt::Object {
        fn from(value: &VideoStreamDescriptor) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for VideoStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a VideoStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<VideoStreamDescriptor>for IMediaStreamDescriptor {
        fn from(value:VideoStreamDescriptor) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoStreamDescriptor>for IMediaStreamDescriptor {
        fn from(value: &VideoStreamDescriptor) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor>>for VideoStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor>>for& 'a VideoStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<VideoStreamDescriptor>for IMediaStreamDescriptor2 {
        fn from(value:VideoStreamDescriptor) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoStreamDescriptor>for IMediaStreamDescriptor2 {
        fn from(value: &VideoStreamDescriptor) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor2>>for VideoStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor2>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor2>>for& 'a VideoStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor2>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<VideoStreamDescriptor>for IVideoStreamDescriptor {
        fn from(value:VideoStreamDescriptor) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&VideoStreamDescriptor>for IVideoStreamDescriptor {
        fn from(value: &VideoStreamDescriptor) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoStreamDescriptor>>for VideoStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoStreamDescriptor>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoStreamDescriptor>>for& 'a VideoStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoStreamDescriptor>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<VideoStreamDescriptor>for IVideoStreamDescriptor2 {
        fn from(value:VideoStreamDescriptor) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoStreamDescriptor>for IVideoStreamDescriptor2 {
        fn from(value: &VideoStreamDescriptor) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoStreamDescriptor2>>for VideoStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoStreamDescriptor2>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoStreamDescriptor2>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoStreamDescriptor2>>for& 'a VideoStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoStreamDescriptor2>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoStreamDescriptor2>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for VideoStreamDescriptor{}
      unsafe impl::std::marker::Sync for VideoStreamDescriptor{}
      #[repr(transparent)]pub struct ITimedMetadataStreamDescriptor(::winrt::Object);
      impl::std::clone::Clone for ITimedMetadataStreamDescriptor {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ITimedMetadataStreamDescriptor {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ITimedMetadataStreamDescriptor {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ITimedMetadataStreamDescriptor{}
      impl ITimedMetadataStreamDescriptor {
        pub fn encoding_properties(&self,) ->  ::winrt::Result<super::media_properties::TimedMetadataEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::TimedMetadataEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::media_properties::TimedMetadataEncodingProperties>(result__,)
          }
        }pub fn copy(&self) ->  ::winrt::Result<TimedMetadataStreamDescriptor>{
          let this = self;
          unsafe {
            let mut result__: <TimedMetadataStreamDescriptor as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<TimedMetadataStreamDescriptor>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ITimedMetadataStreamDescriptor {
        type Vtable = ITimedMetadataStreamDescriptor_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(322123455,10602,17982,[159,249,1,205,37,105,20,8],);
        
      }#[repr(C)]pub struct ITimedMetadataStreamDescriptor_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ITimedMetadataStreamDescriptor {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{133336bf-296a-463e-9ff9-01cd25691408}")
        };
        
      }impl::std::convert::From<ITimedMetadataStreamDescriptor>for::winrt::Object {
        fn from(value:ITimedMetadataStreamDescriptor) -> Self {
          value.0
        }
      }impl::std::convert::From<&ITimedMetadataStreamDescriptor>for::winrt::Object {
        fn from(value: &ITimedMetadataStreamDescriptor) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ITimedMetadataStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ITimedMetadataStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ITimedMetadataStreamDescriptorFactory(::winrt::Object);
      impl::std::clone::Clone for ITimedMetadataStreamDescriptorFactory {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ITimedMetadataStreamDescriptorFactory {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ITimedMetadataStreamDescriptorFactory {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ITimedMetadataStreamDescriptorFactory{}
      impl ITimedMetadataStreamDescriptorFactory {
        pub fn create< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::TimedMetadataEncodingProperties, >, >, >(&self,encoding_properties:T0__,) ->  ::winrt::Result<TimedMetadataStreamDescriptor>{
          let this = self;
          unsafe {
            let mut result__: <TimedMetadataStreamDescriptor as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),encoding_properties.into().abi(), &mut result__,).from_abi::<TimedMetadataStreamDescriptor>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ITimedMetadataStreamDescriptorFactory {
        type Vtable = ITimedMetadataStreamDescriptorFactory_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3223838256,29538,20473,[152,177,45,253,11,141,28,174],);
        
      }#[repr(C)]pub struct ITimedMetadataStreamDescriptorFactory_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,encoding_properties: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ITimedMetadataStreamDescriptorFactory {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c027de30-7362-4ff9-98b1-2dfd0b8d1cae}")
        };
        
      }impl::std::convert::From<ITimedMetadataStreamDescriptorFactory>for::winrt::Object {
        fn from(value:ITimedMetadataStreamDescriptorFactory) -> Self {
          value.0
        }
      }impl::std::convert::From<&ITimedMetadataStreamDescriptorFactory>for::winrt::Object {
        fn from(value: &ITimedMetadataStreamDescriptorFactory) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ITimedMetadataStreamDescriptorFactory {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ITimedMetadataStreamDescriptorFactory {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct TimedMetadataStreamDescriptor(::winrt::Object);
      impl TimedMetadataStreamDescriptor {
        pub fn is_selected(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_name< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_language< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn language(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_label< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn label(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaStreamDescriptor2>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn encoding_properties(&self,) ->  ::winrt::Result<super::media_properties::TimedMetadataEncodingProperties>{
          let this =  &::winrt::Interface::cast::<ITimedMetadataStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <super::media_properties::TimedMetadataEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::media_properties::TimedMetadataEncodingProperties>(result__,)
          }
        }pub fn copy(&self) ->  ::winrt::Result<TimedMetadataStreamDescriptor>{
          let this =  &::winrt::Interface::cast::<ITimedMetadataStreamDescriptor>(self).unwrap();
          unsafe {
            let mut result__: <TimedMetadataStreamDescriptor as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<TimedMetadataStreamDescriptor>(result__)
          }
        }pub fn create< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::TimedMetadataEncodingProperties, >, >, >(encoding_properties:T0__,) ->  ::winrt::Result<TimedMetadataStreamDescriptor>{
          Self::ITimedMetadataStreamDescriptorFactory(|this|unsafe {
            let mut result__: <TimedMetadataStreamDescriptor as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),encoding_properties.into().abi(), &mut result__,).from_abi::<TimedMetadataStreamDescriptor>(result__)
          })
        }#[allow(non_snake_case)]fn ITimedMetadataStreamDescriptorFactory<R,F:FnOnce(&ITimedMetadataStreamDescriptorFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<TimedMetadataStreamDescriptor,ITimedMetadataStreamDescriptorFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for TimedMetadataStreamDescriptor {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for TimedMetadataStreamDescriptor {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for TimedMetadataStreamDescriptor{}
      impl::std::fmt::Debug for TimedMetadataStreamDescriptor {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for TimedMetadataStreamDescriptor {
        const NAME: & 'static str = "Windows.Media.Core.TimedMetadataStreamDescriptor";
        
      }unsafe impl::winrt::Interface for TimedMetadataStreamDescriptor {
        type Vtable = IMediaStreamDescriptor_abi;
        const IID: ::winrt::Guid =  <IMediaStreamDescriptor as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for TimedMetadataStreamDescriptor {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Core.TimedMetadataStreamDescriptor;{80f16e6e-92f7-451e-97d2-afd80742da70})");
        
      }impl::std::convert::From<TimedMetadataStreamDescriptor>for::winrt::Object {
        fn from(value:TimedMetadataStreamDescriptor) -> Self {
          value.0
        }
      }impl::std::convert::From<&TimedMetadataStreamDescriptor>for::winrt::Object {
        fn from(value: &TimedMetadataStreamDescriptor) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for TimedMetadataStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a TimedMetadataStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<TimedMetadataStreamDescriptor>for IMediaStreamDescriptor {
        fn from(value:TimedMetadataStreamDescriptor) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&TimedMetadataStreamDescriptor>for IMediaStreamDescriptor {
        fn from(value: &TimedMetadataStreamDescriptor) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor>>for TimedMetadataStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor>>for& 'a TimedMetadataStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<TimedMetadataStreamDescriptor>for IMediaStreamDescriptor2 {
        fn from(value:TimedMetadataStreamDescriptor) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&TimedMetadataStreamDescriptor>for IMediaStreamDescriptor2 {
        fn from(value: &TimedMetadataStreamDescriptor) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor2>>for TimedMetadataStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor2>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaStreamDescriptor2>>for& 'a TimedMetadataStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaStreamDescriptor2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaStreamDescriptor2>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<TimedMetadataStreamDescriptor>for ITimedMetadataStreamDescriptor {
        fn from(value:TimedMetadataStreamDescriptor) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&TimedMetadataStreamDescriptor>for ITimedMetadataStreamDescriptor {
        fn from(value: &TimedMetadataStreamDescriptor) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ITimedMetadataStreamDescriptor>>for TimedMetadataStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,ITimedMetadataStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<ITimedMetadataStreamDescriptor>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ITimedMetadataStreamDescriptor>>for& 'a TimedMetadataStreamDescriptor {
        fn into(self) ->  ::winrt::Param< 'a ,ITimedMetadataStreamDescriptor>{
          ::winrt::Param::Owned(::std::convert::Into::<ITimedMetadataStreamDescriptor>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for TimedMetadataStreamDescriptor{}
      unsafe impl::std::marker::Sync for TimedMetadataStreamDescriptor{}
      
    }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod devices {
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct CaptureSceneMode(i32);
      impl::std::convert::From<i32>for CaptureSceneMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for CaptureSceneMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for CaptureSceneMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for CaptureSceneMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for CaptureSceneMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for CaptureSceneMode{}
      impl::std::marker::Copy for CaptureSceneMode{}
      impl CaptureSceneMode {
        #![allow(non_upper_case_globals)]pub const Auto:Self = Self(0i32);
        pub const Manual:Self = Self(1i32);
        pub const Macro:Self = Self(2i32);
        pub const Portrait:Self = Self(3i32);
        pub const Sport:Self = Self(4i32);
        pub const Snow:Self = Self(5i32);
        pub const Night:Self = Self(6i32);
        pub const Beach:Self = Self(7i32);
        pub const Sunset:Self = Self(8i32);
        pub const Candlelight:Self = Self(9i32);
        pub const Landscape:Self = Self(10i32);
        pub const NightPortrait:Self = Self(11i32);
        pub const Backlit:Self = Self(12i32);
        
      }unsafe impl::winrt::Abi for CaptureSceneMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for CaptureSceneMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.CaptureSceneMode;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct MediaCaptureFocusState(i32);
      impl::std::convert::From<i32>for MediaCaptureFocusState {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for MediaCaptureFocusState {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for MediaCaptureFocusState {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for MediaCaptureFocusState {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for MediaCaptureFocusState {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCaptureFocusState{}
      impl::std::marker::Copy for MediaCaptureFocusState{}
      impl MediaCaptureFocusState {
        #![allow(non_upper_case_globals)]pub const Uninitialized:Self = Self(0i32);
        pub const Lost:Self = Self(1i32);
        pub const Searching:Self = Self(2i32);
        pub const Focused:Self = Self(3i32);
        pub const Failed:Self = Self(4i32);
        
      }unsafe impl::winrt::Abi for MediaCaptureFocusState {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for MediaCaptureFocusState {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.MediaCaptureFocusState;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AdvancedPhotoMode(i32);
      impl::std::convert::From<i32>for AdvancedPhotoMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AdvancedPhotoMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AdvancedPhotoMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AdvancedPhotoMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AdvancedPhotoMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AdvancedPhotoMode{}
      impl::std::marker::Copy for AdvancedPhotoMode{}
      impl AdvancedPhotoMode {
        #![allow(non_upper_case_globals)]pub const Auto:Self = Self(0i32);
        pub const Standard:Self = Self(1i32);
        pub const Hdr:Self = Self(2i32);
        pub const LowLight:Self = Self(3i32);
        
      }unsafe impl::winrt::Abi for AdvancedPhotoMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AdvancedPhotoMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.AdvancedPhotoMode;i4)",);
        
      }#[repr(transparent)]pub struct IMediaDeviceController(::winrt::Object);
      impl::std::clone::Clone for IMediaDeviceController {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaDeviceController {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaDeviceController {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaDeviceController{}
      impl IMediaDeviceController {
        pub fn get_available_media_stream_properties(&self,media_stream_type:super::capture::MediaStreamType,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<super::media_properties::IMediaEncodingProperties, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<super::media_properties::IMediaEncodingProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),media_stream_type, &mut result__,).from_abi::<super::super::foundation::collections::IVectorView<super::media_properties::IMediaEncodingProperties, >>(result__)
          }
        }pub fn get_media_stream_properties(&self,media_stream_type:super::capture::MediaStreamType,) ->  ::winrt::Result<super::media_properties::IMediaEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::IMediaEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),media_stream_type, &mut result__,).from_abi::<super::media_properties::IMediaEncodingProperties>(result__)
          }
        }pub fn set_media_stream_properties_async< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::IMediaEncodingProperties>, >, >(&self,media_stream_type:super::capture::MediaStreamType,media_encoding_properties:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),media_stream_type,media_encoding_properties.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaDeviceController {
        type Vtable = IMediaDeviceController_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4143510990,8346,18683,[134,252,212,69,120,243,23,230],);
        
      }#[repr(C)]pub struct IMediaDeviceController_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,media_stream_type:super::capture::MediaStreamType,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,media_stream_type:super::capture::MediaStreamType,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,media_stream_type:super::capture::MediaStreamType,media_encoding_properties: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaDeviceController {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{f6f8f5ce-209a-48fb-86fc-d44578f317e6}")
        };
        
      }impl::std::convert::From<IMediaDeviceController>for::winrt::Object {
        fn from(value:IMediaDeviceController) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaDeviceController>for::winrt::Object {
        fn from(value: &IMediaDeviceController) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaDeviceController {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaDeviceController {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAudioDeviceController(::winrt::Object);
      impl::std::clone::Clone for IAudioDeviceController {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAudioDeviceController {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAudioDeviceController {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAudioDeviceController{}
      impl IAudioDeviceController {
        pub fn set_muted(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn muted(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_volume_percent(&self,value:f32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn volume_percent(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn get_available_media_stream_properties(&self,media_stream_type:super::capture::MediaStreamType,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<super::media_properties::IMediaEncodingProperties, >, >{
          let this =  &::winrt::Interface::cast::<IMediaDeviceController>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<super::media_properties::IMediaEncodingProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),media_stream_type, &mut result__,).from_abi::<super::super::foundation::collections::IVectorView<super::media_properties::IMediaEncodingProperties, >>(result__)
          }
        }pub fn get_media_stream_properties(&self,media_stream_type:super::capture::MediaStreamType,) ->  ::winrt::Result<super::media_properties::IMediaEncodingProperties>{
          let this =  &::winrt::Interface::cast::<IMediaDeviceController>(self).unwrap();
          unsafe {
            let mut result__: <super::media_properties::IMediaEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),media_stream_type, &mut result__,).from_abi::<super::media_properties::IMediaEncodingProperties>(result__)
          }
        }pub fn set_media_stream_properties_async< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::IMediaEncodingProperties>, >, >(&self,media_stream_type:super::capture::MediaStreamType,media_encoding_properties:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IMediaDeviceController>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),media_stream_type,media_encoding_properties.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAudioDeviceController {
        type Vtable = IAudioDeviceController_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3990135688,31175,20348,[144,232,239,147,75,33,88,10],);
        
      }#[repr(C)]pub struct IAudioDeviceController_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAudioDeviceController {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{edd4a388-79c7-4f7c-90e8-ef934b21580a}")
        };
        
      }impl::std::convert::From<IAudioDeviceController>for::winrt::Object {
        fn from(value:IAudioDeviceController) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAudioDeviceController>for::winrt::Object {
        fn from(value: &IAudioDeviceController) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAudioDeviceController {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAudioDeviceController {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IAudioDeviceController>for IMediaDeviceController {
        fn from(value:IAudioDeviceController) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IAudioDeviceController>for IMediaDeviceController {
        fn from(value: &IAudioDeviceController) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaDeviceController>>for IAudioDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaDeviceController>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaDeviceController>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaDeviceController>>for& 'a IAudioDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaDeviceController>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaDeviceController>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AudioDeviceController(::winrt::Object);
      impl AudioDeviceController {
        pub fn set_muted(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn muted(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_volume_percent(&self,value:f32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn volume_percent(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn get_available_media_stream_properties(&self,media_stream_type:super::capture::MediaStreamType,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<super::media_properties::IMediaEncodingProperties, >, >{
          let this =  &::winrt::Interface::cast::<IMediaDeviceController>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<super::media_properties::IMediaEncodingProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),media_stream_type, &mut result__,).from_abi::<super::super::foundation::collections::IVectorView<super::media_properties::IMediaEncodingProperties, >>(result__)
          }
        }pub fn get_media_stream_properties(&self,media_stream_type:super::capture::MediaStreamType,) ->  ::winrt::Result<super::media_properties::IMediaEncodingProperties>{
          let this =  &::winrt::Interface::cast::<IMediaDeviceController>(self).unwrap();
          unsafe {
            let mut result__: <super::media_properties::IMediaEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),media_stream_type, &mut result__,).from_abi::<super::media_properties::IMediaEncodingProperties>(result__)
          }
        }pub fn set_media_stream_properties_async< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::IMediaEncodingProperties>, >, >(&self,media_stream_type:super::capture::MediaStreamType,media_encoding_properties:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IMediaDeviceController>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),media_stream_type,media_encoding_properties.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }impl::std::clone::Clone for AudioDeviceController {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AudioDeviceController {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AudioDeviceController{}
      impl::std::fmt::Debug for AudioDeviceController {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AudioDeviceController {
        const NAME: & 'static str = "Windows.Media.Devices.AudioDeviceController";
        
      }unsafe impl::winrt::Interface for AudioDeviceController {
        type Vtable = IAudioDeviceController_abi;
        const IID: ::winrt::Guid =  <IAudioDeviceController as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AudioDeviceController {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.AudioDeviceController;{edd4a388-79c7-4f7c-90e8-ef934b21580a})");
        
      }impl::std::convert::From<AudioDeviceController>for::winrt::Object {
        fn from(value:AudioDeviceController) -> Self {
          value.0
        }
      }impl::std::convert::From<&AudioDeviceController>for::winrt::Object {
        fn from(value: &AudioDeviceController) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AudioDeviceController {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AudioDeviceController {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AudioDeviceController>for IAudioDeviceController {
        fn from(value:AudioDeviceController) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AudioDeviceController>for IAudioDeviceController {
        fn from(value: &AudioDeviceController) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioDeviceController>>for AudioDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAudioDeviceController>{
          ::winrt::Param::Owned(::std::convert::Into::<IAudioDeviceController>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioDeviceController>>for& 'a AudioDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAudioDeviceController>{
          ::winrt::Param::Owned(::std::convert::Into::<IAudioDeviceController>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AudioDeviceController>for IMediaDeviceController {
        fn from(value:AudioDeviceController) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AudioDeviceController>for IMediaDeviceController {
        fn from(value: &AudioDeviceController) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaDeviceController>>for AudioDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaDeviceController>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaDeviceController>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaDeviceController>>for& 'a AudioDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaDeviceController>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaDeviceController>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAdvancedVideoCaptureDeviceController(::winrt::Object);
      impl::std::clone::Clone for IAdvancedVideoCaptureDeviceController {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAdvancedVideoCaptureDeviceController {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAdvancedVideoCaptureDeviceController {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAdvancedVideoCaptureDeviceController{}
      impl IAdvancedVideoCaptureDeviceController {
        pub fn set_device_property< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,property_id:T0__,property_value:T1__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),property_id.into().abi(),property_value.into().abi(),).ok()
          }
        }pub fn get_device_property< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,property_id:T0__,) ->  ::winrt::Result<::winrt::Object>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::Object as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),property_id.into().abi(), &mut result__,).from_abi::<::winrt::Object>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAdvancedVideoCaptureDeviceController {
        type Vtable = IAdvancedVideoCaptureDeviceController_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3731879123,11158,17795,[128,171,181,176,29,198,168,215],);
        
      }#[repr(C)]pub struct IAdvancedVideoCaptureDeviceController_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,property_id: ::winrt::RawPtr,property_value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,property_id: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAdvancedVideoCaptureDeviceController {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{de6ff4d3-2b96-4583-80ab-b5b01dc6a8d7}")
        };
        
      }impl::std::convert::From<IAdvancedVideoCaptureDeviceController>for::winrt::Object {
        fn from(value:IAdvancedVideoCaptureDeviceController) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAdvancedVideoCaptureDeviceController>for::winrt::Object {
        fn from(value: &IAdvancedVideoCaptureDeviceController) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAdvancedVideoCaptureDeviceController {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAdvancedVideoCaptureDeviceController {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ILowLagPhotoSequenceControl(::winrt::Object);
      impl::std::clone::Clone for ILowLagPhotoSequenceControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ILowLagPhotoSequenceControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ILowLagPhotoSequenceControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ILowLagPhotoSequenceControl{}
      impl ILowLagPhotoSequenceControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn max_past_photos(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn max_photos_per_second(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn past_photo_limit(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_past_photo_limit(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn photos_per_second_limit(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
          }
        }pub fn set_photos_per_second_limit(&self,value:f32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn get_highest_concurrent_frame_rate< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::IMediaEncodingProperties>, >, >(&self,capture_properties:T0__,) ->  ::winrt::Result<super::media_properties::MediaRatio>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::MediaRatio as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),capture_properties.into().abi(), &mut result__,).from_abi::<super::media_properties::MediaRatio>(result__)
          }
        }pub fn get_current_frame_rate(&self,) ->  ::winrt::Result<super::media_properties::MediaRatio>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::MediaRatio as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::media_properties::MediaRatio>(result__)
          }
        }pub fn thumbnail_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_thumbnail_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn thumbnail_format(&self,) ->  ::winrt::Result<super::media_properties::MediaThumbnailFormat>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::MediaThumbnailFormat as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::media_properties::MediaThumbnailFormat>(result__)
          }
        }pub fn set_thumbnail_format(&self,value:super::media_properties::MediaThumbnailFormat,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn desired_thumbnail_size(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_desired_thumbnail_size(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn hardware_accelerated_thumbnail_supported(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ILowLagPhotoSequenceControl {
        type Vtable = ILowLagPhotoSequenceControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1037013149,27926,16540,[186,254,185,165,148,198,253,230],);
        
      }#[repr(C)]pub struct ILowLagPhotoSequenceControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,capture_properties: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::media_properties::MediaThumbnailFormat,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::media_properties::MediaThumbnailFormat,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ILowLagPhotoSequenceControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{3dcf909d-6d16-409c-bafe-b9a594c6fde6}")
        };
        
      }impl::std::convert::From<ILowLagPhotoSequenceControl>for::winrt::Object {
        fn from(value:ILowLagPhotoSequenceControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&ILowLagPhotoSequenceControl>for::winrt::Object {
        fn from(value: &ILowLagPhotoSequenceControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ILowLagPhotoSequenceControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ILowLagPhotoSequenceControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct LowLagPhotoSequenceControl(::winrt::Object);
      impl LowLagPhotoSequenceControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn max_past_photos(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn max_photos_per_second(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn past_photo_limit(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_past_photo_limit(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn photos_per_second_limit(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
          }
        }pub fn set_photos_per_second_limit(&self,value:f32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn get_highest_concurrent_frame_rate< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::IMediaEncodingProperties>, >, >(&self,capture_properties:T0__,) ->  ::winrt::Result<super::media_properties::MediaRatio>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::MediaRatio as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),capture_properties.into().abi(), &mut result__,).from_abi::<super::media_properties::MediaRatio>(result__)
          }
        }pub fn get_current_frame_rate(&self,) ->  ::winrt::Result<super::media_properties::MediaRatio>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::MediaRatio as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::media_properties::MediaRatio>(result__)
          }
        }pub fn thumbnail_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_thumbnail_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn thumbnail_format(&self,) ->  ::winrt::Result<super::media_properties::MediaThumbnailFormat>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::MediaThumbnailFormat as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::media_properties::MediaThumbnailFormat>(result__)
          }
        }pub fn set_thumbnail_format(&self,value:super::media_properties::MediaThumbnailFormat,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn desired_thumbnail_size(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_desired_thumbnail_size(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn hardware_accelerated_thumbnail_supported(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }
      }impl::std::clone::Clone for LowLagPhotoSequenceControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for LowLagPhotoSequenceControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for LowLagPhotoSequenceControl{}
      impl::std::fmt::Debug for LowLagPhotoSequenceControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for LowLagPhotoSequenceControl {
        const NAME: & 'static str = "Windows.Media.Devices.LowLagPhotoSequenceControl";
        
      }unsafe impl::winrt::Interface for LowLagPhotoSequenceControl {
        type Vtable = ILowLagPhotoSequenceControl_abi;
        const IID: ::winrt::Guid =  <ILowLagPhotoSequenceControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for LowLagPhotoSequenceControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.LowLagPhotoSequenceControl;{3dcf909d-6d16-409c-bafe-b9a594c6fde6})");
        
      }impl::std::convert::From<LowLagPhotoSequenceControl>for::winrt::Object {
        fn from(value:LowLagPhotoSequenceControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&LowLagPhotoSequenceControl>for::winrt::Object {
        fn from(value: &LowLagPhotoSequenceControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for LowLagPhotoSequenceControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a LowLagPhotoSequenceControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<LowLagPhotoSequenceControl>for ILowLagPhotoSequenceControl {
        fn from(value:LowLagPhotoSequenceControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&LowLagPhotoSequenceControl>for ILowLagPhotoSequenceControl {
        fn from(value: &LowLagPhotoSequenceControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ILowLagPhotoSequenceControl>>for LowLagPhotoSequenceControl {
        fn into(self) ->  ::winrt::Param< 'a ,ILowLagPhotoSequenceControl>{
          ::winrt::Param::Owned(::std::convert::Into::<ILowLagPhotoSequenceControl>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ILowLagPhotoSequenceControl>>for& 'a LowLagPhotoSequenceControl {
        fn into(self) ->  ::winrt::Param< 'a ,ILowLagPhotoSequenceControl>{
          ::winrt::Param::Owned(::std::convert::Into::<ILowLagPhotoSequenceControl>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct ILowLagPhotoControl(::winrt::Object);
      impl::std::clone::Clone for ILowLagPhotoControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ILowLagPhotoControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ILowLagPhotoControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ILowLagPhotoControl{}
      impl ILowLagPhotoControl {
        pub fn get_highest_concurrent_frame_rate< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::IMediaEncodingProperties>, >, >(&self,capture_properties:T0__,) ->  ::winrt::Result<super::media_properties::MediaRatio>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::MediaRatio as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),capture_properties.into().abi(), &mut result__,).from_abi::<super::media_properties::MediaRatio>(result__)
          }
        }pub fn get_current_frame_rate(&self,) ->  ::winrt::Result<super::media_properties::MediaRatio>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::MediaRatio as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::media_properties::MediaRatio>(result__)
          }
        }pub fn thumbnail_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_thumbnail_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn thumbnail_format(&self,) ->  ::winrt::Result<super::media_properties::MediaThumbnailFormat>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::MediaThumbnailFormat as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::media_properties::MediaThumbnailFormat>(result__)
          }
        }pub fn set_thumbnail_format(&self,value:super::media_properties::MediaThumbnailFormat,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn desired_thumbnail_size(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_desired_thumbnail_size(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn hardware_accelerated_thumbnail_supported(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ILowLagPhotoControl {
        type Vtable = ILowLagPhotoControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1834765776,64223,16733,[174,230,59,170,82,147,0,201],);
        
      }#[repr(C)]pub struct ILowLagPhotoControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,capture_properties: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::media_properties::MediaThumbnailFormat,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::media_properties::MediaThumbnailFormat,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ILowLagPhotoControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{6d5c4dd0-fadf-415d-aee6-3baa529300c9}")
        };
        
      }impl::std::convert::From<ILowLagPhotoControl>for::winrt::Object {
        fn from(value:ILowLagPhotoControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&ILowLagPhotoControl>for::winrt::Object {
        fn from(value: &ILowLagPhotoControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ILowLagPhotoControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ILowLagPhotoControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct LowLagPhotoControl(::winrt::Object);
      impl LowLagPhotoControl {
        pub fn get_highest_concurrent_frame_rate< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::IMediaEncodingProperties>, >, >(&self,capture_properties:T0__,) ->  ::winrt::Result<super::media_properties::MediaRatio>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::MediaRatio as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),capture_properties.into().abi(), &mut result__,).from_abi::<super::media_properties::MediaRatio>(result__)
          }
        }pub fn get_current_frame_rate(&self,) ->  ::winrt::Result<super::media_properties::MediaRatio>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::MediaRatio as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::media_properties::MediaRatio>(result__)
          }
        }pub fn thumbnail_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_thumbnail_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn thumbnail_format(&self,) ->  ::winrt::Result<super::media_properties::MediaThumbnailFormat>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::MediaThumbnailFormat as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::media_properties::MediaThumbnailFormat>(result__)
          }
        }pub fn set_thumbnail_format(&self,value:super::media_properties::MediaThumbnailFormat,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn desired_thumbnail_size(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_desired_thumbnail_size(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn hardware_accelerated_thumbnail_supported(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }
      }impl::std::clone::Clone for LowLagPhotoControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for LowLagPhotoControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for LowLagPhotoControl{}
      impl::std::fmt::Debug for LowLagPhotoControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for LowLagPhotoControl {
        const NAME: & 'static str = "Windows.Media.Devices.LowLagPhotoControl";
        
      }unsafe impl::winrt::Interface for LowLagPhotoControl {
        type Vtable = ILowLagPhotoControl_abi;
        const IID: ::winrt::Guid =  <ILowLagPhotoControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for LowLagPhotoControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.LowLagPhotoControl;{6d5c4dd0-fadf-415d-aee6-3baa529300c9})");
        
      }impl::std::convert::From<LowLagPhotoControl>for::winrt::Object {
        fn from(value:LowLagPhotoControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&LowLagPhotoControl>for::winrt::Object {
        fn from(value: &LowLagPhotoControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for LowLagPhotoControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a LowLagPhotoControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<LowLagPhotoControl>for ILowLagPhotoControl {
        fn from(value:LowLagPhotoControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&LowLagPhotoControl>for ILowLagPhotoControl {
        fn from(value: &LowLagPhotoControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ILowLagPhotoControl>>for LowLagPhotoControl {
        fn into(self) ->  ::winrt::Param< 'a ,ILowLagPhotoControl>{
          ::winrt::Param::Owned(::std::convert::Into::<ILowLagPhotoControl>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ILowLagPhotoControl>>for& 'a LowLagPhotoControl {
        fn into(self) ->  ::winrt::Param< 'a ,ILowLagPhotoControl>{
          ::winrt::Param::Owned(::std::convert::Into::<ILowLagPhotoControl>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ISceneModeControl(::winrt::Object);
      impl::std::clone::Clone for ISceneModeControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ISceneModeControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ISceneModeControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ISceneModeControl{}
      impl ISceneModeControl {
        pub fn supported_modes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<CaptureSceneMode>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<CaptureSceneMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <CaptureSceneMode> >(result__)
          }
        }pub fn value(&self) ->  ::winrt::Result<CaptureSceneMode>{
          let this = self;
          unsafe {
            let mut result__: <CaptureSceneMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<CaptureSceneMode>(result__)
          }
        }pub fn set_value_async(&self,scene_mode:CaptureSceneMode,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),scene_mode, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ISceneModeControl {
        type Vtable = ISceneModeControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3566099191,36185,18516,[140,98,18,199,11,168,155,124],);
        
      }#[repr(C)]pub struct ISceneModeControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut CaptureSceneMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,scene_mode:CaptureSceneMode,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ISceneModeControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{d48e5af7-8d59-4854-8c62-12c70ba89b7c}")
        };
        
      }impl::std::convert::From<ISceneModeControl>for::winrt::Object {
        fn from(value:ISceneModeControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&ISceneModeControl>for::winrt::Object {
        fn from(value: &ISceneModeControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ISceneModeControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ISceneModeControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct SceneModeControl(::winrt::Object);
      impl SceneModeControl {
        pub fn supported_modes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<CaptureSceneMode>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<CaptureSceneMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <CaptureSceneMode> >(result__)
          }
        }pub fn value(&self) ->  ::winrt::Result<CaptureSceneMode>{
          let this = self;
          unsafe {
            let mut result__: <CaptureSceneMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<CaptureSceneMode>(result__)
          }
        }pub fn set_value_async(&self,scene_mode:CaptureSceneMode,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),scene_mode, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }impl::std::clone::Clone for SceneModeControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for SceneModeControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for SceneModeControl{}
      impl::std::fmt::Debug for SceneModeControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for SceneModeControl {
        const NAME: & 'static str = "Windows.Media.Devices.SceneModeControl";
        
      }unsafe impl::winrt::Interface for SceneModeControl {
        type Vtable = ISceneModeControl_abi;
        const IID: ::winrt::Guid =  <ISceneModeControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for SceneModeControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.SceneModeControl;{d48e5af7-8d59-4854-8c62-12c70ba89b7c})");
        
      }impl::std::convert::From<SceneModeControl>for::winrt::Object {
        fn from(value:SceneModeControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&SceneModeControl>for::winrt::Object {
        fn from(value: &SceneModeControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for SceneModeControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a SceneModeControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<SceneModeControl>for ISceneModeControl {
        fn from(value:SceneModeControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&SceneModeControl>for ISceneModeControl {
        fn from(value: &SceneModeControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ISceneModeControl>>for SceneModeControl {
        fn into(self) ->  ::winrt::Param< 'a ,ISceneModeControl>{
          ::winrt::Param::Owned(::std::convert::Into::<ISceneModeControl>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ISceneModeControl>>for& 'a SceneModeControl {
        fn into(self) ->  ::winrt::Param< 'a ,ISceneModeControl>{
          ::winrt::Param::Owned(::std::convert::Into::<ISceneModeControl>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ITorchControl(::winrt::Object);
      impl::std::clone::Clone for ITorchControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ITorchControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ITorchControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ITorchControl{}
      impl ITorchControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn power_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn power_percent(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
          }
        }pub fn set_power_percent(&self,value:f32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for ITorchControl {
        type Vtable = ITorchControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2785359461,33360,16748,[145,154,114,66,150,175,163,6],);
        
      }#[repr(C)]pub struct ITorchControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ITorchControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{a6053665-8250-416c-919a-724296afa306}")
        };
        
      }impl::std::convert::From<ITorchControl>for::winrt::Object {
        fn from(value:ITorchControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&ITorchControl>for::winrt::Object {
        fn from(value: &ITorchControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ITorchControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ITorchControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct TorchControl(::winrt::Object);
      impl TorchControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn power_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn power_percent(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
          }
        }pub fn set_power_percent(&self,value:f32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }impl::std::clone::Clone for TorchControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for TorchControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for TorchControl{}
      impl::std::fmt::Debug for TorchControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for TorchControl {
        const NAME: & 'static str = "Windows.Media.Devices.TorchControl";
        
      }unsafe impl::winrt::Interface for TorchControl {
        type Vtable = ITorchControl_abi;
        const IID: ::winrt::Guid =  <ITorchControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for TorchControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.TorchControl;{a6053665-8250-416c-919a-724296afa306})");
        
      }impl::std::convert::From<TorchControl>for::winrt::Object {
        fn from(value:TorchControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&TorchControl>for::winrt::Object {
        fn from(value: &TorchControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for TorchControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a TorchControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<TorchControl>for ITorchControl {
        fn from(value:TorchControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&TorchControl>for ITorchControl {
        fn from(value: &TorchControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ITorchControl>>for TorchControl {
        fn into(self) ->  ::winrt::Param< 'a ,ITorchControl>{
          ::winrt::Param::Owned(::std::convert::Into::<ITorchControl>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ITorchControl>>for& 'a TorchControl {
        fn into(self) ->  ::winrt::Param< 'a ,ITorchControl>{
          ::winrt::Param::Owned(::std::convert::Into::<ITorchControl>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IFlashControl(::winrt::Object);
      impl::std::clone::Clone for IFlashControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IFlashControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IFlashControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IFlashControl{}
      impl IFlashControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn power_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn red_eye_reduction_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn auto(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_auto(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn red_eye_reduction(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_red_eye_reduction(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn power_percent(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
          }
        }pub fn set_power_percent(&self,value:f32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IFlashControl {
        type Vtable = IFlashControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3740540350,32104,17891,[140,15,190,123,179,40,55,208],);
        
      }#[repr(C)]pub struct IFlashControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IFlashControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{def41dbe-7d68-45e3-8c0f-be7bb32837d0}")
        };
        
      }impl::std::convert::From<IFlashControl>for::winrt::Object {
        fn from(value:IFlashControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IFlashControl>for::winrt::Object {
        fn from(value: &IFlashControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFlashControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFlashControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IFlashControl2(::winrt::Object);
      impl::std::clone::Clone for IFlashControl2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IFlashControl2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IFlashControl2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IFlashControl2{}
      impl IFlashControl2 {
        pub fn assistant_light_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn assistant_light_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_assistant_light_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IFlashControl2 {
        type Vtable = IFlashControl2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2099891358,30177,19191,[189,125,78,56,225,192,108,214],);
        
      }#[repr(C)]pub struct IFlashControl2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IFlashControl2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{7d29cc9e-75e1-4af7-bd7d-4e38e1c06cd6}")
        };
        
      }impl::std::convert::From<IFlashControl2>for::winrt::Object {
        fn from(value:IFlashControl2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IFlashControl2>for::winrt::Object {
        fn from(value: &IFlashControl2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFlashControl2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFlashControl2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct FlashControl(::winrt::Object);
      impl FlashControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn power_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn red_eye_reduction_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn auto(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_auto(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn red_eye_reduction(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_red_eye_reduction(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn power_percent(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
          }
        }pub fn set_power_percent(&self,value:f32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn assistant_light_supported(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IFlashControl2>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn assistant_light_enabled(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IFlashControl2>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_assistant_light_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IFlashControl2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }impl::std::clone::Clone for FlashControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for FlashControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for FlashControl{}
      impl::std::fmt::Debug for FlashControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for FlashControl {
        const NAME: & 'static str = "Windows.Media.Devices.FlashControl";
        
      }unsafe impl::winrt::Interface for FlashControl {
        type Vtable = IFlashControl_abi;
        const IID: ::winrt::Guid =  <IFlashControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for FlashControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.FlashControl;{def41dbe-7d68-45e3-8c0f-be7bb32837d0})");
        
      }impl::std::convert::From<FlashControl>for::winrt::Object {
        fn from(value:FlashControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&FlashControl>for::winrt::Object {
        fn from(value: &FlashControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for FlashControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a FlashControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<FlashControl>for IFlashControl {
        fn from(value:FlashControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&FlashControl>for IFlashControl {
        fn from(value: &FlashControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFlashControl>>for FlashControl {
        fn into(self) ->  ::winrt::Param< 'a ,IFlashControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IFlashControl>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFlashControl>>for& 'a FlashControl {
        fn into(self) ->  ::winrt::Param< 'a ,IFlashControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IFlashControl>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<FlashControl>for IFlashControl2 {
        fn from(value:FlashControl) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&FlashControl>for IFlashControl2 {
        fn from(value: &FlashControl) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFlashControl2>>for FlashControl {
        fn into(self) ->  ::winrt::Param< 'a ,IFlashControl2>{
          ::winrt::Param::Owned(::std::convert::Into::<IFlashControl2>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFlashControl2>>for& 'a FlashControl {
        fn into(self) ->  ::winrt::Param< 'a ,IFlashControl2>{
          ::winrt::Param::Owned(::std::convert::Into::<IFlashControl2>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct ColorTemperaturePreset(i32);
      impl::std::convert::From<i32>for ColorTemperaturePreset {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for ColorTemperaturePreset {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for ColorTemperaturePreset {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for ColorTemperaturePreset {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ColorTemperaturePreset {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ColorTemperaturePreset{}
      impl::std::marker::Copy for ColorTemperaturePreset{}
      impl ColorTemperaturePreset {
        #![allow(non_upper_case_globals)]pub const Auto:Self = Self(0i32);
        pub const Manual:Self = Self(1i32);
        pub const Cloudy:Self = Self(2i32);
        pub const Daylight:Self = Self(3i32);
        pub const Flash:Self = Self(4i32);
        pub const Fluorescent:Self = Self(5i32);
        pub const Tungsten:Self = Self(6i32);
        pub const Candlelight:Self = Self(7i32);
        
      }unsafe impl::winrt::Abi for ColorTemperaturePreset {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for ColorTemperaturePreset {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.ColorTemperaturePreset;i4)",);
        
      }#[repr(transparent)]pub struct IWhiteBalanceControl(::winrt::Object);
      impl::std::clone::Clone for IWhiteBalanceControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IWhiteBalanceControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IWhiteBalanceControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IWhiteBalanceControl{}
      impl IWhiteBalanceControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn preset(&self) ->  ::winrt::Result<ColorTemperaturePreset>{
          let this = self;
          unsafe {
            let mut result__: <ColorTemperaturePreset as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<ColorTemperaturePreset>(result__)
          }
        }pub fn set_preset_async(&self,preset:ColorTemperaturePreset,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),preset, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn min(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn max(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn step(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn value(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_value_async(&self,temperature:u32,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),temperature, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IWhiteBalanceControl {
        type Vtable = IWhiteBalanceControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2015298686,29026,18888,[168,249,148,129,197,101,54,62],);
        
      }#[repr(C)]pub struct IWhiteBalanceControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut ColorTemperaturePreset,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,preset:ColorTemperaturePreset,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,temperature:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IWhiteBalanceControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{781f047e-7162-49c8-a8f9-9481c565363e}")
        };
        
      }impl::std::convert::From<IWhiteBalanceControl>for::winrt::Object {
        fn from(value:IWhiteBalanceControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IWhiteBalanceControl>for::winrt::Object {
        fn from(value: &IWhiteBalanceControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IWhiteBalanceControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IWhiteBalanceControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct WhiteBalanceControl(::winrt::Object);
      impl WhiteBalanceControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn preset(&self) ->  ::winrt::Result<ColorTemperaturePreset>{
          let this = self;
          unsafe {
            let mut result__: <ColorTemperaturePreset as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<ColorTemperaturePreset>(result__)
          }
        }pub fn set_preset_async(&self,preset:ColorTemperaturePreset,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),preset, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn min(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn max(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn step(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn value(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_value_async(&self,temperature:u32,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),temperature, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }impl::std::clone::Clone for WhiteBalanceControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for WhiteBalanceControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for WhiteBalanceControl{}
      impl::std::fmt::Debug for WhiteBalanceControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for WhiteBalanceControl {
        const NAME: & 'static str = "Windows.Media.Devices.WhiteBalanceControl";
        
      }unsafe impl::winrt::Interface for WhiteBalanceControl {
        type Vtable = IWhiteBalanceControl_abi;
        const IID: ::winrt::Guid =  <IWhiteBalanceControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for WhiteBalanceControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.WhiteBalanceControl;{781f047e-7162-49c8-a8f9-9481c565363e})");
        
      }impl::std::convert::From<WhiteBalanceControl>for::winrt::Object {
        fn from(value:WhiteBalanceControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&WhiteBalanceControl>for::winrt::Object {
        fn from(value: &WhiteBalanceControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for WhiteBalanceControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a WhiteBalanceControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<WhiteBalanceControl>for IWhiteBalanceControl {
        fn from(value:WhiteBalanceControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&WhiteBalanceControl>for IWhiteBalanceControl {
        fn from(value: &WhiteBalanceControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IWhiteBalanceControl>>for WhiteBalanceControl {
        fn into(self) ->  ::winrt::Param< 'a ,IWhiteBalanceControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IWhiteBalanceControl>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IWhiteBalanceControl>>for& 'a WhiteBalanceControl {
        fn into(self) ->  ::winrt::Param< 'a ,IWhiteBalanceControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IWhiteBalanceControl>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IExposureControl(::winrt::Object);
      impl::std::clone::Clone for IExposureControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IExposureControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IExposureControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IExposureControl{}
      impl IExposureControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn auto(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_auto_async(&self,value:bool,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn min(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn max(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn step(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn value(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn set_value_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::TimeSpan>>, >(&self,shutter_duration:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),shutter_duration.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IExposureControl {
        type Vtable = IExposureControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(166251490,44438,20264,[160,224,150,237,126,27,95,210],);
        
      }#[repr(C)]pub struct IExposureControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,shutter_duration:super::super::foundation::TimeSpan_abi,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IExposureControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{09e8cbe2-ad96-4f28-a0e0-96ed7e1b5fd2}")
        };
        
      }impl::std::convert::From<IExposureControl>for::winrt::Object {
        fn from(value:IExposureControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IExposureControl>for::winrt::Object {
        fn from(value: &IExposureControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IExposureControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IExposureControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ExposureControl(::winrt::Object);
      impl ExposureControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn auto(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_auto_async(&self,value:bool,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn min(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn max(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn step(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn value(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn set_value_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::TimeSpan>>, >(&self,shutter_duration:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),shutter_duration.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }impl::std::clone::Clone for ExposureControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for ExposureControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ExposureControl{}
      impl::std::fmt::Debug for ExposureControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for ExposureControl {
        const NAME: & 'static str = "Windows.Media.Devices.ExposureControl";
        
      }unsafe impl::winrt::Interface for ExposureControl {
        type Vtable = IExposureControl_abi;
        const IID: ::winrt::Guid =  <IExposureControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for ExposureControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.ExposureControl;{09e8cbe2-ad96-4f28-a0e0-96ed7e1b5fd2})");
        
      }impl::std::convert::From<ExposureControl>for::winrt::Object {
        fn from(value:ExposureControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&ExposureControl>for::winrt::Object {
        fn from(value: &ExposureControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ExposureControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ExposureControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<ExposureControl>for IExposureControl {
        fn from(value:ExposureControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&ExposureControl>for IExposureControl {
        fn from(value: &ExposureControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IExposureControl>>for ExposureControl {
        fn into(self) ->  ::winrt::Param< 'a ,IExposureControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IExposureControl>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IExposureControl>>for& 'a ExposureControl {
        fn into(self) ->  ::winrt::Param< 'a ,IExposureControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IExposureControl>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct FocusPreset(i32);
      impl::std::convert::From<i32>for FocusPreset {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for FocusPreset {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for FocusPreset {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for FocusPreset {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for FocusPreset {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for FocusPreset{}
      impl::std::marker::Copy for FocusPreset{}
      impl FocusPreset {
        #![allow(non_upper_case_globals)]pub const Auto:Self = Self(0i32);
        pub const Manual:Self = Self(1i32);
        pub const AutoMacro:Self = Self(2i32);
        pub const AutoNormal:Self = Self(3i32);
        pub const AutoInfinity:Self = Self(4i32);
        pub const AutoHyperfocal:Self = Self(5i32);
        
      }unsafe impl::winrt::Abi for FocusPreset {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for FocusPreset {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.FocusPreset;i4)");
        
      }#[repr(transparent)]pub struct IFocusControl(::winrt::Object);
      impl::std::clone::Clone for IFocusControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IFocusControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IFocusControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IFocusControl{}
      impl IFocusControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn supported_presets(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<FocusPreset>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<FocusPreset, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <FocusPreset> >(result__)
          }
        }pub fn preset(&self) ->  ::winrt::Result<FocusPreset>{
          let this = self;
          unsafe {
            let mut result__: <FocusPreset as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<FocusPreset>(result__)
          }
        }pub fn set_preset_async(&self,preset:FocusPreset,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),preset, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn set_preset_with_completion_option_async(&self,preset:FocusPreset,complete_before_focus:bool,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),preset,complete_before_focus, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn min(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn max(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn step(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn value(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_value_async(&self,focus:u32,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),focus, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn focus_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IFocusControl {
        type Vtable = IFocusControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3235416566,21032,17491,[177,83,133,96,101,146,178,56],);
        
      }#[repr(C)]pub struct IFocusControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut FocusPreset,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,preset:FocusPreset,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,preset:FocusPreset,complete_before_focus:bool,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,focus:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IFocusControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c0d889f6-5228-4453-b153-85606592b238}")
        };
        
      }impl::std::convert::From<IFocusControl>for::winrt::Object {
        fn from(value:IFocusControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IFocusControl>for::winrt::Object {
        fn from(value: &IFocusControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFocusControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFocusControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct FocusMode(i32);
      impl::std::convert::From<i32>for FocusMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for FocusMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for FocusMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for FocusMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for FocusMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for FocusMode{}
      impl::std::marker::Copy for FocusMode{}
      impl FocusMode {
        #![allow(non_upper_case_globals)]pub const Auto:Self = Self(0i32);
        pub const Single:Self = Self(1i32);
        pub const Continuous:Self = Self(2i32);
        pub const Manual:Self = Self(3i32);
        
      }unsafe impl::winrt::Abi for FocusMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for FocusMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.FocusMode;i4)");
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct ManualFocusDistance(i32);
      impl::std::convert::From<i32>for ManualFocusDistance {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for ManualFocusDistance {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for ManualFocusDistance {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for ManualFocusDistance {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ManualFocusDistance {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ManualFocusDistance{}
      impl::std::marker::Copy for ManualFocusDistance{}
      impl ManualFocusDistance {
        #![allow(non_upper_case_globals)]pub const Infinity:Self = Self(0i32);
        pub const Hyperfocal:Self = Self(1i32);
        pub const Nearest:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for ManualFocusDistance {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for ManualFocusDistance {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.ManualFocusDistance;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AutoFocusRange(i32);
      impl::std::convert::From<i32>for AutoFocusRange {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AutoFocusRange {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AutoFocusRange {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AutoFocusRange {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AutoFocusRange {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AutoFocusRange{}
      impl::std::marker::Copy for AutoFocusRange{}
      impl AutoFocusRange {
        #![allow(non_upper_case_globals)]pub const FullRange:Self = Self(0i32);
        pub const Macro:Self = Self(1i32);
        pub const Normal:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for AutoFocusRange {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AutoFocusRange {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.AutoFocusRange;i4)",);
        
      }#[repr(transparent)]pub struct IFocusSettings(::winrt::Object);
      impl::std::clone::Clone for IFocusSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IFocusSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IFocusSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IFocusSettings{}
      impl IFocusSettings {
        pub fn mode(&self) ->  ::winrt::Result<FocusMode>{
          let this = self;
          unsafe {
            let mut result__: <FocusMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<FocusMode>(result__)
          }
        }pub fn set_mode(&self,value:FocusMode) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn auto_focus_range(&self) ->  ::winrt::Result<AutoFocusRange>{
          let this = self;
          unsafe {
            let mut result__: <AutoFocusRange as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<AutoFocusRange>(result__)
          }
        }pub fn set_auto_focus_range(&self,value:AutoFocusRange) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn value(&self) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn set_value< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::IReference<u32>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn distance(&self,) ->  ::winrt::Result<super::super::foundation::IReference<ManualFocusDistance>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference<ManualFocusDistance, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<ManualFocusDistance, >>(result__)
          }
        }pub fn set_distance< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::IReference<ManualFocusDistance>, >, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn wait_for_focus(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_wait_for_focus(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn disable_driver_fallback(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_disable_driver_fallback(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IFocusSettings {
        type Vtable = IFocusSettings_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2039844715,12899,17013,[133,214,174,174,137,28,150,238],);
        
      }#[repr(C)]pub struct IFocusSettings_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut FocusMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:FocusMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AutoFocusRange,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:AutoFocusRange,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IFocusSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{79958f6b-3263-4275-85d6-aeae891c96ee}")
        };
        
      }impl::std::convert::From<IFocusSettings>for::winrt::Object {
        fn from(value:IFocusSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&IFocusSettings>for::winrt::Object {
        fn from(value: &IFocusSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFocusSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFocusSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct FocusSettings(::winrt::Object);
      impl FocusSettings {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn mode(&self) ->  ::winrt::Result<FocusMode>{
          let this = self;
          unsafe {
            let mut result__: <FocusMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<FocusMode>(result__)
          }
        }pub fn set_mode(&self,value:FocusMode) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn auto_focus_range(&self) ->  ::winrt::Result<AutoFocusRange>{
          let this = self;
          unsafe {
            let mut result__: <AutoFocusRange as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<AutoFocusRange>(result__)
          }
        }pub fn set_auto_focus_range(&self,value:AutoFocusRange) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn value(&self) ->  ::winrt::Result<super::super::foundation::IReference<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<u32>>(result__)
          }
        }pub fn set_value< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::IReference<u32>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn distance(&self,) ->  ::winrt::Result<super::super::foundation::IReference<ManualFocusDistance>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference<ManualFocusDistance, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<ManualFocusDistance, >>(result__)
          }
        }pub fn set_distance< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::IReference<ManualFocusDistance>, >, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn wait_for_focus(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_wait_for_focus(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn disable_driver_fallback(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_disable_driver_fallback(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),value).ok()
          }
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<FocusSettings, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for FocusSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for FocusSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for FocusSettings{}
      impl::std::fmt::Debug for FocusSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for FocusSettings {
        const NAME: & 'static str = "Windows.Media.Devices.FocusSettings";
        
      }unsafe impl::winrt::Interface for FocusSettings {
        type Vtable = IFocusSettings_abi;
        const IID: ::winrt::Guid =  <IFocusSettings as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for FocusSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.FocusSettings;{79958f6b-3263-4275-85d6-aeae891c96ee})");
        
      }impl::std::convert::From<FocusSettings>for::winrt::Object {
        fn from(value:FocusSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&FocusSettings>for::winrt::Object {
        fn from(value: &FocusSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for FocusSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a FocusSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<FocusSettings>for IFocusSettings {
        fn from(value:FocusSettings) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&FocusSettings>for IFocusSettings {
        fn from(value: &FocusSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFocusSettings>>for FocusSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IFocusSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<IFocusSettings>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFocusSettings>>for& 'a FocusSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IFocusSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<IFocusSettings>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for FocusSettings{}
      unsafe impl::std::marker::Sync for FocusSettings{}
      #[repr(transparent)]pub struct IFocusControl2(::winrt::Object);
      impl::std::clone::Clone for IFocusControl2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IFocusControl2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IFocusControl2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IFocusControl2{}
      impl IFocusControl2 {
        pub fn focus_changed_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn wait_for_focus_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn supported_focus_modes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<FocusMode>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<FocusMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <FocusMode> >(result__)
          }
        }pub fn supported_focus_distances(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<ManualFocusDistance>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<ManualFocusDistance, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <ManualFocusDistance> >(result__)
          }
        }pub fn supported_focus_ranges(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<AutoFocusRange>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<AutoFocusRange, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <AutoFocusRange> >(result__)
          }
        }pub fn mode(&self) ->  ::winrt::Result<FocusMode>{
          let this = self;
          unsafe {
            let mut result__: <FocusMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FocusMode>(result__)
          }
        }pub fn focus_state(&self) ->  ::winrt::Result<MediaCaptureFocusState>{
          let this = self;
          unsafe {
            let mut result__: <MediaCaptureFocusState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaCaptureFocusState>(result__)
          }
        }pub fn unlock_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn lock_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn configure< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,FocusSettings>>, >(&self,settings:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),settings.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IFocusControl2 {
        type Vtable = IFocusControl2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1065156424,50484,20126,[148,195,82,239,42,253,93,7],);
        
      }#[repr(C)]pub struct IFocusControl2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut FocusMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut MediaCaptureFocusState,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,settings: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IFocusControl2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{3f7cff48-c534-4e9e-94c3-52ef2afd5d07}")
        };
        
      }impl::std::convert::From<IFocusControl2>for::winrt::Object {
        fn from(value:IFocusControl2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IFocusControl2>for::winrt::Object {
        fn from(value: &IFocusControl2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFocusControl2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFocusControl2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct FocusControl(::winrt::Object);
      impl FocusControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn supported_presets(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<FocusPreset>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<FocusPreset, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <FocusPreset> >(result__)
          }
        }pub fn preset(&self) ->  ::winrt::Result<FocusPreset>{
          let this = self;
          unsafe {
            let mut result__: <FocusPreset as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<FocusPreset>(result__)
          }
        }pub fn set_preset_async(&self,preset:FocusPreset,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),preset, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn set_preset_with_completion_option_async(&self,preset:FocusPreset,complete_before_focus:bool,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),preset,complete_before_focus, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn min(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn max(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn step(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn value(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_value_async(&self,focus:u32,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),focus, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn focus_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn focus_changed_supported(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IFocusControl2>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn wait_for_focus_supported(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IFocusControl2>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn supported_focus_modes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<FocusMode>>{
          let this =  &::winrt::Interface::cast::<IFocusControl2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<FocusMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <FocusMode> >(result__)
          }
        }pub fn supported_focus_distances(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<ManualFocusDistance>, >{
          let this =  &::winrt::Interface::cast::<IFocusControl2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<ManualFocusDistance, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <ManualFocusDistance> >(result__)
          }
        }pub fn supported_focus_ranges(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<AutoFocusRange>, >{
          let this =  &::winrt::Interface::cast::<IFocusControl2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<AutoFocusRange, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <AutoFocusRange> >(result__)
          }
        }pub fn mode(&self) ->  ::winrt::Result<FocusMode>{
          let this =  &::winrt::Interface::cast::<IFocusControl2>(self).unwrap();
          unsafe {
            let mut result__: <FocusMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FocusMode>(result__)
          }
        }pub fn focus_state(&self) ->  ::winrt::Result<MediaCaptureFocusState>{
          let this =  &::winrt::Interface::cast::<IFocusControl2>(self).unwrap();
          unsafe {
            let mut result__: <MediaCaptureFocusState as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaCaptureFocusState>(result__)
          }
        }pub fn unlock_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IFocusControl2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn lock_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IFocusControl2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn configure< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,FocusSettings>>, >(&self,settings:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IFocusControl2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),settings.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for FocusControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for FocusControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for FocusControl{}
      impl::std::fmt::Debug for FocusControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for FocusControl {
        const NAME: & 'static str = "Windows.Media.Devices.FocusControl";
        
      }unsafe impl::winrt::Interface for FocusControl {
        type Vtable = IFocusControl_abi;
        const IID: ::winrt::Guid =  <IFocusControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for FocusControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.FocusControl;{c0d889f6-5228-4453-b153-85606592b238})");
        
      }impl::std::convert::From<FocusControl>for::winrt::Object {
        fn from(value:FocusControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&FocusControl>for::winrt::Object {
        fn from(value: &FocusControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for FocusControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a FocusControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<FocusControl>for IFocusControl {
        fn from(value:FocusControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&FocusControl>for IFocusControl {
        fn from(value: &FocusControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFocusControl>>for FocusControl {
        fn into(self) ->  ::winrt::Param< 'a ,IFocusControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IFocusControl>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFocusControl>>for& 'a FocusControl {
        fn into(self) ->  ::winrt::Param< 'a ,IFocusControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IFocusControl>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<FocusControl>for IFocusControl2 {
        fn from(value:FocusControl) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&FocusControl>for IFocusControl2 {
        fn from(value: &FocusControl) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFocusControl2>>for FocusControl {
        fn into(self) ->  ::winrt::Param< 'a ,IFocusControl2>{
          ::winrt::Param::Owned(::std::convert::Into::<IFocusControl2>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFocusControl2>>for& 'a FocusControl {
        fn into(self) ->  ::winrt::Param< 'a ,IFocusControl2>{
          ::winrt::Param::Owned(::std::convert::Into::<IFocusControl2>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IExposureCompensationControl(::winrt::Object);
      impl::std::clone::Clone for IExposureCompensationControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IExposureCompensationControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IExposureCompensationControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IExposureCompensationControl{}
      impl IExposureCompensationControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn min(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn max(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn step(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn value(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
          }
        }pub fn set_value_async(&self,value:f32,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IExposureCompensationControl {
        type Vtable = IExposureCompensationControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2177427508,56556,16401,[166,16,31,56,71,230,74,202],);
        
      }#[repr(C)]pub struct IExposureCompensationControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IExposureCompensationControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{81c8e834-dcec-4011-a610-1f3847e64aca}")
        };
        
      }impl::std::convert::From<IExposureCompensationControl>for::winrt::Object {
        fn from(value:IExposureCompensationControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IExposureCompensationControl>for::winrt::Object {
        fn from(value: &IExposureCompensationControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IExposureCompensationControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IExposureCompensationControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ExposureCompensationControl(::winrt::Object);
      impl ExposureCompensationControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn min(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn max(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn step(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn value(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
          }
        }pub fn set_value_async(&self,value:f32,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }impl::std::clone::Clone for ExposureCompensationControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for ExposureCompensationControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ExposureCompensationControl{}
      impl::std::fmt::Debug for ExposureCompensationControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for ExposureCompensationControl {
        const NAME: & 'static str = "Windows.Media.Devices.ExposureCompensationControl";
        
      }unsafe impl::winrt::Interface for ExposureCompensationControl {
        type Vtable = IExposureCompensationControl_abi;
        const IID: ::winrt::Guid =  <IExposureCompensationControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for ExposureCompensationControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.ExposureCompensationControl;{81c8e834-dcec-4011-a610-1f3847e64aca})");
        
      }impl::std::convert::From<ExposureCompensationControl>for::winrt::Object {
        fn from(value:ExposureCompensationControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&ExposureCompensationControl>for::winrt::Object {
        fn from(value: &ExposureCompensationControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ExposureCompensationControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ExposureCompensationControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<ExposureCompensationControl>for IExposureCompensationControl {
        fn from(value:ExposureCompensationControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&ExposureCompensationControl>for IExposureCompensationControl {
        fn from(value: &ExposureCompensationControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IExposureCompensationControl>>for ExposureCompensationControl {
        fn into(self) ->  ::winrt::Param< 'a ,IExposureCompensationControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IExposureCompensationControl>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IExposureCompensationControl>>for& 'a ExposureCompensationControl {
        fn into(self) ->  ::winrt::Param< 'a ,IExposureCompensationControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IExposureCompensationControl>::into(::std::clone::Clone::clone(self),),)
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct IsoSpeedPreset(i32);
      impl::std::convert::From<i32>for IsoSpeedPreset {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for IsoSpeedPreset {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for IsoSpeedPreset {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for IsoSpeedPreset {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IsoSpeedPreset {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IsoSpeedPreset{}
      impl::std::marker::Copy for IsoSpeedPreset{}
      impl IsoSpeedPreset {
        #![allow(non_upper_case_globals)]pub const Auto:Self = Self(0i32);
        pub const Iso50:Self = Self(1i32);
        pub const Iso80:Self = Self(2i32);
        pub const Iso100:Self = Self(3i32);
        pub const Iso200:Self = Self(4i32);
        pub const Iso400:Self = Self(5i32);
        pub const Iso800:Self = Self(6i32);
        pub const Iso1600:Self = Self(7i32);
        pub const Iso3200:Self = Self(8i32);
        pub const Iso6400:Self = Self(9i32);
        pub const Iso12800:Self = Self(10i32);
        pub const Iso25600:Self = Self(11i32);
        
      }unsafe impl::winrt::Abi for IsoSpeedPreset {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for IsoSpeedPreset {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.IsoSpeedPreset;i4)",);
        
      }#[repr(transparent)]pub struct IIsoSpeedControl(::winrt::Object);
      impl::std::clone::Clone for IIsoSpeedControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IIsoSpeedControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IIsoSpeedControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IIsoSpeedControl{}
      impl IIsoSpeedControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn supported_presets(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<IsoSpeedPreset>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<IsoSpeedPreset, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <IsoSpeedPreset> >(result__)
          }
        }pub fn preset(&self) ->  ::winrt::Result<IsoSpeedPreset>{
          let this = self;
          unsafe {
            let mut result__: <IsoSpeedPreset as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<IsoSpeedPreset>(result__)
          }
        }pub fn set_preset_async(&self,preset:IsoSpeedPreset,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),preset, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IIsoSpeedControl {
        type Vtable = IIsoSpeedControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(666288930,9645,20251,[170,171,82,74,179,118,202,51],);
        
      }#[repr(C)]pub struct IIsoSpeedControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut IsoSpeedPreset,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,preset:IsoSpeedPreset,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IIsoSpeedControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{27b6c322-25ad-4f1b-aaab-524ab376ca33}")
        };
        
      }impl::std::convert::From<IIsoSpeedControl>for::winrt::Object {
        fn from(value:IIsoSpeedControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IIsoSpeedControl>for::winrt::Object {
        fn from(value: &IIsoSpeedControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IIsoSpeedControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IIsoSpeedControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IIsoSpeedControl2(::winrt::Object);
      impl::std::clone::Clone for IIsoSpeedControl2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IIsoSpeedControl2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IIsoSpeedControl2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IIsoSpeedControl2{}
      impl IIsoSpeedControl2 {
        pub fn min(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn max(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn step(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn value(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_value_async(&self,iso_speed:u32,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),iso_speed, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn auto(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_auto_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IIsoSpeedControl2 {
        type Vtable = IIsoSpeedControl2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1863678194,28023,20362,[140,47,97,48,182,57,80,83],);
        
      }#[repr(C)]pub struct IIsoSpeedControl2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,iso_speed:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IIsoSpeedControl2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{6f1578f2-6d77-4f8a-8c2f-6130b6395053}")
        };
        
      }impl::std::convert::From<IIsoSpeedControl2>for::winrt::Object {
        fn from(value:IIsoSpeedControl2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IIsoSpeedControl2>for::winrt::Object {
        fn from(value: &IIsoSpeedControl2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IIsoSpeedControl2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IIsoSpeedControl2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IsoSpeedControl(::winrt::Object);
      impl IsoSpeedControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn supported_presets(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<IsoSpeedPreset>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<IsoSpeedPreset, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <IsoSpeedPreset> >(result__)
          }
        }pub fn preset(&self) ->  ::winrt::Result<IsoSpeedPreset>{
          let this = self;
          unsafe {
            let mut result__: <IsoSpeedPreset as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<IsoSpeedPreset>(result__)
          }
        }pub fn set_preset_async(&self,preset:IsoSpeedPreset,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),preset, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn min(&self) ->  ::winrt::Result<u32>{
          let this =  &::winrt::Interface::cast::<IIsoSpeedControl2>(self).unwrap();
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn max(&self) ->  ::winrt::Result<u32>{
          let this =  &::winrt::Interface::cast::<IIsoSpeedControl2>(self).unwrap();
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn step(&self) ->  ::winrt::Result<u32>{
          let this =  &::winrt::Interface::cast::<IIsoSpeedControl2>(self).unwrap();
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn value(&self) ->  ::winrt::Result<u32>{
          let this =  &::winrt::Interface::cast::<IIsoSpeedControl2>(self).unwrap();
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_value_async(&self,iso_speed:u32,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IIsoSpeedControl2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),iso_speed, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn auto(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IIsoSpeedControl2>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_auto_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IIsoSpeedControl2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }impl::std::clone::Clone for IsoSpeedControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for IsoSpeedControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IsoSpeedControl{}
      impl::std::fmt::Debug for IsoSpeedControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for IsoSpeedControl {
        const NAME: & 'static str = "Windows.Media.Devices.IsoSpeedControl";
        
      }unsafe impl::winrt::Interface for IsoSpeedControl {
        type Vtable = IIsoSpeedControl_abi;
        const IID: ::winrt::Guid =  <IIsoSpeedControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for IsoSpeedControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.IsoSpeedControl;{27b6c322-25ad-4f1b-aaab-524ab376ca33})");
        
      }impl::std::convert::From<IsoSpeedControl>for::winrt::Object {
        fn from(value:IsoSpeedControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IsoSpeedControl>for::winrt::Object {
        fn from(value: &IsoSpeedControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IsoSpeedControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IsoSpeedControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IsoSpeedControl>for IIsoSpeedControl {
        fn from(value:IsoSpeedControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&IsoSpeedControl>for IIsoSpeedControl {
        fn from(value: &IsoSpeedControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IIsoSpeedControl>>for IsoSpeedControl {
        fn into(self) ->  ::winrt::Param< 'a ,IIsoSpeedControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IIsoSpeedControl>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IIsoSpeedControl>>for& 'a IsoSpeedControl {
        fn into(self) ->  ::winrt::Param< 'a ,IIsoSpeedControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IIsoSpeedControl>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IsoSpeedControl>for IIsoSpeedControl2 {
        fn from(value:IsoSpeedControl) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IsoSpeedControl>for IIsoSpeedControl2 {
        fn from(value: &IsoSpeedControl) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IIsoSpeedControl2>>for IsoSpeedControl {
        fn into(self) ->  ::winrt::Param< 'a ,IIsoSpeedControl2>{
          ::winrt::Param::Owned(::std::convert::Into::<IIsoSpeedControl2>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IIsoSpeedControl2>>for& 'a IsoSpeedControl {
        fn into(self) ->  ::winrt::Param< 'a ,IIsoSpeedControl2>{
          ::winrt::Param::Owned(::std::convert::Into::<IIsoSpeedControl2>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IRegionOfInterest(::winrt::Object);
      impl::std::clone::Clone for IRegionOfInterest {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IRegionOfInterest {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IRegionOfInterest {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IRegionOfInterest{}
      impl IRegionOfInterest {
        pub fn auto_focus_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_auto_focus_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn auto_white_balance_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_auto_white_balance_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn auto_exposure_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_auto_exposure_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn bounds(&self) ->  ::winrt::Result<super::super::foundation::Rect>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Rect as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::Rect>(result__)
          }
        }pub fn set_bounds< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Rect>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IRegionOfInterest {
        type Vtable = IRegionOfInterest_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3857500212,52838,19973,[167,143,207,57,26,94,194,209],);
        
      }#[repr(C)]pub struct IRegionOfInterest_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::Rect_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::foundation::Rect_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IRegionOfInterest {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{e5ecc834-ce66-4e05-a78f-cf391a5ec2d1}")
        };
        
      }impl::std::convert::From<IRegionOfInterest>for::winrt::Object {
        fn from(value:IRegionOfInterest) -> Self {
          value.0
        }
      }impl::std::convert::From<&IRegionOfInterest>for::winrt::Object {
        fn from(value: &IRegionOfInterest) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IRegionOfInterest {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IRegionOfInterest {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct RegionOfInterestType(i32);
      impl::std::convert::From<i32>for RegionOfInterestType {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for RegionOfInterestType {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for RegionOfInterestType {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for RegionOfInterestType {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for RegionOfInterestType {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for RegionOfInterestType{}
      impl::std::marker::Copy for RegionOfInterestType{}
      impl RegionOfInterestType {
        #![allow(non_upper_case_globals)]pub const Unknown:Self = Self(0i32);
        pub const Face:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for RegionOfInterestType {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for RegionOfInterestType {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.RegionOfInterestType;i4)",);
        
      }#[repr(transparent)]pub struct IRegionOfInterest2(::winrt::Object);
      impl::std::clone::Clone for IRegionOfInterest2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IRegionOfInterest2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IRegionOfInterest2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IRegionOfInterest2{}
      impl IRegionOfInterest2 {
        pub fn r#type(&self) ->  ::winrt::Result<RegionOfInterestType>{
          let this = self;
          unsafe {
            let mut result__: <RegionOfInterestType as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<RegionOfInterestType>(result__)
          }
        }pub fn set_type(&self,value:RegionOfInterestType) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn bounds_normalized(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_bounds_normalized(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn weight(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_weight(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IRegionOfInterest2 {
        type Vtable = IRegionOfInterest2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(436087441,29610,19793,[138,157,86,204,247,219,127,84],);
        
      }#[repr(C)]pub struct IRegionOfInterest2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut RegionOfInterestType,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:RegionOfInterestType,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IRegionOfInterest2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{19fe2a91-73aa-4d51-8a9d-56ccf7db7f54}")
        };
        
      }impl::std::convert::From<IRegionOfInterest2>for::winrt::Object {
        fn from(value:IRegionOfInterest2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IRegionOfInterest2>for::winrt::Object {
        fn from(value: &IRegionOfInterest2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IRegionOfInterest2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IRegionOfInterest2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct RegionOfInterest(::winrt::Object);
      impl RegionOfInterest {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn auto_focus_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_auto_focus_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn auto_white_balance_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_auto_white_balance_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn auto_exposure_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn set_auto_exposure_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn bounds(&self) ->  ::winrt::Result<super::super::foundation::Rect>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Rect as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::Rect>(result__)
          }
        }pub fn set_bounds< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::Rect>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn r#type(&self) ->  ::winrt::Result<RegionOfInterestType>{
          let this =  &::winrt::Interface::cast::<IRegionOfInterest2>(self).unwrap();
          unsafe {
            let mut result__: <RegionOfInterestType as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<RegionOfInterestType>(result__)
          }
        }pub fn set_type(&self,value:RegionOfInterestType) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IRegionOfInterest2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn bounds_normalized(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IRegionOfInterest2>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_bounds_normalized(&self,value:bool) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IRegionOfInterest2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn weight(&self) ->  ::winrt::Result<u32>{
          let this =  &::winrt::Interface::cast::<IRegionOfInterest2>(self).unwrap();
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_weight(&self,value:u32) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IRegionOfInterest2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
          }
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<RegionOfInterest, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for RegionOfInterest {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for RegionOfInterest {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for RegionOfInterest{}
      impl::std::fmt::Debug for RegionOfInterest {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for RegionOfInterest {
        const NAME: & 'static str = "Windows.Media.Devices.RegionOfInterest";
        
      }unsafe impl::winrt::Interface for RegionOfInterest {
        type Vtable = IRegionOfInterest_abi;
        const IID: ::winrt::Guid =  <IRegionOfInterest as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for RegionOfInterest {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.RegionOfInterest;{e5ecc834-ce66-4e05-a78f-cf391a5ec2d1})");
        
      }impl::std::convert::From<RegionOfInterest>for::winrt::Object {
        fn from(value:RegionOfInterest) -> Self {
          value.0
        }
      }impl::std::convert::From<&RegionOfInterest>for::winrt::Object {
        fn from(value: &RegionOfInterest) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for RegionOfInterest {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a RegionOfInterest {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<RegionOfInterest>for IRegionOfInterest {
        fn from(value:RegionOfInterest) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&RegionOfInterest>for IRegionOfInterest {
        fn from(value: &RegionOfInterest) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IRegionOfInterest>>for RegionOfInterest {
        fn into(self) ->  ::winrt::Param< 'a ,IRegionOfInterest>{
          ::winrt::Param::Owned(::std::convert::Into::<IRegionOfInterest>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IRegionOfInterest>>for& 'a RegionOfInterest {
        fn into(self) ->  ::winrt::Param< 'a ,IRegionOfInterest>{
          ::winrt::Param::Owned(::std::convert::Into::<IRegionOfInterest>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<RegionOfInterest>for IRegionOfInterest2 {
        fn from(value:RegionOfInterest) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&RegionOfInterest>for IRegionOfInterest2 {
        fn from(value: &RegionOfInterest) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IRegionOfInterest2>>for RegionOfInterest {
        fn into(self) ->  ::winrt::Param< 'a ,IRegionOfInterest2>{
          ::winrt::Param::Owned(::std::convert::Into::<IRegionOfInterest2>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IRegionOfInterest2>>for& 'a RegionOfInterest {
        fn into(self) ->  ::winrt::Param< 'a ,IRegionOfInterest2>{
          ::winrt::Param::Owned(::std::convert::Into::<IRegionOfInterest2>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for RegionOfInterest{}
      unsafe impl::std::marker::Sync for RegionOfInterest{}
      #[repr(transparent)]pub struct IRegionsOfInterestControl(::winrt::Object);
      impl::std::clone::Clone for IRegionsOfInterestControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IRegionsOfInterestControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IRegionsOfInterestControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IRegionsOfInterestControl{}
      impl IRegionsOfInterestControl {
        pub fn max_regions(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_regions_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<RegionOfInterest>, >, >, >(&self,regions:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),regions.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn set_regions_with_lock_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<RegionOfInterest>, >, >, >(&self,regions:T0__,lock_values:bool,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),regions.into().abi(),lock_values, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn clear_regions_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn auto_focus_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn auto_white_balance_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn auto_exposure_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IRegionsOfInterestControl {
        type Vtable = IRegionsOfInterestControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3273913639,43787,17752,[139,91,223,86,147,219,3,120],);
        
      }#[repr(C)]pub struct IRegionsOfInterestControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,regions: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,regions: ::winrt::RawPtr,lock_values:bool,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IRegionsOfInterestControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c323f527-ab0b-4558-8b5b-df5693db0378}")
        };
        
      }impl::std::convert::From<IRegionsOfInterestControl>for::winrt::Object {
        fn from(value:IRegionsOfInterestControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IRegionsOfInterestControl>for::winrt::Object {
        fn from(value: &IRegionsOfInterestControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IRegionsOfInterestControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IRegionsOfInterestControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct RegionsOfInterestControl(::winrt::Object);
      impl RegionsOfInterestControl {
        pub fn max_regions(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_regions_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<RegionOfInterest>, >, >, >(&self,regions:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),regions.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn set_regions_with_lock_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<RegionOfInterest>, >, >, >(&self,regions:T0__,lock_values:bool,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),regions.into().abi(),lock_values, &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn clear_regions_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn auto_focus_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn auto_white_balance_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn auto_exposure_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }
      }impl::std::clone::Clone for RegionsOfInterestControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for RegionsOfInterestControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for RegionsOfInterestControl{}
      impl::std::fmt::Debug for RegionsOfInterestControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for RegionsOfInterestControl {
        const NAME: & 'static str = "Windows.Media.Devices.RegionsOfInterestControl";
        
      }unsafe impl::winrt::Interface for RegionsOfInterestControl {
        type Vtable = IRegionsOfInterestControl_abi;
        const IID: ::winrt::Guid =  <IRegionsOfInterestControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for RegionsOfInterestControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.RegionsOfInterestControl;{c323f527-ab0b-4558-8b5b-df5693db0378})");
        
      }impl::std::convert::From<RegionsOfInterestControl>for::winrt::Object {
        fn from(value:RegionsOfInterestControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&RegionsOfInterestControl>for::winrt::Object {
        fn from(value: &RegionsOfInterestControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for RegionsOfInterestControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a RegionsOfInterestControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<RegionsOfInterestControl>for IRegionsOfInterestControl {
        fn from(value:RegionsOfInterestControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&RegionsOfInterestControl>for IRegionsOfInterestControl {
        fn from(value: &RegionsOfInterestControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IRegionsOfInterestControl>>for RegionsOfInterestControl {
        fn into(self) ->  ::winrt::Param< 'a ,IRegionsOfInterestControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IRegionsOfInterestControl>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IRegionsOfInterestControl>>for& 'a RegionsOfInterestControl {
        fn into(self) ->  ::winrt::Param< 'a ,IRegionsOfInterestControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IRegionsOfInterestControl>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct CaptureUse(i32);
      impl::std::convert::From<i32>for CaptureUse {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for CaptureUse {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for CaptureUse {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for CaptureUse {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for CaptureUse {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for CaptureUse{}
      impl::std::marker::Copy for CaptureUse{}
      impl CaptureUse {
        #![allow(non_upper_case_globals)]pub const None:Self = Self(0i32);
        pub const Photo:Self = Self(1i32);
        pub const Video:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for CaptureUse {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for CaptureUse {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.CaptureUse;i4)");
        
      }#[repr(transparent)]pub struct IAdvancedVideoCaptureDeviceController2(::winrt::Object);
      impl::std::clone::Clone for IAdvancedVideoCaptureDeviceController2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAdvancedVideoCaptureDeviceController2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAdvancedVideoCaptureDeviceController2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAdvancedVideoCaptureDeviceController2{}
      impl IAdvancedVideoCaptureDeviceController2 {
        pub fn low_lag_photo_sequence(&self,) ->  ::winrt::Result<LowLagPhotoSequenceControl>{
          let this = self;
          unsafe {
            let mut result__: <LowLagPhotoSequenceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<LowLagPhotoSequenceControl>(result__)
          }
        }pub fn low_lag_photo(&self) ->  ::winrt::Result<LowLagPhotoControl>{
          let this = self;
          unsafe {
            let mut result__: <LowLagPhotoControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<LowLagPhotoControl>(result__)
          }
        }pub fn scene_mode_control(&self) ->  ::winrt::Result<SceneModeControl>{
          let this = self;
          unsafe {
            let mut result__: <SceneModeControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<SceneModeControl>(result__)
          }
        }pub fn torch_control(&self) ->  ::winrt::Result<TorchControl>{
          let this = self;
          unsafe {
            let mut result__: <TorchControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<TorchControl>(result__)
          }
        }pub fn flash_control(&self) ->  ::winrt::Result<FlashControl>{
          let this = self;
          unsafe {
            let mut result__: <FlashControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FlashControl>(result__)
          }
        }pub fn white_balance_control(&self) ->  ::winrt::Result<WhiteBalanceControl>{
          let this = self;
          unsafe {
            let mut result__: <WhiteBalanceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<WhiteBalanceControl>(result__)
          }
        }pub fn exposure_control(&self) ->  ::winrt::Result<ExposureControl>{
          let this = self;
          unsafe {
            let mut result__: <ExposureControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<ExposureControl>(result__)
          }
        }pub fn focus_control(&self) ->  ::winrt::Result<FocusControl>{
          let this = self;
          unsafe {
            let mut result__: <FocusControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FocusControl>(result__)
          }
        }pub fn exposure_compensation_control(&self,) ->  ::winrt::Result<ExposureCompensationControl>{
          let this = self;
          unsafe {
            let mut result__: <ExposureCompensationControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<ExposureCompensationControl>(result__)
          }
        }pub fn iso_speed_control(&self) ->  ::winrt::Result<IsoSpeedControl>{
          let this = self;
          unsafe {
            let mut result__: <IsoSpeedControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<IsoSpeedControl>(result__)
          }
        }pub fn regions_of_interest_control(&self,) ->  ::winrt::Result<RegionsOfInterestControl>{
          let this = self;
          unsafe {
            let mut result__: <RegionsOfInterestControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<RegionsOfInterestControl>(result__)
          }
        }pub fn primary_use(&self) ->  ::winrt::Result<CaptureUse>{
          let this = self;
          unsafe {
            let mut result__: <CaptureUse as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<CaptureUse>(result__)
          }
        }pub fn set_primary_use(&self,value:CaptureUse) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAdvancedVideoCaptureDeviceController2 {
        type Vtable = IAdvancedVideoCaptureDeviceController2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2344177551,61722,17371,[180,2,17,147,11,128,174,86],);
        
      }#[repr(C)]pub struct IAdvancedVideoCaptureDeviceController2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut CaptureUse,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:CaptureUse,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAdvancedVideoCaptureDeviceController2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{8bb94f8f-f11a-43db-b402-11930b80ae56}")
        };
        
      }impl::std::convert::From<IAdvancedVideoCaptureDeviceController2>for::winrt::Object {
        fn from(value:IAdvancedVideoCaptureDeviceController2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAdvancedVideoCaptureDeviceController2>for::winrt::Object {
        fn from(value: &IAdvancedVideoCaptureDeviceController2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAdvancedVideoCaptureDeviceController2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAdvancedVideoCaptureDeviceController2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IPhotoConfirmationControl(::winrt::Object);
      impl::std::clone::Clone for IPhotoConfirmationControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IPhotoConfirmationControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IPhotoConfirmationControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IPhotoConfirmationControl{}
      impl IPhotoConfirmationControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn pixel_format(&self,) ->  ::winrt::Result<super::media_properties::MediaPixelFormat>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::MediaPixelFormat as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::media_properties::MediaPixelFormat>(result__)
          }
        }pub fn set_pixel_format(&self,format:super::media_properties::MediaPixelFormat,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),format).ok()
          }
        }
      }unsafe impl::winrt::Interface for IPhotoConfirmationControl {
        type Vtable = IPhotoConfirmationControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3371430755,65374,17794,[169,168,5,80,248,90,74,118],);
        
      }#[repr(C)]pub struct IPhotoConfirmationControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::media_properties::MediaPixelFormat,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,format:super::media_properties::MediaPixelFormat,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IPhotoConfirmationControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c8f3f363-ff5e-4582-a9a8-0550f85a4a76}")
        };
        
      }impl::std::convert::From<IPhotoConfirmationControl>for::winrt::Object {
        fn from(value:IPhotoConfirmationControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IPhotoConfirmationControl>for::winrt::Object {
        fn from(value: &IPhotoConfirmationControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IPhotoConfirmationControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IPhotoConfirmationControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct PhotoConfirmationControl(::winrt::Object);
      impl PhotoConfirmationControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn pixel_format(&self,) ->  ::winrt::Result<super::media_properties::MediaPixelFormat>{
          let this = self;
          unsafe {
            let mut result__: <super::media_properties::MediaPixelFormat as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::media_properties::MediaPixelFormat>(result__)
          }
        }pub fn set_pixel_format(&self,format:super::media_properties::MediaPixelFormat,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),format).ok()
          }
        }
      }impl::std::clone::Clone for PhotoConfirmationControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for PhotoConfirmationControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for PhotoConfirmationControl{}
      impl::std::fmt::Debug for PhotoConfirmationControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for PhotoConfirmationControl {
        const NAME: & 'static str = "Windows.Media.Devices.PhotoConfirmationControl";
        
      }unsafe impl::winrt::Interface for PhotoConfirmationControl {
        type Vtable = IPhotoConfirmationControl_abi;
        const IID: ::winrt::Guid =  <IPhotoConfirmationControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for PhotoConfirmationControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.PhotoConfirmationControl;{c8f3f363-ff5e-4582-a9a8-0550f85a4a76})");
        
      }impl::std::convert::From<PhotoConfirmationControl>for::winrt::Object {
        fn from(value:PhotoConfirmationControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&PhotoConfirmationControl>for::winrt::Object {
        fn from(value: &PhotoConfirmationControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for PhotoConfirmationControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a PhotoConfirmationControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<PhotoConfirmationControl>for IPhotoConfirmationControl {
        fn from(value:PhotoConfirmationControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&PhotoConfirmationControl>for IPhotoConfirmationControl {
        fn from(value: &PhotoConfirmationControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IPhotoConfirmationControl>>for PhotoConfirmationControl {
        fn into(self) ->  ::winrt::Param< 'a ,IPhotoConfirmationControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IPhotoConfirmationControl>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IPhotoConfirmationControl>>for& 'a PhotoConfirmationControl {
        fn into(self) ->  ::winrt::Param< 'a ,IPhotoConfirmationControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IPhotoConfirmationControl>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IZoomControl(::winrt::Object);
      impl::std::clone::Clone for IZoomControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IZoomControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IZoomControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IZoomControl{}
      impl IZoomControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn min(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn max(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn step(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn value(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
          }
        }pub fn set_value(&self,value:f32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IZoomControl {
        type Vtable = IZoomControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(975047442,13018,19479,[191,215,141,12,115,200,245,165],);
        
      }#[repr(C)]pub struct IZoomControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IZoomControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{3a1e0b12-32da-4c17-bfd7-8d0c73c8f5a5}")
        };
        
      }impl::std::convert::From<IZoomControl>for::winrt::Object {
        fn from(value:IZoomControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IZoomControl>for::winrt::Object {
        fn from(value: &IZoomControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IZoomControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IZoomControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct ZoomTransitionMode(i32);
      impl::std::convert::From<i32>for ZoomTransitionMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for ZoomTransitionMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for ZoomTransitionMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for ZoomTransitionMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ZoomTransitionMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ZoomTransitionMode{}
      impl::std::marker::Copy for ZoomTransitionMode{}
      impl ZoomTransitionMode {
        #![allow(non_upper_case_globals)]pub const Auto:Self = Self(0i32);
        pub const Direct:Self = Self(1i32);
        pub const Smooth:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for ZoomTransitionMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for ZoomTransitionMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.ZoomTransitionMode;i4)",);
        
      }#[repr(transparent)]pub struct IZoomSettings(::winrt::Object);
      impl::std::clone::Clone for IZoomSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IZoomSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IZoomSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IZoomSettings{}
      impl IZoomSettings {
        pub fn mode(&self) ->  ::winrt::Result<ZoomTransitionMode>{
          let this = self;
          unsafe {
            let mut result__: <ZoomTransitionMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<ZoomTransitionMode>(result__)
          }
        }pub fn set_mode(&self,value:ZoomTransitionMode) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn value(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn set_value(&self,value:f32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IZoomSettings {
        type Vtable = IZoomSettings_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1792437028,5300,19453,[177,143,136,254,36,70,59,82],);
        
      }#[repr(C)]pub struct IZoomSettings_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut ZoomTransitionMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:ZoomTransitionMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IZoomSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{6ad66b24-14b4-4bfd-b18f-88fe24463b52}")
        };
        
      }impl::std::convert::From<IZoomSettings>for::winrt::Object {
        fn from(value:IZoomSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&IZoomSettings>for::winrt::Object {
        fn from(value: &IZoomSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IZoomSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IZoomSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ZoomSettings(::winrt::Object);
      impl ZoomSettings {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn mode(&self) ->  ::winrt::Result<ZoomTransitionMode>{
          let this = self;
          unsafe {
            let mut result__: <ZoomTransitionMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<ZoomTransitionMode>(result__)
          }
        }pub fn set_mode(&self,value:ZoomTransitionMode) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn value(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn set_value(&self,value:f32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<ZoomSettings, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for ZoomSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for ZoomSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ZoomSettings{}
      impl::std::fmt::Debug for ZoomSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for ZoomSettings {
        const NAME: & 'static str = "Windows.Media.Devices.ZoomSettings";
        
      }unsafe impl::winrt::Interface for ZoomSettings {
        type Vtable = IZoomSettings_abi;
        const IID: ::winrt::Guid =  <IZoomSettings as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for ZoomSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.ZoomSettings;{6ad66b24-14b4-4bfd-b18f-88fe24463b52})");
        
      }impl::std::convert::From<ZoomSettings>for::winrt::Object {
        fn from(value:ZoomSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&ZoomSettings>for::winrt::Object {
        fn from(value: &ZoomSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ZoomSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ZoomSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<ZoomSettings>for IZoomSettings {
        fn from(value:ZoomSettings) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&ZoomSettings>for IZoomSettings {
        fn from(value: &ZoomSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IZoomSettings>>for ZoomSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IZoomSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<IZoomSettings>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IZoomSettings>>for& 'a ZoomSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IZoomSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<IZoomSettings>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for ZoomSettings{}
      unsafe impl::std::marker::Sync for ZoomSettings{}
      #[repr(transparent)]pub struct IZoomControl2(::winrt::Object);
      impl::std::clone::Clone for IZoomControl2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IZoomControl2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IZoomControl2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IZoomControl2{}
      impl IZoomControl2 {
        pub fn supported_modes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<ZoomTransitionMode>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<ZoomTransitionMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <ZoomTransitionMode> >(result__)
          }
        }pub fn mode(&self) ->  ::winrt::Result<ZoomTransitionMode>{
          let this = self;
          unsafe {
            let mut result__: <ZoomTransitionMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<ZoomTransitionMode>(result__)
          }
        }pub fn configure< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,ZoomSettings>>, >(&self,settings:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),settings.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IZoomControl2 {
        type Vtable = IZoomControl2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1770274224,11929,17985,[133,41,24,79,49,157,22,113],);
        
      }#[repr(C)]pub struct IZoomControl2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut ZoomTransitionMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,settings: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IZoomControl2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{69843db0-2e99-4641-8529-184f319d1671}")
        };
        
      }impl::std::convert::From<IZoomControl2>for::winrt::Object {
        fn from(value:IZoomControl2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IZoomControl2>for::winrt::Object {
        fn from(value: &IZoomControl2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IZoomControl2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IZoomControl2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ZoomControl(::winrt::Object);
      impl ZoomControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn min(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn max(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn step(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<f32>(result__)
          }
        }pub fn value(&self) ->  ::winrt::Result<f32>{
          let this = self;
          unsafe {
            let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
          }
        }pub fn set_value(&self,value:f32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn supported_modes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<ZoomTransitionMode>, >{
          let this =  &::winrt::Interface::cast::<IZoomControl2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<ZoomTransitionMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <ZoomTransitionMode> >(result__)
          }
        }pub fn mode(&self) ->  ::winrt::Result<ZoomTransitionMode>{
          let this =  &::winrt::Interface::cast::<IZoomControl2>(self).unwrap();
          unsafe {
            let mut result__: <ZoomTransitionMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<ZoomTransitionMode>(result__)
          }
        }pub fn configure< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,ZoomSettings>>, >(&self,settings:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IZoomControl2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),settings.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for ZoomControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for ZoomControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ZoomControl{}
      impl::std::fmt::Debug for ZoomControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for ZoomControl {
        const NAME: & 'static str = "Windows.Media.Devices.ZoomControl";
        
      }unsafe impl::winrt::Interface for ZoomControl {
        type Vtable = IZoomControl_abi;
        const IID: ::winrt::Guid =  <IZoomControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for ZoomControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.ZoomControl;{3a1e0b12-32da-4c17-bfd7-8d0c73c8f5a5})",);
        
      }impl::std::convert::From<ZoomControl>for::winrt::Object {
        fn from(value:ZoomControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&ZoomControl>for::winrt::Object {
        fn from(value: &ZoomControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ZoomControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ZoomControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<ZoomControl>for IZoomControl {
        fn from(value:ZoomControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&ZoomControl>for IZoomControl {
        fn from(value: &ZoomControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IZoomControl>>for ZoomControl {
        fn into(self) ->  ::winrt::Param< 'a ,IZoomControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IZoomControl>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IZoomControl>>for& 'a ZoomControl {
        fn into(self) ->  ::winrt::Param< 'a ,IZoomControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IZoomControl>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<ZoomControl>for IZoomControl2 {
        fn from(value:ZoomControl) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&ZoomControl>for IZoomControl2 {
        fn from(value: &ZoomControl) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IZoomControl2>>for ZoomControl {
        fn into(self) ->  ::winrt::Param< 'a ,IZoomControl2>{
          ::winrt::Param::Owned(::std::convert::Into::<IZoomControl2>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IZoomControl2>>for& 'a ZoomControl {
        fn into(self) ->  ::winrt::Param< 'a ,IZoomControl2>{
          ::winrt::Param::Owned(::std::convert::Into::<IZoomControl2>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAdvancedVideoCaptureDeviceController3(::winrt::Object);
      impl::std::clone::Clone for IAdvancedVideoCaptureDeviceController3 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAdvancedVideoCaptureDeviceController3 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAdvancedVideoCaptureDeviceController3 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAdvancedVideoCaptureDeviceController3{}
      impl IAdvancedVideoCaptureDeviceController3 {
        pub fn variable_photo_sequence_controller(&self,) ->  ::winrt::Result<core::VariablePhotoSequenceController>{
          let this = self;
          unsafe {
            let mut result__: <core::VariablePhotoSequenceController as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<core::VariablePhotoSequenceController>(result__)
          }
        }pub fn photo_confirmation_control(&self,) ->  ::winrt::Result<PhotoConfirmationControl>{
          let this = self;
          unsafe {
            let mut result__: <PhotoConfirmationControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<PhotoConfirmationControl>(result__)
          }
        }pub fn zoom_control(&self) ->  ::winrt::Result<ZoomControl>{
          let this = self;
          unsafe {
            let mut result__: <ZoomControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<ZoomControl>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAdvancedVideoCaptureDeviceController3 {
        type Vtable = IAdvancedVideoCaptureDeviceController3_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2844495668,60941,18188,[185,240,66,41,196,187,208,137],);
        
      }#[repr(C)]pub struct IAdvancedVideoCaptureDeviceController3_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAdvancedVideoCaptureDeviceController3 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{a98b8f34-ee0d-470c-b9f0-4229c4bbd089}")
        };
        
      }impl::std::convert::From<IAdvancedVideoCaptureDeviceController3>for::winrt::Object {
        fn from(value:IAdvancedVideoCaptureDeviceController3) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAdvancedVideoCaptureDeviceController3>for::winrt::Object {
        fn from(value: &IAdvancedVideoCaptureDeviceController3) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAdvancedVideoCaptureDeviceController3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAdvancedVideoCaptureDeviceController3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IExposurePriorityVideoControl(::winrt::Object);
      impl::std::clone::Clone for IExposurePriorityVideoControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IExposurePriorityVideoControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IExposurePriorityVideoControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IExposurePriorityVideoControl{}
      impl IExposurePriorityVideoControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IExposurePriorityVideoControl {
        type Vtable = IExposurePriorityVideoControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(749879459,20840,17009,[158,165,71,98,26,152,163,82],);
        
      }#[repr(C)]pub struct IExposurePriorityVideoControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IExposurePriorityVideoControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{2cb240a3-5168-4271-9ea5-47621a98a352}")
        };
        
      }impl::std::convert::From<IExposurePriorityVideoControl>for::winrt::Object {
        fn from(value:IExposurePriorityVideoControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IExposurePriorityVideoControl>for::winrt::Object {
        fn from(value: &IExposurePriorityVideoControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IExposurePriorityVideoControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IExposurePriorityVideoControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ExposurePriorityVideoControl(::winrt::Object);
      impl ExposurePriorityVideoControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn set_enabled(&self,value:bool) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }impl::std::clone::Clone for ExposurePriorityVideoControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for ExposurePriorityVideoControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ExposurePriorityVideoControl{}
      impl::std::fmt::Debug for ExposurePriorityVideoControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for ExposurePriorityVideoControl {
        const NAME: & 'static str = "Windows.Media.Devices.ExposurePriorityVideoControl";
        
      }unsafe impl::winrt::Interface for ExposurePriorityVideoControl {
        type Vtable = IExposurePriorityVideoControl_abi;
        const IID: ::winrt::Guid =  <IExposurePriorityVideoControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for ExposurePriorityVideoControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.ExposurePriorityVideoControl;{2cb240a3-5168-4271-9ea5-47621a98a352})");
        
      }impl::std::convert::From<ExposurePriorityVideoControl>for::winrt::Object {
        fn from(value:ExposurePriorityVideoControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&ExposurePriorityVideoControl>for::winrt::Object {
        fn from(value: &ExposurePriorityVideoControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ExposurePriorityVideoControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ExposurePriorityVideoControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<ExposurePriorityVideoControl>for IExposurePriorityVideoControl {
        fn from(value:ExposurePriorityVideoControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&ExposurePriorityVideoControl>for IExposurePriorityVideoControl {
        fn from(value: &ExposurePriorityVideoControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IExposurePriorityVideoControl>>for ExposurePriorityVideoControl {
        fn into(self) ->  ::winrt::Param< 'a ,IExposurePriorityVideoControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IExposurePriorityVideoControl>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IExposurePriorityVideoControl>>for& 'a ExposurePriorityVideoControl {
        fn into(self) ->  ::winrt::Param< 'a ,IExposurePriorityVideoControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IExposurePriorityVideoControl>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for ExposurePriorityVideoControl{}
      unsafe impl::std::marker::Sync for ExposurePriorityVideoControl{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct MediaCaptureOptimization(i32);
      impl::std::convert::From<i32>for MediaCaptureOptimization {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for MediaCaptureOptimization {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for MediaCaptureOptimization {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for MediaCaptureOptimization {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for MediaCaptureOptimization {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCaptureOptimization{}
      impl::std::marker::Copy for MediaCaptureOptimization{}
      impl MediaCaptureOptimization {
        #![allow(non_upper_case_globals)]pub const Default:Self = Self(0i32);
        pub const Quality:Self = Self(1i32);
        pub const Latency:Self = Self(2i32);
        pub const Power:Self = Self(3i32);
        pub const LatencyThenQuality:Self = Self(4i32);
        pub const LatencyThenPower:Self = Self(5i32);
        pub const PowerAndQuality:Self = Self(6i32);
        
      }unsafe impl::winrt::Abi for MediaCaptureOptimization {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for MediaCaptureOptimization {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.MediaCaptureOptimization;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct HdrVideoMode(i32);
      impl::std::convert::From<i32>for HdrVideoMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for HdrVideoMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for HdrVideoMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for HdrVideoMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for HdrVideoMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for HdrVideoMode{}
      impl::std::marker::Copy for HdrVideoMode{}
      impl HdrVideoMode {
        #![allow(non_upper_case_globals)]pub const Off:Self = Self(0i32);
        pub const On:Self = Self(1i32);
        pub const Auto:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for HdrVideoMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for HdrVideoMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.HdrVideoMode;i4)",);
        
      }#[repr(transparent)]pub struct IHdrVideoControl(::winrt::Object);
      impl::std::clone::Clone for IHdrVideoControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IHdrVideoControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IHdrVideoControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IHdrVideoControl{}
      impl IHdrVideoControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn supported_modes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<HdrVideoMode>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<HdrVideoMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <HdrVideoMode> >(result__)
          }
        }pub fn mode(&self) ->  ::winrt::Result<HdrVideoMode>{
          let this = self;
          unsafe {
            let mut result__: <HdrVideoMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<HdrVideoMode>(result__)
          }
        }pub fn set_mode(&self,value:HdrVideoMode) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IHdrVideoControl {
        type Vtable = IHdrVideoControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1440277200,12480,17343,[155,154,151,153,215,12,237,148],);
        
      }#[repr(C)]pub struct IHdrVideoControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut HdrVideoMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:HdrVideoMode,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IHdrVideoControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{55d8e2d0-30c0-43bf-9b9a-9799d70ced94}")
        };
        
      }impl::std::convert::From<IHdrVideoControl>for::winrt::Object {
        fn from(value:IHdrVideoControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IHdrVideoControl>for::winrt::Object {
        fn from(value: &IHdrVideoControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IHdrVideoControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IHdrVideoControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct HdrVideoControl(::winrt::Object);
      impl HdrVideoControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn supported_modes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<HdrVideoMode>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<HdrVideoMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <HdrVideoMode> >(result__)
          }
        }pub fn mode(&self) ->  ::winrt::Result<HdrVideoMode>{
          let this = self;
          unsafe {
            let mut result__: <HdrVideoMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<HdrVideoMode>(result__)
          }
        }pub fn set_mode(&self,value:HdrVideoMode) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }impl::std::clone::Clone for HdrVideoControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for HdrVideoControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for HdrVideoControl{}
      impl::std::fmt::Debug for HdrVideoControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for HdrVideoControl {
        const NAME: & 'static str = "Windows.Media.Devices.HdrVideoControl";
        
      }unsafe impl::winrt::Interface for HdrVideoControl {
        type Vtable = IHdrVideoControl_abi;
        const IID: ::winrt::Guid =  <IHdrVideoControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for HdrVideoControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.HdrVideoControl;{55d8e2d0-30c0-43bf-9b9a-9799d70ced94})");
        
      }impl::std::convert::From<HdrVideoControl>for::winrt::Object {
        fn from(value:HdrVideoControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&HdrVideoControl>for::winrt::Object {
        fn from(value: &HdrVideoControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for HdrVideoControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a HdrVideoControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<HdrVideoControl>for IHdrVideoControl {
        fn from(value:HdrVideoControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&HdrVideoControl>for IHdrVideoControl {
        fn from(value: &HdrVideoControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IHdrVideoControl>>for HdrVideoControl {
        fn into(self) ->  ::winrt::Param< 'a ,IHdrVideoControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IHdrVideoControl>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IHdrVideoControl>>for& 'a HdrVideoControl {
        fn into(self) ->  ::winrt::Param< 'a ,IHdrVideoControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IHdrVideoControl>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for HdrVideoControl{}
      unsafe impl::std::marker::Sync for HdrVideoControl{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct OpticalImageStabilizationMode(i32);
      impl::std::convert::From<i32>for OpticalImageStabilizationMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for OpticalImageStabilizationMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for OpticalImageStabilizationMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for OpticalImageStabilizationMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for OpticalImageStabilizationMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for OpticalImageStabilizationMode{}
      impl::std::marker::Copy for OpticalImageStabilizationMode{}
      impl OpticalImageStabilizationMode {
        #![allow(non_upper_case_globals)]pub const Off:Self = Self(0i32);
        pub const On:Self = Self(1i32);
        pub const Auto:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for OpticalImageStabilizationMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for OpticalImageStabilizationMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.OpticalImageStabilizationMode;i4)",);
        
      }#[repr(transparent)]pub struct IOpticalImageStabilizationControl(::winrt::Object);
      impl::std::clone::Clone for IOpticalImageStabilizationControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IOpticalImageStabilizationControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IOpticalImageStabilizationControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IOpticalImageStabilizationControl{}
      impl IOpticalImageStabilizationControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn supported_modes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<OpticalImageStabilizationMode, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<OpticalImageStabilizationMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IVectorView<OpticalImageStabilizationMode, >>(result__)
          }
        }pub fn mode(&self) ->  ::winrt::Result<OpticalImageStabilizationMode>{
          let this = self;
          unsafe {
            let mut result__: <OpticalImageStabilizationMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<OpticalImageStabilizationMode>(result__)
          }
        }pub fn set_mode(&self,value:OpticalImageStabilizationMode,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IOpticalImageStabilizationControl {
        type Vtable = IOpticalImageStabilizationControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3215825949,188,16955,[142,178,160,23,140,169,66,71],);
        
      }#[repr(C)]pub struct IOpticalImageStabilizationControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut OpticalImageStabilizationMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:OpticalImageStabilizationMode,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IOpticalImageStabilizationControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{bfad9c1d-00bc-423b-8eb2-a0178ca94247}")
        };
        
      }impl::std::convert::From<IOpticalImageStabilizationControl>for::winrt::Object {
        fn from(value:IOpticalImageStabilizationControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IOpticalImageStabilizationControl>for::winrt::Object {
        fn from(value: &IOpticalImageStabilizationControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IOpticalImageStabilizationControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IOpticalImageStabilizationControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct OpticalImageStabilizationControl(::winrt::Object);
      impl OpticalImageStabilizationControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn supported_modes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<OpticalImageStabilizationMode, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<OpticalImageStabilizationMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IVectorView<OpticalImageStabilizationMode, >>(result__)
          }
        }pub fn mode(&self) ->  ::winrt::Result<OpticalImageStabilizationMode>{
          let this = self;
          unsafe {
            let mut result__: <OpticalImageStabilizationMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<OpticalImageStabilizationMode>(result__)
          }
        }pub fn set_mode(&self,value:OpticalImageStabilizationMode,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }impl::std::clone::Clone for OpticalImageStabilizationControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for OpticalImageStabilizationControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for OpticalImageStabilizationControl{}
      impl::std::fmt::Debug for OpticalImageStabilizationControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for OpticalImageStabilizationControl {
        const NAME: & 'static str = "Windows.Media.Devices.OpticalImageStabilizationControl";
        
      }unsafe impl::winrt::Interface for OpticalImageStabilizationControl {
        type Vtable = IOpticalImageStabilizationControl_abi;
        const IID: ::winrt::Guid =  <IOpticalImageStabilizationControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for OpticalImageStabilizationControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.OpticalImageStabilizationControl;{bfad9c1d-00bc-423b-8eb2-a0178ca94247})");
        
      }impl::std::convert::From<OpticalImageStabilizationControl>for::winrt::Object {
        fn from(value:OpticalImageStabilizationControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&OpticalImageStabilizationControl>for::winrt::Object {
        fn from(value: &OpticalImageStabilizationControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for OpticalImageStabilizationControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a OpticalImageStabilizationControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<OpticalImageStabilizationControl>for IOpticalImageStabilizationControl {
        fn from(value:OpticalImageStabilizationControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&OpticalImageStabilizationControl>for IOpticalImageStabilizationControl {
        fn from(value: &OpticalImageStabilizationControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IOpticalImageStabilizationControl>>for OpticalImageStabilizationControl {
        fn into(self) ->  ::winrt::Param< 'a ,IOpticalImageStabilizationControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IOpticalImageStabilizationControl>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IOpticalImageStabilizationControl>>for& 'a OpticalImageStabilizationControl {
        fn into(self) ->  ::winrt::Param< 'a ,IOpticalImageStabilizationControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IOpticalImageStabilizationControl>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for OpticalImageStabilizationControl{}
      unsafe impl::std::marker::Sync for OpticalImageStabilizationControl{}
      #[repr(transparent)]pub struct IAdvancedPhotoCaptureSettings(::winrt::Object);
      impl::std::clone::Clone for IAdvancedPhotoCaptureSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAdvancedPhotoCaptureSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAdvancedPhotoCaptureSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAdvancedPhotoCaptureSettings{}
      impl IAdvancedPhotoCaptureSettings {
        pub fn mode(&self) ->  ::winrt::Result<AdvancedPhotoMode>{
          let this = self;
          unsafe {
            let mut result__: <AdvancedPhotoMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AdvancedPhotoMode>(result__)
          }
        }pub fn set_mode(&self,value:AdvancedPhotoMode) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAdvancedPhotoCaptureSettings {
        type Vtable = IAdvancedPhotoCaptureSettings_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(150177338,24,17499,[147,210,100,109,28,94,208,92],);
        
      }#[repr(C)]pub struct IAdvancedPhotoCaptureSettings_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AdvancedPhotoMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:AdvancedPhotoMode,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAdvancedPhotoCaptureSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{08f3863a-0018-445b-93d2-646d1c5ed05c}")
        };
        
      }impl::std::convert::From<IAdvancedPhotoCaptureSettings>for::winrt::Object {
        fn from(value:IAdvancedPhotoCaptureSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAdvancedPhotoCaptureSettings>for::winrt::Object {
        fn from(value: &IAdvancedPhotoCaptureSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAdvancedPhotoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAdvancedPhotoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AdvancedPhotoCaptureSettings(::winrt::Object);
      impl AdvancedPhotoCaptureSettings {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn mode(&self) ->  ::winrt::Result<AdvancedPhotoMode>{
          let this = self;
          unsafe {
            let mut result__: <AdvancedPhotoMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AdvancedPhotoMode>(result__)
          }
        }pub fn set_mode(&self,value:AdvancedPhotoMode) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<AdvancedPhotoCaptureSettings, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for AdvancedPhotoCaptureSettings {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AdvancedPhotoCaptureSettings {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AdvancedPhotoCaptureSettings{}
      impl::std::fmt::Debug for AdvancedPhotoCaptureSettings {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AdvancedPhotoCaptureSettings {
        const NAME: & 'static str = "Windows.Media.Devices.AdvancedPhotoCaptureSettings";
        
      }unsafe impl::winrt::Interface for AdvancedPhotoCaptureSettings {
        type Vtable = IAdvancedPhotoCaptureSettings_abi;
        const IID: ::winrt::Guid =  <IAdvancedPhotoCaptureSettings as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AdvancedPhotoCaptureSettings {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.AdvancedPhotoCaptureSettings;{08f3863a-0018-445b-93d2-646d1c5ed05c})");
        
      }impl::std::convert::From<AdvancedPhotoCaptureSettings>for::winrt::Object {
        fn from(value:AdvancedPhotoCaptureSettings) -> Self {
          value.0
        }
      }impl::std::convert::From<&AdvancedPhotoCaptureSettings>for::winrt::Object {
        fn from(value: &AdvancedPhotoCaptureSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AdvancedPhotoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AdvancedPhotoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AdvancedPhotoCaptureSettings>for IAdvancedPhotoCaptureSettings {
        fn from(value:AdvancedPhotoCaptureSettings) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AdvancedPhotoCaptureSettings>for IAdvancedPhotoCaptureSettings {
        fn from(value: &AdvancedPhotoCaptureSettings) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedPhotoCaptureSettings>>for AdvancedPhotoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedPhotoCaptureSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedPhotoCaptureSettings>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedPhotoCaptureSettings>>for& 'a AdvancedPhotoCaptureSettings {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedPhotoCaptureSettings>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedPhotoCaptureSettings>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for AdvancedPhotoCaptureSettings{}
      unsafe impl::std::marker::Sync for AdvancedPhotoCaptureSettings{}
      #[repr(transparent)]pub struct IAdvancedPhotoControl(::winrt::Object);
      impl::std::clone::Clone for IAdvancedPhotoControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAdvancedPhotoControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAdvancedPhotoControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAdvancedPhotoControl{}
      impl IAdvancedPhotoControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn supported_modes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<AdvancedPhotoMode>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<AdvancedPhotoMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <AdvancedPhotoMode> >(result__)
          }
        }pub fn mode(&self) ->  ::winrt::Result<AdvancedPhotoMode>{
          let this = self;
          unsafe {
            let mut result__: <AdvancedPhotoMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<AdvancedPhotoMode>(result__)
          }
        }pub fn configure< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,AdvancedPhotoCaptureSettings>>, >(&self,settings:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),settings.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAdvancedPhotoControl {
        type Vtable = IAdvancedPhotoControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3316733062,36865,18050,[147,9,104,234,224,8,14,236],);
        
      }#[repr(C)]pub struct IAdvancedPhotoControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut AdvancedPhotoMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,settings: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAdvancedPhotoControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c5b15486-9001-4682-9309-68eae0080eec}")
        };
        
      }impl::std::convert::From<IAdvancedPhotoControl>for::winrt::Object {
        fn from(value:IAdvancedPhotoControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAdvancedPhotoControl>for::winrt::Object {
        fn from(value: &IAdvancedPhotoControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAdvancedPhotoControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAdvancedPhotoControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AdvancedPhotoControl(::winrt::Object);
      impl AdvancedPhotoControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn supported_modes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<AdvancedPhotoMode>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<AdvancedPhotoMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <AdvancedPhotoMode> >(result__)
          }
        }pub fn mode(&self) ->  ::winrt::Result<AdvancedPhotoMode>{
          let this = self;
          unsafe {
            let mut result__: <AdvancedPhotoMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<AdvancedPhotoMode>(result__)
          }
        }pub fn configure< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,AdvancedPhotoCaptureSettings>>, >(&self,settings:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),settings.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for AdvancedPhotoControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AdvancedPhotoControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AdvancedPhotoControl{}
      impl::std::fmt::Debug for AdvancedPhotoControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AdvancedPhotoControl {
        const NAME: & 'static str = "Windows.Media.Devices.AdvancedPhotoControl";
        
      }unsafe impl::winrt::Interface for AdvancedPhotoControl {
        type Vtable = IAdvancedPhotoControl_abi;
        const IID: ::winrt::Guid =  <IAdvancedPhotoControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AdvancedPhotoControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.AdvancedPhotoControl;{c5b15486-9001-4682-9309-68eae0080eec})");
        
      }impl::std::convert::From<AdvancedPhotoControl>for::winrt::Object {
        fn from(value:AdvancedPhotoControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&AdvancedPhotoControl>for::winrt::Object {
        fn from(value: &AdvancedPhotoControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AdvancedPhotoControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AdvancedPhotoControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AdvancedPhotoControl>for IAdvancedPhotoControl {
        fn from(value:AdvancedPhotoControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AdvancedPhotoControl>for IAdvancedPhotoControl {
        fn from(value: &AdvancedPhotoControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedPhotoControl>>for AdvancedPhotoControl {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedPhotoControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedPhotoControl>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedPhotoControl>>for& 'a AdvancedPhotoControl {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedPhotoControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedPhotoControl>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for AdvancedPhotoControl{}
      unsafe impl::std::marker::Sync for AdvancedPhotoControl{}
      #[repr(transparent)]pub struct IAdvancedVideoCaptureDeviceController4(::winrt::Object);
      impl::std::clone::Clone for IAdvancedVideoCaptureDeviceController4 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAdvancedVideoCaptureDeviceController4 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAdvancedVideoCaptureDeviceController4 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAdvancedVideoCaptureDeviceController4{}
      impl IAdvancedVideoCaptureDeviceController4 {
        pub fn exposure_priority_video_control(&self,) ->  ::winrt::Result<ExposurePriorityVideoControl>{
          let this = self;
          unsafe {
            let mut result__: <ExposurePriorityVideoControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<ExposurePriorityVideoControl>(result__)
          }
        }pub fn desired_optimization(&self) ->  ::winrt::Result<MediaCaptureOptimization>{
          let this = self;
          unsafe {
            let mut result__: <MediaCaptureOptimization as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaCaptureOptimization>(result__)
          }
        }pub fn set_desired_optimization(&self,value:MediaCaptureOptimization,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn hdr_video_control(&self) ->  ::winrt::Result<HdrVideoControl>{
          let this = self;
          unsafe {
            let mut result__: <HdrVideoControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<HdrVideoControl>(result__)
          }
        }pub fn optical_image_stabilization_control(&self,) ->  ::winrt::Result<OpticalImageStabilizationControl>{
          let this = self;
          unsafe {
            let mut result__: <OpticalImageStabilizationControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<OpticalImageStabilizationControl>(result__)
          }
        }pub fn advanced_photo_control(&self) ->  ::winrt::Result<AdvancedPhotoControl>{
          let this = self;
          unsafe {
            let mut result__: <AdvancedPhotoControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AdvancedPhotoControl>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAdvancedVideoCaptureDeviceController4 {
        type Vtable = IAdvancedVideoCaptureDeviceController4_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3936337839,54129,16835,[154,23,130,74,135,235,223,210],);
        
      }#[repr(C)]pub struct IAdvancedVideoCaptureDeviceController4_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut MediaCaptureOptimization,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:MediaCaptureOptimization,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAdvancedVideoCaptureDeviceController4 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{ea9fbfaf-d371-41c3-9a17-824a87ebdfd2}")
        };
        
      }impl::std::convert::From<IAdvancedVideoCaptureDeviceController4>for::winrt::Object {
        fn from(value:IAdvancedVideoCaptureDeviceController4) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAdvancedVideoCaptureDeviceController4>for::winrt::Object {
        fn from(value: &IAdvancedVideoCaptureDeviceController4) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAdvancedVideoCaptureDeviceController4 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAdvancedVideoCaptureDeviceController4 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct VideoDeviceControllerGetDevicePropertyStatus(i32);
      impl::std::convert::From<i32>for VideoDeviceControllerGetDevicePropertyStatus {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for VideoDeviceControllerGetDevicePropertyStatus {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for VideoDeviceControllerGetDevicePropertyStatus {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for VideoDeviceControllerGetDevicePropertyStatus {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for VideoDeviceControllerGetDevicePropertyStatus {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for VideoDeviceControllerGetDevicePropertyStatus{}
      impl::std::marker::Copy for VideoDeviceControllerGetDevicePropertyStatus{}
      impl VideoDeviceControllerGetDevicePropertyStatus {
        #![allow(non_upper_case_globals)]pub const Success:Self = Self(0i32);
        pub const UnknownFailure:Self = Self(1i32);
        pub const BufferTooSmall:Self = Self(2i32);
        pub const NotSupported:Self = Self(3i32);
        pub const DeviceNotAvailable:Self = Self(4i32);
        pub const MaxPropertyValueSizeTooSmall:Self = Self(5i32);
        pub const MaxPropertyValueSizeRequired:Self = Self(6i32);
        
      }unsafe impl::winrt::Abi for VideoDeviceControllerGetDevicePropertyStatus {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for VideoDeviceControllerGetDevicePropertyStatus {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.VideoDeviceControllerGetDevicePropertyStatus;i4)",);
        
      }#[repr(transparent)]pub struct IVideoDeviceControllerGetDevicePropertyResult(::winrt::Object);
      impl::std::clone::Clone for IVideoDeviceControllerGetDevicePropertyResult {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IVideoDeviceControllerGetDevicePropertyResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IVideoDeviceControllerGetDevicePropertyResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IVideoDeviceControllerGetDevicePropertyResult{}
      impl IVideoDeviceControllerGetDevicePropertyResult {
        pub fn status(&self,) ->  ::winrt::Result<VideoDeviceControllerGetDevicePropertyStatus>{
          let this = self;
          unsafe {
            let mut result__: <VideoDeviceControllerGetDevicePropertyStatus as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoDeviceControllerGetDevicePropertyStatus>(result__)
          }
        }pub fn value(&self) ->  ::winrt::Result<::winrt::Object>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::Object as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::Object>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IVideoDeviceControllerGetDevicePropertyResult {
        type Vtable = IVideoDeviceControllerGetDevicePropertyResult_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3319301013,28373,18320,[139,93,14,241,57,53,208,248],);
        
      }#[repr(C)]pub struct IVideoDeviceControllerGetDevicePropertyResult_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut VideoDeviceControllerGetDevicePropertyStatus,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IVideoDeviceControllerGetDevicePropertyResult {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c5d88395-6ed5-4790-8b5d-0ef13935d0f8}")
        };
        
      }impl::std::convert::From<IVideoDeviceControllerGetDevicePropertyResult>for::winrt::Object {
        fn from(value:IVideoDeviceControllerGetDevicePropertyResult) -> Self {
          value.0
        }
      }impl::std::convert::From<&IVideoDeviceControllerGetDevicePropertyResult>for::winrt::Object {
        fn from(value: &IVideoDeviceControllerGetDevicePropertyResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoDeviceControllerGetDevicePropertyResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoDeviceControllerGetDevicePropertyResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct VideoDeviceControllerGetDevicePropertyResult(::winrt::Object);
      impl VideoDeviceControllerGetDevicePropertyResult {
        pub fn status(&self,) ->  ::winrt::Result<VideoDeviceControllerGetDevicePropertyStatus>{
          let this = self;
          unsafe {
            let mut result__: <VideoDeviceControllerGetDevicePropertyStatus as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoDeviceControllerGetDevicePropertyStatus>(result__)
          }
        }pub fn value(&self) ->  ::winrt::Result<::winrt::Object>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::Object as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::Object>(result__)
          }
        }
      }impl::std::clone::Clone for VideoDeviceControllerGetDevicePropertyResult {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for VideoDeviceControllerGetDevicePropertyResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for VideoDeviceControllerGetDevicePropertyResult{}
      impl::std::fmt::Debug for VideoDeviceControllerGetDevicePropertyResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for VideoDeviceControllerGetDevicePropertyResult {
        const NAME: & 'static str = "Windows.Media.Devices.VideoDeviceControllerGetDevicePropertyResult";
        
      }unsafe impl::winrt::Interface for VideoDeviceControllerGetDevicePropertyResult {
        type Vtable = IVideoDeviceControllerGetDevicePropertyResult_abi;
        const IID: ::winrt::Guid =  <IVideoDeviceControllerGetDevicePropertyResult as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for VideoDeviceControllerGetDevicePropertyResult {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.VideoDeviceControllerGetDevicePropertyResult;{c5d88395-6ed5-4790-8b5d-0ef13935d0f8})");
        
      }impl::std::convert::From<VideoDeviceControllerGetDevicePropertyResult>for::winrt::Object {
        fn from(value:VideoDeviceControllerGetDevicePropertyResult) -> Self {
          value.0
        }
      }impl::std::convert::From<&VideoDeviceControllerGetDevicePropertyResult>for::winrt::Object {
        fn from(value: &VideoDeviceControllerGetDevicePropertyResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for VideoDeviceControllerGetDevicePropertyResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a VideoDeviceControllerGetDevicePropertyResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<VideoDeviceControllerGetDevicePropertyResult>for IVideoDeviceControllerGetDevicePropertyResult {
        fn from(value:VideoDeviceControllerGetDevicePropertyResult) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&VideoDeviceControllerGetDevicePropertyResult>for IVideoDeviceControllerGetDevicePropertyResult {
        fn from(value: &VideoDeviceControllerGetDevicePropertyResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,IVideoDeviceControllerGetDevicePropertyResult>, >for VideoDeviceControllerGetDevicePropertyResult {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoDeviceControllerGetDevicePropertyResult>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoDeviceControllerGetDevicePropertyResult, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,IVideoDeviceControllerGetDevicePropertyResult>, >for& 'a VideoDeviceControllerGetDevicePropertyResult {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoDeviceControllerGetDevicePropertyResult>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoDeviceControllerGetDevicePropertyResult, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for VideoDeviceControllerGetDevicePropertyResult{}
      unsafe impl::std::marker::Sync for VideoDeviceControllerGetDevicePropertyResult{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct VideoDeviceControllerSetDevicePropertyStatus(i32);
      impl::std::convert::From<i32>for VideoDeviceControllerSetDevicePropertyStatus {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for VideoDeviceControllerSetDevicePropertyStatus {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for VideoDeviceControllerSetDevicePropertyStatus {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for VideoDeviceControllerSetDevicePropertyStatus {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for VideoDeviceControllerSetDevicePropertyStatus {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for VideoDeviceControllerSetDevicePropertyStatus{}
      impl::std::marker::Copy for VideoDeviceControllerSetDevicePropertyStatus{}
      impl VideoDeviceControllerSetDevicePropertyStatus {
        #![allow(non_upper_case_globals)]pub const Success:Self = Self(0i32);
        pub const UnknownFailure:Self = Self(1i32);
        pub const NotSupported:Self = Self(2i32);
        pub const InvalidValue:Self = Self(3i32);
        pub const DeviceNotAvailable:Self = Self(4i32);
        pub const NotInControl:Self = Self(5i32);
        
      }unsafe impl::winrt::Abi for VideoDeviceControllerSetDevicePropertyStatus {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for VideoDeviceControllerSetDevicePropertyStatus {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.VideoDeviceControllerSetDevicePropertyStatus;i4)",);
        
      }#[repr(transparent)]pub struct IAdvancedVideoCaptureDeviceController5(::winrt::Object);
      impl::std::clone::Clone for IAdvancedVideoCaptureDeviceController5 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAdvancedVideoCaptureDeviceController5 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAdvancedVideoCaptureDeviceController5 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAdvancedVideoCaptureDeviceController5{}
      impl IAdvancedVideoCaptureDeviceController5 {
        pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn get_device_property_by_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::IReference<u32>>, >, >(&self,property_id:T0__,max_property_value_size:T1__,) ->  ::winrt::Result<VideoDeviceControllerGetDevicePropertyResult>{
          let this = self;
          unsafe {
            let mut result__: <VideoDeviceControllerGetDevicePropertyResult as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),property_id.into().abi(),max_property_value_size.into().abi(), &mut result__,).from_abi::<VideoDeviceControllerGetDevicePropertyResult>(result__)
          }
        }pub fn set_device_property_by_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,property_id:T0__,property_value:T1__,) ->  ::winrt::Result<VideoDeviceControllerSetDevicePropertyStatus>{
          let this = self;
          unsafe {
            let mut result__: <VideoDeviceControllerSetDevicePropertyStatus as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),property_id.into().abi(),property_value.into().abi(), &mut result__,).from_abi::<VideoDeviceControllerSetDevicePropertyStatus>(result__)
          }
        }pub fn get_device_property_by_extended_id< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::IReference<u32>>, >, >(&self,extended_property_id: &[<u8 as::winrt::RuntimeType>::DefaultType],max_property_value_size:T1__,) ->  ::winrt::Result<VideoDeviceControllerGetDevicePropertyResult>{
          let this = self;
          unsafe {
            let mut result__: <VideoDeviceControllerGetDevicePropertyResult as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),extended_property_id.len()as u32, ::std::mem::transmute(extended_property_id.as_ptr()),max_property_value_size.into().abi(), &mut result__,).from_abi::<VideoDeviceControllerGetDevicePropertyResult>(result__)
          }
        }pub fn set_device_property_by_extended_id(&self,extended_property_id: &[<u8 as::winrt::RuntimeType>::DefaultType],property_value: &[<u8 as::winrt::RuntimeType>::DefaultType],) ->  ::winrt::Result<VideoDeviceControllerSetDevicePropertyStatus>{
          let this = self;
          unsafe {
            let mut result__: <VideoDeviceControllerSetDevicePropertyStatus as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),extended_property_id.len()as u32, ::std::mem::transmute(extended_property_id.as_ptr()),property_value.len()as u32, ::std::mem::transmute(property_value.as_ptr()), &mut result__,).from_abi::<VideoDeviceControllerSetDevicePropertyStatus>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAdvancedVideoCaptureDeviceController5 {
        type Vtable = IAdvancedVideoCaptureDeviceController5_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(860957463,47563,18979,[184,117,249,234,171,83,84,146],);
        
      }#[repr(C)]pub struct IAdvancedVideoCaptureDeviceController5_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,property_id: ::winrt::RawPtr,max_property_value_size: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,property_id: ::winrt::RawPtr,property_value: ::winrt::RawPtr,result__: *mut VideoDeviceControllerSetDevicePropertyStatus,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_extended_property_id:u32,extended_property_id: *const u8,max_property_value_size: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_extended_property_id:u32,extended_property_id: *const u8,array_size_property_value:u32,property_value: *const u8,result__: *mut VideoDeviceControllerSetDevicePropertyStatus,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAdvancedVideoCaptureDeviceController5 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{33512b17-b9cb-4a23-b875-f9eaab535492}")
        };
        
      }impl::std::convert::From<IAdvancedVideoCaptureDeviceController5>for::winrt::Object {
        fn from(value:IAdvancedVideoCaptureDeviceController5) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAdvancedVideoCaptureDeviceController5>for::winrt::Object {
        fn from(value: &IAdvancedVideoCaptureDeviceController5) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAdvancedVideoCaptureDeviceController5 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAdvancedVideoCaptureDeviceController5 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct VideoTemporalDenoisingMode(i32);
      impl::std::convert::From<i32>for VideoTemporalDenoisingMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for VideoTemporalDenoisingMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for VideoTemporalDenoisingMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for VideoTemporalDenoisingMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for VideoTemporalDenoisingMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for VideoTemporalDenoisingMode{}
      impl::std::marker::Copy for VideoTemporalDenoisingMode{}
      impl VideoTemporalDenoisingMode {
        #![allow(non_upper_case_globals)]pub const Off:Self = Self(0i32);
        pub const On:Self = Self(1i32);
        pub const Auto:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for VideoTemporalDenoisingMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for VideoTemporalDenoisingMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.VideoTemporalDenoisingMode;i4)",);
        
      }#[repr(transparent)]pub struct IVideoTemporalDenoisingControl(::winrt::Object);
      impl::std::clone::Clone for IVideoTemporalDenoisingControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IVideoTemporalDenoisingControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IVideoTemporalDenoisingControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IVideoTemporalDenoisingControl{}
      impl IVideoTemporalDenoisingControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn supported_modes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<VideoTemporalDenoisingMode>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<VideoTemporalDenoisingMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IVectorView<VideoTemporalDenoisingMode, >>(result__)
          }
        }pub fn mode(&self) ->  ::winrt::Result<VideoTemporalDenoisingMode>{
          let this = self;
          unsafe {
            let mut result__: <VideoTemporalDenoisingMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoTemporalDenoisingMode>(result__)
          }
        }pub fn set_mode(&self,value:VideoTemporalDenoisingMode) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IVideoTemporalDenoisingControl {
        type Vtable = IVideoTemporalDenoisingControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2058569525,15914,18994,[186,255,67,88,196,251,221,87],);
        
      }#[repr(C)]pub struct IVideoTemporalDenoisingControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut VideoTemporalDenoisingMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:VideoTemporalDenoisingMode,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IVideoTemporalDenoisingControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{7ab34735-3e2a-4a32-baff-4358c4fbdd57}")
        };
        
      }impl::std::convert::From<IVideoTemporalDenoisingControl>for::winrt::Object {
        fn from(value:IVideoTemporalDenoisingControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IVideoTemporalDenoisingControl>for::winrt::Object {
        fn from(value: &IVideoTemporalDenoisingControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoTemporalDenoisingControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoTemporalDenoisingControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct VideoTemporalDenoisingControl(::winrt::Object);
      impl VideoTemporalDenoisingControl {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn supported_modes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<VideoTemporalDenoisingMode>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<VideoTemporalDenoisingMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IVectorView<VideoTemporalDenoisingMode, >>(result__)
          }
        }pub fn mode(&self) ->  ::winrt::Result<VideoTemporalDenoisingMode>{
          let this = self;
          unsafe {
            let mut result__: <VideoTemporalDenoisingMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoTemporalDenoisingMode>(result__)
          }
        }pub fn set_mode(&self,value:VideoTemporalDenoisingMode) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }impl::std::clone::Clone for VideoTemporalDenoisingControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for VideoTemporalDenoisingControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for VideoTemporalDenoisingControl{}
      impl::std::fmt::Debug for VideoTemporalDenoisingControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for VideoTemporalDenoisingControl {
        const NAME: & 'static str = "Windows.Media.Devices.VideoTemporalDenoisingControl";
        
      }unsafe impl::winrt::Interface for VideoTemporalDenoisingControl {
        type Vtable = IVideoTemporalDenoisingControl_abi;
        const IID: ::winrt::Guid =  <IVideoTemporalDenoisingControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for VideoTemporalDenoisingControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.VideoTemporalDenoisingControl;{7ab34735-3e2a-4a32-baff-4358c4fbdd57})");
        
      }impl::std::convert::From<VideoTemporalDenoisingControl>for::winrt::Object {
        fn from(value:VideoTemporalDenoisingControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&VideoTemporalDenoisingControl>for::winrt::Object {
        fn from(value: &VideoTemporalDenoisingControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for VideoTemporalDenoisingControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a VideoTemporalDenoisingControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<VideoTemporalDenoisingControl>for IVideoTemporalDenoisingControl {
        fn from(value:VideoTemporalDenoisingControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&VideoTemporalDenoisingControl>for IVideoTemporalDenoisingControl {
        fn from(value: &VideoTemporalDenoisingControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoTemporalDenoisingControl>>for VideoTemporalDenoisingControl {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoTemporalDenoisingControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoTemporalDenoisingControl>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoTemporalDenoisingControl>>for& 'a VideoTemporalDenoisingControl {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoTemporalDenoisingControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoTemporalDenoisingControl>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for VideoTemporalDenoisingControl{}
      unsafe impl::std::marker::Sync for VideoTemporalDenoisingControl{}
      #[repr(transparent)]pub struct IAdvancedVideoCaptureDeviceController6(::winrt::Object);
      impl::std::clone::Clone for IAdvancedVideoCaptureDeviceController6 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAdvancedVideoCaptureDeviceController6 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAdvancedVideoCaptureDeviceController6 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAdvancedVideoCaptureDeviceController6{}
      impl IAdvancedVideoCaptureDeviceController6 {
        pub fn video_temporal_denoising_control(&self,) ->  ::winrt::Result<VideoTemporalDenoisingControl>{
          let this = self;
          unsafe {
            let mut result__: <VideoTemporalDenoisingControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoTemporalDenoisingControl>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAdvancedVideoCaptureDeviceController6 {
        type Vtable = IAdvancedVideoCaptureDeviceController6_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3059104339,26785,17591,[159,137,181,250,151,172,12,190],);
        
      }#[repr(C)]pub struct IAdvancedVideoCaptureDeviceController6_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAdvancedVideoCaptureDeviceController6 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{b6563a53-68a1-44b7-9f89-b5fa97ac0cbe}")
        };
        
      }impl::std::convert::From<IAdvancedVideoCaptureDeviceController6>for::winrt::Object {
        fn from(value:IAdvancedVideoCaptureDeviceController6) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAdvancedVideoCaptureDeviceController6>for::winrt::Object {
        fn from(value: &IAdvancedVideoCaptureDeviceController6) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAdvancedVideoCaptureDeviceController6 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAdvancedVideoCaptureDeviceController6 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct InfraredTorchMode(i32);
      impl::std::convert::From<i32>for InfraredTorchMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for InfraredTorchMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for InfraredTorchMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for InfraredTorchMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for InfraredTorchMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for InfraredTorchMode{}
      impl::std::marker::Copy for InfraredTorchMode{}
      impl InfraredTorchMode {
        #![allow(non_upper_case_globals)]pub const Off:Self = Self(0i32);
        pub const On:Self = Self(1i32);
        pub const AlternatingFrameIllumination:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for InfraredTorchMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for InfraredTorchMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.InfraredTorchMode;i4)",);
        
      }#[repr(transparent)]pub struct IInfraredTorchControl(::winrt::Object);
      impl::std::clone::Clone for IInfraredTorchControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IInfraredTorchControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IInfraredTorchControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IInfraredTorchControl{}
      impl IInfraredTorchControl {
        pub fn is_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn supported_modes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<InfraredTorchMode>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<InfraredTorchMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <InfraredTorchMode> >(result__)
          }
        }pub fn current_mode(&self) ->  ::winrt::Result<InfraredTorchMode>{
          let this = self;
          unsafe {
            let mut result__: <InfraredTorchMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<InfraredTorchMode>(result__)
          }
        }pub fn set_current_mode(&self,value:InfraredTorchMode) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn min_power(&self) ->  ::winrt::Result<i32>{
          let this = self;
          unsafe {
            let mut result__: <i32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<i32>(result__)
          }
        }pub fn max_power(&self) ->  ::winrt::Result<i32>{
          let this = self;
          unsafe {
            let mut result__: <i32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<i32>(result__)
          }
        }pub fn power_step(&self) ->  ::winrt::Result<i32>{
          let this = self;
          unsafe {
            let mut result__: <i32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<i32>(result__)
          }
        }pub fn power(&self) ->  ::winrt::Result<i32>{
          let this = self;
          unsafe {
            let mut result__: <i32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<i32>(result__)
          }
        }pub fn set_power(&self,value:i32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IInfraredTorchControl {
        type Vtable = IInfraredTorchControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(481963139,27830,23044,[166,252,59,231,179,63,240,86],);
        
      }#[repr(C)]pub struct IInfraredTorchControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut InfraredTorchMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:InfraredTorchMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:i32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IInfraredTorchControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{1cba2c83-6cb6-5a04-a6fc-3be7b33ff056}")
        };
        
      }impl::std::convert::From<IInfraredTorchControl>for::winrt::Object {
        fn from(value:IInfraredTorchControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IInfraredTorchControl>for::winrt::Object {
        fn from(value: &IInfraredTorchControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IInfraredTorchControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IInfraredTorchControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct InfraredTorchControl(::winrt::Object);
      impl InfraredTorchControl {
        pub fn is_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn supported_modes(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<InfraredTorchMode>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<InfraredTorchMode, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <InfraredTorchMode> >(result__)
          }
        }pub fn current_mode(&self) ->  ::winrt::Result<InfraredTorchMode>{
          let this = self;
          unsafe {
            let mut result__: <InfraredTorchMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<InfraredTorchMode>(result__)
          }
        }pub fn set_current_mode(&self,value:InfraredTorchMode) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn min_power(&self) ->  ::winrt::Result<i32>{
          let this = self;
          unsafe {
            let mut result__: <i32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<i32>(result__)
          }
        }pub fn max_power(&self) ->  ::winrt::Result<i32>{
          let this = self;
          unsafe {
            let mut result__: <i32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<i32>(result__)
          }
        }pub fn power_step(&self) ->  ::winrt::Result<i32>{
          let this = self;
          unsafe {
            let mut result__: <i32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<i32>(result__)
          }
        }pub fn power(&self) ->  ::winrt::Result<i32>{
          let this = self;
          unsafe {
            let mut result__: <i32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<i32>(result__)
          }
        }pub fn set_power(&self,value:i32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }impl::std::clone::Clone for InfraredTorchControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for InfraredTorchControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for InfraredTorchControl{}
      impl::std::fmt::Debug for InfraredTorchControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for InfraredTorchControl {
        const NAME: & 'static str = "Windows.Media.Devices.InfraredTorchControl";
        
      }unsafe impl::winrt::Interface for InfraredTorchControl {
        type Vtable = IInfraredTorchControl_abi;
        const IID: ::winrt::Guid =  <IInfraredTorchControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for InfraredTorchControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.InfraredTorchControl;{1cba2c83-6cb6-5a04-a6fc-3be7b33ff056})");
        
      }impl::std::convert::From<InfraredTorchControl>for::winrt::Object {
        fn from(value:InfraredTorchControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&InfraredTorchControl>for::winrt::Object {
        fn from(value: &InfraredTorchControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for InfraredTorchControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a InfraredTorchControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<InfraredTorchControl>for IInfraredTorchControl {
        fn from(value:InfraredTorchControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&InfraredTorchControl>for IInfraredTorchControl {
        fn from(value: &InfraredTorchControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IInfraredTorchControl>>for InfraredTorchControl {
        fn into(self) ->  ::winrt::Param< 'a ,IInfraredTorchControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IInfraredTorchControl>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IInfraredTorchControl>>for& 'a InfraredTorchControl {
        fn into(self) ->  ::winrt::Param< 'a ,IInfraredTorchControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IInfraredTorchControl>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for InfraredTorchControl{}
      unsafe impl::std::marker::Sync for InfraredTorchControl{}
      #[repr(transparent)]pub struct IAdvancedVideoCaptureDeviceController7(::winrt::Object);
      impl::std::clone::Clone for IAdvancedVideoCaptureDeviceController7 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAdvancedVideoCaptureDeviceController7 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAdvancedVideoCaptureDeviceController7 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAdvancedVideoCaptureDeviceController7{}
      impl IAdvancedVideoCaptureDeviceController7 {
        pub fn infrared_torch_control(&self) ->  ::winrt::Result<InfraredTorchControl>{
          let this = self;
          unsafe {
            let mut result__: <InfraredTorchControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<InfraredTorchControl>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAdvancedVideoCaptureDeviceController7 {
        type Vtable = IAdvancedVideoCaptureDeviceController7_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2368284656,41044,20711,[183,223,124,4,35,77,16,240],);
        
      }#[repr(C)]pub struct IAdvancedVideoCaptureDeviceController7_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAdvancedVideoCaptureDeviceController7 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{8d2927f0-a054-50e7-b7df-7c04234d10f0}")
        };
        
      }impl::std::convert::From<IAdvancedVideoCaptureDeviceController7>for::winrt::Object {
        fn from(value:IAdvancedVideoCaptureDeviceController7) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAdvancedVideoCaptureDeviceController7>for::winrt::Object {
        fn from(value: &IAdvancedVideoCaptureDeviceController7) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAdvancedVideoCaptureDeviceController7 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAdvancedVideoCaptureDeviceController7 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IPanelBasedOptimizationControl(::winrt::Object);
      impl::std::clone::Clone for IPanelBasedOptimizationControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IPanelBasedOptimizationControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IPanelBasedOptimizationControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IPanelBasedOptimizationControl{}
      impl IPanelBasedOptimizationControl {
        pub fn is_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn panel(&self) ->  ::winrt::Result<super::super::devices::enumeration::Panel>{
          let this = self;
          unsafe {
            let mut result__: <super::super::devices::enumeration::Panel as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::devices::enumeration::Panel>(result__)
          }
        }pub fn set_panel(&self,value:super::super::devices::enumeration::Panel,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IPanelBasedOptimizationControl {
        type Vtable = IPanelBasedOptimizationControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(858927651,25159,21529,[165,164,61,128,134,69,217,23],);
        
      }#[repr(C)]pub struct IPanelBasedOptimizationControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::devices::enumeration::Panel,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::devices::enumeration::Panel,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IPanelBasedOptimizationControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{33323223-6247-5419-a5a4-3d808645d917}")
        };
        
      }impl::std::convert::From<IPanelBasedOptimizationControl>for::winrt::Object {
        fn from(value:IPanelBasedOptimizationControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IPanelBasedOptimizationControl>for::winrt::Object {
        fn from(value: &IPanelBasedOptimizationControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IPanelBasedOptimizationControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IPanelBasedOptimizationControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct PanelBasedOptimizationControl(::winrt::Object);
      impl PanelBasedOptimizationControl {
        pub fn is_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn panel(&self) ->  ::winrt::Result<super::super::devices::enumeration::Panel>{
          let this = self;
          unsafe {
            let mut result__: <super::super::devices::enumeration::Panel as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::devices::enumeration::Panel>(result__)
          }
        }pub fn set_panel(&self,value:super::super::devices::enumeration::Panel,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }impl::std::clone::Clone for PanelBasedOptimizationControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for PanelBasedOptimizationControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for PanelBasedOptimizationControl{}
      impl::std::fmt::Debug for PanelBasedOptimizationControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for PanelBasedOptimizationControl {
        const NAME: & 'static str = "Windows.Media.Devices.PanelBasedOptimizationControl";
        
      }unsafe impl::winrt::Interface for PanelBasedOptimizationControl {
        type Vtable = IPanelBasedOptimizationControl_abi;
        const IID: ::winrt::Guid =  <IPanelBasedOptimizationControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for PanelBasedOptimizationControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.PanelBasedOptimizationControl;{33323223-6247-5419-a5a4-3d808645d917})");
        
      }impl::std::convert::From<PanelBasedOptimizationControl>for::winrt::Object {
        fn from(value:PanelBasedOptimizationControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&PanelBasedOptimizationControl>for::winrt::Object {
        fn from(value: &PanelBasedOptimizationControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for PanelBasedOptimizationControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a PanelBasedOptimizationControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<PanelBasedOptimizationControl>for IPanelBasedOptimizationControl {
        fn from(value:PanelBasedOptimizationControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&PanelBasedOptimizationControl>for IPanelBasedOptimizationControl {
        fn from(value: &PanelBasedOptimizationControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IPanelBasedOptimizationControl>>for PanelBasedOptimizationControl {
        fn into(self) ->  ::winrt::Param< 'a ,IPanelBasedOptimizationControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IPanelBasedOptimizationControl>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IPanelBasedOptimizationControl>>for& 'a PanelBasedOptimizationControl {
        fn into(self) ->  ::winrt::Param< 'a ,IPanelBasedOptimizationControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IPanelBasedOptimizationControl>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for PanelBasedOptimizationControl{}
      unsafe impl::std::marker::Sync for PanelBasedOptimizationControl{}
      #[repr(transparent)]pub struct IAdvancedVideoCaptureDeviceController8(::winrt::Object);
      impl::std::clone::Clone for IAdvancedVideoCaptureDeviceController8 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAdvancedVideoCaptureDeviceController8 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAdvancedVideoCaptureDeviceController8 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAdvancedVideoCaptureDeviceController8{}
      impl IAdvancedVideoCaptureDeviceController8 {
        pub fn panel_based_optimization_control(&self,) ->  ::winrt::Result<PanelBasedOptimizationControl>{
          let this = self;
          unsafe {
            let mut result__: <PanelBasedOptimizationControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<PanelBasedOptimizationControl>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAdvancedVideoCaptureDeviceController8 {
        type Vtable = IAdvancedVideoCaptureDeviceController8_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3628331024,59387,22875,[154,120,14,84,196,83,43,67],);
        
      }#[repr(C)]pub struct IAdvancedVideoCaptureDeviceController8_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAdvancedVideoCaptureDeviceController8 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{d843f010-e7fb-595b-9a78-0e54c4532b43}")
        };
        
      }impl::std::convert::From<IAdvancedVideoCaptureDeviceController8>for::winrt::Object {
        fn from(value:IAdvancedVideoCaptureDeviceController8) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAdvancedVideoCaptureDeviceController8>for::winrt::Object {
        fn from(value: &IAdvancedVideoCaptureDeviceController8) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAdvancedVideoCaptureDeviceController8 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAdvancedVideoCaptureDeviceController8 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaDeviceControlCapabilities(::winrt::Object);
      impl::std::clone::Clone for IMediaDeviceControlCapabilities {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaDeviceControlCapabilities {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaDeviceControlCapabilities {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaDeviceControlCapabilities{}
      impl IMediaDeviceControlCapabilities {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn min(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<f64>(result__)
          }
        }pub fn max(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<f64>(result__)
          }
        }pub fn step(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<f64>(result__)
          }
        }pub fn default(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f64>(result__)
          }
        }pub fn auto_mode_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaDeviceControlCapabilities {
        type Vtable = IMediaDeviceControlCapabilities_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(587225110,60293,17378,[185,43,130,64,213,238,112,236],);
        
      }#[repr(C)]pub struct IMediaDeviceControlCapabilities_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaDeviceControlCapabilities {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{23005816-eb85-43e2-b92b-8240d5ee70ec}")
        };
        
      }impl::std::convert::From<IMediaDeviceControlCapabilities>for::winrt::Object {
        fn from(value:IMediaDeviceControlCapabilities) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaDeviceControlCapabilities>for::winrt::Object {
        fn from(value: &IMediaDeviceControlCapabilities) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaDeviceControlCapabilities {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaDeviceControlCapabilities {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct MediaDeviceControlCapabilities(::winrt::Object);
      impl MediaDeviceControlCapabilities {
        pub fn supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn min(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<f64>(result__)
          }
        }pub fn max(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<f64>(result__)
          }
        }pub fn step(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<f64>(result__)
          }
        }pub fn default(&self) ->  ::winrt::Result<f64>{
          let this = self;
          unsafe {
            let mut result__: <f64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f64>(result__)
          }
        }pub fn auto_mode_supported(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }
      }impl::std::clone::Clone for MediaDeviceControlCapabilities {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaDeviceControlCapabilities {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaDeviceControlCapabilities{}
      impl::std::fmt::Debug for MediaDeviceControlCapabilities {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MediaDeviceControlCapabilities {
        const NAME: & 'static str = "Windows.Media.Devices.MediaDeviceControlCapabilities";
        
      }unsafe impl::winrt::Interface for MediaDeviceControlCapabilities {
        type Vtable = IMediaDeviceControlCapabilities_abi;
        const IID: ::winrt::Guid =  <IMediaDeviceControlCapabilities as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for MediaDeviceControlCapabilities {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.MediaDeviceControlCapabilities;{23005816-eb85-43e2-b92b-8240d5ee70ec})");
        
      }impl::std::convert::From<MediaDeviceControlCapabilities>for::winrt::Object {
        fn from(value:MediaDeviceControlCapabilities) -> Self {
          value.0
        }
      }impl::std::convert::From<&MediaDeviceControlCapabilities>for::winrt::Object {
        fn from(value: &MediaDeviceControlCapabilities) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaDeviceControlCapabilities {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaDeviceControlCapabilities {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaDeviceControlCapabilities>for IMediaDeviceControlCapabilities {
        fn from(value:MediaDeviceControlCapabilities) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MediaDeviceControlCapabilities>for IMediaDeviceControlCapabilities {
        fn from(value: &MediaDeviceControlCapabilities) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaDeviceControlCapabilities>>for MediaDeviceControlCapabilities {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaDeviceControlCapabilities>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaDeviceControlCapabilities>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaDeviceControlCapabilities>>for& 'a MediaDeviceControlCapabilities {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaDeviceControlCapabilities>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaDeviceControlCapabilities>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct IMediaDeviceControl(::winrt::Object);
      impl::std::clone::Clone for IMediaDeviceControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaDeviceControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaDeviceControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaDeviceControl{}
      impl IMediaDeviceControl {
        pub fn capabilities(&self) ->  ::winrt::Result<MediaDeviceControlCapabilities>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControlCapabilities as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaDeviceControlCapabilities>(result__)
          }
        }pub fn try_get_value(&self,value: &mut f64) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value, &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn try_set_value(&self,value:f64) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value, &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn try_get_auto(&self,value: &mut bool) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value, &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn try_set_auto(&self,value:bool) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value, &mut result__,).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaDeviceControl {
        type Vtable = IMediaDeviceControl_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4020821929,28533,18531,[186,11,88,63,48,54,180,222],);
        
      }#[repr(C)]pub struct IMediaDeviceControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut f64,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f64,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut bool,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,result__: *mut bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaDeviceControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{efa8dfa9-6f75-4863-ba0b-583f3036b4de}")
        };
        
      }impl::std::convert::From<IMediaDeviceControl>for::winrt::Object {
        fn from(value:IMediaDeviceControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaDeviceControl>for::winrt::Object {
        fn from(value: &IMediaDeviceControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaDeviceControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaDeviceControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct MediaDeviceControl(::winrt::Object);
      impl MediaDeviceControl {
        pub fn capabilities(&self) ->  ::winrt::Result<MediaDeviceControlCapabilities>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControlCapabilities as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaDeviceControlCapabilities>(result__)
          }
        }pub fn try_get_value(&self,value: &mut f64) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value, &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn try_set_value(&self,value:f64) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value, &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn try_get_auto(&self,value: &mut bool) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value, &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn try_set_auto(&self,value:bool) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value, &mut result__,).from_abi::<bool>(result__)
          }
        }
      }impl::std::clone::Clone for MediaDeviceControl {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaDeviceControl {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaDeviceControl{}
      impl::std::fmt::Debug for MediaDeviceControl {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MediaDeviceControl {
        const NAME: & 'static str = "Windows.Media.Devices.MediaDeviceControl";
        
      }unsafe impl::winrt::Interface for MediaDeviceControl {
        type Vtable = IMediaDeviceControl_abi;
        const IID: ::winrt::Guid =  <IMediaDeviceControl as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for MediaDeviceControl {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.MediaDeviceControl;{efa8dfa9-6f75-4863-ba0b-583f3036b4de})");
        
      }impl::std::convert::From<MediaDeviceControl>for::winrt::Object {
        fn from(value:MediaDeviceControl) -> Self {
          value.0
        }
      }impl::std::convert::From<&MediaDeviceControl>for::winrt::Object {
        fn from(value: &MediaDeviceControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaDeviceControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaDeviceControl {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaDeviceControl>for IMediaDeviceControl {
        fn from(value:MediaDeviceControl) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MediaDeviceControl>for IMediaDeviceControl {
        fn from(value: &MediaDeviceControl) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaDeviceControl>>for MediaDeviceControl {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaDeviceControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaDeviceControl>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaDeviceControl>>for& 'a MediaDeviceControl {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaDeviceControl>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaDeviceControl>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IVideoDeviceController(::winrt::Object);
      impl::std::clone::Clone for IVideoDeviceController {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IVideoDeviceController {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IVideoDeviceController {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IVideoDeviceController{}
      impl IVideoDeviceController {
        pub fn get_available_media_stream_properties(&self,media_stream_type:super::capture::MediaStreamType,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<super::media_properties::IMediaEncodingProperties, >, >{
          let this =  &::winrt::Interface::cast::<IMediaDeviceController>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<super::media_properties::IMediaEncodingProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),media_stream_type, &mut result__,).from_abi::<super::super::foundation::collections::IVectorView<super::media_properties::IMediaEncodingProperties, >>(result__)
          }
        }pub fn get_media_stream_properties(&self,media_stream_type:super::capture::MediaStreamType,) ->  ::winrt::Result<super::media_properties::IMediaEncodingProperties>{
          let this =  &::winrt::Interface::cast::<IMediaDeviceController>(self).unwrap();
          unsafe {
            let mut result__: <super::media_properties::IMediaEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),media_stream_type, &mut result__,).from_abi::<super::media_properties::IMediaEncodingProperties>(result__)
          }
        }pub fn set_media_stream_properties_async< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::IMediaEncodingProperties>, >, >(&self,media_stream_type:super::capture::MediaStreamType,media_encoding_properties:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IMediaDeviceController>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),media_stream_type,media_encoding_properties.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn brightness(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn contrast(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn hue(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn white_balance(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn backlight_compensation(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn pan(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn tilt(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn zoom(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn roll(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn exposure(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn focus(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn try_set_powerline_frequency(&self,value:super::capture::PowerlineFrequency,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),value, &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn try_get_powerline_frequency(&self,value: &mut super::capture::PowerlineFrequency,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this), ::winrt::Abi::set_abi(value), &mut result__,).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IVideoDeviceController {
        type Vtable = IVideoDeviceController_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2572506485,11822,16568,[182,199,248,45,16,1,50,16],);
        
      }#[repr(C)]pub struct IVideoDeviceController_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::capture::PowerlineFrequency,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut super::capture::PowerlineFrequency,result__: *mut bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IVideoDeviceController {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{99555575-2e2e-40b8-b6c7-f82d10013210}")
        };
        
      }impl::std::convert::From<IVideoDeviceController>for::winrt::Object {
        fn from(value:IVideoDeviceController) -> Self {
          value.0
        }
      }impl::std::convert::From<&IVideoDeviceController>for::winrt::Object {
        fn from(value: &IVideoDeviceController) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IVideoDeviceController>for IMediaDeviceController {
        fn from(value:IVideoDeviceController) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IVideoDeviceController>for IMediaDeviceController {
        fn from(value: &IVideoDeviceController) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaDeviceController>>for IVideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaDeviceController>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaDeviceController>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaDeviceController>>for& 'a IVideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaDeviceController>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaDeviceController>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct VideoDeviceController(::winrt::Object);
      impl VideoDeviceController {
        pub fn set_device_property< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,property_id:T0__,property_value:T1__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),property_id.into().abi(),property_value.into().abi(),).ok()
          }
        }pub fn get_device_property< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,property_id:T0__,) ->  ::winrt::Result<::winrt::Object>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::Object as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),property_id.into().abi(), &mut result__,).from_abi::<::winrt::Object>(result__)
          }
        }pub fn low_lag_photo_sequence(&self,) ->  ::winrt::Result<LowLagPhotoSequenceControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController2>(self).unwrap();
          unsafe {
            let mut result__: <LowLagPhotoSequenceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<LowLagPhotoSequenceControl>(result__)
          }
        }pub fn low_lag_photo(&self) ->  ::winrt::Result<LowLagPhotoControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController2>(self).unwrap();
          unsafe {
            let mut result__: <LowLagPhotoControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<LowLagPhotoControl>(result__)
          }
        }pub fn scene_mode_control(&self) ->  ::winrt::Result<SceneModeControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController2>(self).unwrap();
          unsafe {
            let mut result__: <SceneModeControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<SceneModeControl>(result__)
          }
        }pub fn torch_control(&self) ->  ::winrt::Result<TorchControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController2>(self).unwrap();
          unsafe {
            let mut result__: <TorchControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<TorchControl>(result__)
          }
        }pub fn flash_control(&self) ->  ::winrt::Result<FlashControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController2>(self).unwrap();
          unsafe {
            let mut result__: <FlashControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FlashControl>(result__)
          }
        }pub fn white_balance_control(&self) ->  ::winrt::Result<WhiteBalanceControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController2>(self).unwrap();
          unsafe {
            let mut result__: <WhiteBalanceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<WhiteBalanceControl>(result__)
          }
        }pub fn exposure_control(&self) ->  ::winrt::Result<ExposureControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController2>(self).unwrap();
          unsafe {
            let mut result__: <ExposureControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<ExposureControl>(result__)
          }
        }pub fn focus_control(&self) ->  ::winrt::Result<FocusControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController2>(self).unwrap();
          unsafe {
            let mut result__: <FocusControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FocusControl>(result__)
          }
        }pub fn exposure_compensation_control(&self,) ->  ::winrt::Result<ExposureCompensationControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController2>(self).unwrap();
          unsafe {
            let mut result__: <ExposureCompensationControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<ExposureCompensationControl>(result__)
          }
        }pub fn iso_speed_control(&self) ->  ::winrt::Result<IsoSpeedControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController2>(self).unwrap();
          unsafe {
            let mut result__: <IsoSpeedControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<IsoSpeedControl>(result__)
          }
        }pub fn regions_of_interest_control(&self,) ->  ::winrt::Result<RegionsOfInterestControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController2>(self).unwrap();
          unsafe {
            let mut result__: <RegionsOfInterestControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<RegionsOfInterestControl>(result__)
          }
        }pub fn primary_use(&self) ->  ::winrt::Result<CaptureUse>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController2>(self).unwrap();
          unsafe {
            let mut result__: <CaptureUse as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<CaptureUse>(result__)
          }
        }pub fn set_primary_use(&self,value:CaptureUse) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn variable_photo_sequence_controller(&self,) ->  ::winrt::Result<core::VariablePhotoSequenceController>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController3>(self).unwrap();
          unsafe {
            let mut result__: <core::VariablePhotoSequenceController as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<core::VariablePhotoSequenceController>(result__)
          }
        }pub fn photo_confirmation_control(&self,) ->  ::winrt::Result<PhotoConfirmationControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController3>(self).unwrap();
          unsafe {
            let mut result__: <PhotoConfirmationControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<PhotoConfirmationControl>(result__)
          }
        }pub fn zoom_control(&self) ->  ::winrt::Result<ZoomControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController3>(self).unwrap();
          unsafe {
            let mut result__: <ZoomControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<ZoomControl>(result__)
          }
        }pub fn exposure_priority_video_control(&self,) ->  ::winrt::Result<ExposurePriorityVideoControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController4>(self).unwrap();
          unsafe {
            let mut result__: <ExposurePriorityVideoControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<ExposurePriorityVideoControl>(result__)
          }
        }pub fn desired_optimization(&self) ->  ::winrt::Result<MediaCaptureOptimization>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController4>(self).unwrap();
          unsafe {
            let mut result__: <MediaCaptureOptimization as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaCaptureOptimization>(result__)
          }
        }pub fn set_desired_optimization(&self,value:MediaCaptureOptimization,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController4>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn hdr_video_control(&self) ->  ::winrt::Result<HdrVideoControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController4>(self).unwrap();
          unsafe {
            let mut result__: <HdrVideoControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<HdrVideoControl>(result__)
          }
        }pub fn optical_image_stabilization_control(&self,) ->  ::winrt::Result<OpticalImageStabilizationControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController4>(self).unwrap();
          unsafe {
            let mut result__: <OpticalImageStabilizationControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<OpticalImageStabilizationControl>(result__)
          }
        }pub fn advanced_photo_control(&self) ->  ::winrt::Result<AdvancedPhotoControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController4>(self).unwrap();
          unsafe {
            let mut result__: <AdvancedPhotoControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<AdvancedPhotoControl>(result__)
          }
        }pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController5>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn get_device_property_by_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::IReference<u32>>, >, >(&self,property_id:T0__,max_property_value_size:T1__,) ->  ::winrt::Result<VideoDeviceControllerGetDevicePropertyResult>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController5>(self).unwrap();
          unsafe {
            let mut result__: <VideoDeviceControllerGetDevicePropertyResult as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),property_id.into().abi(),max_property_value_size.into().abi(), &mut result__,).from_abi::<VideoDeviceControllerGetDevicePropertyResult>(result__)
          }
        }pub fn set_device_property_by_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,property_id:T0__,property_value:T1__,) ->  ::winrt::Result<VideoDeviceControllerSetDevicePropertyStatus>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController5>(self).unwrap();
          unsafe {
            let mut result__: <VideoDeviceControllerSetDevicePropertyStatus as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),property_id.into().abi(),property_value.into().abi(), &mut result__,).from_abi::<VideoDeviceControllerSetDevicePropertyStatus>(result__)
          }
        }pub fn get_device_property_by_extended_id< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::IReference<u32>>, >, >(&self,extended_property_id: &[<u8 as::winrt::RuntimeType>::DefaultType],max_property_value_size:T1__,) ->  ::winrt::Result<VideoDeviceControllerGetDevicePropertyResult>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController5>(self).unwrap();
          unsafe {
            let mut result__: <VideoDeviceControllerGetDevicePropertyResult as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),extended_property_id.len()as u32, ::std::mem::transmute(extended_property_id.as_ptr()),max_property_value_size.into().abi(), &mut result__,).from_abi::<VideoDeviceControllerGetDevicePropertyResult>(result__)
          }
        }pub fn set_device_property_by_extended_id(&self,extended_property_id: &[<u8 as::winrt::RuntimeType>::DefaultType],property_value: &[<u8 as::winrt::RuntimeType>::DefaultType],) ->  ::winrt::Result<VideoDeviceControllerSetDevicePropertyStatus>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController5>(self).unwrap();
          unsafe {
            let mut result__: <VideoDeviceControllerSetDevicePropertyStatus as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),extended_property_id.len()as u32, ::std::mem::transmute(extended_property_id.as_ptr()),property_value.len()as u32, ::std::mem::transmute(property_value.as_ptr()), &mut result__,).from_abi::<VideoDeviceControllerSetDevicePropertyStatus>(result__)
          }
        }pub fn video_temporal_denoising_control(&self,) ->  ::winrt::Result<VideoTemporalDenoisingControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController6>(self).unwrap();
          unsafe {
            let mut result__: <VideoTemporalDenoisingControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoTemporalDenoisingControl>(result__)
          }
        }pub fn infrared_torch_control(&self) ->  ::winrt::Result<InfraredTorchControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController7>(self).unwrap();
          unsafe {
            let mut result__: <InfraredTorchControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<InfraredTorchControl>(result__)
          }
        }pub fn panel_based_optimization_control(&self,) ->  ::winrt::Result<PanelBasedOptimizationControl>{
          let this =  &::winrt::Interface::cast::<IAdvancedVideoCaptureDeviceController8>(self).unwrap();
          unsafe {
            let mut result__: <PanelBasedOptimizationControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<PanelBasedOptimizationControl>(result__)
          }
        }pub fn get_available_media_stream_properties(&self,media_stream_type:super::capture::MediaStreamType,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<super::media_properties::IMediaEncodingProperties, >, >{
          let this =  &::winrt::Interface::cast::<IMediaDeviceController>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<super::media_properties::IMediaEncodingProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),media_stream_type, &mut result__,).from_abi::<super::super::foundation::collections::IVectorView<super::media_properties::IMediaEncodingProperties, >>(result__)
          }
        }pub fn get_media_stream_properties(&self,media_stream_type:super::capture::MediaStreamType,) ->  ::winrt::Result<super::media_properties::IMediaEncodingProperties>{
          let this =  &::winrt::Interface::cast::<IMediaDeviceController>(self).unwrap();
          unsafe {
            let mut result__: <super::media_properties::IMediaEncodingProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),media_stream_type, &mut result__,).from_abi::<super::media_properties::IMediaEncodingProperties>(result__)
          }
        }pub fn set_media_stream_properties_async< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::media_properties::IMediaEncodingProperties>, >, >(&self,media_stream_type:super::capture::MediaStreamType,media_encoding_properties:T1__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IMediaDeviceController>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),media_stream_type,media_encoding_properties.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn brightness(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn contrast(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn hue(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn white_balance(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn backlight_compensation(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn pan(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn tilt(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn zoom(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn roll(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn exposure(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn focus(&self) ->  ::winrt::Result<MediaDeviceControl>{
          let this = self;
          unsafe {
            let mut result__: <MediaDeviceControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaDeviceControl>(result__)
          }
        }pub fn try_set_powerline_frequency(&self,value:super::capture::PowerlineFrequency,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),value, &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn try_get_powerline_frequency(&self,value: &mut super::capture::PowerlineFrequency,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this), ::winrt::Abi::set_abi(value), &mut result__,).from_abi::<bool>(result__)
          }
        }
      }impl::std::clone::Clone for VideoDeviceController {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for VideoDeviceController {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for VideoDeviceController{}
      impl::std::fmt::Debug for VideoDeviceController {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for VideoDeviceController {
        const NAME: & 'static str = "Windows.Media.Devices.VideoDeviceController";
        
      }unsafe impl::winrt::Interface for VideoDeviceController {
        type Vtable = IVideoDeviceController_abi;
        const IID: ::winrt::Guid =  <IVideoDeviceController as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for VideoDeviceController {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.VideoDeviceController;{99555575-2e2e-40b8-b6c7-f82d10013210})");
        
      }impl::std::convert::From<VideoDeviceController>for::winrt::Object {
        fn from(value:VideoDeviceController) -> Self {
          value.0
        }
      }impl::std::convert::From<&VideoDeviceController>for::winrt::Object {
        fn from(value: &VideoDeviceController) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<VideoDeviceController>for IAdvancedVideoCaptureDeviceController {
        fn from(value:VideoDeviceController) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoDeviceController>for IAdvancedVideoCaptureDeviceController {
        fn from(value: &VideoDeviceController) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController>>for VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedVideoCaptureDeviceController, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController>>for& 'a VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedVideoCaptureDeviceController, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<VideoDeviceController>for IAdvancedVideoCaptureDeviceController2 {
        fn from(value:VideoDeviceController) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoDeviceController>for IAdvancedVideoCaptureDeviceController2 {
        fn from(value: &VideoDeviceController) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController2>>for VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedVideoCaptureDeviceController2, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController2>>for& 'a VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedVideoCaptureDeviceController2, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<VideoDeviceController>for IAdvancedVideoCaptureDeviceController3 {
        fn from(value:VideoDeviceController) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoDeviceController>for IAdvancedVideoCaptureDeviceController3 {
        fn from(value: &VideoDeviceController) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController3>>for VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController3>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedVideoCaptureDeviceController3, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController3>>for& 'a VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController3>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedVideoCaptureDeviceController3, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<VideoDeviceController>for IAdvancedVideoCaptureDeviceController4 {
        fn from(value:VideoDeviceController) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoDeviceController>for IAdvancedVideoCaptureDeviceController4 {
        fn from(value: &VideoDeviceController) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController4>>for VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController4>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedVideoCaptureDeviceController4, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController4>>for& 'a VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController4>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedVideoCaptureDeviceController4, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<VideoDeviceController>for IAdvancedVideoCaptureDeviceController5 {
        fn from(value:VideoDeviceController) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoDeviceController>for IAdvancedVideoCaptureDeviceController5 {
        fn from(value: &VideoDeviceController) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController5>>for VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController5>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedVideoCaptureDeviceController5, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController5>>for& 'a VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController5>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedVideoCaptureDeviceController5, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<VideoDeviceController>for IAdvancedVideoCaptureDeviceController6 {
        fn from(value:VideoDeviceController) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoDeviceController>for IAdvancedVideoCaptureDeviceController6 {
        fn from(value: &VideoDeviceController) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController6>>for VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController6>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedVideoCaptureDeviceController6, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController6>>for& 'a VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController6>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedVideoCaptureDeviceController6, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<VideoDeviceController>for IAdvancedVideoCaptureDeviceController7 {
        fn from(value:VideoDeviceController) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoDeviceController>for IAdvancedVideoCaptureDeviceController7 {
        fn from(value: &VideoDeviceController) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController7>>for VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController7>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedVideoCaptureDeviceController7, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController7>>for& 'a VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController7>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedVideoCaptureDeviceController7, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<VideoDeviceController>for IAdvancedVideoCaptureDeviceController8 {
        fn from(value:VideoDeviceController) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoDeviceController>for IAdvancedVideoCaptureDeviceController8 {
        fn from(value: &VideoDeviceController) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController8>>for VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController8>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedVideoCaptureDeviceController8, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController8>>for& 'a VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IAdvancedVideoCaptureDeviceController8>{
          ::winrt::Param::Owned(::std::convert::Into::<IAdvancedVideoCaptureDeviceController8, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<VideoDeviceController>for IMediaDeviceController {
        fn from(value:VideoDeviceController) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoDeviceController>for IMediaDeviceController {
        fn from(value: &VideoDeviceController) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaDeviceController>>for VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaDeviceController>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaDeviceController>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaDeviceController>>for& 'a VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaDeviceController>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaDeviceController>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<VideoDeviceController>for IVideoDeviceController {
        fn from(value:VideoDeviceController) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&VideoDeviceController>for IVideoDeviceController {
        fn from(value: &VideoDeviceController) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoDeviceController>>for VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoDeviceController>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoDeviceController>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoDeviceController>>for& 'a VideoDeviceController {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoDeviceController>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoDeviceController>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct MediaCapturePauseBehavior(i32);
      impl::std::convert::From<i32>for MediaCapturePauseBehavior {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for MediaCapturePauseBehavior {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for MediaCapturePauseBehavior {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for MediaCapturePauseBehavior {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for MediaCapturePauseBehavior {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaCapturePauseBehavior{}
      impl::std::marker::Copy for MediaCapturePauseBehavior{}
      impl MediaCapturePauseBehavior {
        #![allow(non_upper_case_globals)]pub const RetainHardwareResources:Self = Self(0i32);
        pub const ReleaseHardwareResources:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for MediaCapturePauseBehavior {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for MediaCapturePauseBehavior {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.MediaCapturePauseBehavior;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct CameraStreamState(i32);
      impl::std::convert::From<i32>for CameraStreamState {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for CameraStreamState {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for CameraStreamState {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for CameraStreamState {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for CameraStreamState {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for CameraStreamState{}
      impl::std::marker::Copy for CameraStreamState{}
      impl CameraStreamState {
        #![allow(non_upper_case_globals)]pub const NotStreaming:Self = Self(0i32);
        pub const Streaming:Self = Self(1i32);
        pub const BlockedForPrivacy:Self = Self(2i32);
        pub const Shutdown:Self = Self(3i32);
        
      }unsafe impl::winrt::Abi for CameraStreamState {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for CameraStreamState {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.CameraStreamState;i4)",);
        
      }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod core {
        #[repr(transparent)]pub struct IFrameExposureCapabilities(::winrt::Object);
        impl::std::clone::Clone for IFrameExposureCapabilities {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IFrameExposureCapabilities {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IFrameExposureCapabilities {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IFrameExposureCapabilities{}
        impl IFrameExposureCapabilities {
          pub fn supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn min(&self,) ->  ::winrt::Result<super::super::super::foundation::TimeSpan>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::TimeSpan>(result__)
            }
          }pub fn max(&self,) ->  ::winrt::Result<super::super::super::foundation::TimeSpan>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::TimeSpan>(result__)
            }
          }pub fn step(&self,) ->  ::winrt::Result<super::super::super::foundation::TimeSpan>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::TimeSpan>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IFrameExposureCapabilities {
          type Vtable = IFrameExposureCapabilities_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3183385827,14725,20082,[151,194,5,144,214,19,7,161],);
          
        }#[repr(C)]pub struct IFrameExposureCapabilities_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IFrameExposureCapabilities {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{bdbe9ce3-3985-4e72-97c2-0590d61307a1}")
          };
          
        }impl::std::convert::From<IFrameExposureCapabilities>for::winrt::Object {
          fn from(value:IFrameExposureCapabilities) -> Self {
            value.0
          }
        }impl::std::convert::From<&IFrameExposureCapabilities>for::winrt::Object {
          fn from(value: &IFrameExposureCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFrameExposureCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFrameExposureCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct FrameExposureCapabilities(::winrt::Object);
        impl FrameExposureCapabilities {
          pub fn supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn min(&self,) ->  ::winrt::Result<super::super::super::foundation::TimeSpan>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::TimeSpan>(result__)
            }
          }pub fn max(&self,) ->  ::winrt::Result<super::super::super::foundation::TimeSpan>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::TimeSpan>(result__)
            }
          }pub fn step(&self,) ->  ::winrt::Result<super::super::super::foundation::TimeSpan>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::TimeSpan>(result__)
            }
          }
        }impl::std::clone::Clone for FrameExposureCapabilities {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for FrameExposureCapabilities {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for FrameExposureCapabilities{}
        impl::std::fmt::Debug for FrameExposureCapabilities {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for FrameExposureCapabilities {
          const NAME: & 'static str = "Windows.Media.Devices.Core.FrameExposureCapabilities";
          
        }unsafe impl::winrt::Interface for FrameExposureCapabilities {
          type Vtable = IFrameExposureCapabilities_abi;
          const IID: ::winrt::Guid =  <IFrameExposureCapabilities as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for FrameExposureCapabilities {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.Core.FrameExposureCapabilities;{bdbe9ce3-3985-4e72-97c2-0590d61307a1})");
          
        }impl::std::convert::From<FrameExposureCapabilities>for::winrt::Object {
          fn from(value:FrameExposureCapabilities) -> Self {
            value.0
          }
        }impl::std::convert::From<&FrameExposureCapabilities>for::winrt::Object {
          fn from(value: &FrameExposureCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for FrameExposureCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a FrameExposureCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<FrameExposureCapabilities>for IFrameExposureCapabilities {
          fn from(value:FrameExposureCapabilities) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&FrameExposureCapabilities>for IFrameExposureCapabilities {
          fn from(value: &FrameExposureCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameExposureCapabilities>>for FrameExposureCapabilities {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameExposureCapabilities>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameExposureCapabilities>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameExposureCapabilities>>for& 'a FrameExposureCapabilities {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameExposureCapabilities>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameExposureCapabilities>::into(::std::clone::Clone::clone(self),),)
          }
        }#[repr(transparent)]pub struct IFrameExposureCompensationCapabilities(::winrt::Object);
        impl::std::clone::Clone for IFrameExposureCompensationCapabilities {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IFrameExposureCompensationCapabilities {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IFrameExposureCompensationCapabilities {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IFrameExposureCompensationCapabilities{}
        impl IFrameExposureCompensationCapabilities {
          pub fn supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn min(&self) ->  ::winrt::Result<f32>{
            let this = self;
            unsafe {
              let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
            }
          }pub fn max(&self) ->  ::winrt::Result<f32>{
            let this = self;
            unsafe {
              let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
            }
          }pub fn step(&self) ->  ::winrt::Result<f32>{
            let this = self;
            unsafe {
              let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IFrameExposureCompensationCapabilities {
          type Vtable = IFrameExposureCompensationCapabilities_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3112740899,32869,16878,[176,79,114,34,101,149,69,0],);
          
        }#[repr(C)]pub struct IFrameExposureCompensationCapabilities_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IFrameExposureCompensationCapabilities {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{b988a823-8065-41ee-b04f-722265954500}")
          };
          
        }impl::std::convert::From<IFrameExposureCompensationCapabilities>for::winrt::Object {
          fn from(value:IFrameExposureCompensationCapabilities) -> Self {
            value.0
          }
        }impl::std::convert::From<&IFrameExposureCompensationCapabilities>for::winrt::Object {
          fn from(value: &IFrameExposureCompensationCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFrameExposureCompensationCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFrameExposureCompensationCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct FrameExposureCompensationCapabilities(::winrt::Object);
        impl FrameExposureCompensationCapabilities {
          pub fn supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn min(&self) ->  ::winrt::Result<f32>{
            let this = self;
            unsafe {
              let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
            }
          }pub fn max(&self) ->  ::winrt::Result<f32>{
            let this = self;
            unsafe {
              let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
            }
          }pub fn step(&self) ->  ::winrt::Result<f32>{
            let this = self;
            unsafe {
              let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
            }
          }
        }impl::std::clone::Clone for FrameExposureCompensationCapabilities {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for FrameExposureCompensationCapabilities {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for FrameExposureCompensationCapabilities{}
        impl::std::fmt::Debug for FrameExposureCompensationCapabilities {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for FrameExposureCompensationCapabilities {
          const NAME: & 'static str = "Windows.Media.Devices.Core.FrameExposureCompensationCapabilities";
          
        }unsafe impl::winrt::Interface for FrameExposureCompensationCapabilities {
          type Vtable = IFrameExposureCompensationCapabilities_abi;
          const IID: ::winrt::Guid =  <IFrameExposureCompensationCapabilities as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for FrameExposureCompensationCapabilities {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.Core.FrameExposureCompensationCapabilities;{b988a823-8065-41ee-b04f-722265954500})");
          
        }impl::std::convert::From<FrameExposureCompensationCapabilities>for::winrt::Object {
          fn from(value:FrameExposureCompensationCapabilities) -> Self {
            value.0
          }
        }impl::std::convert::From<&FrameExposureCompensationCapabilities>for::winrt::Object {
          fn from(value: &FrameExposureCompensationCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for FrameExposureCompensationCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a FrameExposureCompensationCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<FrameExposureCompensationCapabilities>for IFrameExposureCompensationCapabilities {
          fn from(value:FrameExposureCompensationCapabilities) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&FrameExposureCompensationCapabilities>for IFrameExposureCompensationCapabilities {
          fn from(value: &FrameExposureCompensationCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameExposureCompensationCapabilities>>for FrameExposureCompensationCapabilities {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameExposureCompensationCapabilities>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameExposureCompensationCapabilities, >::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameExposureCompensationCapabilities>>for& 'a FrameExposureCompensationCapabilities {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameExposureCompensationCapabilities>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameExposureCompensationCapabilities, >::into(::std::clone::Clone::clone(self)))
          }
        }#[repr(transparent)]pub struct IFrameIsoSpeedCapabilities(::winrt::Object);
        impl::std::clone::Clone for IFrameIsoSpeedCapabilities {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IFrameIsoSpeedCapabilities {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IFrameIsoSpeedCapabilities {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IFrameIsoSpeedCapabilities{}
        impl IFrameIsoSpeedCapabilities {
          pub fn supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn min(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }pub fn max(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }pub fn step(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IFrameIsoSpeedCapabilities {
          type Vtable = IFrameIsoSpeedCapabilities_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(381550433,28150,19145,[185,42,159,110,205,26,210,250],);
          
        }#[repr(C)]pub struct IFrameIsoSpeedCapabilities_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IFrameIsoSpeedCapabilities {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{16bdff61-6df6-4ac9-b92a-9f6ecd1ad2fa}")
          };
          
        }impl::std::convert::From<IFrameIsoSpeedCapabilities>for::winrt::Object {
          fn from(value:IFrameIsoSpeedCapabilities) -> Self {
            value.0
          }
        }impl::std::convert::From<&IFrameIsoSpeedCapabilities>for::winrt::Object {
          fn from(value: &IFrameIsoSpeedCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFrameIsoSpeedCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFrameIsoSpeedCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct FrameIsoSpeedCapabilities(::winrt::Object);
        impl FrameIsoSpeedCapabilities {
          pub fn supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn min(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }pub fn max(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }pub fn step(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }
        }impl::std::clone::Clone for FrameIsoSpeedCapabilities {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for FrameIsoSpeedCapabilities {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for FrameIsoSpeedCapabilities{}
        impl::std::fmt::Debug for FrameIsoSpeedCapabilities {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for FrameIsoSpeedCapabilities {
          const NAME: & 'static str = "Windows.Media.Devices.Core.FrameIsoSpeedCapabilities";
          
        }unsafe impl::winrt::Interface for FrameIsoSpeedCapabilities {
          type Vtable = IFrameIsoSpeedCapabilities_abi;
          const IID: ::winrt::Guid =  <IFrameIsoSpeedCapabilities as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for FrameIsoSpeedCapabilities {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.Core.FrameIsoSpeedCapabilities;{16bdff61-6df6-4ac9-b92a-9f6ecd1ad2fa})");
          
        }impl::std::convert::From<FrameIsoSpeedCapabilities>for::winrt::Object {
          fn from(value:FrameIsoSpeedCapabilities) -> Self {
            value.0
          }
        }impl::std::convert::From<&FrameIsoSpeedCapabilities>for::winrt::Object {
          fn from(value: &FrameIsoSpeedCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for FrameIsoSpeedCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a FrameIsoSpeedCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<FrameIsoSpeedCapabilities>for IFrameIsoSpeedCapabilities {
          fn from(value:FrameIsoSpeedCapabilities) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&FrameIsoSpeedCapabilities>for IFrameIsoSpeedCapabilities {
          fn from(value: &FrameIsoSpeedCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameIsoSpeedCapabilities>>for FrameIsoSpeedCapabilities {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameIsoSpeedCapabilities>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameIsoSpeedCapabilities>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameIsoSpeedCapabilities>>for& 'a FrameIsoSpeedCapabilities {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameIsoSpeedCapabilities>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameIsoSpeedCapabilities>::into(::std::clone::Clone::clone(self),),)
          }
        }#[repr(transparent)]pub struct IFrameFocusCapabilities(::winrt::Object);
        impl::std::clone::Clone for IFrameFocusCapabilities {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IFrameFocusCapabilities {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IFrameFocusCapabilities {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IFrameFocusCapabilities{}
        impl IFrameFocusCapabilities {
          pub fn supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn min(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }pub fn max(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }pub fn step(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IFrameFocusCapabilities {
          type Vtable = IFrameFocusCapabilities_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2066074968,448,16485,[156,64,193,167,33,66,92,26],);
          
        }#[repr(C)]pub struct IFrameFocusCapabilities_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IFrameFocusCapabilities {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{7b25cd58-01c0-4065-9c40-c1a721425c1a}")
          };
          
        }impl::std::convert::From<IFrameFocusCapabilities>for::winrt::Object {
          fn from(value:IFrameFocusCapabilities) -> Self {
            value.0
          }
        }impl::std::convert::From<&IFrameFocusCapabilities>for::winrt::Object {
          fn from(value: &IFrameFocusCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFrameFocusCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFrameFocusCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct FrameFocusCapabilities(::winrt::Object);
        impl FrameFocusCapabilities {
          pub fn supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn min(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }pub fn max(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }pub fn step(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }
        }impl::std::clone::Clone for FrameFocusCapabilities {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for FrameFocusCapabilities {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for FrameFocusCapabilities{}
        impl::std::fmt::Debug for FrameFocusCapabilities {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for FrameFocusCapabilities {
          const NAME: & 'static str = "Windows.Media.Devices.Core.FrameFocusCapabilities";
          
        }unsafe impl::winrt::Interface for FrameFocusCapabilities {
          type Vtable = IFrameFocusCapabilities_abi;
          const IID: ::winrt::Guid =  <IFrameFocusCapabilities as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for FrameFocusCapabilities {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.Core.FrameFocusCapabilities;{7b25cd58-01c0-4065-9c40-c1a721425c1a})");
          
        }impl::std::convert::From<FrameFocusCapabilities>for::winrt::Object {
          fn from(value:FrameFocusCapabilities) -> Self {
            value.0
          }
        }impl::std::convert::From<&FrameFocusCapabilities>for::winrt::Object {
          fn from(value: &FrameFocusCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for FrameFocusCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a FrameFocusCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<FrameFocusCapabilities>for IFrameFocusCapabilities {
          fn from(value:FrameFocusCapabilities) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&FrameFocusCapabilities>for IFrameFocusCapabilities {
          fn from(value: &FrameFocusCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameFocusCapabilities>>for FrameFocusCapabilities {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameFocusCapabilities>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameFocusCapabilities>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameFocusCapabilities>>for& 'a FrameFocusCapabilities {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameFocusCapabilities>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameFocusCapabilities>::into(::std::clone::Clone::clone(self),),)
          }
        }#[repr(transparent)]pub struct IFrameControlCapabilities(::winrt::Object);
        impl::std::clone::Clone for IFrameControlCapabilities {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IFrameControlCapabilities {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IFrameControlCapabilities {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IFrameControlCapabilities{}
        impl IFrameControlCapabilities {
          pub fn exposure(&self) ->  ::winrt::Result<FrameExposureCapabilities>{
            let this = self;
            unsafe {
              let mut result__: <FrameExposureCapabilities as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameExposureCapabilities>(result__)
            }
          }pub fn exposure_compensation(&self,) ->  ::winrt::Result<FrameExposureCompensationCapabilities>{
            let this = self;
            unsafe {
              let mut result__: <FrameExposureCompensationCapabilities as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameExposureCompensationCapabilities>(result__)
            }
          }pub fn iso_speed(&self) ->  ::winrt::Result<FrameIsoSpeedCapabilities>{
            let this = self;
            unsafe {
              let mut result__: <FrameIsoSpeedCapabilities as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameIsoSpeedCapabilities>(result__)
            }
          }pub fn focus(&self) ->  ::winrt::Result<FrameFocusCapabilities>{
            let this = self;
            unsafe {
              let mut result__: <FrameFocusCapabilities as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameFocusCapabilities>(result__)
            }
          }pub fn photo_confirmation_supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IFrameControlCapabilities {
          type Vtable = IFrameControlCapabilities_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2835328608,20126,17271,[167,137,226,76,74,231,229,68],);
          
        }#[repr(C)]pub struct IFrameControlCapabilities_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IFrameControlCapabilities {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{a8ffae60-4e9e-4377-a789-e24c4ae7e544}")
          };
          
        }impl::std::convert::From<IFrameControlCapabilities>for::winrt::Object {
          fn from(value:IFrameControlCapabilities) -> Self {
            value.0
          }
        }impl::std::convert::From<&IFrameControlCapabilities>for::winrt::Object {
          fn from(value: &IFrameControlCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFrameControlCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFrameControlCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct IFrameFlashCapabilities(::winrt::Object);
        impl::std::clone::Clone for IFrameFlashCapabilities {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IFrameFlashCapabilities {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IFrameFlashCapabilities {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IFrameFlashCapabilities{}
        impl IFrameFlashCapabilities {
          pub fn supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn red_eye_reduction_supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn power_supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IFrameFlashCapabilities {
          type Vtable = IFrameFlashCapabilities_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3146989986,24254,20322,[130,35,14,43,5,191,187,208],);
          
        }#[repr(C)]pub struct IFrameFlashCapabilities_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IFrameFlashCapabilities {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{bb9341a2-5ebe-4f62-8223-0e2b05bfbbd0}")
          };
          
        }impl::std::convert::From<IFrameFlashCapabilities>for::winrt::Object {
          fn from(value:IFrameFlashCapabilities) -> Self {
            value.0
          }
        }impl::std::convert::From<&IFrameFlashCapabilities>for::winrt::Object {
          fn from(value: &IFrameFlashCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFrameFlashCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFrameFlashCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct FrameFlashCapabilities(::winrt::Object);
        impl FrameFlashCapabilities {
          pub fn supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn red_eye_reduction_supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn power_supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }
        }impl::std::clone::Clone for FrameFlashCapabilities {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for FrameFlashCapabilities {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for FrameFlashCapabilities{}
        impl::std::fmt::Debug for FrameFlashCapabilities {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for FrameFlashCapabilities {
          const NAME: & 'static str = "Windows.Media.Devices.Core.FrameFlashCapabilities";
          
        }unsafe impl::winrt::Interface for FrameFlashCapabilities {
          type Vtable = IFrameFlashCapabilities_abi;
          const IID: ::winrt::Guid =  <IFrameFlashCapabilities as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for FrameFlashCapabilities {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.Core.FrameFlashCapabilities;{bb9341a2-5ebe-4f62-8223-0e2b05bfbbd0})");
          
        }impl::std::convert::From<FrameFlashCapabilities>for::winrt::Object {
          fn from(value:FrameFlashCapabilities) -> Self {
            value.0
          }
        }impl::std::convert::From<&FrameFlashCapabilities>for::winrt::Object {
          fn from(value: &FrameFlashCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for FrameFlashCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a FrameFlashCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<FrameFlashCapabilities>for IFrameFlashCapabilities {
          fn from(value:FrameFlashCapabilities) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&FrameFlashCapabilities>for IFrameFlashCapabilities {
          fn from(value: &FrameFlashCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameFlashCapabilities>>for FrameFlashCapabilities {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameFlashCapabilities>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameFlashCapabilities>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameFlashCapabilities>>for& 'a FrameFlashCapabilities {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameFlashCapabilities>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameFlashCapabilities>::into(::std::clone::Clone::clone(self),),)
          }
        }#[repr(transparent)]pub struct IFrameControlCapabilities2(::winrt::Object);
        impl::std::clone::Clone for IFrameControlCapabilities2 {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IFrameControlCapabilities2 {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IFrameControlCapabilities2 {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IFrameControlCapabilities2{}
        impl IFrameControlCapabilities2 {
          pub fn flash(&self) ->  ::winrt::Result<FrameFlashCapabilities>{
            let this = self;
            unsafe {
              let mut result__: <FrameFlashCapabilities as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameFlashCapabilities>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IFrameControlCapabilities2 {
          type Vtable = IFrameControlCapabilities2_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3466265700,18224,17423,[189,62,239,232,168,242,48,168],);
          
        }#[repr(C)]pub struct IFrameControlCapabilities2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IFrameControlCapabilities2 {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{ce9b0464-4730-440f-bd3e-efe8a8f230a8}")
          };
          
        }impl::std::convert::From<IFrameControlCapabilities2>for::winrt::Object {
          fn from(value:IFrameControlCapabilities2) -> Self {
            value.0
          }
        }impl::std::convert::From<&IFrameControlCapabilities2>for::winrt::Object {
          fn from(value: &IFrameControlCapabilities2) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFrameControlCapabilities2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFrameControlCapabilities2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct FrameControlCapabilities(::winrt::Object);
        impl FrameControlCapabilities {
          pub fn exposure(&self) ->  ::winrt::Result<FrameExposureCapabilities>{
            let this = self;
            unsafe {
              let mut result__: <FrameExposureCapabilities as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameExposureCapabilities>(result__)
            }
          }pub fn exposure_compensation(&self,) ->  ::winrt::Result<FrameExposureCompensationCapabilities>{
            let this = self;
            unsafe {
              let mut result__: <FrameExposureCompensationCapabilities as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameExposureCompensationCapabilities>(result__)
            }
          }pub fn iso_speed(&self) ->  ::winrt::Result<FrameIsoSpeedCapabilities>{
            let this = self;
            unsafe {
              let mut result__: <FrameIsoSpeedCapabilities as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameIsoSpeedCapabilities>(result__)
            }
          }pub fn focus(&self) ->  ::winrt::Result<FrameFocusCapabilities>{
            let this = self;
            unsafe {
              let mut result__: <FrameFocusCapabilities as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameFocusCapabilities>(result__)
            }
          }pub fn photo_confirmation_supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn flash(&self) ->  ::winrt::Result<FrameFlashCapabilities>{
            let this =  &::winrt::Interface::cast::<IFrameControlCapabilities2>(self).unwrap();
            unsafe {
              let mut result__: <FrameFlashCapabilities as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameFlashCapabilities>(result__)
            }
          }
        }impl::std::clone::Clone for FrameControlCapabilities {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for FrameControlCapabilities {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for FrameControlCapabilities{}
        impl::std::fmt::Debug for FrameControlCapabilities {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for FrameControlCapabilities {
          const NAME: & 'static str = "Windows.Media.Devices.Core.FrameControlCapabilities";
          
        }unsafe impl::winrt::Interface for FrameControlCapabilities {
          type Vtable = IFrameControlCapabilities_abi;
          const IID: ::winrt::Guid =  <IFrameControlCapabilities as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for FrameControlCapabilities {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.Core.FrameControlCapabilities;{a8ffae60-4e9e-4377-a789-e24c4ae7e544})");
          
        }impl::std::convert::From<FrameControlCapabilities>for::winrt::Object {
          fn from(value:FrameControlCapabilities) -> Self {
            value.0
          }
        }impl::std::convert::From<&FrameControlCapabilities>for::winrt::Object {
          fn from(value: &FrameControlCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for FrameControlCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a FrameControlCapabilities {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<FrameControlCapabilities>for IFrameControlCapabilities {
          fn from(value:FrameControlCapabilities) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&FrameControlCapabilities>for IFrameControlCapabilities {
          fn from(value: &FrameControlCapabilities) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameControlCapabilities>>for FrameControlCapabilities {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameControlCapabilities>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameControlCapabilities>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameControlCapabilities>>for& 'a FrameControlCapabilities {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameControlCapabilities>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameControlCapabilities>::into(::std::clone::Clone::clone(self),),)
          }
        }impl::std::convert::From<FrameControlCapabilities>for IFrameControlCapabilities2 {
          fn from(value:FrameControlCapabilities) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&FrameControlCapabilities>for IFrameControlCapabilities2 {
          fn from(value: &FrameControlCapabilities) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameControlCapabilities2>>for FrameControlCapabilities {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameControlCapabilities2>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameControlCapabilities2>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameControlCapabilities2>>for& 'a FrameControlCapabilities {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameControlCapabilities2>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameControlCapabilities2>::into(::std::clone::Clone::clone(self),),)
          }
        }#[repr(transparent)]pub struct IFrameExposureControl(::winrt::Object);
        impl::std::clone::Clone for IFrameExposureControl {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IFrameExposureControl {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IFrameExposureControl {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IFrameExposureControl{}
        impl IFrameExposureControl {
          pub fn auto(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn set_auto(&self,value:bool) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
            }
          }pub fn value(&self,) ->  ::winrt::Result<super::super::super::foundation::IReference<super::super::super::foundation::TimeSpan, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IReference<super::super::super::foundation::TimeSpan, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IReference<super::super::super::foundation::TimeSpan, >>(result__)
            }
          }pub fn set_value< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IReference<super::super::super::foundation::TimeSpan, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
            }
          }
        }unsafe impl::winrt::Interface for IFrameExposureControl {
          type Vtable = IFrameExposureControl_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2975881825,65455,18258,[182,33,245,182,241,23,244,50],);
          
        }#[repr(C)]pub struct IFrameExposureControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IFrameExposureControl {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{b1605a61-ffaf-4752-b621-f5b6f117f432}")
          };
          
        }impl::std::convert::From<IFrameExposureControl>for::winrt::Object {
          fn from(value:IFrameExposureControl) -> Self {
            value.0
          }
        }impl::std::convert::From<&IFrameExposureControl>for::winrt::Object {
          fn from(value: &IFrameExposureControl) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFrameExposureControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFrameExposureControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct FrameExposureControl(::winrt::Object);
        impl FrameExposureControl {
          pub fn auto(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn set_auto(&self,value:bool) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
            }
          }pub fn value(&self,) ->  ::winrt::Result<super::super::super::foundation::IReference<super::super::super::foundation::TimeSpan, >, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IReference<super::super::super::foundation::TimeSpan, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IReference<super::super::super::foundation::TimeSpan, >>(result__)
            }
          }pub fn set_value< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IReference<super::super::super::foundation::TimeSpan, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
            }
          }
        }impl::std::clone::Clone for FrameExposureControl {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for FrameExposureControl {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for FrameExposureControl{}
        impl::std::fmt::Debug for FrameExposureControl {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for FrameExposureControl {
          const NAME: & 'static str = "Windows.Media.Devices.Core.FrameExposureControl";
          
        }unsafe impl::winrt::Interface for FrameExposureControl {
          type Vtable = IFrameExposureControl_abi;
          const IID: ::winrt::Guid =  <IFrameExposureControl as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for FrameExposureControl {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.Core.FrameExposureControl;{b1605a61-ffaf-4752-b621-f5b6f117f432})");
          
        }impl::std::convert::From<FrameExposureControl>for::winrt::Object {
          fn from(value:FrameExposureControl) -> Self {
            value.0
          }
        }impl::std::convert::From<&FrameExposureControl>for::winrt::Object {
          fn from(value: &FrameExposureControl) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for FrameExposureControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a FrameExposureControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<FrameExposureControl>for IFrameExposureControl {
          fn from(value:FrameExposureControl) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&FrameExposureControl>for IFrameExposureControl {
          fn from(value: &FrameExposureControl) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameExposureControl>>for FrameExposureControl {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameExposureControl>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameExposureControl>::into(self,))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameExposureControl>>for& 'a FrameExposureControl {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameExposureControl>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameExposureControl>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct IFrameExposureCompensationControl(::winrt::Object);
        impl::std::clone::Clone for IFrameExposureCompensationControl {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IFrameExposureCompensationControl {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IFrameExposureCompensationControl {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IFrameExposureCompensationControl{}
        impl IFrameExposureCompensationControl {
          pub fn value(&self,) ->  ::winrt::Result<super::super::super::foundation::IReference<f32>>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IReference:: <f32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IReference<f32>>(result__)
            }
          }pub fn set_value< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IReference<f32>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
            }
          }
        }unsafe impl::winrt::Interface for IFrameExposureCompensationControl {
          type Vtable = IFrameExposureCompensationControl_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3914897097,63481,18634,[133,145,162,101,49,203,21,120],);
          
        }#[repr(C)]pub struct IFrameExposureCompensationControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IFrameExposureCompensationControl {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{e95896c9-f7f9-48ca-8591-a26531cb1578}")
          };
          
        }impl::std::convert::From<IFrameExposureCompensationControl>for::winrt::Object {
          fn from(value:IFrameExposureCompensationControl) -> Self {
            value.0
          }
        }impl::std::convert::From<&IFrameExposureCompensationControl>for::winrt::Object {
          fn from(value: &IFrameExposureCompensationControl) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFrameExposureCompensationControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFrameExposureCompensationControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct FrameExposureCompensationControl(::winrt::Object);
        impl FrameExposureCompensationControl {
          pub fn value(&self,) ->  ::winrt::Result<super::super::super::foundation::IReference<f32>>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IReference:: <f32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IReference<f32>>(result__)
            }
          }pub fn set_value< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IReference<f32>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
            }
          }
        }impl::std::clone::Clone for FrameExposureCompensationControl {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for FrameExposureCompensationControl {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for FrameExposureCompensationControl{}
        impl::std::fmt::Debug for FrameExposureCompensationControl {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for FrameExposureCompensationControl {
          const NAME: & 'static str = "Windows.Media.Devices.Core.FrameExposureCompensationControl";
          
        }unsafe impl::winrt::Interface for FrameExposureCompensationControl {
          type Vtable = IFrameExposureCompensationControl_abi;
          const IID: ::winrt::Guid =  <IFrameExposureCompensationControl as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for FrameExposureCompensationControl {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.Core.FrameExposureCompensationControl;{e95896c9-f7f9-48ca-8591-a26531cb1578})");
          
        }impl::std::convert::From<FrameExposureCompensationControl>for::winrt::Object {
          fn from(value:FrameExposureCompensationControl) -> Self {
            value.0
          }
        }impl::std::convert::From<&FrameExposureCompensationControl>for::winrt::Object {
          fn from(value: &FrameExposureCompensationControl) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for FrameExposureCompensationControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a FrameExposureCompensationControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<FrameExposureCompensationControl>for IFrameExposureCompensationControl {
          fn from(value:FrameExposureCompensationControl) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&FrameExposureCompensationControl>for IFrameExposureCompensationControl {
          fn from(value: &FrameExposureCompensationControl) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameExposureCompensationControl>>for FrameExposureCompensationControl {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameExposureCompensationControl>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameExposureCompensationControl, >::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameExposureCompensationControl>>for& 'a FrameExposureCompensationControl {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameExposureCompensationControl>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameExposureCompensationControl, >::into(::std::clone::Clone::clone(self)))
          }
        }#[repr(transparent)]pub struct IFrameIsoSpeedControl(::winrt::Object);
        impl::std::clone::Clone for IFrameIsoSpeedControl {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IFrameIsoSpeedControl {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IFrameIsoSpeedControl {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IFrameIsoSpeedControl{}
        impl IFrameIsoSpeedControl {
          pub fn auto(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn set_auto(&self,value:bool) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
            }
          }pub fn value(&self,) ->  ::winrt::Result<super::super::super::foundation::IReference<u32>>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IReference<u32>>(result__)
            }
          }pub fn set_value< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IReference<u32>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
            }
          }
        }unsafe impl::winrt::Interface for IFrameIsoSpeedControl {
          type Vtable = IFrameIsoSpeedControl_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(436465645,30826,19573,[165,87,122,185,168,95,88,140],);
          
        }#[repr(C)]pub struct IFrameIsoSpeedControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IFrameIsoSpeedControl {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{1a03efed-786a-4c75-a557-7ab9a85f588c}")
          };
          
        }impl::std::convert::From<IFrameIsoSpeedControl>for::winrt::Object {
          fn from(value:IFrameIsoSpeedControl) -> Self {
            value.0
          }
        }impl::std::convert::From<&IFrameIsoSpeedControl>for::winrt::Object {
          fn from(value: &IFrameIsoSpeedControl) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFrameIsoSpeedControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFrameIsoSpeedControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct FrameIsoSpeedControl(::winrt::Object);
        impl FrameIsoSpeedControl {
          pub fn auto(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn set_auto(&self,value:bool) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
            }
          }pub fn value(&self,) ->  ::winrt::Result<super::super::super::foundation::IReference<u32>>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IReference<u32>>(result__)
            }
          }pub fn set_value< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IReference<u32>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
            }
          }
        }impl::std::clone::Clone for FrameIsoSpeedControl {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for FrameIsoSpeedControl {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for FrameIsoSpeedControl{}
        impl::std::fmt::Debug for FrameIsoSpeedControl {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for FrameIsoSpeedControl {
          const NAME: & 'static str = "Windows.Media.Devices.Core.FrameIsoSpeedControl";
          
        }unsafe impl::winrt::Interface for FrameIsoSpeedControl {
          type Vtable = IFrameIsoSpeedControl_abi;
          const IID: ::winrt::Guid =  <IFrameIsoSpeedControl as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for FrameIsoSpeedControl {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.Core.FrameIsoSpeedControl;{1a03efed-786a-4c75-a557-7ab9a85f588c})");
          
        }impl::std::convert::From<FrameIsoSpeedControl>for::winrt::Object {
          fn from(value:FrameIsoSpeedControl) -> Self {
            value.0
          }
        }impl::std::convert::From<&FrameIsoSpeedControl>for::winrt::Object {
          fn from(value: &FrameIsoSpeedControl) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for FrameIsoSpeedControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a FrameIsoSpeedControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<FrameIsoSpeedControl>for IFrameIsoSpeedControl {
          fn from(value:FrameIsoSpeedControl) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&FrameIsoSpeedControl>for IFrameIsoSpeedControl {
          fn from(value: &FrameIsoSpeedControl) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameIsoSpeedControl>>for FrameIsoSpeedControl {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameIsoSpeedControl>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameIsoSpeedControl>::into(self,))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameIsoSpeedControl>>for& 'a FrameIsoSpeedControl {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameIsoSpeedControl>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameIsoSpeedControl>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct IFrameFocusControl(::winrt::Object);
        impl::std::clone::Clone for IFrameFocusControl {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IFrameFocusControl {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IFrameFocusControl {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IFrameFocusControl{}
        impl IFrameFocusControl {
          pub fn value(&self,) ->  ::winrt::Result<super::super::super::foundation::IReference<u32>>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IReference<u32>>(result__)
            }
          }pub fn set_value< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IReference<u32>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
            }
          }
        }unsafe impl::winrt::Interface for IFrameFocusControl {
          type Vtable = IFrameFocusControl_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(657322448,55570,16916,[166,123,227,138,141,72,216,198],);
          
        }#[repr(C)]pub struct IFrameFocusControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IFrameFocusControl {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{272df1d0-d912-4214-a67b-e38a8d48d8c6}")
          };
          
        }impl::std::convert::From<IFrameFocusControl>for::winrt::Object {
          fn from(value:IFrameFocusControl) -> Self {
            value.0
          }
        }impl::std::convert::From<&IFrameFocusControl>for::winrt::Object {
          fn from(value: &IFrameFocusControl) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFrameFocusControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFrameFocusControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct FrameFocusControl(::winrt::Object);
        impl FrameFocusControl {
          pub fn value(&self,) ->  ::winrt::Result<super::super::super::foundation::IReference<u32>>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IReference:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IReference<u32>>(result__)
            }
          }pub fn set_value< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IReference<u32>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
            }
          }
        }impl::std::clone::Clone for FrameFocusControl {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for FrameFocusControl {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for FrameFocusControl{}
        impl::std::fmt::Debug for FrameFocusControl {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for FrameFocusControl {
          const NAME: & 'static str = "Windows.Media.Devices.Core.FrameFocusControl";
          
        }unsafe impl::winrt::Interface for FrameFocusControl {
          type Vtable = IFrameFocusControl_abi;
          const IID: ::winrt::Guid =  <IFrameFocusControl as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for FrameFocusControl {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.Core.FrameFocusControl;{272df1d0-d912-4214-a67b-e38a8d48d8c6})");
          
        }impl::std::convert::From<FrameFocusControl>for::winrt::Object {
          fn from(value:FrameFocusControl) -> Self {
            value.0
          }
        }impl::std::convert::From<&FrameFocusControl>for::winrt::Object {
          fn from(value: &FrameFocusControl) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for FrameFocusControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a FrameFocusControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<FrameFocusControl>for IFrameFocusControl {
          fn from(value:FrameFocusControl) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&FrameFocusControl>for IFrameFocusControl {
          fn from(value: &FrameFocusControl) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameFocusControl>>for FrameFocusControl {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameFocusControl>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameFocusControl>::into(self,))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameFocusControl>>for& 'a FrameFocusControl {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameFocusControl>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameFocusControl>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct IFrameController(::winrt::Object);
        impl::std::clone::Clone for IFrameController {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IFrameController {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IFrameController {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IFrameController{}
        impl IFrameController {
          pub fn exposure_control(&self) ->  ::winrt::Result<FrameExposureControl>{
            let this = self;
            unsafe {
              let mut result__: <FrameExposureControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameExposureControl>(result__)
            }
          }pub fn exposure_compensation_control(&self,) ->  ::winrt::Result<FrameExposureCompensationControl>{
            let this = self;
            unsafe {
              let mut result__: <FrameExposureCompensationControl as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameExposureCompensationControl>(result__)
            }
          }pub fn iso_speed_control(&self) ->  ::winrt::Result<FrameIsoSpeedControl>{
            let this = self;
            unsafe {
              let mut result__: <FrameIsoSpeedControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameIsoSpeedControl>(result__)
            }
          }pub fn focus_control(&self) ->  ::winrt::Result<FrameFocusControl>{
            let this = self;
            unsafe {
              let mut result__: <FrameFocusControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameFocusControl>(result__)
            }
          }pub fn photo_confirmation_enabled(&self,) ->  ::winrt::Result<super::super::super::foundation::IReference<bool>>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IReference:: <bool>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IReference<bool>>(result__)
            }
          }pub fn set_photo_confirmation_enabled< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IReference<bool>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value.into().abi(),).ok()
            }
          }
        }unsafe impl::winrt::Interface for IFrameController {
          type Vtable = IFrameController_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3244579289,47855,16466,[145,119,72,175,242,175,117,34],);
          
        }#[repr(C)]pub struct IFrameController_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IFrameController {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{c16459d9-baef-4052-9177-48aff2af7522}")
          };
          
        }impl::std::convert::From<IFrameController>for::winrt::Object {
          fn from(value:IFrameController) -> Self {
            value.0
          }
        }impl::std::convert::From<&IFrameController>for::winrt::Object {
          fn from(value: &IFrameController) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFrameController {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFrameController {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct FrameFlashMode(i32);
        impl::std::convert::From<i32>for FrameFlashMode {
          fn from(value:i32) -> Self {
            Self(value)
          }
        }impl::std::clone::Clone for FrameFlashMode {
          fn clone(&self) -> Self {
            Self(self.0)
          }
        }impl::std::default::Default for FrameFlashMode {
          fn default() -> Self {
            Self(0)
          }
        }impl::std::fmt::Debug for FrameFlashMode {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for FrameFlashMode {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for FrameFlashMode{}
        impl::std::marker::Copy for FrameFlashMode{}
        impl FrameFlashMode {
          #![allow(non_upper_case_globals)]pub const Disable:Self = Self(0i32);
          pub const Enable:Self = Self(1i32);
          pub const Global:Self = Self(2i32);
          
        }unsafe impl::winrt::Abi for FrameFlashMode {
          type Abi = Self;
          
        }unsafe impl::winrt::RuntimeType for FrameFlashMode {
          type DefaultType = Self;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.Devices.Core.FrameFlashMode;i4)",);
          
        }#[repr(transparent)]pub struct IFrameFlashControl(::winrt::Object);
        impl::std::clone::Clone for IFrameFlashControl {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IFrameFlashControl {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IFrameFlashControl {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IFrameFlashControl{}
        impl IFrameFlashControl {
          pub fn mode(&self) ->  ::winrt::Result<FrameFlashMode>{
            let this = self;
            unsafe {
              let mut result__: <FrameFlashMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameFlashMode>(result__)
            }
          }pub fn set_mode(&self,value:FrameFlashMode) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
            }
          }pub fn auto(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn set_auto(&self,value:bool) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
            }
          }pub fn red_eye_reduction(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn set_red_eye_reduction(&self,value:bool) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
            }
          }pub fn power_percent(&self) ->  ::winrt::Result<f32>{
            let this = self;
            unsafe {
              let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
            }
          }pub fn set_power_percent(&self,value:f32) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value).ok()
            }
          }
        }unsafe impl::winrt::Interface for IFrameFlashControl {
          type Vtable = IFrameFlashControl_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1976956615,48453,20395,[147,117,69,172,4,179,50,194],);
          
        }#[repr(C)]pub struct IFrameFlashControl_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut FrameFlashMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:FrameFlashMode,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f32,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IFrameFlashControl {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{75d5f6c7-bd45-4fab-9375-45ac04b332c2}")
          };
          
        }impl::std::convert::From<IFrameFlashControl>for::winrt::Object {
          fn from(value:IFrameFlashControl) -> Self {
            value.0
          }
        }impl::std::convert::From<&IFrameFlashControl>for::winrt::Object {
          fn from(value: &IFrameFlashControl) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFrameFlashControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFrameFlashControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct FrameFlashControl(::winrt::Object);
        impl FrameFlashControl {
          pub fn mode(&self) ->  ::winrt::Result<FrameFlashMode>{
            let this = self;
            unsafe {
              let mut result__: <FrameFlashMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameFlashMode>(result__)
            }
          }pub fn set_mode(&self,value:FrameFlashMode) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
            }
          }pub fn auto(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn set_auto(&self,value:bool) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
            }
          }pub fn red_eye_reduction(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn set_red_eye_reduction(&self,value:bool) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value).ok()
            }
          }pub fn power_percent(&self) ->  ::winrt::Result<f32>{
            let this = self;
            unsafe {
              let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
            }
          }pub fn set_power_percent(&self,value:f32) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),value).ok()
            }
          }
        }impl::std::clone::Clone for FrameFlashControl {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for FrameFlashControl {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for FrameFlashControl{}
        impl::std::fmt::Debug for FrameFlashControl {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for FrameFlashControl {
          const NAME: & 'static str = "Windows.Media.Devices.Core.FrameFlashControl";
          
        }unsafe impl::winrt::Interface for FrameFlashControl {
          type Vtable = IFrameFlashControl_abi;
          const IID: ::winrt::Guid =  <IFrameFlashControl as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for FrameFlashControl {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.Core.FrameFlashControl;{75d5f6c7-bd45-4fab-9375-45ac04b332c2})");
          
        }impl::std::convert::From<FrameFlashControl>for::winrt::Object {
          fn from(value:FrameFlashControl) -> Self {
            value.0
          }
        }impl::std::convert::From<&FrameFlashControl>for::winrt::Object {
          fn from(value: &FrameFlashControl) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for FrameFlashControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a FrameFlashControl {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<FrameFlashControl>for IFrameFlashControl {
          fn from(value:FrameFlashControl) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&FrameFlashControl>for IFrameFlashControl {
          fn from(value: &FrameFlashControl) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameFlashControl>>for FrameFlashControl {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameFlashControl>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameFlashControl>::into(self,))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameFlashControl>>for& 'a FrameFlashControl {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameFlashControl>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameFlashControl>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct IFrameController2(::winrt::Object);
        impl::std::clone::Clone for IFrameController2 {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IFrameController2 {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IFrameController2 {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IFrameController2{}
        impl IFrameController2 {
          pub fn flash_control(&self) ->  ::winrt::Result<FrameFlashControl>{
            let this = self;
            unsafe {
              let mut result__: <FrameFlashControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameFlashControl>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IFrameController2 {
          type Vtable = IFrameController2_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(13876341,55420,18523,[138,9,92,53,133,104,180,39],);
          
        }#[repr(C)]pub struct IFrameController2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IFrameController2 {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{00d3bc75-d87c-485b-8a09-5c358568b427}")
          };
          
        }impl::std::convert::From<IFrameController2>for::winrt::Object {
          fn from(value:IFrameController2) -> Self {
            value.0
          }
        }impl::std::convert::From<&IFrameController2>for::winrt::Object {
          fn from(value: &IFrameController2) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IFrameController2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IFrameController2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct FrameController(::winrt::Object);
        impl FrameController {
          pub fn new() ->  ::winrt::Result<Self>{
            Self::IActivationFactory(|f|f.activate_instance::<Self>())
          }pub fn exposure_control(&self) ->  ::winrt::Result<FrameExposureControl>{
            let this = self;
            unsafe {
              let mut result__: <FrameExposureControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameExposureControl>(result__)
            }
          }pub fn exposure_compensation_control(&self,) ->  ::winrt::Result<FrameExposureCompensationControl>{
            let this = self;
            unsafe {
              let mut result__: <FrameExposureCompensationControl as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameExposureCompensationControl>(result__)
            }
          }pub fn iso_speed_control(&self) ->  ::winrt::Result<FrameIsoSpeedControl>{
            let this = self;
            unsafe {
              let mut result__: <FrameIsoSpeedControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameIsoSpeedControl>(result__)
            }
          }pub fn focus_control(&self) ->  ::winrt::Result<FrameFocusControl>{
            let this = self;
            unsafe {
              let mut result__: <FrameFocusControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameFocusControl>(result__)
            }
          }pub fn photo_confirmation_enabled(&self,) ->  ::winrt::Result<super::super::super::foundation::IReference<bool>>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::IReference:: <bool>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::IReference<bool>>(result__)
            }
          }pub fn set_photo_confirmation_enabled< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IReference<bool>>, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value.into().abi(),).ok()
            }
          }pub fn flash_control(&self) ->  ::winrt::Result<FrameFlashControl>{
            let this =  &::winrt::Interface::cast::<IFrameController2>(self).unwrap();
            unsafe {
              let mut result__: <FrameFlashControl as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameFlashControl>(result__)
            }
          }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
            static mut SHARED: ::winrt::FactoryCache<FrameController, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
            unsafe {
              SHARED.call(callback)
            }
          }
        }impl::std::clone::Clone for FrameController {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for FrameController {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for FrameController{}
        impl::std::fmt::Debug for FrameController {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for FrameController {
          const NAME: & 'static str = "Windows.Media.Devices.Core.FrameController";
          
        }unsafe impl::winrt::Interface for FrameController {
          type Vtable = IFrameController_abi;
          const IID: ::winrt::Guid =  <IFrameController as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for FrameController {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.Core.FrameController;{c16459d9-baef-4052-9177-48aff2af7522})");
          
        }impl::std::convert::From<FrameController>for::winrt::Object {
          fn from(value:FrameController) -> Self {
            value.0
          }
        }impl::std::convert::From<&FrameController>for::winrt::Object {
          fn from(value: &FrameController) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for FrameController {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a FrameController {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<FrameController>for IFrameController {
          fn from(value:FrameController) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&FrameController>for IFrameController {
          fn from(value: &FrameController) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameController>>for FrameController {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameController>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameController>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameController>>for& 'a FrameController {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameController>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameController>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<FrameController>for IFrameController2 {
          fn from(value:FrameController) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&FrameController>for IFrameController2 {
          fn from(value: &FrameController) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameController2>>for FrameController {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameController2>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameController2>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IFrameController2>>for& 'a FrameController {
          fn into(self) ->  ::winrt::Param< 'a ,IFrameController2>{
            ::winrt::Param::Owned(::std::convert::Into::<IFrameController2>::into(::std::clone::Clone::clone(self),))
          }
        }unsafe impl::std::marker::Send for FrameController{}
        unsafe impl::std::marker::Sync for FrameController{}
        #[repr(transparent)]pub struct IVariablePhotoSequenceController(::winrt::Object);
        impl::std::clone::Clone for IVariablePhotoSequenceController {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IVariablePhotoSequenceController {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IVariablePhotoSequenceController {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IVariablePhotoSequenceController{}
        impl IVariablePhotoSequenceController {
          pub fn supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn max_photos_per_second(&self) ->  ::winrt::Result<f32>{
            let this = self;
            unsafe {
              let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
            }
          }pub fn photos_per_second_limit(&self) ->  ::winrt::Result<f32>{
            let this = self;
            unsafe {
              let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
            }
          }pub fn set_photos_per_second_limit(&self,value:f32) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
            }
          }pub fn get_highest_concurrent_frame_rate< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::media_properties::IMediaEncodingProperties, >, >, >(&self,capture_properties:T0__,) ->  ::winrt::Result<super::super::media_properties::MediaRatio>{
            let this = self;
            unsafe {
              let mut result__: <super::super::media_properties::MediaRatio as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),capture_properties.into().abi(), &mut result__,).from_abi::<super::super::media_properties::MediaRatio>(result__)
            }
          }pub fn get_current_frame_rate(&self,) ->  ::winrt::Result<super::super::media_properties::MediaRatio>{
            let this = self;
            unsafe {
              let mut result__: <super::super::media_properties::MediaRatio as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::media_properties::MediaRatio>(result__)
            }
          }pub fn frame_capabilities(&self) ->  ::winrt::Result<FrameControlCapabilities>{
            let this = self;
            unsafe {
              let mut result__: <FrameControlCapabilities as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameControlCapabilities>(result__)
            }
          }pub fn desired_frame_controllers(&self,) ->  ::winrt::Result<super::super::super::foundation::collections::IVector<FrameController>, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::collections::IVector:: <FrameController>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::super::foundation::collections::IVector:: <FrameController> >(result__)
            }
          }
        }unsafe impl::winrt::Interface for IVariablePhotoSequenceController {
          type Vtable = IVariablePhotoSequenceController_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2143287424,60812,17405,[167,195,179,88,9,228,34,154],);
          
        }#[repr(C)]pub struct IVariablePhotoSequenceController_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:f32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,capture_properties: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IVariablePhotoSequenceController {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{7fbff880-ed8c-43fd-a7c3-b35809e4229a}")
          };
          
        }impl::std::convert::From<IVariablePhotoSequenceController>for::winrt::Object {
          fn from(value:IVariablePhotoSequenceController) -> Self {
            value.0
          }
        }impl::std::convert::From<&IVariablePhotoSequenceController>for::winrt::Object {
          fn from(value: &IVariablePhotoSequenceController) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVariablePhotoSequenceController {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVariablePhotoSequenceController {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct VariablePhotoSequenceController(::winrt::Object);
        impl VariablePhotoSequenceController {
          pub fn supported(&self) ->  ::winrt::Result<bool>{
            let this = self;
            unsafe {
              let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
            }
          }pub fn max_photos_per_second(&self) ->  ::winrt::Result<f32>{
            let this = self;
            unsafe {
              let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
            }
          }pub fn photos_per_second_limit(&self) ->  ::winrt::Result<f32>{
            let this = self;
            unsafe {
              let mut result__: <f32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<f32>(result__)
            }
          }pub fn set_photos_per_second_limit(&self,value:f32) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value).ok()
            }
          }pub fn get_highest_concurrent_frame_rate< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::media_properties::IMediaEncodingProperties, >, >, >(&self,capture_properties:T0__,) ->  ::winrt::Result<super::super::media_properties::MediaRatio>{
            let this = self;
            unsafe {
              let mut result__: <super::super::media_properties::MediaRatio as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),capture_properties.into().abi(), &mut result__,).from_abi::<super::super::media_properties::MediaRatio>(result__)
            }
          }pub fn get_current_frame_rate(&self,) ->  ::winrt::Result<super::super::media_properties::MediaRatio>{
            let this = self;
            unsafe {
              let mut result__: <super::super::media_properties::MediaRatio as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::media_properties::MediaRatio>(result__)
            }
          }pub fn frame_capabilities(&self) ->  ::winrt::Result<FrameControlCapabilities>{
            let this = self;
            unsafe {
              let mut result__: <FrameControlCapabilities as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<FrameControlCapabilities>(result__)
            }
          }pub fn desired_frame_controllers(&self,) ->  ::winrt::Result<super::super::super::foundation::collections::IVector<FrameController>, >{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::collections::IVector:: <FrameController>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::super::foundation::collections::IVector:: <FrameController> >(result__)
            }
          }
        }impl::std::clone::Clone for VariablePhotoSequenceController {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for VariablePhotoSequenceController {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for VariablePhotoSequenceController{}
        impl::std::fmt::Debug for VariablePhotoSequenceController {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for VariablePhotoSequenceController {
          const NAME: & 'static str = "Windows.Media.Devices.Core.VariablePhotoSequenceController";
          
        }unsafe impl::winrt::Interface for VariablePhotoSequenceController {
          type Vtable = IVariablePhotoSequenceController_abi;
          const IID: ::winrt::Guid =  <IVariablePhotoSequenceController as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for VariablePhotoSequenceController {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.Core.VariablePhotoSequenceController;{7fbff880-ed8c-43fd-a7c3-b35809e4229a})");
          
        }impl::std::convert::From<VariablePhotoSequenceController>for::winrt::Object {
          fn from(value:VariablePhotoSequenceController) -> Self {
            value.0
          }
        }impl::std::convert::From<&VariablePhotoSequenceController>for::winrt::Object {
          fn from(value: &VariablePhotoSequenceController) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for VariablePhotoSequenceController {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a VariablePhotoSequenceController {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<VariablePhotoSequenceController>for IVariablePhotoSequenceController {
          fn from(value:VariablePhotoSequenceController) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&VariablePhotoSequenceController>for IVariablePhotoSequenceController {
          fn from(value: &VariablePhotoSequenceController) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVariablePhotoSequenceController>>for VariablePhotoSequenceController {
          fn into(self) ->  ::winrt::Param< 'a ,IVariablePhotoSequenceController>{
            ::winrt::Param::Owned(::std::convert::Into::<IVariablePhotoSequenceController, >::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVariablePhotoSequenceController>>for& 'a VariablePhotoSequenceController {
          fn into(self) ->  ::winrt::Param< 'a ,IVariablePhotoSequenceController>{
            ::winrt::Param::Owned(::std::convert::Into::<IVariablePhotoSequenceController, >::into(::std::clone::Clone::clone(self)))
          }
        }#[repr(transparent)]pub struct ICameraIntrinsics(::winrt::Object);
        impl::std::clone::Clone for ICameraIntrinsics {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for ICameraIntrinsics {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for ICameraIntrinsics {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for ICameraIntrinsics{}
        impl ICameraIntrinsics {
          pub fn focal_length(&self,) ->  ::winrt::Result<super::super::super::foundation::numerics::Vector2>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::numerics::Vector2 as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::numerics::Vector2>(result__,)
            }
          }pub fn principal_point(&self,) ->  ::winrt::Result<super::super::super::foundation::numerics::Vector2>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::numerics::Vector2 as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::numerics::Vector2>(result__,)
            }
          }pub fn radial_distortion(&self,) ->  ::winrt::Result<super::super::super::foundation::numerics::Vector3>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::numerics::Vector3 as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::numerics::Vector3>(result__,)
            }
          }pub fn tangential_distortion(&self,) ->  ::winrt::Result<super::super::super::foundation::numerics::Vector2>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::numerics::Vector2 as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::numerics::Vector2>(result__,)
            }
          }pub fn image_width(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }pub fn image_height(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }pub fn project_onto_frame< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::numerics::Vector3>, >, >(&self,coordinate:T0__,) ->  ::winrt::Result<super::super::super::foundation::Point>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::Point as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),coordinate.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::Point>(result__)
            }
          }pub fn unproject_at_unit_depth< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::Point>, >, >(&self,pixel_coordinate:T0__,) ->  ::winrt::Result<super::super::super::foundation::numerics::Vector2>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::numerics::Vector2 as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),pixel_coordinate.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::numerics::Vector2>(result__,)
            }
          }pub fn project_many_onto_frame(&self,coordinates: &[<super::super::super::foundation::numerics::Vector3 as::winrt::RuntimeType> ::DefaultType],results: &mut[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),coordinates.len()as u32, ::std::mem::transmute(coordinates.as_ptr()),results.len()as u32, ::std::mem::transmute_copy(&results),).ok()
            }
          }pub fn unproject_pixels_at_unit_depth(&self,pixel_coordinates: &[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],results: &mut[<super::super::super::foundation::numerics::Vector2 as::winrt::RuntimeType> ::DefaultType],) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),pixel_coordinates.len()as u32, ::std::mem::transmute(pixel_coordinates.as_ptr()),results.len()as u32, ::std::mem::transmute_copy(&results),).ok()
            }
          }
        }unsafe impl::winrt::Interface for ICameraIntrinsics {
          type Vtable = ICameraIntrinsics_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(178711858,25993,18906,[175,222,89,66,112,202,10,172],);
          
        }#[repr(C)]pub struct ICameraIntrinsics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::super::foundation::numerics::Vector2_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::super::foundation::numerics::Vector2_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::super::foundation::numerics::Vector3_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::super::foundation::numerics::Vector2_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,coordinate:super::super::super::foundation::numerics::Vector3_abi,result__: *mut super::super::super::foundation::Point_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,pixel_coordinate:super::super::super::foundation::Point_abi,result__: *mut super::super::super::foundation::numerics::Vector2_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_coordinates:u32,coordinates: *const super::super::super::foundation::numerics::Vector3_abi,array_size_results:u32,results: *mut super::super::super::foundation::Point_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_pixel_coordinates:u32,pixel_coordinates: *const super::super::super::foundation::Point_abi,array_size_results:u32,results: *mut super::super::super::foundation::numerics::Vector2_abi,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for ICameraIntrinsics {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{0aa6ed32-6589-49da-afde-594270ca0aac}")
          };
          
        }impl::std::convert::From<ICameraIntrinsics>for::winrt::Object {
          fn from(value:ICameraIntrinsics) -> Self {
            value.0
          }
        }impl::std::convert::From<&ICameraIntrinsics>for::winrt::Object {
          fn from(value: &ICameraIntrinsics) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ICameraIntrinsics {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ICameraIntrinsics {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct ICameraIntrinsics2(::winrt::Object);
        impl::std::clone::Clone for ICameraIntrinsics2 {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for ICameraIntrinsics2 {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for ICameraIntrinsics2 {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for ICameraIntrinsics2{}
        impl ICameraIntrinsics2 {
          pub fn undistorted_projection_transform(&self,) ->  ::winrt::Result<super::super::super::foundation::numerics::Matrix4x4>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::numerics::Matrix4x4 as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::numerics::Matrix4x4>(result__,)
            }
          }pub fn distort_point< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::Point>, >, >(&self,input:T0__,) ->  ::winrt::Result<super::super::super::foundation::Point>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::Point as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),input.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::Point>(result__)
            }
          }pub fn distort_points(&self,inputs: &[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],results: &mut[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),inputs.len()as u32, ::std::mem::transmute(inputs.as_ptr()),results.len()as u32, ::std::mem::transmute_copy(&results),).ok()
            }
          }pub fn undistort_point< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::Point>, >, >(&self,input:T0__,) ->  ::winrt::Result<super::super::super::foundation::Point>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::Point as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),input.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::Point>(result__)
            }
          }pub fn undistort_points(&self,inputs: &[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],results: &mut[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),inputs.len()as u32, ::std::mem::transmute(inputs.as_ptr()),results.len()as u32, ::std::mem::transmute_copy(&results),).ok()
            }
          }
        }unsafe impl::winrt::Interface for ICameraIntrinsics2 {
          type Vtable = ICameraIntrinsics2_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(215655495,1944,19277,[131,159,197,236,65,77,178,122],);
          
        }#[repr(C)]pub struct ICameraIntrinsics2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::super::foundation::numerics::Matrix4x4_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,input:super::super::super::foundation::Point_abi,result__: *mut super::super::super::foundation::Point_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_inputs:u32,inputs: *const super::super::super::foundation::Point_abi,array_size_results:u32,results: *mut super::super::super::foundation::Point_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,input:super::super::super::foundation::Point_abi,result__: *mut super::super::super::foundation::Point_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_inputs:u32,inputs: *const super::super::super::foundation::Point_abi,array_size_results:u32,results: *mut super::super::super::foundation::Point_abi,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for ICameraIntrinsics2 {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{0cdaa447-0798-4b4d-839f-c5ec414db27a}")
          };
          
        }impl::std::convert::From<ICameraIntrinsics2>for::winrt::Object {
          fn from(value:ICameraIntrinsics2) -> Self {
            value.0
          }
        }impl::std::convert::From<&ICameraIntrinsics2>for::winrt::Object {
          fn from(value: &ICameraIntrinsics2) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ICameraIntrinsics2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ICameraIntrinsics2 {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct ICameraIntrinsicsFactory(::winrt::Object);
        impl::std::clone::Clone for ICameraIntrinsicsFactory {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for ICameraIntrinsicsFactory {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for ICameraIntrinsicsFactory {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for ICameraIntrinsicsFactory{}
        impl ICameraIntrinsicsFactory {
          pub fn create< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::numerics::Vector2>, >,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::numerics::Vector2>, >,T2__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::numerics::Vector3>, >,T3__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::numerics::Vector2>, >, >(&self,focal_length:T0__,principal_point:T1__,radial_distortion:T2__,tangential_distortion:T3__,image_width:u32,image_height:u32,) ->  ::winrt::Result<CameraIntrinsics>{
            let this = self;
            unsafe {
              let mut result__: <CameraIntrinsics as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),focal_length.into().abi(),principal_point.into().abi(),radial_distortion.into().abi(),tangential_distortion.into().abi(),image_width,image_height, &mut result__,).from_abi::<CameraIntrinsics>(result__)
            }
          }
        }unsafe impl::winrt::Interface for ICameraIntrinsicsFactory {
          type Vtable = ICameraIntrinsicsFactory_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3235759238,8498,18996,[166,89,155,254,42,5,87,18],);
          
        }#[repr(C)]pub struct ICameraIntrinsicsFactory_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: & ::winrt::Guid,interface: *mut::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,focal_length:super::super::super::foundation::numerics::Vector2_abi,principal_point:super::super::super::foundation::numerics::Vector2_abi,radial_distortion:super::super::super::foundation::numerics::Vector3_abi,tangential_distortion:super::super::super::foundation::numerics::Vector2_abi,image_width:u32,image_height:u32,result__: *mut::winrt::RawPtr) ->  ::winrt::ErrorCode,)where;
        unsafe impl::winrt::RuntimeType for ICameraIntrinsicsFactory {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{c0ddc486-2132-4a34-a659-9bfe2a055712}")
          };
          
        }impl::std::convert::From<ICameraIntrinsicsFactory>for::winrt::Object {
          fn from(value:ICameraIntrinsicsFactory) -> Self {
            value.0
          }
        }impl::std::convert::From<&ICameraIntrinsicsFactory>for::winrt::Object {
          fn from(value: &ICameraIntrinsicsFactory) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ICameraIntrinsicsFactory {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ICameraIntrinsicsFactory {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct CameraIntrinsics(::winrt::Object);
        impl CameraIntrinsics {
          pub fn focal_length(&self,) ->  ::winrt::Result<super::super::super::foundation::numerics::Vector2>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::numerics::Vector2 as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::numerics::Vector2>(result__,)
            }
          }pub fn principal_point(&self,) ->  ::winrt::Result<super::super::super::foundation::numerics::Vector2>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::numerics::Vector2 as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::numerics::Vector2>(result__,)
            }
          }pub fn radial_distortion(&self,) ->  ::winrt::Result<super::super::super::foundation::numerics::Vector3>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::numerics::Vector3 as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::numerics::Vector3>(result__,)
            }
          }pub fn tangential_distortion(&self,) ->  ::winrt::Result<super::super::super::foundation::numerics::Vector2>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::numerics::Vector2 as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::numerics::Vector2>(result__,)
            }
          }pub fn image_width(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }pub fn image_height(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }pub fn project_onto_frame< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::numerics::Vector3>, >, >(&self,coordinate:T0__,) ->  ::winrt::Result<super::super::super::foundation::Point>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::Point as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),coordinate.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::Point>(result__)
            }
          }pub fn unproject_at_unit_depth< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::Point>, >, >(&self,pixel_coordinate:T0__,) ->  ::winrt::Result<super::super::super::foundation::numerics::Vector2>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::numerics::Vector2 as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),pixel_coordinate.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::numerics::Vector2>(result__,)
            }
          }pub fn project_many_onto_frame(&self,coordinates: &[<super::super::super::foundation::numerics::Vector3 as::winrt::RuntimeType> ::DefaultType],results: &mut[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),coordinates.len()as u32, ::std::mem::transmute(coordinates.as_ptr()),results.len()as u32, ::std::mem::transmute_copy(&results),).ok()
            }
          }pub fn unproject_pixels_at_unit_depth(&self,pixel_coordinates: &[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],results: &mut[<super::super::super::foundation::numerics::Vector2 as::winrt::RuntimeType> ::DefaultType],) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),pixel_coordinates.len()as u32, ::std::mem::transmute(pixel_coordinates.as_ptr()),results.len()as u32, ::std::mem::transmute_copy(&results),).ok()
            }
          }pub fn undistorted_projection_transform(&self,) ->  ::winrt::Result<super::super::super::foundation::numerics::Matrix4x4>{
            let this =  &::winrt::Interface::cast::<ICameraIntrinsics2>(self).unwrap();
            unsafe {
              let mut result__: <super::super::super::foundation::numerics::Matrix4x4 as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::super::foundation::numerics::Matrix4x4>(result__,)
            }
          }pub fn distort_point< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::Point>, >, >(&self,input:T0__,) ->  ::winrt::Result<super::super::super::foundation::Point>{
            let this =  &::winrt::Interface::cast::<ICameraIntrinsics2>(self).unwrap();
            unsafe {
              let mut result__: <super::super::super::foundation::Point as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),input.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::Point>(result__)
            }
          }pub fn distort_points(&self,inputs: &[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],results: &mut[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],) ->  ::winrt::Result<()>{
            let this =  &::winrt::Interface::cast::<ICameraIntrinsics2>(self).unwrap();
            unsafe {
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),inputs.len()as u32, ::std::mem::transmute(inputs.as_ptr()),results.len()as u32, ::std::mem::transmute_copy(&results),).ok()
            }
          }pub fn undistort_point< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::Point>, >, >(&self,input:T0__,) ->  ::winrt::Result<super::super::super::foundation::Point>{
            let this =  &::winrt::Interface::cast::<ICameraIntrinsics2>(self).unwrap();
            unsafe {
              let mut result__: <super::super::super::foundation::Point as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),input.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::Point>(result__)
            }
          }pub fn undistort_points(&self,inputs: &[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],results: &mut[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],) ->  ::winrt::Result<()>{
            let this =  &::winrt::Interface::cast::<ICameraIntrinsics2>(self).unwrap();
            unsafe {
              (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),inputs.len()as u32, ::std::mem::transmute(inputs.as_ptr()),results.len()as u32, ::std::mem::transmute_copy(&results),).ok()
            }
          }pub fn create< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::numerics::Vector2>, >,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::numerics::Vector2>, >,T2__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::numerics::Vector3>, >,T3__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::numerics::Vector2>, >, >(focal_length:T0__,principal_point:T1__,radial_distortion:T2__,tangential_distortion:T3__,image_width:u32,image_height:u32,) ->  ::winrt::Result<CameraIntrinsics>{
            Self::ICameraIntrinsicsFactory(|this|unsafe {
              let mut result__: <CameraIntrinsics as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),focal_length.into().abi(),principal_point.into().abi(),radial_distortion.into().abi(),tangential_distortion.into().abi(),image_width,image_height, &mut result__,).from_abi::<CameraIntrinsics>(result__)
            })
          }#[allow(non_snake_case)]fn ICameraIntrinsicsFactory<R,F:FnOnce(&ICameraIntrinsicsFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
            static mut SHARED: ::winrt::FactoryCache<CameraIntrinsics,ICameraIntrinsicsFactory, >  =  ::winrt::FactoryCache::new();
            unsafe {
              SHARED.call(callback)
            }
          }
        }impl::std::clone::Clone for CameraIntrinsics {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for CameraIntrinsics {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for CameraIntrinsics{}
        impl::std::fmt::Debug for CameraIntrinsics {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for CameraIntrinsics {
          const NAME: & 'static str = "Windows.Media.Devices.Core.CameraIntrinsics";
          
        }unsafe impl::winrt::Interface for CameraIntrinsics {
          type Vtable = ICameraIntrinsics_abi;
          const IID: ::winrt::Guid =  <ICameraIntrinsics as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for CameraIntrinsics {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.Core.CameraIntrinsics;{0aa6ed32-6589-49da-afde-594270ca0aac})");
          
        }impl::std::convert::From<CameraIntrinsics>for::winrt::Object {
          fn from(value:CameraIntrinsics) -> Self {
            value.0
          }
        }impl::std::convert::From<&CameraIntrinsics>for::winrt::Object {
          fn from(value: &CameraIntrinsics) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for CameraIntrinsics {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a CameraIntrinsics {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<CameraIntrinsics>for ICameraIntrinsics {
          fn from(value:CameraIntrinsics) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&CameraIntrinsics>for ICameraIntrinsics {
          fn from(value: &CameraIntrinsics) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICameraIntrinsics>>for CameraIntrinsics {
          fn into(self) ->  ::winrt::Param< 'a ,ICameraIntrinsics>{
            ::winrt::Param::Owned(::std::convert::Into::<ICameraIntrinsics>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICameraIntrinsics>>for& 'a CameraIntrinsics {
          fn into(self) ->  ::winrt::Param< 'a ,ICameraIntrinsics>{
            ::winrt::Param::Owned(::std::convert::Into::<ICameraIntrinsics>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<CameraIntrinsics>for ICameraIntrinsics2 {
          fn from(value:CameraIntrinsics) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&CameraIntrinsics>for ICameraIntrinsics2 {
          fn from(value: &CameraIntrinsics) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICameraIntrinsics2>>for CameraIntrinsics {
          fn into(self) ->  ::winrt::Param< 'a ,ICameraIntrinsics2>{
            ::winrt::Param::Owned(::std::convert::Into::<ICameraIntrinsics2>::into(self,))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ICameraIntrinsics2>>for& 'a CameraIntrinsics {
          fn into(self) ->  ::winrt::Param< 'a ,ICameraIntrinsics2>{
            ::winrt::Param::Owned(::std::convert::Into::<ICameraIntrinsics2>::into(::std::clone::Clone::clone(self),))
          }
        }unsafe impl::std::marker::Send for CameraIntrinsics{}
        unsafe impl::std::marker::Sync for CameraIntrinsics{}
        #[repr(transparent)]pub struct IDepthCorrelatedCoordinateMapper(::winrt::Object);
        impl::std::clone::Clone for IDepthCorrelatedCoordinateMapper {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IDepthCorrelatedCoordinateMapper {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IDepthCorrelatedCoordinateMapper {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IDepthCorrelatedCoordinateMapper{}
        impl IDepthCorrelatedCoordinateMapper {
          pub fn close(&self) ->  ::winrt::Result<()>{
            let this =  &::winrt::Interface::cast::<super::super::super::foundation::IClosable, >(self).unwrap();
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
            }
          }pub fn unproject_point< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::Point>, >,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::perception::spatial::SpatialCoordinateSystem, >, >, >(&self,source_point:T0__,target_coordinate_system:T1__,) ->  ::winrt::Result<super::super::super::foundation::numerics::Vector3>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::numerics::Vector3 as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),source_point.into().abi(),target_coordinate_system.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::numerics::Vector3>(result__,)
            }
          }pub fn unproject_points< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::perception::spatial::SpatialCoordinateSystem, >, >, >(&self,source_points: &[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],target_coordinate_system:T1__,results: &mut[<super::super::super::foundation::numerics::Vector3 as::winrt::RuntimeType> ::DefaultType],) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),source_points.len()as u32, ::std::mem::transmute(source_points.as_ptr()),target_coordinate_system.into().abi(),results.len()as u32, ::std::mem::transmute_copy(&results),).ok()
            }
          }pub fn map_point< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::Point>, >,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::perception::spatial::SpatialCoordinateSystem, >, >,T2__: ::std::convert::Into<::winrt::Param< 'a ,CameraIntrinsics>>, >(&self,source_point:T0__,target_coordinate_system:T1__,target_camera_intrinsics:T2__,) ->  ::winrt::Result<super::super::super::foundation::Point>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::Point as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),source_point.into().abi(),target_coordinate_system.into().abi(),target_camera_intrinsics.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::Point>(result__)
            }
          }pub fn map_points< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::perception::spatial::SpatialCoordinateSystem, >, >,T2__: ::std::convert::Into<::winrt::Param< 'a ,CameraIntrinsics>>, >(&self,source_points: &[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],target_coordinate_system:T1__,target_camera_intrinsics:T2__,results: &mut[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),source_points.len()as u32, ::std::mem::transmute(source_points.as_ptr()),target_coordinate_system.into().abi(),target_camera_intrinsics.into().abi(),results.len()as u32, ::std::mem::transmute_copy(&results),).ok()
            }
          }
        }unsafe impl::winrt::Interface for IDepthCorrelatedCoordinateMapper {
          type Vtable = IDepthCorrelatedCoordinateMapper_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4183656955,35568,19632,[146,109,105,104,102,229,4,106],);
          
        }#[repr(C)]pub struct IDepthCorrelatedCoordinateMapper_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,source_point:super::super::super::foundation::Point_abi,target_coordinate_system: ::winrt::RawPtr,result__: *mut super::super::super::foundation::numerics::Vector3_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_source_points:u32,source_points: *const super::super::super::foundation::Point_abi,target_coordinate_system: ::winrt::RawPtr,array_size_results:u32,results: *mut super::super::super::foundation::numerics::Vector3_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,source_point:super::super::super::foundation::Point_abi,target_coordinate_system: ::winrt::RawPtr,target_camera_intrinsics: ::winrt::RawPtr,result__: *mut super::super::super::foundation::Point_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_source_points:u32,source_points: *const super::super::super::foundation::Point_abi,target_coordinate_system: ::winrt::RawPtr,target_camera_intrinsics: ::winrt::RawPtr,array_size_results:u32,results: *mut super::super::super::foundation::Point_abi,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IDepthCorrelatedCoordinateMapper {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{f95d89fb-8af0-4cb0-926d-696866e5046a}")
          };
          
        }impl::std::convert::From<IDepthCorrelatedCoordinateMapper>for::winrt::Object {
          fn from(value:IDepthCorrelatedCoordinateMapper) -> Self {
            value.0
          }
        }impl::std::convert::From<&IDepthCorrelatedCoordinateMapper>for::winrt::Object {
          fn from(value: &IDepthCorrelatedCoordinateMapper) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDepthCorrelatedCoordinateMapper {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDepthCorrelatedCoordinateMapper {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<IDepthCorrelatedCoordinateMapper>for super::super::super::foundation::IClosable {
          fn from(value:IDepthCorrelatedCoordinateMapper) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&IDepthCorrelatedCoordinateMapper>for super::super::super::foundation::IClosable {
          fn from(value: &IDepthCorrelatedCoordinateMapper) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for IDepthCorrelatedCoordinateMapper {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(self))
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for& 'a IDepthCorrelatedCoordinateMapper {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(::std::clone::Clone::clone(self)))
          }
        }#[repr(transparent)]pub struct DepthCorrelatedCoordinateMapper(::winrt::Object);
        impl DepthCorrelatedCoordinateMapper {
          pub fn close(&self) ->  ::winrt::Result<()>{
            let this =  &::winrt::Interface::cast::<super::super::super::foundation::IClosable, >(self).unwrap();
            unsafe {
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
            }
          }pub fn unproject_point< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::Point>, >,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::perception::spatial::SpatialCoordinateSystem, >, >, >(&self,source_point:T0__,target_coordinate_system:T1__,) ->  ::winrt::Result<super::super::super::foundation::numerics::Vector3>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::numerics::Vector3 as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),source_point.into().abi(),target_coordinate_system.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::numerics::Vector3>(result__,)
            }
          }pub fn unproject_points< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::perception::spatial::SpatialCoordinateSystem, >, >, >(&self,source_points: &[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],target_coordinate_system:T1__,results: &mut[<super::super::super::foundation::numerics::Vector3 as::winrt::RuntimeType> ::DefaultType],) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),source_points.len()as u32, ::std::mem::transmute(source_points.as_ptr()),target_coordinate_system.into().abi(),results.len()as u32, ::std::mem::transmute_copy(&results),).ok()
            }
          }pub fn map_point< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::Point>, >,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::perception::spatial::SpatialCoordinateSystem, >, >,T2__: ::std::convert::Into<::winrt::Param< 'a ,CameraIntrinsics>>, >(&self,source_point:T0__,target_coordinate_system:T1__,target_camera_intrinsics:T2__,) ->  ::winrt::Result<super::super::super::foundation::Point>{
            let this = self;
            unsafe {
              let mut result__: <super::super::super::foundation::Point as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),source_point.into().abi(),target_coordinate_system.into().abi(),target_camera_intrinsics.into().abi(), &mut result__,).from_abi::<super::super::super::foundation::Point>(result__)
            }
          }pub fn map_points< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::perception::spatial::SpatialCoordinateSystem, >, >,T2__: ::std::convert::Into<::winrt::Param< 'a ,CameraIntrinsics>>, >(&self,source_points: &[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],target_coordinate_system:T1__,target_camera_intrinsics:T2__,results: &mut[<super::super::super::foundation::Point as::winrt::RuntimeType> ::DefaultType],) ->  ::winrt::Result<()>{
            let this = self;
            unsafe {
              (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),source_points.len()as u32, ::std::mem::transmute(source_points.as_ptr()),target_coordinate_system.into().abi(),target_camera_intrinsics.into().abi(),results.len()as u32, ::std::mem::transmute_copy(&results),).ok()
            }
          }
        }impl::std::clone::Clone for DepthCorrelatedCoordinateMapper {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for DepthCorrelatedCoordinateMapper {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for DepthCorrelatedCoordinateMapper{}
        impl::std::fmt::Debug for DepthCorrelatedCoordinateMapper {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for DepthCorrelatedCoordinateMapper {
          const NAME: & 'static str = "Windows.Media.Devices.Core.DepthCorrelatedCoordinateMapper";
          
        }unsafe impl::winrt::Interface for DepthCorrelatedCoordinateMapper {
          type Vtable = IDepthCorrelatedCoordinateMapper_abi;
          const IID: ::winrt::Guid =  <IDepthCorrelatedCoordinateMapper as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for DepthCorrelatedCoordinateMapper {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.Devices.Core.DepthCorrelatedCoordinateMapper;{f95d89fb-8af0-4cb0-926d-696866e5046a})");
          
        }impl::std::convert::From<DepthCorrelatedCoordinateMapper>for::winrt::Object {
          fn from(value:DepthCorrelatedCoordinateMapper) -> Self {
            value.0
          }
        }impl::std::convert::From<&DepthCorrelatedCoordinateMapper>for::winrt::Object {
          fn from(value: &DepthCorrelatedCoordinateMapper) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DepthCorrelatedCoordinateMapper {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DepthCorrelatedCoordinateMapper {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<DepthCorrelatedCoordinateMapper>for super::super::super::foundation::IClosable {
          fn from(value:DepthCorrelatedCoordinateMapper) -> Self {
            ::std::convert::From::from(&value)
          }
        }impl::std::convert::From<&DepthCorrelatedCoordinateMapper>for super::super::super::foundation::IClosable {
          fn from(value: &DepthCorrelatedCoordinateMapper) -> Self {
            ::winrt::Interface::cast(value).unwrap()
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for DepthCorrelatedCoordinateMapper {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(self))
          }
        }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::super::foundation::IClosable>, >for& 'a DepthCorrelatedCoordinateMapper {
          fn into(self,) ->  ::winrt::Param< 'a ,super::super::super::foundation::IClosable>{
            ::winrt::Param::Owned(::std::convert::Into::<super::super::super::foundation::IClosable, >::into(::std::clone::Clone::clone(self)))
          }
        }impl::std::convert::From<DepthCorrelatedCoordinateMapper>for IDepthCorrelatedCoordinateMapper {
          fn from(value:DepthCorrelatedCoordinateMapper) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&DepthCorrelatedCoordinateMapper>for IDepthCorrelatedCoordinateMapper {
          fn from(value: &DepthCorrelatedCoordinateMapper) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDepthCorrelatedCoordinateMapper>>for DepthCorrelatedCoordinateMapper {
          fn into(self) ->  ::winrt::Param< 'a ,IDepthCorrelatedCoordinateMapper>{
            ::winrt::Param::Owned(::std::convert::Into::<IDepthCorrelatedCoordinateMapper, >::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDepthCorrelatedCoordinateMapper>>for& 'a DepthCorrelatedCoordinateMapper {
          fn into(self) ->  ::winrt::Param< 'a ,IDepthCorrelatedCoordinateMapper>{
            ::winrt::Param::Owned(::std::convert::Into::<IDepthCorrelatedCoordinateMapper, >::into(::std::clone::Clone::clone(self)))
          }
        }unsafe impl::std::marker::Send for DepthCorrelatedCoordinateMapper{}
        unsafe impl::std::marker::Sync for DepthCorrelatedCoordinateMapper{}
        
      }
    }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod effects {
      #[repr(transparent)]pub struct IAudioEffectDefinition(::winrt::Object);
      impl::std::clone::Clone for IAudioEffectDefinition {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAudioEffectDefinition {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAudioEffectDefinition {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAudioEffectDefinition{}
      impl IAudioEffectDefinition {
        pub fn activatable_class_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn properties(&self,) ->  ::winrt::Result<super::super::foundation::collections::IPropertySet>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IPropertySet as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IPropertySet>(result__,)
          }
        }
      }unsafe impl::winrt::Interface for IAudioEffectDefinition {
        type Vtable = IAudioEffectDefinition_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3839359348,32128,20339,[144,137,227,28,157,185,194,148],);
        
      }#[repr(C)]pub struct IAudioEffectDefinition_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAudioEffectDefinition {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{e4d7f974-7d80-4f73-9089-e31c9db9c294}")
        };
        
      }impl::std::convert::From<IAudioEffectDefinition>for::winrt::Object {
        fn from(value:IAudioEffectDefinition) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAudioEffectDefinition>for::winrt::Object {
        fn from(value: &IAudioEffectDefinition) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAudioEffectDefinition {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAudioEffectDefinition {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IVideoEffectDefinition(::winrt::Object);
      impl::std::clone::Clone for IVideoEffectDefinition {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IVideoEffectDefinition {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IVideoEffectDefinition {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IVideoEffectDefinition{}
      impl IVideoEffectDefinition {
        pub fn activatable_class_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn properties(&self,) ->  ::winrt::Result<super::super::foundation::collections::IPropertySet>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IPropertySet as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IPropertySet>(result__,)
          }
        }
      }unsafe impl::winrt::Interface for IVideoEffectDefinition {
        type Vtable = IVideoEffectDefinition_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(972262640,36111,20286,[132,252,45,70,165,41,121,67],);
        
      }#[repr(C)]pub struct IVideoEffectDefinition_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IVideoEffectDefinition {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{39f38cf0-8d0f-4f3e-84fc-2d46a5297943}")
        };
        
      }impl::std::convert::From<IVideoEffectDefinition>for::winrt::Object {
        fn from(value:IVideoEffectDefinition) -> Self {
          value.0
        }
      }impl::std::convert::From<&IVideoEffectDefinition>for::winrt::Object {
        fn from(value: &IVideoEffectDefinition) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoEffectDefinition {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoEffectDefinition {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }
    }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod media_properties {
      #[repr(transparent)]pub struct IMediaRatio(::winrt::Object);
      impl::std::clone::Clone for IMediaRatio {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaRatio {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaRatio {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaRatio{}
      impl IMediaRatio {
        pub fn set_numerator(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn numerator(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_denominator(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn denominator(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaRatio {
        type Vtable = IMediaRatio_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3536912101,35113,16413,[172,120,125,53,126,55,129,99],);
        
      }#[repr(C)]pub struct IMediaRatio_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaRatio {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{d2d0fee5-8929-401d-ac78-7d357e378163}")
        };
        
      }impl::std::convert::From<IMediaRatio>for::winrt::Object {
        fn from(value:IMediaRatio) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaRatio>for::winrt::Object {
        fn from(value: &IMediaRatio) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaRatio {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaRatio {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct MediaRatio(::winrt::Object);
      impl MediaRatio {
        pub fn set_numerator(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn numerator(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_denominator(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn denominator(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }
      }impl::std::clone::Clone for MediaRatio {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaRatio {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaRatio{}
      impl::std::fmt::Debug for MediaRatio {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MediaRatio {
        const NAME: & 'static str = "Windows.Media.MediaProperties.MediaRatio";
        
      }unsafe impl::winrt::Interface for MediaRatio {
        type Vtable = IMediaRatio_abi;
        const IID: ::winrt::Guid =  <IMediaRatio as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for MediaRatio {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.MediaProperties.MediaRatio;{d2d0fee5-8929-401d-ac78-7d357e378163})");
        
      }impl::std::convert::From<MediaRatio>for::winrt::Object {
        fn from(value:MediaRatio) -> Self {
          value.0
        }
      }impl::std::convert::From<&MediaRatio>for::winrt::Object {
        fn from(value: &MediaRatio) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaRatio {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaRatio {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaRatio>for IMediaRatio {
        fn from(value:MediaRatio) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MediaRatio>for IMediaRatio {
        fn from(value: &MediaRatio) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaRatio>>for MediaRatio {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaRatio>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaRatio>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaRatio>>for& 'a MediaRatio {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaRatio>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaRatio>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for MediaRatio{}
      unsafe impl::std::marker::Sync for MediaRatio{}
      #[repr(transparent)]pub struct MediaPropertySet(::winrt::Object);
      impl MediaPropertySet {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn first(&self,) ->  ::winrt::Result<super::super::foundation::collections::IIterator<super::super::foundation::collections::IKeyValuePair< ::winrt::Guid, ::winrt::Object, >, >, >{
          let this =  &::winrt::Interface::cast::<super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::Guid, ::winrt::Object, >, >, >(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IIterator<super::super::foundation::collections::IKeyValuePair< ::winrt::Guid, ::winrt::Object, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IIterator<super::super::foundation::collections::IKeyValuePair< ::winrt::Guid, ::winrt::Object, >, >>(result__)
          }
        }pub fn lookup< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Guid>>>(&self,key:T0__,) ->  ::winrt::Result<::winrt::Object>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::Object as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),key.into().abi(), &mut result__,).from_abi::<::winrt::Object>(result__)
          }
        }pub fn size(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn has_key< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Guid>>, >(&self,key:T0__,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),key.into().abi(), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn get_view(&self,) ->  ::winrt::Result<super::super::foundation::collections::IMapView<::winrt::Guid, ::winrt::Object>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IMapView< ::winrt::Guid, ::winrt::Object, >>(result__)
          }
        }pub fn insert< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Guid>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,key:T0__,value:T1__,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),key.into().abi(),value.into().abi(), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn remove< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Guid>>>(&self,key:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),key.into().abi(),).ok()
          }
        }pub fn clear(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this)).ok()
          }
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<MediaPropertySet, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for MediaPropertySet {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaPropertySet {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaPropertySet{}
      impl::std::fmt::Debug for MediaPropertySet {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MediaPropertySet {
        const NAME: & 'static str = "Windows.Media.MediaProperties.MediaPropertySet";
        
      }unsafe impl::winrt::Interface for MediaPropertySet {
        type Vtable = super::super::foundation::collections::IMap_abi<::winrt::Guid, ::winrt::Object>;
        const IID: ::winrt::Guid =  <super::super::foundation::collections::IMap< ::winrt::Guid, ::winrt::Object, >as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for MediaPropertySet {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.MediaProperties.MediaPropertySet;pinterface({3c2925fe-8519-45c1-aa79-197b6718c1c1};g16;cinterface(IInspectable)))");
        
      }impl::std::convert::From<MediaPropertySet>for::winrt::Object {
        fn from(value:MediaPropertySet) -> Self {
          value.0
        }
      }impl::std::convert::From<&MediaPropertySet>for::winrt::Object {
        fn from(value: &MediaPropertySet) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaPropertySet {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaPropertySet {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaPropertySet>for super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::Guid, ::winrt::Object, >, >{
        fn from(value:MediaPropertySet) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaPropertySet>for super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::Guid, ::winrt::Object, >, >{
        fn from(value: &MediaPropertySet) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::Guid, ::winrt::Object, >, >, >, >for MediaPropertySet {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::Guid, ::winrt::Object, >, >, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::Guid, ::winrt::Object, >, >, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::Guid, ::winrt::Object, >, >, >, >for& 'a MediaPropertySet {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::Guid, ::winrt::Object, >, >, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::Guid, ::winrt::Object, >, >, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<MediaPropertySet>for super::super::foundation::collections::IMap<::winrt::Guid, ::winrt::Object>{
        fn from(value:MediaPropertySet) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MediaPropertySet>for super::super::foundation::collections::IMap<::winrt::Guid, ::winrt::Object>{
        fn from(value: &MediaPropertySet) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IMap<::winrt::Guid, ::winrt::Object>, >, >for MediaPropertySet {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::foundation::collections::IMap<::winrt::Guid, ::winrt::Object>, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::collections::IMap<::winrt::Guid, ::winrt::Object>, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IMap<::winrt::Guid, ::winrt::Object>, >, >for& 'a MediaPropertySet {
        fn into(self,) ->  ::winrt::Param< 'a ,super::super::foundation::collections::IMap<::winrt::Guid, ::winrt::Object>, >{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::collections::IMap<::winrt::Guid, ::winrt::Object>, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::iter::IntoIterator for MediaPropertySet {
        type Item = super::super::foundation::collections::IKeyValuePair< ::winrt::Guid, ::winrt::Object, >;
        type IntoIter = super::super::foundation::collections::IIterator<Self::Item>;
        fn into_iter(self) -> Self::IntoIter {
          self.first().unwrap()
        }
      }impl< 'a > ::std::iter::IntoIterator for& 'a MediaPropertySet {
        type Item = super::super::foundation::collections::IKeyValuePair< ::winrt::Guid, ::winrt::Object, >;
        type IntoIter = super::super::foundation::collections::IIterator<Self::Item>;
        fn into_iter(self) -> Self::IntoIter {
          self.first().unwrap()
        }
      }unsafe impl::std::marker::Send for MediaPropertySet{}
      unsafe impl::std::marker::Sync for MediaPropertySet{}
      #[repr(transparent)]pub struct IMediaEncodingProperties(::winrt::Object);
      impl::std::clone::Clone for IMediaEncodingProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaEncodingProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaEncodingProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaEncodingProperties{}
      impl IMediaEncodingProperties {
        pub fn properties(&self) ->  ::winrt::Result<MediaPropertySet>{
          let this = self;
          unsafe {
            let mut result__: <MediaPropertySet as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaPropertySet>(result__)
          }
        }pub fn r#type(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_subtype< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn subtype(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaEncodingProperties {
        type Vtable = IMediaEncodingProperties_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3019909878,44244,20058,[162,75,93,116,152,168,184,196],);
        
      }#[repr(C)]pub struct IMediaEncodingProperties_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaEncodingProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{b4002af6-acd4-4e5a-a24b-5d7498a8b8c4}")
        };
        
      }impl::std::convert::From<IMediaEncodingProperties>for::winrt::Object {
        fn from(value:IMediaEncodingProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaEncodingProperties>for::winrt::Object {
        fn from(value: &IMediaEncodingProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAudioEncodingProperties(::winrt::Object);
      impl::std::clone::Clone for IAudioEncodingProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAudioEncodingProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAudioEncodingProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAudioEncodingProperties{}
      impl IAudioEncodingProperties {
        pub fn set_bitrate(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_channel_count(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn channel_count(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_sample_rate(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn sample_rate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_bits_per_sample(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn bits_per_sample(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn properties(&self) ->  ::winrt::Result<MediaPropertySet>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <MediaPropertySet as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaPropertySet>(result__)
          }
        }pub fn r#type(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_subtype< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn subtype(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAudioEncodingProperties {
        type Vtable = IAudioEncodingProperties_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1656519190,92,19259,[138,11,10,9,14,150,135,243],);
        
      }#[repr(C)]pub struct IAudioEncodingProperties_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAudioEncodingProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{62bc7a16-005c-4b3b-8a0b-0a090e9687f3}")
        };
        
      }impl::std::convert::From<IAudioEncodingProperties>for::winrt::Object {
        fn from(value:IAudioEncodingProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAudioEncodingProperties>for::winrt::Object {
        fn from(value: &IAudioEncodingProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAudioEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAudioEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IAudioEncodingProperties>for IMediaEncodingProperties {
        fn from(value:IAudioEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IAudioEncodingProperties>for IMediaEncodingProperties {
        fn from(value: &IAudioEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for IAudioEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for& 'a IAudioEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAudioEncodingProperties2(::winrt::Object);
      impl::std::clone::Clone for IAudioEncodingProperties2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAudioEncodingProperties2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAudioEncodingProperties2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAudioEncodingProperties2{}
      impl IAudioEncodingProperties2 {
        pub fn is_spatial(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAudioEncodingProperties2 {
        type Vtable = IAudioEncodingProperties2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3294450906,32957,19491,[128,213,114,212,161,129,232,148],);
        
      }#[repr(C)]pub struct IAudioEncodingProperties2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAudioEncodingProperties2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c45d54da-80bd-4c23-80d5-72d4a181e894}")
        };
        
      }impl::std::convert::From<IAudioEncodingProperties2>for::winrt::Object {
        fn from(value:IAudioEncodingProperties2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAudioEncodingProperties2>for::winrt::Object {
        fn from(value: &IAudioEncodingProperties2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAudioEncodingProperties2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAudioEncodingProperties2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAudioEncodingProperties3(::winrt::Object);
      impl::std::clone::Clone for IAudioEncodingProperties3 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAudioEncodingProperties3 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAudioEncodingProperties3 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAudioEncodingProperties3{}
      impl IAudioEncodingProperties3 {
        pub fn copy(&self) ->  ::winrt::Result<AudioEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AudioEncodingProperties>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAudioEncodingProperties3 {
        type Vtable = IAudioEncodingProperties3_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2271216449,29836,20365,[176,253,16,202,240,143,240,135],);
        
      }#[repr(C)]pub struct IAudioEncodingProperties3_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAudioEncodingProperties3 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{87600341-748c-4f8d-b0fd-10caf08ff087}")
        };
        
      }impl::std::convert::From<IAudioEncodingProperties3>for::winrt::Object {
        fn from(value:IAudioEncodingProperties3) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAudioEncodingProperties3>for::winrt::Object {
        fn from(value: &IAudioEncodingProperties3) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAudioEncodingProperties3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAudioEncodingProperties3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAudioEncodingPropertiesStatics(::winrt::Object);
      impl::std::clone::Clone for IAudioEncodingPropertiesStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAudioEncodingPropertiesStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAudioEncodingPropertiesStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAudioEncodingPropertiesStatics{}
      impl IAudioEncodingPropertiesStatics {
        pub fn create_aac(&self,sample_rate:u32,channel_count:u32,bitrate:u32,) ->  ::winrt::Result<AudioEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),sample_rate,channel_count,bitrate, &mut result__,).from_abi::<AudioEncodingProperties>(result__)
          }
        }pub fn create_aac_adts(&self,sample_rate:u32,channel_count:u32,bitrate:u32,) ->  ::winrt::Result<AudioEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),sample_rate,channel_count,bitrate, &mut result__,).from_abi::<AudioEncodingProperties>(result__)
          }
        }pub fn create_mp3(&self,sample_rate:u32,channel_count:u32,bitrate:u32,) ->  ::winrt::Result<AudioEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),sample_rate,channel_count,bitrate, &mut result__,).from_abi::<AudioEncodingProperties>(result__)
          }
        }pub fn create_pcm(&self,sample_rate:u32,channel_count:u32,bits_per_sample:u32,) ->  ::winrt::Result<AudioEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),sample_rate,channel_count,bits_per_sample, &mut result__,).from_abi::<AudioEncodingProperties>(result__)
          }
        }pub fn create_wma(&self,sample_rate:u32,channel_count:u32,bitrate:u32,) ->  ::winrt::Result<AudioEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),sample_rate,channel_count,bitrate, &mut result__,).from_abi::<AudioEncodingProperties>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAudioEncodingPropertiesStatics {
        type Vtable = IAudioEncodingPropertiesStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(212677420,60393,17703,[179,109,228,42,19,207,56,219],);
        
      }#[repr(C)]pub struct IAudioEncodingPropertiesStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,sample_rate:u32,channel_count:u32,bitrate:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,sample_rate:u32,channel_count:u32,bitrate:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,sample_rate:u32,channel_count:u32,bitrate:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,sample_rate:u32,channel_count:u32,bits_per_sample:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,sample_rate:u32,channel_count:u32,bitrate:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAudioEncodingPropertiesStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{0cad332c-ebe9-4527-b36d-e42a13cf38db}")
        };
        
      }impl::std::convert::From<IAudioEncodingPropertiesStatics>for::winrt::Object {
        fn from(value:IAudioEncodingPropertiesStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAudioEncodingPropertiesStatics>for::winrt::Object {
        fn from(value: &IAudioEncodingPropertiesStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAudioEncodingPropertiesStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAudioEncodingPropertiesStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAudioEncodingPropertiesStatics2(::winrt::Object);
      impl::std::clone::Clone for IAudioEncodingPropertiesStatics2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAudioEncodingPropertiesStatics2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAudioEncodingPropertiesStatics2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAudioEncodingPropertiesStatics2{}
      impl IAudioEncodingPropertiesStatics2 {
        pub fn create_alac(&self,sample_rate:u32,channel_count:u32,bits_per_sample:u32,) ->  ::winrt::Result<AudioEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),sample_rate,channel_count,bits_per_sample, &mut result__,).from_abi::<AudioEncodingProperties>(result__)
          }
        }pub fn create_flac(&self,sample_rate:u32,channel_count:u32,bits_per_sample:u32,) ->  ::winrt::Result<AudioEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),sample_rate,channel_count,bits_per_sample, &mut result__,).from_abi::<AudioEncodingProperties>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IAudioEncodingPropertiesStatics2 {
        type Vtable = IAudioEncodingPropertiesStatics2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1955148143,30624,17213,[142,213,64,64,40,14,134,101],);
        
      }#[repr(C)]pub struct IAudioEncodingPropertiesStatics2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,sample_rate:u32,channel_count:u32,bits_per_sample:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,sample_rate:u32,channel_count:u32,bits_per_sample:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAudioEncodingPropertiesStatics2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{7489316f-77a0-433d-8ed5-4040280e8665}")
        };
        
      }impl::std::convert::From<IAudioEncodingPropertiesStatics2>for::winrt::Object {
        fn from(value:IAudioEncodingPropertiesStatics2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAudioEncodingPropertiesStatics2>for::winrt::Object {
        fn from(value: &IAudioEncodingPropertiesStatics2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAudioEncodingPropertiesStatics2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAudioEncodingPropertiesStatics2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IAudioEncodingPropertiesWithFormatUserData(::winrt::Object);
      impl::std::clone::Clone for IAudioEncodingPropertiesWithFormatUserData {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IAudioEncodingPropertiesWithFormatUserData {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IAudioEncodingPropertiesWithFormatUserData {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IAudioEncodingPropertiesWithFormatUserData{}
      impl IAudioEncodingPropertiesWithFormatUserData {
        pub fn set_format_user_data(&self,value: &[<u8 as::winrt::RuntimeType>::DefaultType],) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.len()as u32, ::std::mem::transmute(value.as_ptr()),).ok()
          }
        }pub fn get_format_user_data(&self,value: &mut::winrt::Array<u8>,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.set_abi_len(),value.set_abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IAudioEncodingPropertiesWithFormatUserData {
        type Vtable = IAudioEncodingPropertiesWithFormatUserData_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2565934457,5098,18943,[190,112,38,115,219,105,112,44],);
        
      }#[repr(C)]pub struct IAudioEncodingPropertiesWithFormatUserData_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_value:u32,value: *const u8,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_value: *mut u32,value: *mut*mut u8,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IAudioEncodingPropertiesWithFormatUserData {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{98f10d79-13ea-49ff-be70-2673db69702c}")
        };
        
      }impl::std::convert::From<IAudioEncodingPropertiesWithFormatUserData>for::winrt::Object {
        fn from(value:IAudioEncodingPropertiesWithFormatUserData) -> Self {
          value.0
        }
      }impl::std::convert::From<&IAudioEncodingPropertiesWithFormatUserData>for::winrt::Object {
        fn from(value: &IAudioEncodingPropertiesWithFormatUserData) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IAudioEncodingPropertiesWithFormatUserData {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IAudioEncodingPropertiesWithFormatUserData {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct AudioEncodingProperties(::winrt::Object);
      impl AudioEncodingProperties {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn set_bitrate(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_channel_count(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn channel_count(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_sample_rate(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn sample_rate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_bits_per_sample(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn bits_per_sample(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn is_spatial(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IAudioEncodingProperties2>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn copy(&self) ->  ::winrt::Result<AudioEncodingProperties>{
          let this =  &::winrt::Interface::cast::<IAudioEncodingProperties3>(self).unwrap();
          unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<AudioEncodingProperties>(result__)
          }
        }pub fn create_aac(sample_rate:u32,channel_count:u32,bitrate:u32,) ->  ::winrt::Result<AudioEncodingProperties>{
          Self::IAudioEncodingPropertiesStatics(|this|unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),sample_rate,channel_count,bitrate, &mut result__,).from_abi::<AudioEncodingProperties>(result__)
          })
        }pub fn create_aac_adts(sample_rate:u32,channel_count:u32,bitrate:u32,) ->  ::winrt::Result<AudioEncodingProperties>{
          Self::IAudioEncodingPropertiesStatics(|this|unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),sample_rate,channel_count,bitrate, &mut result__,).from_abi::<AudioEncodingProperties>(result__)
          })
        }pub fn create_mp3(sample_rate:u32,channel_count:u32,bitrate:u32,) ->  ::winrt::Result<AudioEncodingProperties>{
          Self::IAudioEncodingPropertiesStatics(|this|unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),sample_rate,channel_count,bitrate, &mut result__,).from_abi::<AudioEncodingProperties>(result__)
          })
        }pub fn create_pcm(sample_rate:u32,channel_count:u32,bits_per_sample:u32,) ->  ::winrt::Result<AudioEncodingProperties>{
          Self::IAudioEncodingPropertiesStatics(|this|unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),sample_rate,channel_count,bits_per_sample, &mut result__,).from_abi::<AudioEncodingProperties>(result__)
          })
        }pub fn create_wma(sample_rate:u32,channel_count:u32,bitrate:u32,) ->  ::winrt::Result<AudioEncodingProperties>{
          Self::IAudioEncodingPropertiesStatics(|this|unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),sample_rate,channel_count,bitrate, &mut result__,).from_abi::<AudioEncodingProperties>(result__)
          })
        }pub fn create_alac(sample_rate:u32,channel_count:u32,bits_per_sample:u32,) ->  ::winrt::Result<AudioEncodingProperties>{
          Self::IAudioEncodingPropertiesStatics2(|this|unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),sample_rate,channel_count,bits_per_sample, &mut result__,).from_abi::<AudioEncodingProperties>(result__)
          })
        }pub fn create_flac(sample_rate:u32,channel_count:u32,bits_per_sample:u32,) ->  ::winrt::Result<AudioEncodingProperties>{
          Self::IAudioEncodingPropertiesStatics2(|this|unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),sample_rate,channel_count,bits_per_sample, &mut result__,).from_abi::<AudioEncodingProperties>(result__)
          })
        }pub fn set_format_user_data(&self,value: &[<u8 as::winrt::RuntimeType>::DefaultType],) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAudioEncodingPropertiesWithFormatUserData, >(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.len()as u32, ::std::mem::transmute(value.as_ptr()),).ok()
          }
        }pub fn get_format_user_data(&self,value: &mut::winrt::Array<u8>,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IAudioEncodingPropertiesWithFormatUserData, >(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.set_abi_len(),value.set_abi(),).ok()
          }
        }pub fn properties(&self) ->  ::winrt::Result<MediaPropertySet>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <MediaPropertySet as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaPropertySet>(result__)
          }
        }pub fn r#type(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_subtype< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn subtype(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<AudioEncodingProperties, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn IAudioEncodingPropertiesStatics<R,F:FnOnce(&IAudioEncodingPropertiesStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<AudioEncodingProperties,IAudioEncodingPropertiesStatics, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn IAudioEncodingPropertiesStatics2<R,F:FnOnce(&IAudioEncodingPropertiesStatics2) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<AudioEncodingProperties,IAudioEncodingPropertiesStatics2, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for AudioEncodingProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for AudioEncodingProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AudioEncodingProperties{}
      impl::std::fmt::Debug for AudioEncodingProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for AudioEncodingProperties {
        const NAME: & 'static str = "Windows.Media.MediaProperties.AudioEncodingProperties";
        
      }unsafe impl::winrt::Interface for AudioEncodingProperties {
        type Vtable = IAudioEncodingProperties_abi;
        const IID: ::winrt::Guid =  <IAudioEncodingProperties as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for AudioEncodingProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.MediaProperties.AudioEncodingProperties;{62bc7a16-005c-4b3b-8a0b-0a090e9687f3})");
        
      }impl::std::convert::From<AudioEncodingProperties>for::winrt::Object {
        fn from(value:AudioEncodingProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&AudioEncodingProperties>for::winrt::Object {
        fn from(value: &AudioEncodingProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for AudioEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a AudioEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AudioEncodingProperties>for IAudioEncodingProperties {
        fn from(value:AudioEncodingProperties) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&AudioEncodingProperties>for IAudioEncodingProperties {
        fn from(value: &AudioEncodingProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioEncodingProperties>>for AudioEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IAudioEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IAudioEncodingProperties>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioEncodingProperties>>for& 'a AudioEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IAudioEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IAudioEncodingProperties>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AudioEncodingProperties>for IAudioEncodingProperties2 {
        fn from(value:AudioEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AudioEncodingProperties>for IAudioEncodingProperties2 {
        fn from(value: &AudioEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioEncodingProperties2>>for AudioEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IAudioEncodingProperties2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAudioEncodingProperties2>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioEncodingProperties2>>for& 'a AudioEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IAudioEncodingProperties2>{
          ::winrt::Param::Owned(::std::convert::Into::<IAudioEncodingProperties2>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AudioEncodingProperties>for IAudioEncodingProperties3 {
        fn from(value:AudioEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AudioEncodingProperties>for IAudioEncodingProperties3 {
        fn from(value: &AudioEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioEncodingProperties3>>for AudioEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IAudioEncodingProperties3>{
          ::winrt::Param::Owned(::std::convert::Into::<IAudioEncodingProperties3>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioEncodingProperties3>>for& 'a AudioEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IAudioEncodingProperties3>{
          ::winrt::Param::Owned(::std::convert::Into::<IAudioEncodingProperties3>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<AudioEncodingProperties>for IAudioEncodingPropertiesWithFormatUserData {
        fn from(value:AudioEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AudioEncodingProperties>for IAudioEncodingPropertiesWithFormatUserData {
        fn from(value: &AudioEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioEncodingPropertiesWithFormatUserData>>for AudioEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IAudioEncodingPropertiesWithFormatUserData>{
          ::winrt::Param::Owned(::std::convert::Into::<IAudioEncodingPropertiesWithFormatUserData, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IAudioEncodingPropertiesWithFormatUserData>>for& 'a AudioEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IAudioEncodingPropertiesWithFormatUserData>{
          ::winrt::Param::Owned(::std::convert::Into::<IAudioEncodingPropertiesWithFormatUserData, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<AudioEncodingProperties>for IMediaEncodingProperties {
        fn from(value:AudioEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&AudioEncodingProperties>for IMediaEncodingProperties {
        fn from(value: &AudioEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for AudioEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for& 'a AudioEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for AudioEncodingProperties{}
      unsafe impl::std::marker::Sync for AudioEncodingProperties{}
      #[repr(transparent)]pub struct IVideoEncodingProperties(::winrt::Object);
      impl::std::clone::Clone for IVideoEncodingProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IVideoEncodingProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IVideoEncodingProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IVideoEncodingProperties{}
      impl IVideoEncodingProperties {
        pub fn properties(&self) ->  ::winrt::Result<MediaPropertySet>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <MediaPropertySet as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaPropertySet>(result__)
          }
        }pub fn r#type(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_subtype< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn subtype(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_bitrate(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_width(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_height(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn frame_rate(&self) ->  ::winrt::Result<MediaRatio>{
          let this = self;
          unsafe {
            let mut result__: <MediaRatio as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaRatio>(result__)
          }
        }pub fn pixel_aspect_ratio(&self) ->  ::winrt::Result<MediaRatio>{
          let this = self;
          unsafe {
            let mut result__: <MediaRatio as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaRatio>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IVideoEncodingProperties {
        type Vtable = IVideoEncodingProperties_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1995336858,14274,20266,[136,10,18,130,187,180,55,61],);
        
      }#[repr(C)]pub struct IVideoEncodingProperties_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IVideoEncodingProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{76ee6c9a-37c2-4f2a-880a-1282bbb4373d}")
        };
        
      }impl::std::convert::From<IVideoEncodingProperties>for::winrt::Object {
        fn from(value:IVideoEncodingProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&IVideoEncodingProperties>for::winrt::Object {
        fn from(value: &IVideoEncodingProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IVideoEncodingProperties>for IMediaEncodingProperties {
        fn from(value:IVideoEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IVideoEncodingProperties>for IMediaEncodingProperties {
        fn from(value: &IVideoEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for IVideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for& 'a IVideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IVideoEncodingProperties2(::winrt::Object);
      impl::std::clone::Clone for IVideoEncodingProperties2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IVideoEncodingProperties2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IVideoEncodingProperties2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IVideoEncodingProperties2{}
      impl IVideoEncodingProperties2 {
        pub fn set_format_user_data(&self,value: &[<u8 as::winrt::RuntimeType>::DefaultType],) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.len()as u32, ::std::mem::transmute(value.as_ptr()),).ok()
          }
        }pub fn get_format_user_data(&self,value: &mut::winrt::Array<u8>,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.set_abi_len(),value.set_abi(),).ok()
          }
        }pub fn set_profile_id(&self,value:i32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn profile_id(&self) ->  ::winrt::Result<i32>{
          let this = self;
          unsafe {
            let mut result__: <i32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<i32>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IVideoEncodingProperties2 {
        type Vtable = IVideoEncodingProperties2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4148404719,54373,17040,[169,75,239,15,21,40,248,227],);
        
      }#[repr(C)]pub struct IVideoEncodingProperties2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_value:u32,value: *const u8,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_value: *mut u32,value: *mut*mut u8,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut i32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IVideoEncodingProperties2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{f743a1ef-d465-4290-a94b-ef0f1528f8e3}")
        };
        
      }impl::std::convert::From<IVideoEncodingProperties2>for::winrt::Object {
        fn from(value:IVideoEncodingProperties2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IVideoEncodingProperties2>for::winrt::Object {
        fn from(value: &IVideoEncodingProperties2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoEncodingProperties2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoEncodingProperties2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct StereoscopicVideoPackingMode(i32);
      impl::std::convert::From<i32>for StereoscopicVideoPackingMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for StereoscopicVideoPackingMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for StereoscopicVideoPackingMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for StereoscopicVideoPackingMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for StereoscopicVideoPackingMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for StereoscopicVideoPackingMode{}
      impl::std::marker::Copy for StereoscopicVideoPackingMode{}
      impl StereoscopicVideoPackingMode {
        #![allow(non_upper_case_globals)]pub const None:Self = Self(0i32);
        pub const SideBySide:Self = Self(1i32);
        pub const TopBottom:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for StereoscopicVideoPackingMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for StereoscopicVideoPackingMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.MediaProperties.StereoscopicVideoPackingMode;i4)",);
        
      }#[repr(transparent)]pub struct IVideoEncodingProperties3(::winrt::Object);
      impl::std::clone::Clone for IVideoEncodingProperties3 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IVideoEncodingProperties3 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IVideoEncodingProperties3 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IVideoEncodingProperties3{}
      impl IVideoEncodingProperties3 {
        pub fn stereoscopic_video_packing_mode(&self,) ->  ::winrt::Result<StereoscopicVideoPackingMode>{
          let this = self;
          unsafe {
            let mut result__: <StereoscopicVideoPackingMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<StereoscopicVideoPackingMode>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IVideoEncodingProperties3 {
        type Vtable = IVideoEncodingProperties3_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(946589124,34618,18335,[179,235,86,193,252,190,198,215],);
        
      }#[repr(C)]pub struct IVideoEncodingProperties3_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut StereoscopicVideoPackingMode,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IVideoEncodingProperties3 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{386bcdc4-873a-479f-b3eb-56c1fcbec6d7}")
        };
        
      }impl::std::convert::From<IVideoEncodingProperties3>for::winrt::Object {
        fn from(value:IVideoEncodingProperties3) -> Self {
          value.0
        }
      }impl::std::convert::From<&IVideoEncodingProperties3>for::winrt::Object {
        fn from(value: &IVideoEncodingProperties3) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoEncodingProperties3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoEncodingProperties3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct SphericalVideoFrameFormat(i32);
      impl::std::convert::From<i32>for SphericalVideoFrameFormat {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for SphericalVideoFrameFormat {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for SphericalVideoFrameFormat {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for SphericalVideoFrameFormat {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for SphericalVideoFrameFormat {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for SphericalVideoFrameFormat{}
      impl::std::marker::Copy for SphericalVideoFrameFormat{}
      impl SphericalVideoFrameFormat {
        #![allow(non_upper_case_globals)]pub const None:Self = Self(0i32);
        pub const Unsupported:Self = Self(1i32);
        pub const Equirectangular:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for SphericalVideoFrameFormat {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for SphericalVideoFrameFormat {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.MediaProperties.SphericalVideoFrameFormat;i4)",);
        
      }#[repr(transparent)]pub struct IVideoEncodingProperties4(::winrt::Object);
      impl::std::clone::Clone for IVideoEncodingProperties4 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IVideoEncodingProperties4 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IVideoEncodingProperties4 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IVideoEncodingProperties4{}
      impl IVideoEncodingProperties4 {
        pub fn spherical_video_frame_format(&self,) ->  ::winrt::Result<SphericalVideoFrameFormat>{
          let this = self;
          unsafe {
            let mut result__: <SphericalVideoFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<SphericalVideoFrameFormat>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IVideoEncodingProperties4 {
        type Vtable = IVideoEncodingProperties4_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1917775892,49420,16626,[157,114,62,225,59,69,250,142],);
        
      }#[repr(C)]pub struct IVideoEncodingProperties4_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut SphericalVideoFrameFormat,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IVideoEncodingProperties4 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{724ef014-c10c-40f2-9d72-3ee13b45fa8e}")
        };
        
      }impl::std::convert::From<IVideoEncodingProperties4>for::winrt::Object {
        fn from(value:IVideoEncodingProperties4) -> Self {
          value.0
        }
      }impl::std::convert::From<&IVideoEncodingProperties4>for::winrt::Object {
        fn from(value: &IVideoEncodingProperties4) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoEncodingProperties4 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoEncodingProperties4 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IVideoEncodingProperties5(::winrt::Object);
      impl::std::clone::Clone for IVideoEncodingProperties5 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IVideoEncodingProperties5 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IVideoEncodingProperties5 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IVideoEncodingProperties5{}
      impl IVideoEncodingProperties5 {
        pub fn copy(&self) ->  ::winrt::Result<VideoEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <VideoEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoEncodingProperties>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IVideoEncodingProperties5 {
        type Vtable = IVideoEncodingProperties5_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1230571535,10031,20174,[164,223,192,204,219,51,216,64],);
        
      }#[repr(C)]pub struct IVideoEncodingProperties5_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IVideoEncodingProperties5 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{4959080f-272f-4ece-a4df-c0ccdb33d840}")
        };
        
      }impl::std::convert::From<IVideoEncodingProperties5>for::winrt::Object {
        fn from(value:IVideoEncodingProperties5) -> Self {
          value.0
        }
      }impl::std::convert::From<&IVideoEncodingProperties5>for::winrt::Object {
        fn from(value: &IVideoEncodingProperties5) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoEncodingProperties5 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoEncodingProperties5 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IVideoEncodingPropertiesStatics(::winrt::Object);
      impl::std::clone::Clone for IVideoEncodingPropertiesStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IVideoEncodingPropertiesStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IVideoEncodingPropertiesStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IVideoEncodingPropertiesStatics{}
      impl IVideoEncodingPropertiesStatics {
        pub fn create_h264(&self) ->  ::winrt::Result<VideoEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <VideoEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoEncodingProperties>(result__)
          }
        }pub fn create_mpeg2(&self) ->  ::winrt::Result<VideoEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <VideoEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoEncodingProperties>(result__)
          }
        }pub fn create_uncompressed< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,subtype:T0__,width:u32,height:u32,) ->  ::winrt::Result<VideoEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <VideoEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),subtype.into().abi(),width,height, &mut result__,).from_abi::<VideoEncodingProperties>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IVideoEncodingPropertiesStatics {
        type Vtable = IVideoEncodingPropertiesStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1021398340,7621,17371,[159,56,235,235,249,1,82,203],);
        
      }#[repr(C)]pub struct IVideoEncodingPropertiesStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,subtype: ::winrt::RawPtr,width:u32,height:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IVideoEncodingPropertiesStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{3ce14d44-1dc5-43db-9f38-ebebf90152cb}")
        };
        
      }impl::std::convert::From<IVideoEncodingPropertiesStatics>for::winrt::Object {
        fn from(value:IVideoEncodingPropertiesStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&IVideoEncodingPropertiesStatics>for::winrt::Object {
        fn from(value: &IVideoEncodingPropertiesStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoEncodingPropertiesStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoEncodingPropertiesStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IVideoEncodingPropertiesStatics2(::winrt::Object);
      impl::std::clone::Clone for IVideoEncodingPropertiesStatics2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IVideoEncodingPropertiesStatics2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IVideoEncodingPropertiesStatics2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IVideoEncodingPropertiesStatics2{}
      impl IVideoEncodingPropertiesStatics2 {
        pub fn create_hevc(&self) ->  ::winrt::Result<VideoEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <VideoEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoEncodingProperties>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IVideoEncodingPropertiesStatics2 {
        type Vtable = IVideoEncodingPropertiesStatics2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3474898269,18942,19712,[181,154,207,164,223,197,25,68],);
        
      }#[repr(C)]pub struct IVideoEncodingPropertiesStatics2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IVideoEncodingPropertiesStatics2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{cf1ebd5d-49fe-4d00-b59a-cfa4dfc51944}")
        };
        
      }impl::std::convert::From<IVideoEncodingPropertiesStatics2>for::winrt::Object {
        fn from(value:IVideoEncodingPropertiesStatics2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IVideoEncodingPropertiesStatics2>for::winrt::Object {
        fn from(value: &IVideoEncodingPropertiesStatics2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoEncodingPropertiesStatics2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoEncodingPropertiesStatics2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct VideoEncodingProperties(::winrt::Object);
      impl VideoEncodingProperties {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn properties(&self) ->  ::winrt::Result<MediaPropertySet>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <MediaPropertySet as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaPropertySet>(result__)
          }
        }pub fn r#type(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_subtype< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn subtype(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_bitrate(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_width(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_height(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn frame_rate(&self) ->  ::winrt::Result<MediaRatio>{
          let this = self;
          unsafe {
            let mut result__: <MediaRatio as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaRatio>(result__)
          }
        }pub fn pixel_aspect_ratio(&self) ->  ::winrt::Result<MediaRatio>{
          let this = self;
          unsafe {
            let mut result__: <MediaRatio as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<MediaRatio>(result__)
          }
        }pub fn set_format_user_data(&self,value: &[<u8 as::winrt::RuntimeType>::DefaultType],) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IVideoEncodingProperties2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.len()as u32, ::std::mem::transmute(value.as_ptr()),).ok()
          }
        }pub fn get_format_user_data(&self,value: &mut::winrt::Array<u8>,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IVideoEncodingProperties2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.set_abi_len(),value.set_abi(),).ok()
          }
        }pub fn set_profile_id(&self,value:i32) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IVideoEncodingProperties2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn profile_id(&self) ->  ::winrt::Result<i32>{
          let this =  &::winrt::Interface::cast::<IVideoEncodingProperties2>(self).unwrap();
          unsafe {
            let mut result__: <i32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<i32>(result__)
          }
        }pub fn stereoscopic_video_packing_mode(&self,) ->  ::winrt::Result<StereoscopicVideoPackingMode>{
          let this =  &::winrt::Interface::cast::<IVideoEncodingProperties3>(self).unwrap();
          unsafe {
            let mut result__: <StereoscopicVideoPackingMode as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<StereoscopicVideoPackingMode>(result__)
          }
        }pub fn spherical_video_frame_format(&self,) ->  ::winrt::Result<SphericalVideoFrameFormat>{
          let this =  &::winrt::Interface::cast::<IVideoEncodingProperties4>(self).unwrap();
          unsafe {
            let mut result__: <SphericalVideoFrameFormat as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<SphericalVideoFrameFormat>(result__)
          }
        }pub fn copy(&self) ->  ::winrt::Result<VideoEncodingProperties>{
          let this =  &::winrt::Interface::cast::<IVideoEncodingProperties5>(self).unwrap();
          unsafe {
            let mut result__: <VideoEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoEncodingProperties>(result__)
          }
        }pub fn create_h264() ->  ::winrt::Result<VideoEncodingProperties>{
          Self::IVideoEncodingPropertiesStatics(|this|unsafe {
            let mut result__: <VideoEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoEncodingProperties>(result__)
          })
        }pub fn create_mpeg2() ->  ::winrt::Result<VideoEncodingProperties>{
          Self::IVideoEncodingPropertiesStatics(|this|unsafe {
            let mut result__: <VideoEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoEncodingProperties>(result__)
          })
        }pub fn create_uncompressed< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(subtype:T0__,width:u32,height:u32,) ->  ::winrt::Result<VideoEncodingProperties>{
          Self::IVideoEncodingPropertiesStatics(|this|unsafe {
            let mut result__: <VideoEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),subtype.into().abi(),width,height, &mut result__,).from_abi::<VideoEncodingProperties>(result__)
          })
        }pub fn create_hevc() ->  ::winrt::Result<VideoEncodingProperties>{
          Self::IVideoEncodingPropertiesStatics2(|this|unsafe {
            let mut result__: <VideoEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoEncodingProperties>(result__)
          })
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<VideoEncodingProperties, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn IVideoEncodingPropertiesStatics<R,F:FnOnce(&IVideoEncodingPropertiesStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<VideoEncodingProperties,IVideoEncodingPropertiesStatics, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn IVideoEncodingPropertiesStatics2<R,F:FnOnce(&IVideoEncodingPropertiesStatics2) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<VideoEncodingProperties,IVideoEncodingPropertiesStatics2, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for VideoEncodingProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for VideoEncodingProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for VideoEncodingProperties{}
      impl::std::fmt::Debug for VideoEncodingProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for VideoEncodingProperties {
        const NAME: & 'static str = "Windows.Media.MediaProperties.VideoEncodingProperties";
        
      }unsafe impl::winrt::Interface for VideoEncodingProperties {
        type Vtable = IVideoEncodingProperties_abi;
        const IID: ::winrt::Guid =  <IVideoEncodingProperties as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for VideoEncodingProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.MediaProperties.VideoEncodingProperties;{76ee6c9a-37c2-4f2a-880a-1282bbb4373d})");
        
      }impl::std::convert::From<VideoEncodingProperties>for::winrt::Object {
        fn from(value:VideoEncodingProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&VideoEncodingProperties>for::winrt::Object {
        fn from(value: &VideoEncodingProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for VideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a VideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<VideoEncodingProperties>for IMediaEncodingProperties {
        fn from(value:VideoEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoEncodingProperties>for IMediaEncodingProperties {
        fn from(value: &VideoEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for VideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for& 'a VideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<VideoEncodingProperties>for IVideoEncodingProperties {
        fn from(value:VideoEncodingProperties) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&VideoEncodingProperties>for IVideoEncodingProperties {
        fn from(value: &VideoEncodingProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoEncodingProperties>>for VideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoEncodingProperties>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoEncodingProperties>>for& 'a VideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoEncodingProperties>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<VideoEncodingProperties>for IVideoEncodingProperties2 {
        fn from(value:VideoEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoEncodingProperties>for IVideoEncodingProperties2 {
        fn from(value: &VideoEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoEncodingProperties2>>for VideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoEncodingProperties2>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoEncodingProperties2>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoEncodingProperties2>>for& 'a VideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoEncodingProperties2>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoEncodingProperties2>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<VideoEncodingProperties>for IVideoEncodingProperties3 {
        fn from(value:VideoEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoEncodingProperties>for IVideoEncodingProperties3 {
        fn from(value: &VideoEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoEncodingProperties3>>for VideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoEncodingProperties3>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoEncodingProperties3>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoEncodingProperties3>>for& 'a VideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoEncodingProperties3>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoEncodingProperties3>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<VideoEncodingProperties>for IVideoEncodingProperties4 {
        fn from(value:VideoEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoEncodingProperties>for IVideoEncodingProperties4 {
        fn from(value: &VideoEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoEncodingProperties4>>for VideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoEncodingProperties4>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoEncodingProperties4>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoEncodingProperties4>>for& 'a VideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoEncodingProperties4>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoEncodingProperties4>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<VideoEncodingProperties>for IVideoEncodingProperties5 {
        fn from(value:VideoEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoEncodingProperties>for IVideoEncodingProperties5 {
        fn from(value: &VideoEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoEncodingProperties5>>for VideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoEncodingProperties5>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoEncodingProperties5>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoEncodingProperties5>>for& 'a VideoEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoEncodingProperties5>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoEncodingProperties5>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for VideoEncodingProperties{}
      unsafe impl::std::marker::Sync for VideoEncodingProperties{}
      #[repr(transparent)]pub struct IContainerEncodingProperties(::winrt::Object);
      impl::std::clone::Clone for IContainerEncodingProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IContainerEncodingProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IContainerEncodingProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IContainerEncodingProperties{}
      impl IContainerEncodingProperties {
        pub fn properties(&self) ->  ::winrt::Result<MediaPropertySet>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <MediaPropertySet as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaPropertySet>(result__)
          }
        }pub fn r#type(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_subtype< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn subtype(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IContainerEncodingProperties {
        type Vtable = IContainerEncodingProperties_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1504455255,45866,18334,[138,97,75,127,46,158,126,160],);
        
      }#[repr(C)]pub struct IContainerEncodingProperties_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IContainerEncodingProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{59ac2a57-b32a-479e-8a61-4b7f2e9e7ea0}")
        };
        
      }impl::std::convert::From<IContainerEncodingProperties>for::winrt::Object {
        fn from(value:IContainerEncodingProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&IContainerEncodingProperties>for::winrt::Object {
        fn from(value: &IContainerEncodingProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IContainerEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IContainerEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IContainerEncodingProperties>for IMediaEncodingProperties {
        fn from(value:IContainerEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IContainerEncodingProperties>for IMediaEncodingProperties {
        fn from(value: &IContainerEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for IContainerEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for& 'a IContainerEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IContainerEncodingProperties2(::winrt::Object);
      impl::std::clone::Clone for IContainerEncodingProperties2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IContainerEncodingProperties2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IContainerEncodingProperties2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IContainerEncodingProperties2{}
      impl IContainerEncodingProperties2 {
        pub fn copy(&self) ->  ::winrt::Result<ContainerEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <ContainerEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<ContainerEncodingProperties>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IContainerEncodingProperties2 {
        type Vtable = IContainerEncodingProperties2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2993864745,44582,18457,[186,173,173,122,73,176,168,118],);
        
      }#[repr(C)]pub struct IContainerEncodingProperties2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IContainerEncodingProperties2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{b272c029-ae26-4819-baad-ad7a49b0a876}")
        };
        
      }impl::std::convert::From<IContainerEncodingProperties2>for::winrt::Object {
        fn from(value:IContainerEncodingProperties2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IContainerEncodingProperties2>for::winrt::Object {
        fn from(value: &IContainerEncodingProperties2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IContainerEncodingProperties2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IContainerEncodingProperties2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ContainerEncodingProperties(::winrt::Object);
      impl ContainerEncodingProperties {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn copy(&self) ->  ::winrt::Result<ContainerEncodingProperties>{
          let this =  &::winrt::Interface::cast::<IContainerEncodingProperties2>(self).unwrap();
          unsafe {
            let mut result__: <ContainerEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<ContainerEncodingProperties>(result__)
          }
        }pub fn properties(&self) ->  ::winrt::Result<MediaPropertySet>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <MediaPropertySet as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaPropertySet>(result__)
          }
        }pub fn r#type(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_subtype< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn subtype(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<ContainerEncodingProperties, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for ContainerEncodingProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for ContainerEncodingProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ContainerEncodingProperties{}
      impl::std::fmt::Debug for ContainerEncodingProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for ContainerEncodingProperties {
        const NAME: & 'static str = "Windows.Media.MediaProperties.ContainerEncodingProperties";
        
      }unsafe impl::winrt::Interface for ContainerEncodingProperties {
        type Vtable = IContainerEncodingProperties_abi;
        const IID: ::winrt::Guid =  <IContainerEncodingProperties as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for ContainerEncodingProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.MediaProperties.ContainerEncodingProperties;{59ac2a57-b32a-479e-8a61-4b7f2e9e7ea0})");
        
      }impl::std::convert::From<ContainerEncodingProperties>for::winrt::Object {
        fn from(value:ContainerEncodingProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&ContainerEncodingProperties>for::winrt::Object {
        fn from(value: &ContainerEncodingProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ContainerEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ContainerEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<ContainerEncodingProperties>for IContainerEncodingProperties {
        fn from(value:ContainerEncodingProperties) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&ContainerEncodingProperties>for IContainerEncodingProperties {
        fn from(value: &ContainerEncodingProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IContainerEncodingProperties>>for ContainerEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IContainerEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IContainerEncodingProperties>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IContainerEncodingProperties>>for& 'a ContainerEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IContainerEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IContainerEncodingProperties>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<ContainerEncodingProperties>for IContainerEncodingProperties2 {
        fn from(value:ContainerEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&ContainerEncodingProperties>for IContainerEncodingProperties2 {
        fn from(value: &ContainerEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IContainerEncodingProperties2>>for ContainerEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IContainerEncodingProperties2>{
          ::winrt::Param::Owned(::std::convert::Into::<IContainerEncodingProperties2>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IContainerEncodingProperties2>>for& 'a ContainerEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IContainerEncodingProperties2>{
          ::winrt::Param::Owned(::std::convert::Into::<IContainerEncodingProperties2>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<ContainerEncodingProperties>for IMediaEncodingProperties {
        fn from(value:ContainerEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&ContainerEncodingProperties>for IMediaEncodingProperties {
        fn from(value: &ContainerEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for ContainerEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for& 'a ContainerEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for ContainerEncodingProperties{}
      unsafe impl::std::marker::Sync for ContainerEncodingProperties{}
      #[repr(transparent)]pub struct IMediaEncodingProfile(::winrt::Object);
      impl::std::clone::Clone for IMediaEncodingProfile {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaEncodingProfile {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaEncodingProfile {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaEncodingProfile{}
      impl IMediaEncodingProfile {
        pub fn set_audio< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,AudioEncodingProperties>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn audio(&self) ->  ::winrt::Result<AudioEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<AudioEncodingProperties>(result__)
          }
        }pub fn set_video< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,VideoEncodingProperties>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn video(&self) ->  ::winrt::Result<VideoEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <VideoEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoEncodingProperties>(result__)
          }
        }pub fn set_container< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,ContainerEncodingProperties>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn container(&self) ->  ::winrt::Result<ContainerEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <ContainerEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<ContainerEncodingProperties>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaEncodingProfile {
        type Vtable = IMediaEncodingProfile_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3889952168,7609,18307,[135,107,61,254,18,172,253,179],);
        
      }#[repr(C)]pub struct IMediaEncodingProfile_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaEncodingProfile {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{e7dbf5a8-1db9-4783-876b-3dfe12acfdb3}")
        };
        
      }impl::std::convert::From<IMediaEncodingProfile>for::winrt::Object {
        fn from(value:IMediaEncodingProfile) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaEncodingProfile>for::winrt::Object {
        fn from(value: &IMediaEncodingProfile) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaEncodingProfile {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaEncodingProfile {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaEncodingProfile2(::winrt::Object);
      impl::std::clone::Clone for IMediaEncodingProfile2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaEncodingProfile2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaEncodingProfile2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaEncodingProfile2{}
      impl IMediaEncodingProfile2 {
        pub fn set_audio_tracks< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::core::AudioStreamDescriptor, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn get_audio_tracks(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<super::core::AudioStreamDescriptor, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector<super::core::AudioStreamDescriptor, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IVector<super::core::AudioStreamDescriptor, >>(result__)
          }
        }pub fn set_video_tracks< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::core::VideoStreamDescriptor, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn get_video_tracks(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<super::core::VideoStreamDescriptor, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector<super::core::VideoStreamDescriptor, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IVector<super::core::VideoStreamDescriptor, >>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaEncodingProfile2 {
        type Vtable = IMediaEncodingProfile2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(882589194,16437,18574,[152,119,133,99,40,101,237,16],);
        
      }#[repr(C)]pub struct IMediaEncodingProfile2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaEncodingProfile2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{349b3e0a-4035-488e-9877-85632865ed10}")
        };
        
      }impl::std::convert::From<IMediaEncodingProfile2>for::winrt::Object {
        fn from(value:IMediaEncodingProfile2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaEncodingProfile2>for::winrt::Object {
        fn from(value: &IMediaEncodingProfile2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaEncodingProfile2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaEncodingProfile2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ITimedMetadataEncodingProperties(::winrt::Object);
      impl::std::clone::Clone for ITimedMetadataEncodingProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ITimedMetadataEncodingProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ITimedMetadataEncodingProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ITimedMetadataEncodingProperties{}
      impl ITimedMetadataEncodingProperties {
        pub fn set_format_user_data(&self,value: &[<u8 as::winrt::RuntimeType>::DefaultType],) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.len()as u32, ::std::mem::transmute(value.as_ptr()),).ok()
          }
        }pub fn get_format_user_data(&self,value: &mut::winrt::Array<u8>,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.set_abi_len(),value.set_abi(),).ok()
          }
        }pub fn copy(&self) ->  ::winrt::Result<TimedMetadataEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <TimedMetadataEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<TimedMetadataEncodingProperties>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ITimedMetadataEncodingProperties {
        type Vtable = ITimedMetadataEncodingProperties_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1372401875,54928,19706,[151,244,74,57,142,157,180,32],);
        
      }#[repr(C)]pub struct ITimedMetadataEncodingProperties_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_value:u32,value: *const u8,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_value: *mut u32,value: *mut*mut u8,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ITimedMetadataEncodingProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{51cd30d3-d690-4cfa-97f4-4a398e9db420}")
        };
        
      }impl::std::convert::From<ITimedMetadataEncodingProperties>for::winrt::Object {
        fn from(value:ITimedMetadataEncodingProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&ITimedMetadataEncodingProperties>for::winrt::Object {
        fn from(value: &ITimedMetadataEncodingProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ITimedMetadataEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ITimedMetadataEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ITimedMetadataEncodingPropertiesStatics(::winrt::Object);
      impl::std::clone::Clone for ITimedMetadataEncodingPropertiesStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ITimedMetadataEncodingPropertiesStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ITimedMetadataEncodingPropertiesStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ITimedMetadataEncodingPropertiesStatics{}
      impl ITimedMetadataEncodingPropertiesStatics {
        pub fn create_pgs(&self) ->  ::winrt::Result<TimedMetadataEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <TimedMetadataEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<TimedMetadataEncodingProperties>(result__)
          }
        }pub fn create_srt(&self) ->  ::winrt::Result<TimedMetadataEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <TimedMetadataEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<TimedMetadataEncodingProperties>(result__)
          }
        }pub fn create_ssa(&self,format_user_data: &[<u8 as::winrt::RuntimeType>::DefaultType],) ->  ::winrt::Result<TimedMetadataEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <TimedMetadataEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),format_user_data.len()as u32, ::std::mem::transmute(format_user_data.as_ptr()), &mut result__,).from_abi::<TimedMetadataEncodingProperties>(result__)
          }
        }pub fn create_vob_sub(&self,format_user_data: &[<u8 as::winrt::RuntimeType>::DefaultType],) ->  ::winrt::Result<TimedMetadataEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <TimedMetadataEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),format_user_data.len()as u32, ::std::mem::transmute(format_user_data.as_ptr()), &mut result__,).from_abi::<TimedMetadataEncodingProperties>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ITimedMetadataEncodingPropertiesStatics {
        type Vtable = ITimedMetadataEncodingPropertiesStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1714010983,28245,22083,[137,160,122,126,141,133,181,44],);
        
      }#[repr(C)]pub struct ITimedMetadataEncodingPropertiesStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_format_user_data:u32,format_user_data: *const u8,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,array_size_format_user_data:u32,format_user_data: *const u8,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ITimedMetadataEncodingPropertiesStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{6629bb67-6e55-5643-89a0-7a7e8d85b52c}")
        };
        
      }impl::std::convert::From<ITimedMetadataEncodingPropertiesStatics>for::winrt::Object {
        fn from(value:ITimedMetadataEncodingPropertiesStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&ITimedMetadataEncodingPropertiesStatics>for::winrt::Object {
        fn from(value: &ITimedMetadataEncodingPropertiesStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ITimedMetadataEncodingPropertiesStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ITimedMetadataEncodingPropertiesStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct TimedMetadataEncodingProperties(::winrt::Object);
      impl TimedMetadataEncodingProperties {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn properties(&self) ->  ::winrt::Result<MediaPropertySet>{
          let this = self;
          unsafe {
            let mut result__: <MediaPropertySet as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaPropertySet>(result__)
          }
        }pub fn r#type(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_subtype< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn subtype(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_format_user_data(&self,value: &[<u8 as::winrt::RuntimeType>::DefaultType],) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<ITimedMetadataEncodingProperties>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.len()as u32, ::std::mem::transmute(value.as_ptr()),).ok()
          }
        }pub fn get_format_user_data(&self,value: &mut::winrt::Array<u8>,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<ITimedMetadataEncodingProperties>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.set_abi_len(),value.set_abi(),).ok()
          }
        }pub fn copy(&self) ->  ::winrt::Result<TimedMetadataEncodingProperties>{
          let this =  &::winrt::Interface::cast::<ITimedMetadataEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <TimedMetadataEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<TimedMetadataEncodingProperties>(result__)
          }
        }pub fn create_pgs() ->  ::winrt::Result<TimedMetadataEncodingProperties>{
          Self::ITimedMetadataEncodingPropertiesStatics(|this|unsafe {
            let mut result__: <TimedMetadataEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<TimedMetadataEncodingProperties>(result__)
          })
        }pub fn create_srt() ->  ::winrt::Result<TimedMetadataEncodingProperties>{
          Self::ITimedMetadataEncodingPropertiesStatics(|this|unsafe {
            let mut result__: <TimedMetadataEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<TimedMetadataEncodingProperties>(result__)
          })
        }pub fn create_ssa(format_user_data: &[<u8 as::winrt::RuntimeType>::DefaultType],) ->  ::winrt::Result<TimedMetadataEncodingProperties>{
          Self::ITimedMetadataEncodingPropertiesStatics(|this|unsafe {
            let mut result__: <TimedMetadataEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),format_user_data.len()as u32, ::std::mem::transmute(format_user_data.as_ptr()), &mut result__,).from_abi::<TimedMetadataEncodingProperties>(result__)
          })
        }pub fn create_vob_sub(format_user_data: &[<u8 as::winrt::RuntimeType>::DefaultType],) ->  ::winrt::Result<TimedMetadataEncodingProperties>{
          Self::ITimedMetadataEncodingPropertiesStatics(|this|unsafe {
            let mut result__: <TimedMetadataEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),format_user_data.len()as u32, ::std::mem::transmute(format_user_data.as_ptr()), &mut result__,).from_abi::<TimedMetadataEncodingProperties>(result__)
          })
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<TimedMetadataEncodingProperties, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn ITimedMetadataEncodingPropertiesStatics<R,F:FnOnce(&ITimedMetadataEncodingPropertiesStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<TimedMetadataEncodingProperties,ITimedMetadataEncodingPropertiesStatics, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for TimedMetadataEncodingProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for TimedMetadataEncodingProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for TimedMetadataEncodingProperties{}
      impl::std::fmt::Debug for TimedMetadataEncodingProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for TimedMetadataEncodingProperties {
        const NAME: & 'static str = "Windows.Media.MediaProperties.TimedMetadataEncodingProperties";
        
      }unsafe impl::winrt::Interface for TimedMetadataEncodingProperties {
        type Vtable = IMediaEncodingProperties_abi;
        const IID: ::winrt::Guid =  <IMediaEncodingProperties as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for TimedMetadataEncodingProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.MediaProperties.TimedMetadataEncodingProperties;{b4002af6-acd4-4e5a-a24b-5d7498a8b8c4})");
        
      }impl::std::convert::From<TimedMetadataEncodingProperties>for::winrt::Object {
        fn from(value:TimedMetadataEncodingProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&TimedMetadataEncodingProperties>for::winrt::Object {
        fn from(value: &TimedMetadataEncodingProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for TimedMetadataEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a TimedMetadataEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<TimedMetadataEncodingProperties>for IMediaEncodingProperties {
        fn from(value:TimedMetadataEncodingProperties) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&TimedMetadataEncodingProperties>for IMediaEncodingProperties {
        fn from(value: &TimedMetadataEncodingProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for TimedMetadataEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for& 'a TimedMetadataEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<TimedMetadataEncodingProperties>for ITimedMetadataEncodingProperties {
        fn from(value:TimedMetadataEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&TimedMetadataEncodingProperties>for ITimedMetadataEncodingProperties {
        fn from(value: &TimedMetadataEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ITimedMetadataEncodingProperties>>for TimedMetadataEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,ITimedMetadataEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<ITimedMetadataEncodingProperties>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ITimedMetadataEncodingProperties>>for& 'a TimedMetadataEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,ITimedMetadataEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<ITimedMetadataEncodingProperties>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for TimedMetadataEncodingProperties{}
      unsafe impl::std::marker::Sync for TimedMetadataEncodingProperties{}
      #[repr(transparent)]pub struct IMediaEncodingProfile3(::winrt::Object);
      impl::std::clone::Clone for IMediaEncodingProfile3 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaEncodingProfile3 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaEncodingProfile3 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaEncodingProfile3{}
      impl IMediaEncodingProfile3 {
        pub fn set_timed_metadata_tracks< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::core::TimedMetadataStreamDescriptor, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn get_timed_metadata_tracks(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<super::core::TimedMetadataStreamDescriptor, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector<super::core::TimedMetadataStreamDescriptor, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IVector<super::core::TimedMetadataStreamDescriptor, >>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaEncodingProfile3 {
        type Vtable = IMediaEncodingProfile3_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3127819912,30064,20073,[172,207,86,17,173,1,95,136],);
        
      }#[repr(C)]pub struct IMediaEncodingProfile3_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaEncodingProfile3 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{ba6ebe88-7570-4e69-accf-5611ad015f88}")
        };
        
      }impl::std::convert::From<IMediaEncodingProfile3>for::winrt::Object {
        fn from(value:IMediaEncodingProfile3) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaEncodingProfile3>for::winrt::Object {
        fn from(value: &IMediaEncodingProfile3) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaEncodingProfile3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaEncodingProfile3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct AudioEncodingQuality(i32);
      impl::std::convert::From<i32>for AudioEncodingQuality {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for AudioEncodingQuality {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for AudioEncodingQuality {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for AudioEncodingQuality {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for AudioEncodingQuality {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for AudioEncodingQuality{}
      impl::std::marker::Copy for AudioEncodingQuality{}
      impl AudioEncodingQuality {
        #![allow(non_upper_case_globals)]pub const Auto:Self = Self(0i32);
        pub const High:Self = Self(1i32);
        pub const Medium:Self = Self(2i32);
        pub const Low:Self = Self(3i32);
        
      }unsafe impl::winrt::Abi for AudioEncodingQuality {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for AudioEncodingQuality {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.MediaProperties.AudioEncodingQuality;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct VideoEncodingQuality(i32);
      impl::std::convert::From<i32>for VideoEncodingQuality {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for VideoEncodingQuality {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for VideoEncodingQuality {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for VideoEncodingQuality {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for VideoEncodingQuality {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for VideoEncodingQuality{}
      impl::std::marker::Copy for VideoEncodingQuality{}
      impl VideoEncodingQuality {
        #![allow(non_upper_case_globals)]pub const Auto:Self = Self(0i32);
        pub const HD1080p:Self = Self(1i32);
        pub const HD720p:Self = Self(2i32);
        pub const Wvga:Self = Self(3i32);
        pub const Ntsc:Self = Self(4i32);
        pub const Pal:Self = Self(5i32);
        pub const Vga:Self = Self(6i32);
        pub const Qvga:Self = Self(7i32);
        pub const Uhd2160p:Self = Self(8i32);
        pub const Uhd4320p:Self = Self(9i32);
        
      }unsafe impl::winrt::Abi for VideoEncodingQuality {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for VideoEncodingQuality {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.MediaProperties.VideoEncodingQuality;i4)",);
        
      }#[repr(transparent)]pub struct IMediaEncodingProfileStatics(::winrt::Object);
      impl::std::clone::Clone for IMediaEncodingProfileStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaEncodingProfileStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaEncodingProfileStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaEncodingProfileStatics{}
      impl IMediaEncodingProfileStatics {
        pub fn create_m4a(&self,quality:AudioEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          let this = self;
          unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          }
        }pub fn create_mp3(&self,quality:AudioEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          let this = self;
          unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          }
        }pub fn create_wma(&self,quality:AudioEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          let this = self;
          unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          }
        }pub fn create_mp4(&self,quality:VideoEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          let this = self;
          unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          }
        }pub fn create_wmv(&self,quality:VideoEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          let this = self;
          unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          }
        }pub fn create_from_file_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::storage::IStorageFile>>, >(&self,file:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<MediaEncodingProfile>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<MediaEncodingProfile, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),file.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <MediaEncodingProfile> >(result__)
          }
        }pub fn create_from_stream_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>, >, >(&self,stream:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<MediaEncodingProfile>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<MediaEncodingProfile, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),stream.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <MediaEncodingProfile> >(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaEncodingProfileStatics {
        type Vtable = IMediaEncodingProfileStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(427767084,11998,19013,[168,150,129,122,72,84,248,254],);
        
      }#[repr(C)]pub struct IMediaEncodingProfileStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,quality:AudioEncodingQuality,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,quality:AudioEncodingQuality,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,quality:AudioEncodingQuality,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,quality:VideoEncodingQuality,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,quality:VideoEncodingQuality,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,file: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,stream: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaEncodingProfileStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{197f352c-2ede-4a45-a896-817a4854f8fe}")
        };
        
      }impl::std::convert::From<IMediaEncodingProfileStatics>for::winrt::Object {
        fn from(value:IMediaEncodingProfileStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaEncodingProfileStatics>for::winrt::Object {
        fn from(value: &IMediaEncodingProfileStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaEncodingProfileStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaEncodingProfileStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaEncodingProfileStatics2(::winrt::Object);
      impl::std::clone::Clone for IMediaEncodingProfileStatics2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaEncodingProfileStatics2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaEncodingProfileStatics2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaEncodingProfileStatics2{}
      impl IMediaEncodingProfileStatics2 {
        pub fn create_wav(&self,quality:AudioEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          let this = self;
          unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          }
        }pub fn create_avi(&self,quality:VideoEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          let this = self;
          unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaEncodingProfileStatics2 {
        type Vtable = IMediaEncodingProfileStatics2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3465406287,27380,17032,[143,226,121,173,241,247,154,67],);
        
      }#[repr(C)]pub struct IMediaEncodingProfileStatics2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,quality:AudioEncodingQuality,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,quality:VideoEncodingQuality,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaEncodingProfileStatics2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{ce8de74f-6af4-4288-8fe2-79adf1f79a43}")
        };
        
      }impl::std::convert::From<IMediaEncodingProfileStatics2>for::winrt::Object {
        fn from(value:IMediaEncodingProfileStatics2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaEncodingProfileStatics2>for::winrt::Object {
        fn from(value: &IMediaEncodingProfileStatics2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaEncodingProfileStatics2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaEncodingProfileStatics2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IMediaEncodingProfileStatics3(::winrt::Object);
      impl::std::clone::Clone for IMediaEncodingProfileStatics3 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMediaEncodingProfileStatics3 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMediaEncodingProfileStatics3 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMediaEncodingProfileStatics3{}
      impl IMediaEncodingProfileStatics3 {
        pub fn create_alac(&self,quality:AudioEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          let this = self;
          unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          }
        }pub fn create_flac(&self,quality:AudioEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          let this = self;
          unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          }
        }pub fn create_hevc(&self,quality:VideoEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          let this = self;
          unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMediaEncodingProfileStatics3 {
        type Vtable = IMediaEncodingProfileStatics3_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2430256554,53110,17044,[169,237,26,20,32,245,31,107],);
        
      }#[repr(C)]pub struct IMediaEncodingProfileStatics3_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,quality:AudioEncodingQuality,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,quality:AudioEncodingQuality,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,quality:VideoEncodingQuality,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMediaEncodingProfileStatics3 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{90dac5aa-cf76-4294-a9ed-1a1420f51f6b}")
        };
        
      }impl::std::convert::From<IMediaEncodingProfileStatics3>for::winrt::Object {
        fn from(value:IMediaEncodingProfileStatics3) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMediaEncodingProfileStatics3>for::winrt::Object {
        fn from(value: &IMediaEncodingProfileStatics3) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMediaEncodingProfileStatics3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMediaEncodingProfileStatics3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct MediaEncodingProfile(::winrt::Object);
      impl MediaEncodingProfile {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn set_audio< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,AudioEncodingProperties>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn audio(&self) ->  ::winrt::Result<AudioEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <AudioEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<AudioEncodingProperties>(result__)
          }
        }pub fn set_video< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,VideoEncodingProperties>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn video(&self) ->  ::winrt::Result<VideoEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <VideoEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<VideoEncodingProperties>(result__)
          }
        }pub fn set_container< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,ContainerEncodingProperties>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn container(&self) ->  ::winrt::Result<ContainerEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <ContainerEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<ContainerEncodingProperties>(result__)
          }
        }pub fn set_audio_tracks< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::core::AudioStreamDescriptor, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProfile2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn get_audio_tracks(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<super::core::AudioStreamDescriptor, >, >{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProfile2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector<super::core::AudioStreamDescriptor, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IVector<super::core::AudioStreamDescriptor, >>(result__)
          }
        }pub fn set_video_tracks< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::core::VideoStreamDescriptor, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProfile2>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn get_video_tracks(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<super::core::VideoStreamDescriptor, >, >{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProfile2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector<super::core::VideoStreamDescriptor, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IVector<super::core::VideoStreamDescriptor, >>(result__)
          }
        }pub fn set_timed_metadata_tracks< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::core::TimedMetadataStreamDescriptor, >, >, >, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProfile3>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn get_timed_metadata_tracks(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<super::core::TimedMetadataStreamDescriptor, >, >{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProfile3>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector<super::core::TimedMetadataStreamDescriptor, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::collections::IVector<super::core::TimedMetadataStreamDescriptor, >>(result__)
          }
        }pub fn create_m4a(quality:AudioEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          Self::IMediaEncodingProfileStatics(|this|unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          })
        }pub fn create_mp3(quality:AudioEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          Self::IMediaEncodingProfileStatics(|this|unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          })
        }pub fn create_wma(quality:AudioEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          Self::IMediaEncodingProfileStatics(|this|unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          })
        }pub fn create_mp4(quality:VideoEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          Self::IMediaEncodingProfileStatics(|this|unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          })
        }pub fn create_wmv(quality:VideoEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          Self::IMediaEncodingProfileStatics(|this|unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          })
        }pub fn create_from_file_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::storage::IStorageFile>>, >(file:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<MediaEncodingProfile>>{
          Self::IMediaEncodingProfileStatics(|this|unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<MediaEncodingProfile, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),file.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <MediaEncodingProfile> >(result__)
          })
        }pub fn create_from_stream_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::storage::streams::IRandomAccessStream>, >, >(stream:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<MediaEncodingProfile>>{
          Self::IMediaEncodingProfileStatics(|this|unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<MediaEncodingProfile, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),stream.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <MediaEncodingProfile> >(result__)
          })
        }pub fn create_wav(quality:AudioEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          Self::IMediaEncodingProfileStatics2(|this|unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          })
        }pub fn create_avi(quality:VideoEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          Self::IMediaEncodingProfileStatics2(|this|unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          })
        }pub fn create_alac(quality:AudioEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          Self::IMediaEncodingProfileStatics3(|this|unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          })
        }pub fn create_flac(quality:AudioEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          Self::IMediaEncodingProfileStatics3(|this|unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          })
        }pub fn create_hevc(quality:VideoEncodingQuality,) ->  ::winrt::Result<MediaEncodingProfile>{
          Self::IMediaEncodingProfileStatics3(|this|unsafe {
            let mut result__: <MediaEncodingProfile as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),quality, &mut result__,).from_abi::<MediaEncodingProfile>(result__)
          })
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<MediaEncodingProfile, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn IMediaEncodingProfileStatics<R,F:FnOnce(&IMediaEncodingProfileStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<MediaEncodingProfile,IMediaEncodingProfileStatics, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn IMediaEncodingProfileStatics2<R,F:FnOnce(&IMediaEncodingProfileStatics2) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<MediaEncodingProfile,IMediaEncodingProfileStatics2, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn IMediaEncodingProfileStatics3<R,F:FnOnce(&IMediaEncodingProfileStatics3) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<MediaEncodingProfile,IMediaEncodingProfileStatics3, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for MediaEncodingProfile {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MediaEncodingProfile {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaEncodingProfile{}
      impl::std::fmt::Debug for MediaEncodingProfile {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MediaEncodingProfile {
        const NAME: & 'static str = "Windows.Media.MediaProperties.MediaEncodingProfile";
        
      }unsafe impl::winrt::Interface for MediaEncodingProfile {
        type Vtable = IMediaEncodingProfile_abi;
        const IID: ::winrt::Guid =  <IMediaEncodingProfile as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for MediaEncodingProfile {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.MediaProperties.MediaEncodingProfile;{e7dbf5a8-1db9-4783-876b-3dfe12acfdb3})");
        
      }impl::std::convert::From<MediaEncodingProfile>for::winrt::Object {
        fn from(value:MediaEncodingProfile) -> Self {
          value.0
        }
      }impl::std::convert::From<&MediaEncodingProfile>for::winrt::Object {
        fn from(value: &MediaEncodingProfile) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MediaEncodingProfile {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MediaEncodingProfile {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaEncodingProfile>for IMediaEncodingProfile {
        fn from(value:MediaEncodingProfile) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MediaEncodingProfile>for IMediaEncodingProfile {
        fn from(value: &MediaEncodingProfile) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProfile>>for MediaEncodingProfile {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProfile>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProfile>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProfile>>for& 'a MediaEncodingProfile {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProfile>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProfile>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaEncodingProfile>for IMediaEncodingProfile2 {
        fn from(value:MediaEncodingProfile) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaEncodingProfile>for IMediaEncodingProfile2 {
        fn from(value: &MediaEncodingProfile) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProfile2>>for MediaEncodingProfile {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProfile2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProfile2>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProfile2>>for& 'a MediaEncodingProfile {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProfile2>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProfile2>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MediaEncodingProfile>for IMediaEncodingProfile3 {
        fn from(value:MediaEncodingProfile) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MediaEncodingProfile>for IMediaEncodingProfile3 {
        fn from(value: &MediaEncodingProfile) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProfile3>>for MediaEncodingProfile {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProfile3>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProfile3>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProfile3>>for& 'a MediaEncodingProfile {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProfile3>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProfile3>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for MediaEncodingProfile{}
      unsafe impl::std::marker::Sync for MediaEncodingProfile{}
      #[repr(transparent)]pub struct IImageEncodingProperties(::winrt::Object);
      impl::std::clone::Clone for IImageEncodingProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IImageEncodingProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IImageEncodingProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IImageEncodingProperties{}
      impl IImageEncodingProperties {
        pub fn set_width(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_height(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn properties(&self) ->  ::winrt::Result<MediaPropertySet>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <MediaPropertySet as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaPropertySet>(result__)
          }
        }pub fn r#type(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_subtype< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn subtype(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IImageEncodingProperties {
        type Vtable = IImageEncodingProperties_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2019710517,62257,16777,[177,195,180,141,90,224,52,241],);
        
      }#[repr(C)]pub struct IImageEncodingProperties_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IImageEncodingProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{78625635-f331-4189-b1c3-b48d5ae034f1}")
        };
        
      }impl::std::convert::From<IImageEncodingProperties>for::winrt::Object {
        fn from(value:IImageEncodingProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&IImageEncodingProperties>for::winrt::Object {
        fn from(value: &IImageEncodingProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IImageEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IImageEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IImageEncodingProperties>for IMediaEncodingProperties {
        fn from(value:IImageEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IImageEncodingProperties>for IMediaEncodingProperties {
        fn from(value: &IImageEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for IImageEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for& 'a IImageEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IImageEncodingProperties2(::winrt::Object);
      impl::std::clone::Clone for IImageEncodingProperties2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IImageEncodingProperties2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IImageEncodingProperties2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IImageEncodingProperties2{}
      impl IImageEncodingProperties2 {
        pub fn copy(&self) ->  ::winrt::Result<ImageEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <ImageEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<ImageEncodingProperties>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IImageEncodingProperties2 {
        type Vtable = IImageEncodingProperties2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3360989919,51491,18075,[172,142,106,159,60,28,217,227],);
        
      }#[repr(C)]pub struct IImageEncodingProperties2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IImageEncodingProperties2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c854a2df-c923-469b-ac8e-6a9f3c1cd9e3}")
        };
        
      }impl::std::convert::From<IImageEncodingProperties2>for::winrt::Object {
        fn from(value:IImageEncodingProperties2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IImageEncodingProperties2>for::winrt::Object {
        fn from(value: &IImageEncodingProperties2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IImageEncodingProperties2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IImageEncodingProperties2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IImageEncodingPropertiesStatics(::winrt::Object);
      impl::std::clone::Clone for IImageEncodingPropertiesStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IImageEncodingPropertiesStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IImageEncodingPropertiesStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IImageEncodingPropertiesStatics{}
      impl IImageEncodingPropertiesStatics {
        pub fn create_jpeg(&self) ->  ::winrt::Result<ImageEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <ImageEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<ImageEncodingProperties>(result__)
          }
        }pub fn create_png(&self) ->  ::winrt::Result<ImageEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <ImageEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<ImageEncodingProperties>(result__)
          }
        }pub fn create_jpeg_xr(&self) ->  ::winrt::Result<ImageEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <ImageEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<ImageEncodingProperties>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IImageEncodingPropertiesStatics {
        type Vtable = IImageEncodingPropertiesStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(628910300,35737,17310,[170,89,145,58,54,22,18,151],);
        
      }#[repr(C)]pub struct IImageEncodingPropertiesStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IImageEncodingPropertiesStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{257c68dc-8b99-439e-aa59-913a36161297}")
        };
        
      }impl::std::convert::From<IImageEncodingPropertiesStatics>for::winrt::Object {
        fn from(value:IImageEncodingPropertiesStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&IImageEncodingPropertiesStatics>for::winrt::Object {
        fn from(value: &IImageEncodingPropertiesStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IImageEncodingPropertiesStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IImageEncodingPropertiesStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct MediaPixelFormat(i32);
      impl::std::convert::From<i32>for MediaPixelFormat {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for MediaPixelFormat {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for MediaPixelFormat {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for MediaPixelFormat {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for MediaPixelFormat {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaPixelFormat{}
      impl::std::marker::Copy for MediaPixelFormat{}
      impl MediaPixelFormat {
        #![allow(non_upper_case_globals)]pub const Nv12:Self = Self(0i32);
        pub const Bgra8:Self = Self(1i32);
        pub const P010:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for MediaPixelFormat {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for MediaPixelFormat {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.MediaProperties.MediaPixelFormat;i4)",);
        
      }#[repr(transparent)]pub struct IImageEncodingPropertiesStatics2(::winrt::Object);
      impl::std::clone::Clone for IImageEncodingPropertiesStatics2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IImageEncodingPropertiesStatics2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IImageEncodingPropertiesStatics2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IImageEncodingPropertiesStatics2{}
      impl IImageEncodingPropertiesStatics2 {
        pub fn create_uncompressed(&self,format:MediaPixelFormat,) ->  ::winrt::Result<ImageEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <ImageEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),format, &mut result__,).from_abi::<ImageEncodingProperties>(result__)
          }
        }pub fn create_bmp(&self) ->  ::winrt::Result<ImageEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <ImageEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<ImageEncodingProperties>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IImageEncodingPropertiesStatics2 {
        type Vtable = IImageEncodingPropertiesStatics2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4139932457,14372,18096,[149,110,80,19,41,225,190,60],);
        
      }#[repr(C)]pub struct IImageEncodingPropertiesStatics2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,format:MediaPixelFormat,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IImageEncodingPropertiesStatics2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{f6c25b29-3824-46b0-956e-501329e1be3c}")
        };
        
      }impl::std::convert::From<IImageEncodingPropertiesStatics2>for::winrt::Object {
        fn from(value:IImageEncodingPropertiesStatics2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IImageEncodingPropertiesStatics2>for::winrt::Object {
        fn from(value: &IImageEncodingPropertiesStatics2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IImageEncodingPropertiesStatics2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IImageEncodingPropertiesStatics2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IImageEncodingPropertiesStatics3(::winrt::Object);
      impl::std::clone::Clone for IImageEncodingPropertiesStatics3 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IImageEncodingPropertiesStatics3 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IImageEncodingPropertiesStatics3 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IImageEncodingPropertiesStatics3{}
      impl IImageEncodingPropertiesStatics3 {
        pub fn create_heif(&self) ->  ::winrt::Result<ImageEncodingProperties>{
          let this = self;
          unsafe {
            let mut result__: <ImageEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<ImageEncodingProperties>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IImageEncodingPropertiesStatics3 {
        type Vtable = IImageEncodingPropertiesStatics3_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1223983437,41727,18652,[142,160,233,6,128,102,54,86],);
        
      }#[repr(C)]pub struct IImageEncodingPropertiesStatics3_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IImageEncodingPropertiesStatics3 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{48f4814d-a2ff-48dc-8ea0-e90680663656}")
        };
        
      }impl::std::convert::From<IImageEncodingPropertiesStatics3>for::winrt::Object {
        fn from(value:IImageEncodingPropertiesStatics3) -> Self {
          value.0
        }
      }impl::std::convert::From<&IImageEncodingPropertiesStatics3>for::winrt::Object {
        fn from(value: &IImageEncodingPropertiesStatics3) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IImageEncodingPropertiesStatics3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IImageEncodingPropertiesStatics3 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct ImageEncodingProperties(::winrt::Object);
      impl ImageEncodingProperties {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn set_width(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_height(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn copy(&self) ->  ::winrt::Result<ImageEncodingProperties>{
          let this =  &::winrt::Interface::cast::<IImageEncodingProperties2>(self).unwrap();
          unsafe {
            let mut result__: <ImageEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<ImageEncodingProperties>(result__)
          }
        }pub fn create_jpeg() ->  ::winrt::Result<ImageEncodingProperties>{
          Self::IImageEncodingPropertiesStatics(|this|unsafe {
            let mut result__: <ImageEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<ImageEncodingProperties>(result__)
          })
        }pub fn create_png() ->  ::winrt::Result<ImageEncodingProperties>{
          Self::IImageEncodingPropertiesStatics(|this|unsafe {
            let mut result__: <ImageEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<ImageEncodingProperties>(result__)
          })
        }pub fn create_jpeg_xr() ->  ::winrt::Result<ImageEncodingProperties>{
          Self::IImageEncodingPropertiesStatics(|this|unsafe {
            let mut result__: <ImageEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<ImageEncodingProperties>(result__)
          })
        }pub fn create_uncompressed(format:MediaPixelFormat,) ->  ::winrt::Result<ImageEncodingProperties>{
          Self::IImageEncodingPropertiesStatics2(|this|unsafe {
            let mut result__: <ImageEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),format, &mut result__,).from_abi::<ImageEncodingProperties>(result__)
          })
        }pub fn create_bmp() ->  ::winrt::Result<ImageEncodingProperties>{
          Self::IImageEncodingPropertiesStatics2(|this|unsafe {
            let mut result__: <ImageEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<ImageEncodingProperties>(result__)
          })
        }pub fn create_heif() ->  ::winrt::Result<ImageEncodingProperties>{
          Self::IImageEncodingPropertiesStatics3(|this|unsafe {
            let mut result__: <ImageEncodingProperties as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<ImageEncodingProperties>(result__)
          })
        }pub fn properties(&self) ->  ::winrt::Result<MediaPropertySet>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <MediaPropertySet as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<MediaPropertySet>(result__)
          }
        }pub fn r#type(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_subtype< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn subtype(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IMediaEncodingProperties>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<ImageEncodingProperties, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn IImageEncodingPropertiesStatics<R,F:FnOnce(&IImageEncodingPropertiesStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<ImageEncodingProperties,IImageEncodingPropertiesStatics, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn IImageEncodingPropertiesStatics2<R,F:FnOnce(&IImageEncodingPropertiesStatics2) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<ImageEncodingProperties,IImageEncodingPropertiesStatics2, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn IImageEncodingPropertiesStatics3<R,F:FnOnce(&IImageEncodingPropertiesStatics3) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<ImageEncodingProperties,IImageEncodingPropertiesStatics3, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for ImageEncodingProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for ImageEncodingProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ImageEncodingProperties{}
      impl::std::fmt::Debug for ImageEncodingProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for ImageEncodingProperties {
        const NAME: & 'static str = "Windows.Media.MediaProperties.ImageEncodingProperties";
        
      }unsafe impl::winrt::Interface for ImageEncodingProperties {
        type Vtable = IImageEncodingProperties_abi;
        const IID: ::winrt::Guid =  <IImageEncodingProperties as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for ImageEncodingProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Media.MediaProperties.ImageEncodingProperties;{78625635-f331-4189-b1c3-b48d5ae034f1})");
        
      }impl::std::convert::From<ImageEncodingProperties>for::winrt::Object {
        fn from(value:ImageEncodingProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&ImageEncodingProperties>for::winrt::Object {
        fn from(value: &ImageEncodingProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ImageEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ImageEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<ImageEncodingProperties>for IImageEncodingProperties {
        fn from(value:ImageEncodingProperties) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&ImageEncodingProperties>for IImageEncodingProperties {
        fn from(value: &ImageEncodingProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IImageEncodingProperties>>for ImageEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IImageEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IImageEncodingProperties>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IImageEncodingProperties>>for& 'a ImageEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IImageEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IImageEncodingProperties>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<ImageEncodingProperties>for IImageEncodingProperties2 {
        fn from(value:ImageEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&ImageEncodingProperties>for IImageEncodingProperties2 {
        fn from(value: &ImageEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IImageEncodingProperties2>>for ImageEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IImageEncodingProperties2>{
          ::winrt::Param::Owned(::std::convert::Into::<IImageEncodingProperties2>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IImageEncodingProperties2>>for& 'a ImageEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IImageEncodingProperties2>{
          ::winrt::Param::Owned(::std::convert::Into::<IImageEncodingProperties2>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<ImageEncodingProperties>for IMediaEncodingProperties {
        fn from(value:ImageEncodingProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&ImageEncodingProperties>for IMediaEncodingProperties {
        fn from(value: &ImageEncodingProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for ImageEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMediaEncodingProperties>>for& 'a ImageEncodingProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMediaEncodingProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMediaEncodingProperties>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for ImageEncodingProperties{}
      unsafe impl::std::marker::Sync for ImageEncodingProperties{}
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct MediaThumbnailFormat(i32);
      impl::std::convert::From<i32>for MediaThumbnailFormat {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for MediaThumbnailFormat {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for MediaThumbnailFormat {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for MediaThumbnailFormat {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for MediaThumbnailFormat {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MediaThumbnailFormat{}
      impl::std::marker::Copy for MediaThumbnailFormat{}
      impl MediaThumbnailFormat {
        #![allow(non_upper_case_globals)]pub const Bmp:Self = Self(0i32);
        pub const Bgra8:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for MediaThumbnailFormat {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for MediaThumbnailFormat {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Media.MediaProperties.MediaThumbnailFormat;i4)",);
        
      }
    }
  }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod perception {
    #[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod spatial {
      #[repr(transparent)]pub struct ISpatialCoordinateSystem(::winrt::Object);
      impl::std::clone::Clone for ISpatialCoordinateSystem {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ISpatialCoordinateSystem {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ISpatialCoordinateSystem {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ISpatialCoordinateSystem{}
      impl ISpatialCoordinateSystem {
        pub fn try_get_transform_to< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,SpatialCoordinateSystem>>, >(&self,target:T0__,) ->  ::winrt::Result<super::super::foundation::IReference<super::super::foundation::numerics::Matrix4x4, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference<super::super::foundation::numerics::Matrix4x4, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),target.into().abi(), &mut result__,).from_abi::<super::super::foundation::IReference<super::super::foundation::numerics::Matrix4x4, >>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ISpatialCoordinateSystem {
        type Vtable = ISpatialCoordinateSystem_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1777060427,24739,13702,[166,83,89,167,189,103,109,7],);
        
      }#[repr(C)]pub struct ISpatialCoordinateSystem_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,target: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ISpatialCoordinateSystem {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{69ebca4b-60a3-3586-a653-59a7bd676d07}")
        };
        
      }impl::std::convert::From<ISpatialCoordinateSystem>for::winrt::Object {
        fn from(value:ISpatialCoordinateSystem) -> Self {
          value.0
        }
      }impl::std::convert::From<&ISpatialCoordinateSystem>for::winrt::Object {
        fn from(value: &ISpatialCoordinateSystem) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ISpatialCoordinateSystem {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ISpatialCoordinateSystem {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct SpatialCoordinateSystem(::winrt::Object);
      impl SpatialCoordinateSystem {
        pub fn try_get_transform_to< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,SpatialCoordinateSystem>>, >(&self,target:T0__,) ->  ::winrt::Result<super::super::foundation::IReference<super::super::foundation::numerics::Matrix4x4, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference<super::super::foundation::numerics::Matrix4x4, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),target.into().abi(), &mut result__,).from_abi::<super::super::foundation::IReference<super::super::foundation::numerics::Matrix4x4, >>(result__)
          }
        }
      }impl::std::clone::Clone for SpatialCoordinateSystem {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for SpatialCoordinateSystem {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for SpatialCoordinateSystem{}
      impl::std::fmt::Debug for SpatialCoordinateSystem {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for SpatialCoordinateSystem {
        const NAME: & 'static str = "Windows.Perception.Spatial.SpatialCoordinateSystem";
        
      }unsafe impl::winrt::Interface for SpatialCoordinateSystem {
        type Vtable = ISpatialCoordinateSystem_abi;
        const IID: ::winrt::Guid =  <ISpatialCoordinateSystem as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for SpatialCoordinateSystem {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Perception.Spatial.SpatialCoordinateSystem;{69ebca4b-60a3-3586-a653-59a7bd676d07})");
        
      }impl::std::convert::From<SpatialCoordinateSystem>for::winrt::Object {
        fn from(value:SpatialCoordinateSystem) -> Self {
          value.0
        }
      }impl::std::convert::From<&SpatialCoordinateSystem>for::winrt::Object {
        fn from(value: &SpatialCoordinateSystem) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for SpatialCoordinateSystem {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a SpatialCoordinateSystem {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<SpatialCoordinateSystem>for ISpatialCoordinateSystem {
        fn from(value:SpatialCoordinateSystem) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&SpatialCoordinateSystem>for ISpatialCoordinateSystem {
        fn from(value: &SpatialCoordinateSystem) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ISpatialCoordinateSystem>>for SpatialCoordinateSystem {
        fn into(self) ->  ::winrt::Param< 'a ,ISpatialCoordinateSystem>{
          ::winrt::Param::Owned(::std::convert::Into::<ISpatialCoordinateSystem>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,ISpatialCoordinateSystem>>for& 'a SpatialCoordinateSystem {
        fn into(self) ->  ::winrt::Param< 'a ,ISpatialCoordinateSystem>{
          ::winrt::Param::Owned(::std::convert::Into::<ISpatialCoordinateSystem>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for SpatialCoordinateSystem{}
      unsafe impl::std::marker::Sync for SpatialCoordinateSystem{}
      
    }
  }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod security {
    #[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod authentication {
      #[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod web {
        #[allow(non_camel_case_types)]#[repr(transparent)]pub struct WebAuthenticationStatus(i32);
        impl::std::convert::From<i32>for WebAuthenticationStatus {
          fn from(value:i32) -> Self {
            Self(value)
          }
        }impl::std::clone::Clone for WebAuthenticationStatus {
          fn clone(&self) -> Self {
            Self(self.0)
          }
        }impl::std::default::Default for WebAuthenticationStatus {
          fn default() -> Self {
            Self(0)
          }
        }impl::std::fmt::Debug for WebAuthenticationStatus {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for WebAuthenticationStatus {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for WebAuthenticationStatus{}
        impl::std::marker::Copy for WebAuthenticationStatus{}
        impl WebAuthenticationStatus {
          #![allow(non_upper_case_globals)]pub const Success:Self = Self(0i32);
          pub const UserCancel:Self = Self(1i32);
          pub const ErrorHttp:Self = Self(2i32);
          
        }unsafe impl::winrt::Abi for WebAuthenticationStatus {
          type Abi = Self;
          
        }unsafe impl::winrt::RuntimeType for WebAuthenticationStatus {
          type DefaultType = Self;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Security.Authentication.Web.WebAuthenticationStatus;i4)",);
          
        }#[repr(transparent)]pub struct IWebAuthenticationResult(::winrt::Object);
        impl::std::clone::Clone for IWebAuthenticationResult {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::fmt::Debug for IWebAuthenticationResult {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::std::cmp::PartialEq for IWebAuthenticationResult {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for IWebAuthenticationResult{}
        impl IWebAuthenticationResult {
          pub fn response_data(&self) ->  ::winrt::Result<::winrt::HString>{
            let this = self;
            unsafe {
              let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
            }
          }pub fn response_status(&self) ->  ::winrt::Result<WebAuthenticationStatus>{
            let this = self;
            unsafe {
              let mut result__: <WebAuthenticationStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<WebAuthenticationStatus>(result__)
            }
          }pub fn response_error_detail(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }
        }unsafe impl::winrt::Interface for IWebAuthenticationResult {
          type Vtable = IWebAuthenticationResult_abi;
          const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1677732683,60905,18186,[165,205,3,35,250,246,226,98],);
          
        }#[repr(C)]pub struct IWebAuthenticationResult_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut WebAuthenticationStatus,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,);
        unsafe impl::winrt::RuntimeType for IWebAuthenticationResult {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer = {
            ::winrt::ConstBuffer::from_slice(b"{64002b4b-ede9-470a-a5cd-0323faf6e262}")
          };
          
        }impl::std::convert::From<IWebAuthenticationResult>for::winrt::Object {
          fn from(value:IWebAuthenticationResult) -> Self {
            value.0
          }
        }impl::std::convert::From<&IWebAuthenticationResult>for::winrt::Object {
          fn from(value: &IWebAuthenticationResult) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IWebAuthenticationResult {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IWebAuthenticationResult {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }#[repr(transparent)]pub struct WebAuthenticationResult(::winrt::Object);
        impl WebAuthenticationResult {
          pub fn response_data(&self) ->  ::winrt::Result<::winrt::HString>{
            let this = self;
            unsafe {
              let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
            }
          }pub fn response_status(&self) ->  ::winrt::Result<WebAuthenticationStatus>{
            let this = self;
            unsafe {
              let mut result__: <WebAuthenticationStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__,).from_abi::<WebAuthenticationStatus>(result__)
            }
          }pub fn response_error_detail(&self) ->  ::winrt::Result<u32>{
            let this = self;
            unsafe {
              let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
              (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
            }
          }
        }impl::std::clone::Clone for WebAuthenticationResult {
          fn clone(&self) -> Self {
            Self(self.0.clone())
          }
        }impl::std::cmp::PartialEq for WebAuthenticationResult {
          fn eq(&self,other: &Self) -> bool {
            self.0==other.0
          }
        }impl::std::cmp::Eq for WebAuthenticationResult{}
        impl::std::fmt::Debug for WebAuthenticationResult {
          fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
            f.write_fmt(format_args!("{:?}", self.0))
          }
        }impl::winrt::RuntimeName for WebAuthenticationResult {
          const NAME: & 'static str = "Windows.Security.Authentication.Web.WebAuthenticationResult";
          
        }unsafe impl::winrt::Interface for WebAuthenticationResult {
          type Vtable = IWebAuthenticationResult_abi;
          const IID: ::winrt::Guid =  <IWebAuthenticationResult as::winrt::Interface>::IID;
          
        }unsafe impl::winrt::RuntimeType for WebAuthenticationResult {
          type DefaultType =  ::std::option::Option<Self>;
          const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Security.Authentication.Web.WebAuthenticationResult;{64002b4b-ede9-470a-a5cd-0323faf6e262})");
          
        }impl::std::convert::From<WebAuthenticationResult>for::winrt::Object {
          fn from(value:WebAuthenticationResult) -> Self {
            value.0
          }
        }impl::std::convert::From<&WebAuthenticationResult>for::winrt::Object {
          fn from(value: &WebAuthenticationResult) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for WebAuthenticationResult {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a WebAuthenticationResult {
          fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
            ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
          }
        }impl::std::convert::From<WebAuthenticationResult>for IWebAuthenticationResult {
          fn from(value:WebAuthenticationResult) -> Self {
            unsafe {
              ::std::mem::transmute(value)
            }
          }
        }impl::std::convert::From<&WebAuthenticationResult>for IWebAuthenticationResult {
          fn from(value: &WebAuthenticationResult) -> Self {
            ::std::convert::From::from(::std::clone::Clone::clone(value))
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IWebAuthenticationResult>>for WebAuthenticationResult {
          fn into(self) ->  ::winrt::Param< 'a ,IWebAuthenticationResult>{
            ::winrt::Param::Owned(::std::convert::Into::<IWebAuthenticationResult>::into(self),)
          }
        }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IWebAuthenticationResult>>for& 'a WebAuthenticationResult {
          fn into(self) ->  ::winrt::Param< 'a ,IWebAuthenticationResult>{
            ::winrt::Param::Owned(::std::convert::Into::<IWebAuthenticationResult>::into(::std::clone::Clone::clone(self),),)
          }
        }
      }
    }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod credentials {
      #[repr(transparent)]pub struct ICredentialFactory(::winrt::Object);
      impl::std::clone::Clone for ICredentialFactory {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for ICredentialFactory {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ICredentialFactory {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ICredentialFactory{}
      impl ICredentialFactory {
        pub fn create_password_credential< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T2__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,resource:T0__,user_name:T1__,password:T2__,) ->  ::winrt::Result<PasswordCredential>{
          let this = self;
          unsafe {
            let mut result__: <PasswordCredential as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),resource.into().abi(),user_name.into().abi(),password.into().abi(), &mut result__,).from_abi::<PasswordCredential>(result__)
          }
        }
      }unsafe impl::winrt::Interface for ICredentialFactory {
        type Vtable = ICredentialFactory_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1424954273,48934,18357,[151,221,222,119,155,124,173,88],);
        
      }#[repr(C)]pub struct ICredentialFactory_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,resource: ::winrt::RawPtr,user_name: ::winrt::RawPtr,password: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for ICredentialFactory {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{54ef13a1-bf26-47b5-97dd-de779b7cad58}")
        };
        
      }impl::std::convert::From<ICredentialFactory>for::winrt::Object {
        fn from(value:ICredentialFactory) -> Self {
          value.0
        }
      }impl::std::convert::From<&ICredentialFactory>for::winrt::Object {
        fn from(value: &ICredentialFactory) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ICredentialFactory {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ICredentialFactory {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IPasswordCredential(::winrt::Object);
      impl::std::clone::Clone for IPasswordCredential {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IPasswordCredential {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IPasswordCredential {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IPasswordCredential{}
      impl IPasswordCredential {
        pub fn resource(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_resource< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,resource:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),resource.into().abi(),).ok()
          }
        }pub fn user_name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_user_name< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,user_name:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),user_name.into().abi(),).ok()
          }
        }pub fn password(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_password< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,password:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),password.into().abi(),).ok()
          }
        }pub fn retrieve_password(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn properties(&self,) ->  ::winrt::Result<super::super::foundation::collections::IPropertySet>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IPropertySet as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::collections::IPropertySet>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IPasswordCredential {
        type Vtable = IPasswordCredential_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1790019977,50976,16807,[166,193,254,173,179,99,41,160],);
        
      }#[repr(C)]pub struct IPasswordCredential_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,resource: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,user_name: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,password: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IPasswordCredential {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{6ab18989-c720-41a7-a6c1-feadb36329a0}")
        };
        
      }impl::std::convert::From<IPasswordCredential>for::winrt::Object {
        fn from(value:IPasswordCredential) -> Self {
          value.0
        }
      }impl::std::convert::From<&IPasswordCredential>for::winrt::Object {
        fn from(value: &IPasswordCredential) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IPasswordCredential {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IPasswordCredential {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct PasswordCredential(::winrt::Object);
      impl PasswordCredential {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn create_password_credential< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T2__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(resource:T0__,user_name:T1__,password:T2__,) ->  ::winrt::Result<PasswordCredential>{
          Self::ICredentialFactory(|this|unsafe {
            let mut result__: <PasswordCredential as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),resource.into().abi(),user_name.into().abi(),password.into().abi(), &mut result__,).from_abi::<PasswordCredential>(result__)
          })
        }pub fn resource(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_resource< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,resource:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),resource.into().abi(),).ok()
          }
        }pub fn user_name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_user_name< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,user_name:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),user_name.into().abi(),).ok()
          }
        }pub fn password(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_password< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,password:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),password.into().abi(),).ok()
          }
        }pub fn retrieve_password(&self) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn properties(&self,) ->  ::winrt::Result<super::super::foundation::collections::IPropertySet>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IPropertySet as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::collections::IPropertySet>(result__)
          }
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<PasswordCredential, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn ICredentialFactory<R,F:FnOnce(&ICredentialFactory) ->  ::winrt::Result<R>>(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<PasswordCredential,ICredentialFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for PasswordCredential {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for PasswordCredential {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for PasswordCredential{}
      impl::std::fmt::Debug for PasswordCredential {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for PasswordCredential {
        const NAME: & 'static str = "Windows.Security.Credentials.PasswordCredential";
        
      }unsafe impl::winrt::Interface for PasswordCredential {
        type Vtable = IPasswordCredential_abi;
        const IID: ::winrt::Guid =  <IPasswordCredential as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for PasswordCredential {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Security.Credentials.PasswordCredential;{6ab18989-c720-41a7-a6c1-feadb36329a0})");
        
      }impl::std::convert::From<PasswordCredential>for::winrt::Object {
        fn from(value:PasswordCredential) -> Self {
          value.0
        }
      }impl::std::convert::From<&PasswordCredential>for::winrt::Object {
        fn from(value: &PasswordCredential) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for PasswordCredential {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a PasswordCredential {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<PasswordCredential>for IPasswordCredential {
        fn from(value:PasswordCredential) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&PasswordCredential>for IPasswordCredential {
        fn from(value: &PasswordCredential) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IPasswordCredential>>for PasswordCredential {
        fn into(self) ->  ::winrt::Param< 'a ,IPasswordCredential>{
          ::winrt::Param::Owned(::std::convert::Into::<IPasswordCredential>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IPasswordCredential>>for& 'a PasswordCredential {
        fn into(self) ->  ::winrt::Param< 'a ,IPasswordCredential>{
          ::winrt::Param::Owned(::std::convert::Into::<IPasswordCredential>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for PasswordCredential{}
      unsafe impl::std::marker::Sync for PasswordCredential{}
      
    }
  }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod storage {
    #[allow(non_camel_case_types)]#[repr(transparent)]pub struct FileAccessMode(i32);
    impl::std::convert::From<i32>for FileAccessMode {
      fn from(value:i32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for FileAccessMode {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for FileAccessMode {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for FileAccessMode {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for FileAccessMode {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for FileAccessMode{}
    impl::std::marker::Copy for FileAccessMode{}
    impl FileAccessMode {
      #![allow(non_upper_case_globals)]pub const Read:Self = Self(0i32);
      pub const ReadWrite:Self = Self(1i32);
      
    }unsafe impl::winrt::Abi for FileAccessMode {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for FileAccessMode {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.FileAccessMode;i4)");
      
    }#[repr(transparent)]pub struct IStorageStreamTransaction(::winrt::Object);
    impl::std::clone::Clone for IStorageStreamTransaction {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageStreamTransaction {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageStreamTransaction {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageStreamTransaction{}
    impl IStorageStreamTransaction {
      pub fn close(&self) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<super::foundation::IClosable>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
        }
      }pub fn stream(&self) ->  ::winrt::Result<streams::IRandomAccessStream>{
        let this = self;
        unsafe {
          let mut result__: <streams::IRandomAccessStream as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<streams::IRandomAccessStream>(result__)
        }
      }pub fn commit_async(&self) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageStreamTransaction {
      type Vtable = IStorageStreamTransaction_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4135383907,42301,19860,[174,44,103,35,45,147,172,221],);
      
    }#[repr(C)]pub struct IStorageStreamTransaction_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageStreamTransaction {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{f67cf363-a53d-4d94-ae2c-67232d93acdd}")
      };
      
    }impl::std::convert::From<IStorageStreamTransaction>for::winrt::Object {
      fn from(value:IStorageStreamTransaction) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageStreamTransaction>for::winrt::Object {
      fn from(value: &IStorageStreamTransaction) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageStreamTransaction {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageStreamTransaction {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<IStorageStreamTransaction>for super::foundation::IClosable {
      fn from(value:IStorageStreamTransaction) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&IStorageStreamTransaction>for super::foundation::IClosable {
      fn from(value: &IStorageStreamTransaction) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for IStorageStreamTransaction {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(self,))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for& 'a IStorageStreamTransaction {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct StorageStreamTransaction(::winrt::Object);
    impl StorageStreamTransaction {
      pub fn close(&self) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<super::foundation::IClosable>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
        }
      }pub fn stream(&self) ->  ::winrt::Result<streams::IRandomAccessStream>{
        let this = self;
        unsafe {
          let mut result__: <streams::IRandomAccessStream as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<streams::IRandomAccessStream>(result__)
        }
      }pub fn commit_async(&self) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }
    }impl::std::clone::Clone for StorageStreamTransaction {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for StorageStreamTransaction {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for StorageStreamTransaction{}
    impl::std::fmt::Debug for StorageStreamTransaction {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::winrt::RuntimeName for StorageStreamTransaction {
      const NAME: & 'static str = "Windows.Storage.StorageStreamTransaction";
      
    }unsafe impl::winrt::Interface for StorageStreamTransaction {
      type Vtable = IStorageStreamTransaction_abi;
      const IID: ::winrt::Guid =  <IStorageStreamTransaction as::winrt::Interface>::IID;
      
    }unsafe impl::winrt::RuntimeType for StorageStreamTransaction {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.StorageStreamTransaction;{f67cf363-a53d-4d94-ae2c-67232d93acdd})");
      
    }impl::std::convert::From<StorageStreamTransaction>for::winrt::Object {
      fn from(value:StorageStreamTransaction) -> Self {
        value.0
      }
    }impl::std::convert::From<&StorageStreamTransaction>for::winrt::Object {
      fn from(value: &StorageStreamTransaction) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for StorageStreamTransaction {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a StorageStreamTransaction {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageStreamTransaction>for super::foundation::IClosable {
      fn from(value:StorageStreamTransaction) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageStreamTransaction>for super::foundation::IClosable {
      fn from(value: &StorageStreamTransaction) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for StorageStreamTransaction {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(self,))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for& 'a StorageStreamTransaction {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageStreamTransaction>for IStorageStreamTransaction {
      fn from(value:StorageStreamTransaction) -> Self {
        unsafe {
          ::std::mem::transmute(value)
        }
      }
    }impl::std::convert::From<&StorageStreamTransaction>for IStorageStreamTransaction {
      fn from(value: &StorageStreamTransaction) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageStreamTransaction>>for StorageStreamTransaction {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageStreamTransaction>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageStreamTransaction>::into(self,))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageStreamTransaction>>for& 'a StorageStreamTransaction {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageStreamTransaction>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageStreamTransaction>::into(::std::clone::Clone::clone(self),))
      }
    }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct CreationCollisionOption(i32);
    impl::std::convert::From<i32>for CreationCollisionOption {
      fn from(value:i32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for CreationCollisionOption {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for CreationCollisionOption {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for CreationCollisionOption {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for CreationCollisionOption {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for CreationCollisionOption{}
    impl::std::marker::Copy for CreationCollisionOption{}
    impl CreationCollisionOption {
      #![allow(non_upper_case_globals)]pub const GenerateUniqueName:Self = Self(0i32);
      pub const ReplaceExisting:Self = Self(1i32);
      pub const FailIfExists:Self = Self(2i32);
      pub const OpenIfExists:Self = Self(3i32);
      
    }unsafe impl::winrt::Abi for CreationCollisionOption {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for CreationCollisionOption {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.CreationCollisionOption;i4)",);
      
    }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct NameCollisionOption(i32);
    impl::std::convert::From<i32>for NameCollisionOption {
      fn from(value:i32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for NameCollisionOption {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for NameCollisionOption {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for NameCollisionOption {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for NameCollisionOption {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for NameCollisionOption{}
    impl::std::marker::Copy for NameCollisionOption{}
    impl NameCollisionOption {
      #![allow(non_upper_case_globals)]pub const GenerateUniqueName:Self = Self(0i32);
      pub const ReplaceExisting:Self = Self(1i32);
      pub const FailIfExists:Self = Self(2i32);
      
    }unsafe impl::winrt::Abi for NameCollisionOption {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for NameCollisionOption {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.NameCollisionOption;i4)");
      
    }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct StorageDeleteOption(i32);
    impl::std::convert::From<i32>for StorageDeleteOption {
      fn from(value:i32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for StorageDeleteOption {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for StorageDeleteOption {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for StorageDeleteOption {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for StorageDeleteOption {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for StorageDeleteOption{}
    impl::std::marker::Copy for StorageDeleteOption{}
    impl StorageDeleteOption {
      #![allow(non_upper_case_globals)]pub const Default:Self = Self(0i32);
      pub const PermanentDelete:Self = Self(1i32);
      
    }unsafe impl::winrt::Abi for StorageDeleteOption {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for StorageDeleteOption {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.StorageDeleteOption;i4)");
      
    }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct FileAttributes(u32);
    impl::std::convert::From<u32>for FileAttributes {
      fn from(value:u32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for FileAttributes {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for FileAttributes {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for FileAttributes {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for FileAttributes {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for FileAttributes{}
    impl::std::marker::Copy for FileAttributes{}
    impl FileAttributes {
      #![allow(non_upper_case_globals)]pub const Normal:Self = Self(0u32);
      pub const ReadOnly:Self = Self(1u32);
      pub const Directory:Self = Self(16u32);
      pub const Archive:Self = Self(32u32);
      pub const Temporary:Self = Self(256u32);
      pub const LocallyIncomplete:Self = Self(512u32);
      
    }unsafe impl::winrt::Abi for FileAttributes {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for FileAttributes {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.FileAttributes;u4)");
      
    }impl::std::ops::BitOr for FileAttributes {
      type Output = Self;
      fn bitor(self,rhs:Self) -> Self {
        Self(self.0|rhs.0)
      }
    }impl::std::ops::BitAnd for FileAttributes {
      type Output = Self;
      fn bitand(self,rhs:Self) -> Self {
        Self(self.0&rhs.0)
      }
    }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct StorageItemTypes(u32);
    impl::std::convert::From<u32>for StorageItemTypes {
      fn from(value:u32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for StorageItemTypes {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for StorageItemTypes {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for StorageItemTypes {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for StorageItemTypes {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for StorageItemTypes{}
    impl::std::marker::Copy for StorageItemTypes{}
    impl StorageItemTypes {
      #![allow(non_upper_case_globals)]pub const None:Self = Self(0u32);
      pub const File:Self = Self(1u32);
      pub const Folder:Self = Self(2u32);
      
    }unsafe impl::winrt::Abi for StorageItemTypes {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for StorageItemTypes {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.StorageItemTypes;u4)");
      
    }impl::std::ops::BitOr for StorageItemTypes {
      type Output = Self;
      fn bitor(self,rhs:Self) -> Self {
        Self(self.0|rhs.0)
      }
    }impl::std::ops::BitAnd for StorageItemTypes {
      type Output = Self;
      fn bitand(self,rhs:Self) -> Self {
        Self(self.0&rhs.0)
      }
    }#[repr(transparent)]pub struct IStorageItem(::winrt::Object);
    impl::std::clone::Clone for IStorageItem {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageItem {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageItem {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageItem{}
    impl IStorageItem {
      pub fn rename_async_overload_default_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),desired_name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn rename_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,option:NameCollisionOption,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),desired_name.into().abi(),option, &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn delete_async_overload_default_options(&self,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn delete_async(&self,option:StorageDeleteOption,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),option, &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn get_basic_properties_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::BasicProperties>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::BasicProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::foundation::IAsyncOperation:: <file_properties::BasicProperties> >(result__)
        }
      }pub fn name(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn path(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn attributes(&self) ->  ::winrt::Result<FileAttributes>{
        let this = self;
        unsafe {
          let mut result__: <FileAttributes as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi::<FileAttributes>(result__)
        }
      }pub fn date_created(&self) ->  ::winrt::Result<super::foundation::DateTime>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::DateTime as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::DateTime>(result__)
        }
      }pub fn is_of_type(&self,r#type:StorageItemTypes) ->  ::winrt::Result<bool>{
        let this = self;
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),r#type, &mut result__,).from_abi::<bool>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageItem {
      type Vtable = IStorageItem_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1107798422,51759,17143,[189,232,139,16,69,122,127,48],);
      
    }#[repr(C)]pub struct IStorageItem_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,desired_name: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,desired_name: ::winrt::RawPtr,option:NameCollisionOption,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,option:StorageDeleteOption,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut FileAttributes,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::foundation::DateTime_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,r#type:StorageItemTypes,result__: *mut bool,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageItem {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{4207a996-ca2f-42f7-bde8-8b10457a7f30}")
      };
      
    }impl::std::convert::From<IStorageItem>for::winrt::Object {
      fn from(value:IStorageItem) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageItem>for::winrt::Object {
      fn from(value: &IStorageItem) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageItem {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageItem {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IStorageFolder2(::winrt::Object);
    impl::std::clone::Clone for IStorageFolder2 {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageFolder2 {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageFolder2 {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageFolder2{}
    impl IStorageFolder2 {
      pub fn try_get_item_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<IStorageItem>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <IStorageItem>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<IStorageItem>>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageFolder2 {
      type Vtable = IStorageFolder2_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3894929593,2265,19086,[160,172,254,94,211,203,187,211],);
      
    }#[repr(C)]pub struct IStorageFolder2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,name: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageFolder2 {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{e827e8b9-08d9-4a8e-a0ac-fe5ed3cbbbd3}")
      };
      
    }impl::std::convert::From<IStorageFolder2>for::winrt::Object {
      fn from(value:IStorageFolder2) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageFolder2>for::winrt::Object {
      fn from(value: &IStorageFolder2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageFolder2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageFolder2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct StorageLibraryChangeType(i32);
    impl::std::convert::From<i32>for StorageLibraryChangeType {
      fn from(value:i32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for StorageLibraryChangeType {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for StorageLibraryChangeType {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for StorageLibraryChangeType {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for StorageLibraryChangeType {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for StorageLibraryChangeType{}
    impl::std::marker::Copy for StorageLibraryChangeType{}
    impl StorageLibraryChangeType {
      #![allow(non_upper_case_globals)]pub const Created:Self = Self(0i32);
      pub const Deleted:Self = Self(1i32);
      pub const MovedOrRenamed:Self = Self(2i32);
      pub const ContentsChanged:Self = Self(3i32);
      pub const MovedOutOfLibrary:Self = Self(4i32);
      pub const MovedIntoLibrary:Self = Self(5i32);
      pub const ContentsReplaced:Self = Self(6i32);
      pub const IndexingStatusChanged:Self = Self(7i32);
      pub const EncryptionChanged:Self = Self(8i32);
      pub const ChangeTrackingLost:Self = Self(9i32);
      
    }unsafe impl::winrt::Abi for StorageLibraryChangeType {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for StorageLibraryChangeType {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.StorageLibraryChangeType;i4)",);
      
    }#[repr(transparent)]pub struct IStorageLibraryChange(::winrt::Object);
    impl::std::clone::Clone for IStorageLibraryChange {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageLibraryChange {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageLibraryChange {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageLibraryChange{}
    impl IStorageLibraryChange {
      pub fn change_type(&self) ->  ::winrt::Result<StorageLibraryChangeType>{
        let this = self;
        unsafe {
          let mut result__: <StorageLibraryChangeType as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<StorageLibraryChangeType>(result__)
        }
      }pub fn path(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn previous_path(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn is_of_type(&self,r#type:StorageItemTypes) ->  ::winrt::Result<bool>{
        let this = self;
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),r#type, &mut result__,).from_abi::<bool>(result__)
        }
      }pub fn get_storage_item_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<IStorageItem>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <IStorageItem>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<IStorageItem>>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageLibraryChange {
      type Vtable = IStorageLibraryChange_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(9964323,11234,18697,[170,72,21,159,82,3,165,30],);
      
    }#[repr(C)]pub struct IStorageLibraryChange_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut StorageLibraryChangeType,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,r#type:StorageItemTypes,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageLibraryChange {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{00980b23-2be2-4909-aa48-159f5203a51e}")
      };
      
    }impl::std::convert::From<IStorageLibraryChange>for::winrt::Object {
      fn from(value:IStorageLibraryChange) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageLibraryChange>for::winrt::Object {
      fn from(value: &IStorageLibraryChange) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageLibraryChange {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageLibraryChange {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct StorageLibraryChange(::winrt::Object);
    impl StorageLibraryChange {
      pub fn change_type(&self) ->  ::winrt::Result<StorageLibraryChangeType>{
        let this = self;
        unsafe {
          let mut result__: <StorageLibraryChangeType as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<StorageLibraryChangeType>(result__)
        }
      }pub fn path(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn previous_path(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn is_of_type(&self,r#type:StorageItemTypes) ->  ::winrt::Result<bool>{
        let this = self;
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),r#type, &mut result__,).from_abi::<bool>(result__)
        }
      }pub fn get_storage_item_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<IStorageItem>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <IStorageItem>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<IStorageItem>>(result__)
        }
      }
    }impl::std::clone::Clone for StorageLibraryChange {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for StorageLibraryChange {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for StorageLibraryChange{}
    impl::std::fmt::Debug for StorageLibraryChange {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::winrt::RuntimeName for StorageLibraryChange {
      const NAME: & 'static str = "Windows.Storage.StorageLibraryChange";
      
    }unsafe impl::winrt::Interface for StorageLibraryChange {
      type Vtable = IStorageLibraryChange_abi;
      const IID: ::winrt::Guid =  <IStorageLibraryChange as::winrt::Interface>::IID;
      
    }unsafe impl::winrt::RuntimeType for StorageLibraryChange {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.StorageLibraryChange;{00980b23-2be2-4909-aa48-159f5203a51e})",);
      
    }impl::std::convert::From<StorageLibraryChange>for::winrt::Object {
      fn from(value:StorageLibraryChange) -> Self {
        value.0
      }
    }impl::std::convert::From<&StorageLibraryChange>for::winrt::Object {
      fn from(value: &StorageLibraryChange) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for StorageLibraryChange {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a StorageLibraryChange {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageLibraryChange>for IStorageLibraryChange {
      fn from(value:StorageLibraryChange) -> Self {
        unsafe {
          ::std::mem::transmute(value)
        }
      }
    }impl::std::convert::From<&StorageLibraryChange>for IStorageLibraryChange {
      fn from(value: &StorageLibraryChange) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageLibraryChange>>for StorageLibraryChange {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageLibraryChange>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageLibraryChange>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageLibraryChange>>for& 'a StorageLibraryChange {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageLibraryChange>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageLibraryChange>::into(::std::clone::Clone::clone(self),))
      }
    }unsafe impl::std::marker::Send for StorageLibraryChange{}
    unsafe impl::std::marker::Sync for StorageLibraryChange{}
    #[repr(transparent)]pub struct IStorageLibraryChangeReader(::winrt::Object);
    impl::std::clone::Clone for IStorageLibraryChangeReader {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageLibraryChangeReader {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageLibraryChangeReader {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageLibraryChangeReader{}
    impl IStorageLibraryChangeReader {
      pub fn read_batch_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageLibraryChange>, >, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageLibraryChange>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageLibraryChange>, >>(result__)
        }
      }pub fn accept_changes_async(&self) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageLibraryChangeReader {
      type Vtable = IStorageLibraryChangeReader_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4060462211,64674,16889,[137,84,238,46,153,30,185,111],);
      
    }#[repr(C)]pub struct IStorageLibraryChangeReader_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageLibraryChangeReader {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{f205bc83-fca2-41f9-8954-ee2e991eb96f}")
      };
      
    }impl::std::convert::From<IStorageLibraryChangeReader>for::winrt::Object {
      fn from(value:IStorageLibraryChangeReader) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageLibraryChangeReader>for::winrt::Object {
      fn from(value: &IStorageLibraryChangeReader) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageLibraryChangeReader {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageLibraryChangeReader {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct StorageLibraryChangeReader(::winrt::Object);
    impl StorageLibraryChangeReader {
      pub fn read_batch_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageLibraryChange>, >, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageLibraryChange>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageLibraryChange>, >>(result__)
        }
      }pub fn accept_changes_async(&self) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }
    }impl::std::clone::Clone for StorageLibraryChangeReader {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for StorageLibraryChangeReader {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for StorageLibraryChangeReader{}
    impl::std::fmt::Debug for StorageLibraryChangeReader {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::winrt::RuntimeName for StorageLibraryChangeReader {
      const NAME: & 'static str = "Windows.Storage.StorageLibraryChangeReader";
      
    }unsafe impl::winrt::Interface for StorageLibraryChangeReader {
      type Vtable = IStorageLibraryChangeReader_abi;
      const IID: ::winrt::Guid =  <IStorageLibraryChangeReader as::winrt::Interface>::IID;
      
    }unsafe impl::winrt::RuntimeType for StorageLibraryChangeReader {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.StorageLibraryChangeReader;{f205bc83-fca2-41f9-8954-ee2e991eb96f})");
      
    }impl::std::convert::From<StorageLibraryChangeReader>for::winrt::Object {
      fn from(value:StorageLibraryChangeReader) -> Self {
        value.0
      }
    }impl::std::convert::From<&StorageLibraryChangeReader>for::winrt::Object {
      fn from(value: &StorageLibraryChangeReader) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for StorageLibraryChangeReader {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a StorageLibraryChangeReader {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageLibraryChangeReader>for IStorageLibraryChangeReader {
      fn from(value:StorageLibraryChangeReader) -> Self {
        unsafe {
          ::std::mem::transmute(value)
        }
      }
    }impl::std::convert::From<&StorageLibraryChangeReader>for IStorageLibraryChangeReader {
      fn from(value: &StorageLibraryChangeReader) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageLibraryChangeReader>>for StorageLibraryChangeReader {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageLibraryChangeReader>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageLibraryChangeReader>::into(self,))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageLibraryChangeReader>>for& 'a StorageLibraryChangeReader {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageLibraryChangeReader>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageLibraryChangeReader>::into(::std::clone::Clone::clone(self),))
      }
    }unsafe impl::std::marker::Send for StorageLibraryChangeReader{}
    unsafe impl::std::marker::Sync for StorageLibraryChangeReader{}
    #[repr(transparent)]pub struct IStorageLibraryChangeTracker(::winrt::Object);
    impl::std::clone::Clone for IStorageLibraryChangeTracker {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageLibraryChangeTracker {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageLibraryChangeTracker {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageLibraryChangeTracker{}
    impl IStorageLibraryChangeTracker {
      pub fn get_change_reader(&self) ->  ::winrt::Result<StorageLibraryChangeReader>{
        let this = self;
        unsafe {
          let mut result__: <StorageLibraryChangeReader as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<StorageLibraryChangeReader>(result__)
        }
      }pub fn enable(&self) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this)).ok()
        }
      }pub fn reset(&self) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this)).ok()
        }
      }
    }unsafe impl::winrt::Interface for IStorageLibraryChangeTracker {
      type Vtable = IStorageLibraryChangeTracker_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2652205846,24691,17654,[150,129,116,146,209,40,108,144],);
      
    }#[repr(C)]pub struct IStorageLibraryChangeTracker_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageLibraryChangeTracker {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{9e157316-6073-44f6-9681-7492d1286c90}")
      };
      
    }impl::std::convert::From<IStorageLibraryChangeTracker>for::winrt::Object {
      fn from(value:IStorageLibraryChangeTracker) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageLibraryChangeTracker>for::winrt::Object {
      fn from(value: &IStorageLibraryChangeTracker) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageLibraryChangeTracker {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageLibraryChangeTracker {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct StorageLibraryChangeTracker(::winrt::Object);
    impl StorageLibraryChangeTracker {
      pub fn get_change_reader(&self) ->  ::winrt::Result<StorageLibraryChangeReader>{
        let this = self;
        unsafe {
          let mut result__: <StorageLibraryChangeReader as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<StorageLibraryChangeReader>(result__)
        }
      }pub fn enable(&self) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this)).ok()
        }
      }pub fn reset(&self) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this)).ok()
        }
      }
    }impl::std::clone::Clone for StorageLibraryChangeTracker {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for StorageLibraryChangeTracker {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for StorageLibraryChangeTracker{}
    impl::std::fmt::Debug for StorageLibraryChangeTracker {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::winrt::RuntimeName for StorageLibraryChangeTracker {
      const NAME: & 'static str = "Windows.Storage.StorageLibraryChangeTracker";
      
    }unsafe impl::winrt::Interface for StorageLibraryChangeTracker {
      type Vtable = IStorageLibraryChangeTracker_abi;
      const IID: ::winrt::Guid =  <IStorageLibraryChangeTracker as::winrt::Interface>::IID;
      
    }unsafe impl::winrt::RuntimeType for StorageLibraryChangeTracker {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.StorageLibraryChangeTracker;{9e157316-6073-44f6-9681-7492d1286c90})");
      
    }impl::std::convert::From<StorageLibraryChangeTracker>for::winrt::Object {
      fn from(value:StorageLibraryChangeTracker) -> Self {
        value.0
      }
    }impl::std::convert::From<&StorageLibraryChangeTracker>for::winrt::Object {
      fn from(value: &StorageLibraryChangeTracker) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for StorageLibraryChangeTracker {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a StorageLibraryChangeTracker {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageLibraryChangeTracker>for IStorageLibraryChangeTracker {
      fn from(value:StorageLibraryChangeTracker) -> Self {
        unsafe {
          ::std::mem::transmute(value)
        }
      }
    }impl::std::convert::From<&StorageLibraryChangeTracker>for IStorageLibraryChangeTracker {
      fn from(value: &StorageLibraryChangeTracker) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageLibraryChangeTracker>>for StorageLibraryChangeTracker {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageLibraryChangeTracker>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageLibraryChangeTracker>::into(self,))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageLibraryChangeTracker>>for& 'a StorageLibraryChangeTracker {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageLibraryChangeTracker>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageLibraryChangeTracker>::into(::std::clone::Clone::clone(self),))
      }
    }unsafe impl::std::marker::Send for StorageLibraryChangeTracker{}
    unsafe impl::std::marker::Sync for StorageLibraryChangeTracker{}
    #[repr(transparent)]pub struct IStorageFolder3(::winrt::Object);
    impl::std::clone::Clone for IStorageFolder3 {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageFolder3 {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageFolder3 {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageFolder3{}
    impl IStorageFolder3 {
      pub fn try_get_change_tracker(&self) ->  ::winrt::Result<StorageLibraryChangeTracker>{
        let this = self;
        unsafe {
          let mut result__: <StorageLibraryChangeTracker as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<StorageLibraryChangeTracker>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageFolder3 {
      type Vtable = IStorageFolder3_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2673965209,48609,16676,[174,179,176,106,217,111,152,212],);
      
    }#[repr(C)]pub struct IStorageFolder3_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageFolder3 {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{9f617899-bde1-4124-aeb3-b06ad96f98d4}")
      };
      
    }impl::std::convert::From<IStorageFolder3>for::winrt::Object {
      fn from(value:IStorageFolder3) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageFolder3>for::winrt::Object {
      fn from(value: &IStorageFolder3) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageFolder3 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageFolder3 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IStorageFolderStatics(::winrt::Object);
    impl::std::clone::Clone for IStorageFolderStatics {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageFolderStatics {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageFolderStatics {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageFolderStatics{}
    impl IStorageFolderStatics {
      pub fn get_folder_from_path_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,path:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFolder>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),path.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageFolderStatics {
      type Vtable = IStorageFolderStatics_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(150153215,34261,18617,[174,233,40,81,30,51,159,159],);
      
    }#[repr(C)]pub struct IStorageFolderStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,path: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageFolderStatics {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{08f327ff-85d5-48b9-aee9-28511e339f9f}")
      };
      
    }impl::std::convert::From<IStorageFolderStatics>for::winrt::Object {
      fn from(value:IStorageFolderStatics) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageFolderStatics>for::winrt::Object {
      fn from(value: &IStorageFolderStatics) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageFolderStatics {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageFolderStatics {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IStorageFolderStatics2(::winrt::Object);
    impl::std::clone::Clone for IStorageFolderStatics2 {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageFolderStatics2 {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageFolderStatics2 {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageFolderStatics2{}
    impl IStorageFolderStatics2 {
      pub fn get_folder_from_path_for_user_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::system::User>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,user:T0__,path:T1__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFolder>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),user.into().abi(),path.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageFolderStatics2 {
      type Vtable = IStorageFolderStatics2_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3026546115,29138,18045,[139,41,55,31,15,98,191,111],);
      
    }#[repr(C)]pub struct IStorageFolderStatics2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,user: ::winrt::RawPtr,path: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageFolderStatics2 {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{b4656dc3-71d2-467d-8b29-371f0f62bf6f}")
      };
      
    }impl::std::convert::From<IStorageFolderStatics2>for::winrt::Object {
      fn from(value:IStorageFolderStatics2) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageFolderStatics2>for::winrt::Object {
      fn from(value: &IStorageFolderStatics2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageFolderStatics2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageFolderStatics2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IStorageItem2(::winrt::Object);
    impl::std::clone::Clone for IStorageItem2 {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageItem2 {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageItem2 {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageItem2{}
    impl IStorageItem2 {
      pub fn rename_async_overload_default_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),desired_name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn rename_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,option:NameCollisionOption,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),desired_name.into().abi(),option, &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn delete_async_overload_default_options(&self,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn delete_async(&self,option:StorageDeleteOption,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),option, &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn get_basic_properties_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::BasicProperties>>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::BasicProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::foundation::IAsyncOperation:: <file_properties::BasicProperties> >(result__)
        }
      }pub fn name(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn path(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn attributes(&self) ->  ::winrt::Result<FileAttributes>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <FileAttributes as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi::<FileAttributes>(result__)
        }
      }pub fn date_created(&self) ->  ::winrt::Result<super::foundation::DateTime>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::DateTime as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::DateTime>(result__)
        }
      }pub fn is_of_type(&self,r#type:StorageItemTypes) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),r#type, &mut result__,).from_abi::<bool>(result__)
        }
      }pub fn get_parent_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFolder>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
        }
      }pub fn is_equal< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageItem>>>(&self,item:T0__,) ->  ::winrt::Result<bool>{
        let this = self;
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),item.into().abi(), &mut result__,).from_abi::<bool>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageItem2 {
      type Vtable = IStorageItem2_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1408837330,2108,17027,[180,91,129,192,7,35,126,68],);
      
    }#[repr(C)]pub struct IStorageItem2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,item: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageItem2 {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{53f926d2-083c-4283-b45b-81c007237e44}")
      };
      
    }impl::std::convert::From<IStorageItem2>for::winrt::Object {
      fn from(value:IStorageItem2) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageItem2>for::winrt::Object {
      fn from(value: &IStorageItem2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageItem2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageItem2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<IStorageItem2>for IStorageItem {
      fn from(value:IStorageItem2) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&IStorageItem2>for IStorageItem {
      fn from(value: &IStorageItem2) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItem>>for IStorageItem2 {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItem>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItem>>for& 'a IStorageItem2 {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItem>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IStorageItemProperties(::winrt::Object);
    impl::std::clone::Clone for IStorageItemProperties {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageItemProperties {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageItemProperties {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageItemProperties{}
    impl IStorageItemProperties {
      pub fn get_thumbnail_async_overload_default_size_default_options(&self,mode:file_properties::ThumbnailMode,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),mode, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn get_thumbnail_async_overload_default_options(&self,mode:file_properties::ThumbnailMode,requested_size:u32,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),mode,requested_size, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn get_thumbnail_async(&self,mode:file_properties::ThumbnailMode,requested_size:u32,options:file_properties::ThumbnailOptions,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),mode,requested_size,options, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn display_name(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn display_type(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn folder_relative_id(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn properties(&self,) ->  ::winrt::Result<file_properties::StorageItemContentProperties>{
        let this = self;
        unsafe {
          let mut result__: <file_properties::StorageItemContentProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__).from_abi::<file_properties::StorageItemContentProperties>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageItemProperties {
      type Vtable = IStorageItemProperties_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2254849144,32809,18174,[167,137,28,47,62,47,251,92],);
      
    }#[repr(C)]pub struct IStorageItemProperties_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,mode:file_properties::ThumbnailMode,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,mode:file_properties::ThumbnailMode,requested_size:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,mode:file_properties::ThumbnailMode,requested_size:u32,options:file_properties::ThumbnailOptions,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageItemProperties {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{86664478-8029-46fe-a789-1c2f3e2ffb5c}")
      };
      
    }impl::std::convert::From<IStorageItemProperties>for::winrt::Object {
      fn from(value:IStorageItemProperties) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageItemProperties>for::winrt::Object {
      fn from(value: &IStorageItemProperties) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageItemProperties {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageItemProperties {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IStorageItemProperties2(::winrt::Object);
    impl::std::clone::Clone for IStorageItemProperties2 {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageItemProperties2 {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageItemProperties2 {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageItemProperties2{}
    impl IStorageItemProperties2 {
      pub fn get_thumbnail_async_overload_default_size_default_options(&self,mode:file_properties::ThumbnailMode,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),mode, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn get_thumbnail_async_overload_default_options(&self,mode:file_properties::ThumbnailMode,requested_size:u32,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),mode,requested_size, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn get_thumbnail_async(&self,mode:file_properties::ThumbnailMode,requested_size:u32,options:file_properties::ThumbnailOptions,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),mode,requested_size,options, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn display_name(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn display_type(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn folder_relative_id(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn properties(&self,) ->  ::winrt::Result<file_properties::StorageItemContentProperties>{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <file_properties::StorageItemContentProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__).from_abi::<file_properties::StorageItemContentProperties>(result__)
        }
      }pub fn get_scaled_image_as_thumbnail_async_overload_default_size_default_options(&self,mode:file_properties::ThumbnailMode,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),mode, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn get_scaled_image_as_thumbnail_async_overload_default_options(&self,mode:file_properties::ThumbnailMode,requested_size:u32,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),mode,requested_size, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn get_scaled_image_as_thumbnail_async(&self,mode:file_properties::ThumbnailMode,requested_size:u32,options:file_properties::ThumbnailOptions,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),mode,requested_size,options, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageItemProperties2 {
      type Vtable = IStorageItemProperties2_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2391189841,1209,19410,[146,157,254,243,247,22,33,208],);
      
    }#[repr(C)]pub struct IStorageItemProperties2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,mode:file_properties::ThumbnailMode,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,mode:file_properties::ThumbnailMode,requested_size:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,mode:file_properties::ThumbnailMode,requested_size:u32,options:file_properties::ThumbnailOptions,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageItemProperties2 {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{8e86a951-04b9-4bd2-929d-fef3f71621d0}")
      };
      
    }impl::std::convert::From<IStorageItemProperties2>for::winrt::Object {
      fn from(value:IStorageItemProperties2) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageItemProperties2>for::winrt::Object {
      fn from(value: &IStorageItemProperties2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageItemProperties2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageItemProperties2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<IStorageItemProperties2>for IStorageItemProperties {
      fn from(value:IStorageItemProperties2) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&IStorageItemProperties2>for IStorageItemProperties {
      fn from(value: &IStorageItemProperties2) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemProperties>>for IStorageItemProperties2 {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItemProperties>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemProperties>>for& 'a IStorageItemProperties2 {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItemProperties>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IStorageProvider(::winrt::Object);
    impl::std::clone::Clone for IStorageProvider {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageProvider {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageProvider {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageProvider{}
    impl IStorageProvider {
      pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn display_name(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageProvider {
      type Vtable = IStorageProvider_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3875925716,54392,18390,[186,70,26,142,190,17,74,32],);
      
    }#[repr(C)]pub struct IStorageProvider_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageProvider {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{e705eed4-d478-47d6-ba46-1a8ebe114a20}")
      };
      
    }impl::std::convert::From<IStorageProvider>for::winrt::Object {
      fn from(value:IStorageProvider) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageProvider>for::winrt::Object {
      fn from(value: &IStorageProvider) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageProvider {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageProvider {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IStorageProvider2(::winrt::Object);
    impl::std::clone::Clone for IStorageProvider2 {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageProvider2 {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageProvider2 {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageProvider2{}
    impl IStorageProvider2 {
      pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageProvider>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn display_name(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageProvider>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn is_property_supported_for_partial_file_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,property_canonical_name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<bool>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <bool>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),property_canonical_name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<bool>>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageProvider2 {
      type Vtable = IStorageProvider2_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(17635607,13316,16715,[159,215,205,68,71,46,170,57],);
      
    }#[repr(C)]pub struct IStorageProvider2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,property_canonical_name: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageProvider2 {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{010d1917-3404-414b-9fd7-cd44472eaa39}")
      };
      
    }impl::std::convert::From<IStorageProvider2>for::winrt::Object {
      fn from(value:IStorageProvider2) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageProvider2>for::winrt::Object {
      fn from(value: &IStorageProvider2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageProvider2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageProvider2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<IStorageProvider2>for IStorageProvider {
      fn from(value:IStorageProvider2) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&IStorageProvider2>for IStorageProvider {
      fn from(value: &IStorageProvider2) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageProvider>>for IStorageProvider2 {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageProvider>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageProvider>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageProvider>>for& 'a IStorageProvider2 {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageProvider>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageProvider>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct StorageProvider(::winrt::Object);
    impl StorageProvider {
      pub fn id(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn display_name(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn is_property_supported_for_partial_file_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,property_canonical_name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<bool>>{
        let this =  &::winrt::Interface::cast::<IStorageProvider2>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <bool>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),property_canonical_name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<bool>>(result__)
        }
      }
    }impl::std::clone::Clone for StorageProvider {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for StorageProvider {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for StorageProvider{}
    impl::std::fmt::Debug for StorageProvider {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::winrt::RuntimeName for StorageProvider {
      const NAME: & 'static str = "Windows.Storage.StorageProvider";
      
    }unsafe impl::winrt::Interface for StorageProvider {
      type Vtable = IStorageProvider_abi;
      const IID: ::winrt::Guid =  <IStorageProvider as::winrt::Interface>::IID;
      
    }unsafe impl::winrt::RuntimeType for StorageProvider {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.StorageProvider;{e705eed4-d478-47d6-ba46-1a8ebe114a20})",);
      
    }impl::std::convert::From<StorageProvider>for::winrt::Object {
      fn from(value:StorageProvider) -> Self {
        value.0
      }
    }impl::std::convert::From<&StorageProvider>for::winrt::Object {
      fn from(value: &StorageProvider) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for StorageProvider {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a StorageProvider {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageProvider>for IStorageProvider {
      fn from(value:StorageProvider) -> Self {
        unsafe {
          ::std::mem::transmute(value)
        }
      }
    }impl::std::convert::From<&StorageProvider>for IStorageProvider {
      fn from(value: &StorageProvider) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageProvider>>for StorageProvider {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageProvider>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageProvider>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageProvider>>for& 'a StorageProvider {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageProvider>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageProvider>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageProvider>for IStorageProvider2 {
      fn from(value:StorageProvider) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageProvider>for IStorageProvider2 {
      fn from(value: &StorageProvider) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageProvider2>>for StorageProvider {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageProvider2>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageProvider2>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageProvider2>>for& 'a StorageProvider {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageProvider2>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageProvider2>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IStorageItemPropertiesWithProvider(::winrt::Object);
    impl::std::clone::Clone for IStorageItemPropertiesWithProvider {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageItemPropertiesWithProvider {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageItemPropertiesWithProvider {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageItemPropertiesWithProvider{}
    impl IStorageItemPropertiesWithProvider {
      pub fn get_thumbnail_async_overload_default_size_default_options(&self,mode:file_properties::ThumbnailMode,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),mode, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn get_thumbnail_async_overload_default_options(&self,mode:file_properties::ThumbnailMode,requested_size:u32,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),mode,requested_size, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn get_thumbnail_async(&self,mode:file_properties::ThumbnailMode,requested_size:u32,options:file_properties::ThumbnailOptions,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),mode,requested_size,options, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn display_name(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn display_type(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn folder_relative_id(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn properties(&self,) ->  ::winrt::Result<file_properties::StorageItemContentProperties>{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <file_properties::StorageItemContentProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__).from_abi::<file_properties::StorageItemContentProperties>(result__)
        }
      }pub fn provider(&self) ->  ::winrt::Result<StorageProvider>{
        let this = self;
        unsafe {
          let mut result__: <StorageProvider as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<StorageProvider>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageItemPropertiesWithProvider {
      type Vtable = IStorageItemPropertiesWithProvider_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2249978779,25448,19950,[180,14,116,104,74,92,231,20],);
      
    }#[repr(C)]pub struct IStorageItemPropertiesWithProvider_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageItemPropertiesWithProvider {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{861bf39b-6368-4dee-b40e-74684a5ce714}")
      };
      
    }impl::std::convert::From<IStorageItemPropertiesWithProvider>for::winrt::Object {
      fn from(value:IStorageItemPropertiesWithProvider) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageItemPropertiesWithProvider>for::winrt::Object {
      fn from(value: &IStorageItemPropertiesWithProvider) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageItemPropertiesWithProvider {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageItemPropertiesWithProvider {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<IStorageItemPropertiesWithProvider>for IStorageItemProperties {
      fn from(value:IStorageItemPropertiesWithProvider) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&IStorageItemPropertiesWithProvider>for IStorageItemProperties {
      fn from(value: &IStorageItemPropertiesWithProvider) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemProperties>>for IStorageItemPropertiesWithProvider {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItemProperties>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemProperties>>for& 'a IStorageItemPropertiesWithProvider {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItemProperties>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct StorageFolder(::winrt::Object);
    impl StorageFolder {
      pub fn create_file_async_overload_default_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),desired_name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn create_file_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,options:CreationCollisionOption,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),desired_name.into().abi(),options, &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn create_folder_async_overload_default_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFolder>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),desired_name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
        }
      }pub fn create_folder_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,options:CreationCollisionOption,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFolder>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),desired_name.into().abi(),options, &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
        }
      }pub fn get_file_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn get_folder_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFolder>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
        }
      }pub fn get_item_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<IStorageItem>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <IStorageItem>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<IStorageItem>>(result__)
        }
      }pub fn get_files_async_overload_default_options_start_and_count(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFile>, >, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFile>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFile>, >>(result__)
        }
      }pub fn get_folders_async_overload_default_options_start_and_count(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFolder>, >, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFolder>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFolder>, >>(result__)
        }
      }pub fn get_items_async_overload_default_start_and_count(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<IStorageItem>, >, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<IStorageItem>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<IStorageItem>, >>(result__)
        }
      }pub fn try_get_item_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<IStorageItem>>{
        let this =  &::winrt::Interface::cast::<IStorageFolder2>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <IStorageItem>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<IStorageItem>>(result__)
        }
      }pub fn try_get_change_tracker(&self) ->  ::winrt::Result<StorageLibraryChangeTracker>{
        let this =  &::winrt::Interface::cast::<IStorageFolder3>(self).unwrap();
        unsafe {
          let mut result__: <StorageLibraryChangeTracker as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<StorageLibraryChangeTracker>(result__)
        }
      }pub fn get_folder_from_path_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(path:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>>{
        Self::IStorageFolderStatics(|this|unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFolder>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),path.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
        })
      }pub fn get_folder_from_path_for_user_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::system::User>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(user:T0__,path:T1__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>>{
        Self::IStorageFolderStatics2(|this|unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFolder>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),user.into().abi(),path.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
        })
      }pub fn rename_async_overload_default_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),desired_name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn rename_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,option:NameCollisionOption,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),desired_name.into().abi(),option, &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn delete_async_overload_default_options(&self,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn delete_async(&self,option:StorageDeleteOption,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),option, &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn get_basic_properties_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::BasicProperties>>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::BasicProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::foundation::IAsyncOperation:: <file_properties::BasicProperties> >(result__)
        }
      }pub fn name(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn path(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn attributes(&self) ->  ::winrt::Result<FileAttributes>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <FileAttributes as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi::<FileAttributes>(result__)
        }
      }pub fn date_created(&self) ->  ::winrt::Result<super::foundation::DateTime>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::DateTime as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::DateTime>(result__)
        }
      }pub fn is_of_type(&self,r#type:StorageItemTypes) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),r#type, &mut result__,).from_abi::<bool>(result__)
        }
      }pub fn get_parent_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>>{
        let this =  &::winrt::Interface::cast::<IStorageItem2>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFolder>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
        }
      }pub fn is_equal< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageItem>>>(&self,item:T0__,) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<IStorageItem2>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),item.into().abi(), &mut result__,).from_abi::<bool>(result__)
        }
      }pub fn get_thumbnail_async_overload_default_size_default_options(&self,mode:file_properties::ThumbnailMode,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),mode, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn get_thumbnail_async_overload_default_options(&self,mode:file_properties::ThumbnailMode,requested_size:u32,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),mode,requested_size, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn get_thumbnail_async(&self,mode:file_properties::ThumbnailMode,requested_size:u32,options:file_properties::ThumbnailOptions,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),mode,requested_size,options, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn display_name(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn display_type(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn folder_relative_id(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn properties(&self,) ->  ::winrt::Result<file_properties::StorageItemContentProperties>{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <file_properties::StorageItemContentProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__).from_abi::<file_properties::StorageItemContentProperties>(result__)
        }
      }pub fn get_scaled_image_as_thumbnail_async_overload_default_size_default_options(&self,mode:file_properties::ThumbnailMode,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties2>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),mode, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn get_scaled_image_as_thumbnail_async_overload_default_options(&self,mode:file_properties::ThumbnailMode,requested_size:u32,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties2>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),mode,requested_size, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn get_scaled_image_as_thumbnail_async(&self,mode:file_properties::ThumbnailMode,requested_size:u32,options:file_properties::ThumbnailOptions,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties2>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),mode,requested_size,options, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn provider(&self) ->  ::winrt::Result<StorageProvider>{
        let this =  &::winrt::Interface::cast::<IStorageItemPropertiesWithProvider>(self).unwrap();
        unsafe {
          let mut result__: <StorageProvider as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<StorageProvider>(result__)
        }
      }pub fn get_indexed_state_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<search::IndexedState>>{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <search::IndexedState>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::foundation::IAsyncOperation:: <search::IndexedState> >(result__)
        }
      }pub fn create_file_query_overload_default(&self,) ->  ::winrt::Result<search::StorageFileQueryResult>{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <search::StorageFileQueryResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<search::StorageFileQueryResult>(result__)
        }
      }pub fn create_file_query(&self,query:search::CommonFileQuery,) ->  ::winrt::Result<search::StorageFileQueryResult>{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <search::StorageFileQueryResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),query, &mut result__,).from_abi::<search::StorageFileQueryResult>(result__)
        }
      }pub fn create_file_query_with_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,search::QueryOptions>>, >(&self,query_options:T0__,) ->  ::winrt::Result<search::StorageFileQueryResult>{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <search::StorageFileQueryResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),query_options.into().abi(), &mut result__,).from_abi::<search::StorageFileQueryResult>(result__)
        }
      }pub fn create_folder_query_overload_default(&self,) ->  ::winrt::Result<search::StorageFolderQueryResult>{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <search::StorageFolderQueryResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi::<search::StorageFolderQueryResult>(result__)
        }
      }pub fn create_folder_query(&self,query:search::CommonFolderQuery,) ->  ::winrt::Result<search::StorageFolderQueryResult>{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <search::StorageFolderQueryResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),query, &mut result__,).from_abi::<search::StorageFolderQueryResult>(result__)
        }
      }pub fn create_folder_query_with_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,search::QueryOptions>>, >(&self,query_options:T0__,) ->  ::winrt::Result<search::StorageFolderQueryResult>{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <search::StorageFolderQueryResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),query_options.into().abi(), &mut result__,).from_abi::<search::StorageFolderQueryResult>(result__)
        }
      }pub fn create_item_query(&self) ->  ::winrt::Result<search::StorageItemQueryResult>{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <search::StorageItemQueryResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi::<search::StorageItemQueryResult>(result__)
        }
      }pub fn create_item_query_with_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,search::QueryOptions>>, >(&self,query_options:T0__,) ->  ::winrt::Result<search::StorageItemQueryResult>{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <search::StorageItemQueryResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),query_options.into().abi(), &mut result__,).from_abi::<search::StorageItemQueryResult>(result__)
        }
      }pub fn get_files_async(&self,query:search::CommonFileQuery,start_index:u32,max_items_to_retrieve:u32,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFile>, >, >{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFile>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),query,start_index,max_items_to_retrieve, &mut result__,).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFile>, >>(result__)
        }
      }pub fn get_files_async_overload_default_start_and_count(&self,query:search::CommonFileQuery,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFile>, >, >{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFile>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),query, &mut result__,).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFile>, >>(result__)
        }
      }pub fn get_folders_async(&self,query:search::CommonFolderQuery,start_index:u32,max_items_to_retrieve:u32,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFolder>, >, >{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFolder>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),query,start_index,max_items_to_retrieve, &mut result__,).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFolder>, >>(result__)
        }
      }pub fn get_folders_async_overload_default_start_and_count(&self,query:search::CommonFolderQuery,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFolder>, >, >{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFolder>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),query, &mut result__,).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFolder>, >>(result__)
        }
      }pub fn get_items_async(&self,start_index:u32,max_items_to_retrieve:u32,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<IStorageItem>, >, >{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<IStorageItem>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this),start_index,max_items_to_retrieve, &mut result__,).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<IStorageItem>, >>(result__)
        }
      }pub fn are_query_options_supported< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,search::QueryOptions>>, >(&self,query_options:T0__,) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),query_options.into().abi(), &mut result__,).from_abi::<bool>(result__)
        }
      }pub fn is_common_folder_query_supported(&self,query:search::CommonFolderQuery,) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this),query, &mut result__,).from_abi::<bool>(result__)
        }
      }pub fn is_common_file_query_supported(&self,query:search::CommonFileQuery,) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<search::IStorageFolderQueryOperations>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this),query, &mut result__,).from_abi::<bool>(result__)
        }
      }#[allow(non_snake_case)]fn IStorageFolderStatics<R,F:FnOnce(&IStorageFolderStatics) ->  ::winrt::Result<R>>(callback:F,) ->  ::winrt::Result<R>{
        static mut SHARED: ::winrt::FactoryCache<StorageFolder,IStorageFolderStatics>  =  ::winrt::FactoryCache::new();
        unsafe {
          SHARED.call(callback)
        }
      }#[allow(non_snake_case)]fn IStorageFolderStatics2<R,F:FnOnce(&IStorageFolderStatics2) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
        static mut SHARED: ::winrt::FactoryCache<StorageFolder,IStorageFolderStatics2>  =  ::winrt::FactoryCache::new();
        unsafe {
          SHARED.call(callback)
        }
      }
    }impl::std::clone::Clone for StorageFolder {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for StorageFolder {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for StorageFolder{}
    impl::std::fmt::Debug for StorageFolder {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::winrt::RuntimeName for StorageFolder {
      const NAME: & 'static str = "Windows.Storage.StorageFolder";
      
    }unsafe impl::winrt::Interface for StorageFolder {
      type Vtable = IStorageFolder_abi;
      const IID: ::winrt::Guid =  <IStorageFolder as::winrt::Interface>::IID;
      
    }unsafe impl::winrt::RuntimeType for StorageFolder {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.StorageFolder;{72d1cb78-b3ef-4f75-a80b-6fd9dae2944b})",);
      
    }impl::std::convert::From<StorageFolder>for::winrt::Object {
      fn from(value:StorageFolder) -> Self {
        value.0
      }
    }impl::std::convert::From<&StorageFolder>for::winrt::Object {
      fn from(value: &StorageFolder) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageFolder>for IStorageFolder {
      fn from(value:StorageFolder) -> Self {
        unsafe {
          ::std::mem::transmute(value)
        }
      }
    }impl::std::convert::From<&StorageFolder>for IStorageFolder {
      fn from(value: &StorageFolder) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder>>for StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageFolder>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageFolder>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder>>for& 'a StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageFolder>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageFolder>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageFolder>for IStorageFolder2 {
      fn from(value:StorageFolder) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFolder>for IStorageFolder2 {
      fn from(value: &StorageFolder) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder2>>for StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageFolder2>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageFolder2>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder2>>for& 'a StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageFolder2>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageFolder2>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageFolder>for IStorageFolder3 {
      fn from(value:StorageFolder) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFolder>for IStorageFolder3 {
      fn from(value: &StorageFolder) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder3>>for StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageFolder3>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageFolder3>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder3>>for& 'a StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageFolder3>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageFolder3>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageFolder>for IStorageItem {
      fn from(value:StorageFolder) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFolder>for IStorageItem {
      fn from(value: &StorageFolder) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItem>>for StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItem>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItem>>for& 'a StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItem>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageFolder>for IStorageItem2 {
      fn from(value:StorageFolder) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFolder>for IStorageItem2 {
      fn from(value: &StorageFolder) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItem2>>for StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItem2>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItem2>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItem2>>for& 'a StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItem2>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItem2>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageFolder>for IStorageItemProperties {
      fn from(value:StorageFolder) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFolder>for IStorageItemProperties {
      fn from(value: &StorageFolder) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemProperties>>for StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItemProperties>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemProperties>>for& 'a StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItemProperties>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageFolder>for IStorageItemProperties2 {
      fn from(value:StorageFolder) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFolder>for IStorageItemProperties2 {
      fn from(value: &StorageFolder) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemProperties2>>for StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItemProperties2>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties2>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemProperties2>>for& 'a StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItemProperties2>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties2>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageFolder>for IStorageItemPropertiesWithProvider {
      fn from(value:StorageFolder) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFolder>for IStorageItemPropertiesWithProvider {
      fn from(value: &StorageFolder) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemPropertiesWithProvider>>for StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItemPropertiesWithProvider>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItemPropertiesWithProvider>::into(self),)
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemPropertiesWithProvider>>for& 'a StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItemPropertiesWithProvider>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItemPropertiesWithProvider>::into(::std::clone::Clone::clone(self),),)
      }
    }impl::std::convert::From<StorageFolder>for search::IStorageFolderQueryOperations {
      fn from(value:StorageFolder) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFolder>for search::IStorageFolderQueryOperations {
      fn from(value: &StorageFolder) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,search::IStorageFolderQueryOperations>>for StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,search::IStorageFolderQueryOperations>{
        ::winrt::Param::Owned(::std::convert::Into::<search::IStorageFolderQueryOperations>::into(self),)
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,search::IStorageFolderQueryOperations>>for& 'a StorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,search::IStorageFolderQueryOperations>{
        ::winrt::Param::Owned(::std::convert::Into::<search::IStorageFolderQueryOperations>::into(::std::clone::Clone::clone(self),),)
      }
    }#[repr(transparent)]pub struct IStorageFolder(::winrt::Object);
    impl::std::clone::Clone for IStorageFolder {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageFolder {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageFolder {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageFolder{}
    impl IStorageFolder {
      pub fn create_file_async_overload_default_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),desired_name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn create_file_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,options:CreationCollisionOption,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),desired_name.into().abi(),options, &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn create_folder_async_overload_default_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFolder>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),desired_name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
        }
      }pub fn create_folder_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,options:CreationCollisionOption,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFolder>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),desired_name.into().abi(),options, &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
        }
      }pub fn get_file_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn get_folder_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFolder>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
        }
      }pub fn get_item_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<IStorageItem>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <IStorageItem>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<IStorageItem>>(result__)
        }
      }pub fn get_files_async_overload_default_options_start_and_count(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFile>, >, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFile>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFile>, >>(result__)
        }
      }pub fn get_folders_async_overload_default_options_start_and_count(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFolder>, >, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFolder>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<StorageFolder>, >>(result__)
        }
      }pub fn get_items_async_overload_default_start_and_count(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<IStorageItem>, >, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<IStorageItem>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<IStorageItem>, >>(result__)
        }
      }pub fn rename_async_overload_default_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),desired_name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn rename_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,option:NameCollisionOption,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),desired_name.into().abi(),option, &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn delete_async_overload_default_options(&self,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn delete_async(&self,option:StorageDeleteOption,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),option, &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn get_basic_properties_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::BasicProperties>>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::BasicProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::foundation::IAsyncOperation:: <file_properties::BasicProperties> >(result__)
        }
      }pub fn name(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn path(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn attributes(&self) ->  ::winrt::Result<FileAttributes>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <FileAttributes as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi::<FileAttributes>(result__)
        }
      }pub fn date_created(&self) ->  ::winrt::Result<super::foundation::DateTime>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::DateTime as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::DateTime>(result__)
        }
      }pub fn is_of_type(&self,r#type:StorageItemTypes) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),r#type, &mut result__,).from_abi::<bool>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageFolder {
      type Vtable = IStorageFolder_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1926351736,46063,20341,[168,11,111,217,218,226,148,75],);
      
    }#[repr(C)]pub struct IStorageFolder_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,desired_name: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,desired_name: ::winrt::RawPtr,options:CreationCollisionOption,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,desired_name: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,desired_name: ::winrt::RawPtr,options:CreationCollisionOption,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,name: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,name: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,name: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageFolder {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{72d1cb78-b3ef-4f75-a80b-6fd9dae2944b}")
      };
      
    }impl::std::convert::From<IStorageFolder>for::winrt::Object {
      fn from(value:IStorageFolder) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageFolder>for::winrt::Object {
      fn from(value: &IStorageFolder) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageFolder {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageFolder {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<IStorageFolder>for IStorageItem {
      fn from(value:IStorageFolder) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&IStorageFolder>for IStorageItem {
      fn from(value: &IStorageFolder) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItem>>for IStorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItem>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItem>>for& 'a IStorageFolder {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItem>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IStorageFile(::winrt::Object);
    impl::std::clone::Clone for IStorageFile {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageFile {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageFile {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageFile{}
    impl IStorageFile {
      pub fn file_type(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn content_type(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn open_async(&self,access_mode:FileAccessMode,) ->  ::winrt::Result<super::foundation::IAsyncOperation<streams::IRandomAccessStream>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<streams::IRandomAccessStream, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),access_mode, &mut result__,).from_abi::<super::foundation::IAsyncOperation<streams::IRandomAccessStream, >>(result__)
        }
      }pub fn open_transacted_write_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageStreamTransaction>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageStreamTransaction>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<StorageStreamTransaction>>(result__,)
        }
      }pub fn copy_overload_default_name_and_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder>>, >(&self,destination_folder:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),destination_folder.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn copy_overload_default_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,destination_folder:T0__,desired_new_name:T1__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),destination_folder.into().abi(),desired_new_name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn copy_overload< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,destination_folder:T0__,desired_new_name:T1__,option:NameCollisionOption,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),destination_folder.into().abi(),desired_new_name.into().abi(),option, &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn copy_and_replace_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFile>>, >(&self,file_to_replace:T0__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),file_to_replace.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn move_overload_default_name_and_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder>>, >(&self,destination_folder:T0__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),destination_folder.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn move_overload_default_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,destination_folder:T0__,desired_new_name:T1__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),destination_folder.into().abi(),desired_new_name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn move_overload< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,destination_folder:T0__,desired_new_name:T1__,option:NameCollisionOption,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),destination_folder.into().abi(),desired_new_name.into().abi(),option, &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn move_and_replace_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFile>>, >(&self,file_to_replace:T0__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),file_to_replace.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn rename_async_overload_default_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),desired_name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn rename_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,option:NameCollisionOption,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),desired_name.into().abi(),option, &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn delete_async_overload_default_options(&self,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn delete_async(&self,option:StorageDeleteOption,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),option, &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn get_basic_properties_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::BasicProperties>>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::BasicProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::foundation::IAsyncOperation:: <file_properties::BasicProperties> >(result__)
        }
      }pub fn name(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn path(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn attributes(&self) ->  ::winrt::Result<FileAttributes>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <FileAttributes as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi::<FileAttributes>(result__)
        }
      }pub fn date_created(&self) ->  ::winrt::Result<super::foundation::DateTime>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::DateTime as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::DateTime>(result__)
        }
      }pub fn is_of_type(&self,r#type:StorageItemTypes) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),r#type, &mut result__,).from_abi::<bool>(result__)
        }
      }pub fn open_sequential_read_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<streams::IInputStream>>{
        let this =  &::winrt::Interface::cast::<streams::IInputStreamReference>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <streams::IInputStream>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::foundation::IAsyncOperation:: <streams::IInputStream> >(result__)
        }
      }pub fn open_read_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<streams::IRandomAccessStreamWithContentType>, >{
        let this =  &::winrt::Interface::cast::<streams::IRandomAccessStreamReference>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<streams::IRandomAccessStreamWithContentType, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::foundation::IAsyncOperation:: <streams::IRandomAccessStreamWithContentType> >(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageFile {
      type Vtable = IStorageFile_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4198457734,16916,17036,[166,76,20,201,172,115,21,234],);
      
    }#[repr(C)]pub struct IStorageFile_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,access_mode:FileAccessMode,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,destination_folder: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,destination_folder: ::winrt::RawPtr,desired_new_name: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,destination_folder: ::winrt::RawPtr,desired_new_name: ::winrt::RawPtr,option:NameCollisionOption,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,file_to_replace: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,destination_folder: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,destination_folder: ::winrt::RawPtr,desired_new_name: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,destination_folder: ::winrt::RawPtr,desired_new_name: ::winrt::RawPtr,option:NameCollisionOption,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,file_to_replace: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageFile {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{fa3f6186-4214-428c-a64c-14c9ac7315ea}")
      };
      
    }impl::std::convert::From<IStorageFile>for::winrt::Object {
      fn from(value:IStorageFile) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageFile>for::winrt::Object {
      fn from(value: &IStorageFile) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageFile {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageFile {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<IStorageFile>for IStorageItem {
      fn from(value:IStorageFile) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&IStorageFile>for IStorageItem {
      fn from(value: &IStorageFile) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItem>>for IStorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItem>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItem>>for& 'a IStorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItem>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<IStorageFile>for streams::IInputStreamReference {
      fn from(value:IStorageFile) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&IStorageFile>for streams::IInputStreamReference {
      fn from(value: &IStorageFile) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,streams::IInputStreamReference>>for IStorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,streams::IInputStreamReference>{
        ::winrt::Param::Owned(::std::convert::Into::<streams::IInputStreamReference>::into(self),)
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,streams::IInputStreamReference>>for& 'a IStorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,streams::IInputStreamReference>{
        ::winrt::Param::Owned(::std::convert::Into::<streams::IInputStreamReference>::into(::std::clone::Clone::clone(self),),)
      }
    }impl::std::convert::From<IStorageFile>for streams::IRandomAccessStreamReference {
      fn from(value:IStorageFile) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&IStorageFile>for streams::IRandomAccessStreamReference {
      fn from(value: &IStorageFile) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,streams::IRandomAccessStreamReference>>for IStorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,streams::IRandomAccessStreamReference>{
        ::winrt::Param::Owned(::std::convert::Into::<streams::IRandomAccessStreamReference>::into(self),)
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,streams::IRandomAccessStreamReference>>for& 'a IStorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,streams::IRandomAccessStreamReference>{
        ::winrt::Param::Owned(::std::convert::Into::<streams::IRandomAccessStreamReference>::into(::std::clone::Clone::clone(self),),)
      }
    }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct StorageOpenOptions(u32);
    impl::std::convert::From<u32>for StorageOpenOptions {
      fn from(value:u32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for StorageOpenOptions {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for StorageOpenOptions {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for StorageOpenOptions {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for StorageOpenOptions {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for StorageOpenOptions{}
    impl::std::marker::Copy for StorageOpenOptions{}
    impl StorageOpenOptions {
      #![allow(non_upper_case_globals)]pub const None:Self = Self(0u32);
      pub const AllowOnlyReaders:Self = Self(1u32);
      pub const AllowReadersAndWriters:Self = Self(2u32);
      
    }unsafe impl::winrt::Abi for StorageOpenOptions {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for StorageOpenOptions {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.StorageOpenOptions;u4)");
      
    }impl::std::ops::BitOr for StorageOpenOptions {
      type Output = Self;
      fn bitor(self,rhs:Self) -> Self {
        Self(self.0|rhs.0)
      }
    }impl::std::ops::BitAnd for StorageOpenOptions {
      type Output = Self;
      fn bitand(self,rhs:Self) -> Self {
        Self(self.0&rhs.0)
      }
    }#[repr(transparent)]pub struct IStorageFile2(::winrt::Object);
    impl::std::clone::Clone for IStorageFile2 {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageFile2 {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageFile2 {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageFile2{}
    impl IStorageFile2 {
      pub fn open_with_options_async(&self,access_mode:FileAccessMode,options:StorageOpenOptions,) ->  ::winrt::Result<super::foundation::IAsyncOperation<streams::IRandomAccessStream>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<streams::IRandomAccessStream, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),access_mode,options, &mut result__,).from_abi::<super::foundation::IAsyncOperation<streams::IRandomAccessStream, >>(result__)
        }
      }pub fn open_transacted_write_with_options_async(&self,options:StorageOpenOptions,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageStreamTransaction>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageStreamTransaction>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),options, &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageStreamTransaction, >>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageFile2 {
      type Vtable = IStorageFile2_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2504936399,2679,17147,[183,119,194,237,88,165,46,68],);
      
    }#[repr(C)]pub struct IStorageFile2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,access_mode:FileAccessMode,options:StorageOpenOptions,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,options:StorageOpenOptions,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageFile2 {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{954e4bcf-0a77-42fb-b777-c2ed58a52e44}")
      };
      
    }impl::std::convert::From<IStorageFile2>for::winrt::Object {
      fn from(value:IStorageFile2) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageFile2>for::winrt::Object {
      fn from(value: &IStorageFile2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageFile2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageFile2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IStorageFilePropertiesWithAvailability(::winrt::Object);
    impl::std::clone::Clone for IStorageFilePropertiesWithAvailability {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageFilePropertiesWithAvailability {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageFilePropertiesWithAvailability {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageFilePropertiesWithAvailability{}
    impl IStorageFilePropertiesWithAvailability {
      pub fn is_available(&self) ->  ::winrt::Result<bool>{
        let this = self;
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageFilePropertiesWithAvailability {
      type Vtable = IStorageFilePropertiesWithAvailability_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2949365403,22571,16691,[150,72,228,76,164,110,228,145],);
      
    }#[repr(C)]pub struct IStorageFilePropertiesWithAvailability_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageFilePropertiesWithAvailability {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{afcbbe9b-582b-4133-9648-e44ca46ee491}")
      };
      
    }impl::std::convert::From<IStorageFilePropertiesWithAvailability>for::winrt::Object {
      fn from(value:IStorageFilePropertiesWithAvailability) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageFilePropertiesWithAvailability>for::winrt::Object {
      fn from(value: &IStorageFilePropertiesWithAvailability) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageFilePropertiesWithAvailability {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageFilePropertiesWithAvailability {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct StreamedFileFailureMode(i32);
    impl::std::convert::From<i32>for StreamedFileFailureMode {
      fn from(value:i32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for StreamedFileFailureMode {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for StreamedFileFailureMode {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for StreamedFileFailureMode {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for StreamedFileFailureMode {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for StreamedFileFailureMode{}
    impl::std::marker::Copy for StreamedFileFailureMode{}
    impl StreamedFileFailureMode {
      #![allow(non_upper_case_globals)]pub const Failed:Self = Self(0i32);
      pub const CurrentlyUnavailable:Self = Self(1i32);
      pub const Incomplete:Self = Self(2i32);
      
    }unsafe impl::winrt::Abi for StreamedFileFailureMode {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for StreamedFileFailureMode {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.StreamedFileFailureMode;i4)",);
      
    }#[repr(transparent)]pub struct IStreamedFileDataRequest(::winrt::Object);
    impl::std::clone::Clone for IStreamedFileDataRequest {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStreamedFileDataRequest {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStreamedFileDataRequest {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStreamedFileDataRequest{}
    impl IStreamedFileDataRequest {
      pub fn fail_and_close(&self,failure_mode:StreamedFileFailureMode,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),failure_mode).ok()
        }
      }
    }unsafe impl::winrt::Interface for IStreamedFileDataRequest {
      type Vtable = IStreamedFileDataRequest_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(376700110,55997,19792,[190,238,24,11,138,129,145,182],);
      
    }#[repr(C)]pub struct IStreamedFileDataRequest_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,failure_mode:StreamedFileFailureMode,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStreamedFileDataRequest {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{1673fcce-dabd-4d50-beee-180b8a8191b6}")
      };
      
    }impl::std::convert::From<IStreamedFileDataRequest>for::winrt::Object {
      fn from(value:IStreamedFileDataRequest) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStreamedFileDataRequest>for::winrt::Object {
      fn from(value: &IStreamedFileDataRequest) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStreamedFileDataRequest {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStreamedFileDataRequest {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct StreamedFileDataRequest(::winrt::Object);
    impl StreamedFileDataRequest {
      pub fn close(&self) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<super::foundation::IClosable>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
        }
      }pub fn fail_and_close(&self,failure_mode:StreamedFileFailureMode,) ->  ::winrt::Result<()>{
        let this =  &::winrt::Interface::cast::<IStreamedFileDataRequest>(self).unwrap();
        unsafe {
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),failure_mode).ok()
        }
      }pub fn write_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,streams::IBuffer>>, >(&self,buffer:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperationWithProgress<u32,u32>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperationWithProgress:: <u32,u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),buffer.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperationWithProgress<u32,u32>>(result__)
        }
      }pub fn flush_async(&self) ->  ::winrt::Result<super::foundation::IAsyncOperation<bool>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <bool>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<bool>>(result__)
        }
      }
    }impl::std::clone::Clone for StreamedFileDataRequest {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for StreamedFileDataRequest {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for StreamedFileDataRequest{}
    impl::std::fmt::Debug for StreamedFileDataRequest {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::winrt::RuntimeName for StreamedFileDataRequest {
      const NAME: & 'static str = "Windows.Storage.StreamedFileDataRequest";
      
    }unsafe impl::winrt::Interface for StreamedFileDataRequest {
      type Vtable = streams::IOutputStream_abi;
      const IID: ::winrt::Guid =  <streams::IOutputStream as::winrt::Interface>::IID;
      
    }unsafe impl::winrt::RuntimeType for StreamedFileDataRequest {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.StreamedFileDataRequest;{905a0fe6-bc53-11df-8c49-001e4fc686da})");
      
    }impl::std::convert::From<StreamedFileDataRequest>for::winrt::Object {
      fn from(value:StreamedFileDataRequest) -> Self {
        value.0
      }
    }impl::std::convert::From<&StreamedFileDataRequest>for::winrt::Object {
      fn from(value: &StreamedFileDataRequest) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for StreamedFileDataRequest {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a StreamedFileDataRequest {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StreamedFileDataRequest>for super::foundation::IClosable {
      fn from(value:StreamedFileDataRequest) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StreamedFileDataRequest>for super::foundation::IClosable {
      fn from(value: &StreamedFileDataRequest) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for StreamedFileDataRequest {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(self,))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::foundation::IClosable>>for& 'a StreamedFileDataRequest {
      fn into(self) ->  ::winrt::Param< 'a ,super::foundation::IClosable>{
        ::winrt::Param::Owned(::std::convert::Into::<super::foundation::IClosable>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StreamedFileDataRequest>for IStreamedFileDataRequest {
      fn from(value:StreamedFileDataRequest) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StreamedFileDataRequest>for IStreamedFileDataRequest {
      fn from(value: &StreamedFileDataRequest) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStreamedFileDataRequest>>for StreamedFileDataRequest {
      fn into(self) ->  ::winrt::Param< 'a ,IStreamedFileDataRequest>{
        ::winrt::Param::Owned(::std::convert::Into::<IStreamedFileDataRequest>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStreamedFileDataRequest>>for& 'a StreamedFileDataRequest {
      fn into(self) ->  ::winrt::Param< 'a ,IStreamedFileDataRequest>{
        ::winrt::Param::Owned(::std::convert::Into::<IStreamedFileDataRequest>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StreamedFileDataRequest>for streams::IOutputStream {
      fn from(value:StreamedFileDataRequest) -> Self {
        unsafe {
          ::std::mem::transmute(value)
        }
      }
    }impl::std::convert::From<&StreamedFileDataRequest>for streams::IOutputStream {
      fn from(value: &StreamedFileDataRequest) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,streams::IOutputStream>>for StreamedFileDataRequest {
      fn into(self) ->  ::winrt::Param< 'a ,streams::IOutputStream>{
        ::winrt::Param::Owned(::std::convert::Into::<streams::IOutputStream>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,streams::IOutputStream>>for& 'a StreamedFileDataRequest {
      fn into(self) ->  ::winrt::Param< 'a ,streams::IOutputStream>{
        ::winrt::Param::Owned(::std::convert::Into::<streams::IOutputStream>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct StreamedFileDataRequestedHandler(::winrt::IUnknown);
    impl::std::clone::Clone for StreamedFileDataRequestedHandler {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for StreamedFileDataRequestedHandler {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for StreamedFileDataRequestedHandler{}
    impl::std::fmt::Debug for StreamedFileDataRequestedHandler {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }unsafe impl::winrt::Interface for StreamedFileDataRequestedHandler {
      type Vtable = StreamedFileDataRequestedHandler_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(4277577764,12257,19719,[163,91,183,124,80,181,244,204],);
      
    }unsafe impl::winrt::RuntimeType for StreamedFileDataRequestedHandler {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"delegate({fef6a824-2fe1-4d07-a35b-b77c50b5f4cc})",)
      };
      
    }#[repr(C)]pub struct StreamedFileDataRequestedHandler_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,stream: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    impl StreamedFileDataRequestedHandler {
      pub fn invoke< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,StreamedFileDataRequest>>, >(&self,stream:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).3)(::winrt::Abi::abi(this),stream.into().abi(),).ok()
        }
      }pub fn new<F:FnMut(&::std::option::Option<StreamedFileDataRequest>) ->  ::winrt::Result<()> + 'static , >(invoke:F,) -> Self {
        let com = StreamedFileDataRequestedHandler_box::<F>{
          vtable: &StreamedFileDataRequestedHandler_box::<F>::VTABLE,count: ::winrt::RefCount::new(),invoke,
        };
        unsafe {
          std::mem::transmute(::std::boxed::Box::new(com))
        }
      }
    }#[repr(C)]struct StreamedFileDataRequestedHandler_box<F:FnMut(&::std::option::Option<StreamedFileDataRequest>) ->  ::winrt::Result<()> + 'static , >{
      vtable: *const StreamedFileDataRequestedHandler_abi,invoke:F,count: ::winrt::RefCount,
    }#[allow(non_snake_case)]impl<F:FnMut(&::std::option::Option<StreamedFileDataRequest>) ->  ::winrt::Result<()> + 'static , >StreamedFileDataRequestedHandler_box<F>{
      const VTABLE:StreamedFileDataRequestedHandler_abi = StreamedFileDataRequestedHandler_abi(Self::QueryInterface,Self::AddRef,Self::Release,Self::Invoke,);
      unsafe extern "system" fn QueryInterface(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode {
        let this = this as*mut::winrt::RawPtr as*mut Self;
        *interface = if iid== &<StreamedFileDataRequestedHandler as::winrt::Interface>::IID||iid== &<::winrt::IUnknown as::winrt::Interface>::IID||iid== &<::winrt::IAgileObject as::winrt::Interface>::IID {
          &mut(*this).vtable as *mut _ as _
        }else {
          ::std::ptr::null_mut()
        };
        if(*interface).is_null(){
          ::winrt::ErrorCode::E_NOINTERFACE
        }else {
          (*this).count.add_ref();
          ::winrt::ErrorCode::S_OK
        }
      }unsafe extern "system" fn AddRef(this: ::winrt::RawPtr) -> u32 {
        let this = this as*mut::winrt::RawPtr as*mut Self;
        (*this).count.add_ref()
      }unsafe extern "system" fn Release(this: ::winrt::RawPtr) -> u32 {
        let this = this as*mut::winrt::RawPtr as*mut Self;
        let remaining = (*this).count.release();
        if remaining==0 {
          Box::from_raw(this);
          
        }remaining
      }unsafe extern "system" fn Invoke(this: ::winrt::RawPtr,stream: ::winrt::RawPtr,) ->  ::winrt::ErrorCode {
        let this = this as*mut::winrt::RawPtr as*mut Self;
        ((*this).invoke)(&*(&stream as*const<StreamedFileDataRequest as::winrt::Abi>::Abi as*const<StreamedFileDataRequest as::winrt::RuntimeType>::DefaultType),).into()
      }
    }#[repr(transparent)]pub struct IStorageFileStatics(::winrt::Object);
    impl::std::clone::Clone for IStorageFileStatics {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageFileStatics {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageFileStatics {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageFileStatics{}
    impl IStorageFileStatics {
      pub fn get_file_from_path_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,path:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),path.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn get_file_from_application_uri_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::Uri>>, >(&self,uri:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),uri.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn create_streamed_file_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a ,StreamedFileDataRequestedHandler>>,T2__: ::std::convert::Into<::winrt::Param< 'a ,streams::IRandomAccessStreamReference>>, >(&self,display_name_with_extension:T0__,data_requested:T1__,thumbnail:T2__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),display_name_with_extension.into().abi(),data_requested.into().abi(),thumbnail.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn replace_with_streamed_file_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFile>>,T1__: ::std::convert::Into<::winrt::Param< 'a ,StreamedFileDataRequestedHandler>>,T2__: ::std::convert::Into<::winrt::Param< 'a ,streams::IRandomAccessStreamReference>>, >(&self,file_to_replace:T0__,data_requested:T1__,thumbnail:T2__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),file_to_replace.into().abi(),data_requested.into().abi(),thumbnail.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn create_streamed_file_from_uri_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::Uri>>,T2__: ::std::convert::Into<::winrt::Param< 'a ,streams::IRandomAccessStreamReference>>, >(&self,display_name_with_extension:T0__,uri:T1__,thumbnail:T2__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),display_name_with_extension.into().abi(),uri.into().abi(),thumbnail.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn replace_with_streamed_file_from_uri_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFile>>,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::Uri>>,T2__: ::std::convert::Into<::winrt::Param< 'a ,streams::IRandomAccessStreamReference>>, >(&self,file_to_replace:T0__,uri:T1__,thumbnail:T2__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),file_to_replace.into().abi(),uri.into().abi(),thumbnail.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageFileStatics {
      type Vtable = IStorageFileStatics_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1501873936,56050,17352,[139,180,164,211,234,207,208,63],);
      
    }#[repr(C)]pub struct IStorageFileStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,path: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,uri: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,display_name_with_extension: ::winrt::RawPtr,data_requested: ::winrt::RawPtr,thumbnail: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,file_to_replace: ::winrt::RawPtr,data_requested: ::winrt::RawPtr,thumbnail: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,display_name_with_extension: ::winrt::RawPtr,uri: ::winrt::RawPtr,thumbnail: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,file_to_replace: ::winrt::RawPtr,uri: ::winrt::RawPtr,thumbnail: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageFileStatics {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{5984c710-daf2-43c8-8bb4-a4d3eacfd03f}")
      };
      
    }impl::std::convert::From<IStorageFileStatics>for::winrt::Object {
      fn from(value:IStorageFileStatics) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageFileStatics>for::winrt::Object {
      fn from(value: &IStorageFileStatics) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageFileStatics {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageFileStatics {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct IStorageFileStatics2(::winrt::Object);
    impl::std::clone::Clone for IStorageFileStatics2 {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IStorageFileStatics2 {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IStorageFileStatics2 {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IStorageFileStatics2{}
    impl IStorageFileStatics2 {
      pub fn get_file_from_path_for_user_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::system::User>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,user:T0__,path:T1__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),user.into().abi(),path.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IStorageFileStatics2 {
      type Vtable = IStorageFileStatics2_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1551280001,8494,19193,[143,4,116,12,174,16,137,116],);
      
    }#[repr(C)]pub struct IStorageFileStatics2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,user: ::winrt::RawPtr,path: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IStorageFileStatics2 {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{5c76a781-212e-4af9-8f04-740cae108974}")
      };
      
    }impl::std::convert::From<IStorageFileStatics2>for::winrt::Object {
      fn from(value:IStorageFileStatics2) -> Self {
        value.0
      }
    }impl::std::convert::From<&IStorageFileStatics2>for::winrt::Object {
      fn from(value: &IStorageFileStatics2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageFileStatics2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageFileStatics2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct StorageFile(::winrt::Object);
    impl StorageFile {
      pub fn file_type(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn content_type(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn open_async(&self,access_mode:FileAccessMode,) ->  ::winrt::Result<super::foundation::IAsyncOperation<streams::IRandomAccessStream>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<streams::IRandomAccessStream, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),access_mode, &mut result__,).from_abi::<super::foundation::IAsyncOperation<streams::IRandomAccessStream, >>(result__)
        }
      }pub fn open_transacted_write_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageStreamTransaction>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageStreamTransaction>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<StorageStreamTransaction>>(result__,)
        }
      }pub fn copy_overload_default_name_and_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder>>, >(&self,destination_folder:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),destination_folder.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn copy_overload_default_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,destination_folder:T0__,desired_new_name:T1__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),destination_folder.into().abi(),desired_new_name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn copy_overload< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,destination_folder:T0__,desired_new_name:T1__,option:NameCollisionOption,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),destination_folder.into().abi(),desired_new_name.into().abi(),option, &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        }
      }pub fn copy_and_replace_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFile>>, >(&self,file_to_replace:T0__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),file_to_replace.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn move_overload_default_name_and_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder>>, >(&self,destination_folder:T0__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),destination_folder.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn move_overload_default_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,destination_folder:T0__,desired_new_name:T1__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),destination_folder.into().abi(),desired_new_name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn move_overload< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFolder>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,destination_folder:T0__,desired_new_name:T1__,option:NameCollisionOption,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),destination_folder.into().abi(),desired_new_name.into().abi(),option, &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn move_and_replace_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFile>>, >(&self,file_to_replace:T0__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),file_to_replace.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn open_with_options_async(&self,access_mode:FileAccessMode,options:StorageOpenOptions,) ->  ::winrt::Result<super::foundation::IAsyncOperation<streams::IRandomAccessStream>>{
        let this =  &::winrt::Interface::cast::<IStorageFile2>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<streams::IRandomAccessStream, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),access_mode,options, &mut result__,).from_abi::<super::foundation::IAsyncOperation<streams::IRandomAccessStream, >>(result__)
        }
      }pub fn open_transacted_write_with_options_async(&self,options:StorageOpenOptions,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageStreamTransaction>>{
        let this =  &::winrt::Interface::cast::<IStorageFile2>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageStreamTransaction>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),options, &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageStreamTransaction, >>(result__)
        }
      }pub fn is_available(&self) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<IStorageFilePropertiesWithAvailability>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
        }
      }pub fn get_file_from_path_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(path:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        Self::IStorageFileStatics(|this|unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),path.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        })
      }pub fn get_file_from_application_uri_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::Uri>>, >(uri:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        Self::IStorageFileStatics(|this|unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),uri.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        })
      }pub fn create_streamed_file_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a ,StreamedFileDataRequestedHandler>>,T2__: ::std::convert::Into<::winrt::Param< 'a ,streams::IRandomAccessStreamReference>>, >(display_name_with_extension:T0__,data_requested:T1__,thumbnail:T2__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        Self::IStorageFileStatics(|this|unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),display_name_with_extension.into().abi(),data_requested.into().abi(),thumbnail.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        })
      }pub fn replace_with_streamed_file_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFile>>,T1__: ::std::convert::Into<::winrt::Param< 'a ,StreamedFileDataRequestedHandler>>,T2__: ::std::convert::Into<::winrt::Param< 'a ,streams::IRandomAccessStreamReference>>, >(file_to_replace:T0__,data_requested:T1__,thumbnail:T2__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        Self::IStorageFileStatics(|this|unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),file_to_replace.into().abi(),data_requested.into().abi(),thumbnail.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        })
      }pub fn create_streamed_file_from_uri_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::Uri>>,T2__: ::std::convert::Into<::winrt::Param< 'a ,streams::IRandomAccessStreamReference>>, >(display_name_with_extension:T0__,uri:T1__,thumbnail:T2__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        Self::IStorageFileStatics(|this|unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),display_name_with_extension.into().abi(),uri.into().abi(),thumbnail.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        })
      }pub fn replace_with_streamed_file_from_uri_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageFile>>,T1__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::Uri>>,T2__: ::std::convert::Into<::winrt::Param< 'a ,streams::IRandomAccessStreamReference>>, >(file_to_replace:T0__,uri:T1__,thumbnail:T2__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        Self::IStorageFileStatics(|this|unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),file_to_replace.into().abi(),uri.into().abi(),thumbnail.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        })
      }pub fn get_file_from_path_for_user_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::system::User>>,T1__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(user:T0__,path:T1__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFile>>{
        Self::IStorageFileStatics2(|this|unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFile>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),user.into().abi(),path.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<StorageFile>>(result__)
        })
      }pub fn rename_async_overload_default_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),desired_name.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn rename_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,desired_name:T0__,option:NameCollisionOption,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),desired_name.into().abi(),option, &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn delete_async_overload_default_options(&self,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn delete_async(&self,option:StorageDeleteOption,) ->  ::winrt::Result<super::foundation::IAsyncAction>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncAction as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),option, &mut result__,).from_abi::<super::foundation::IAsyncAction>(result__)
        }
      }pub fn get_basic_properties_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::BasicProperties>>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::BasicProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::foundation::IAsyncOperation:: <file_properties::BasicProperties> >(result__)
        }
      }pub fn name(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn path(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn attributes(&self) ->  ::winrt::Result<FileAttributes>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <FileAttributes as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__).from_abi::<FileAttributes>(result__)
        }
      }pub fn date_created(&self) ->  ::winrt::Result<super::foundation::DateTime>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::DateTime as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::DateTime>(result__)
        }
      }pub fn is_of_type(&self,r#type:StorageItemTypes) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<IStorageItem>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),r#type, &mut result__,).from_abi::<bool>(result__)
        }
      }pub fn get_parent_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<StorageFolder>>{
        let this =  &::winrt::Interface::cast::<IStorageItem2>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <StorageFolder>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<StorageFolder>>(result__)
        }
      }pub fn is_equal< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IStorageItem>>>(&self,item:T0__,) ->  ::winrt::Result<bool>{
        let this =  &::winrt::Interface::cast::<IStorageItem2>(self).unwrap();
        unsafe {
          let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),item.into().abi(), &mut result__,).from_abi::<bool>(result__)
        }
      }pub fn get_thumbnail_async_overload_default_size_default_options(&self,mode:file_properties::ThumbnailMode,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),mode, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn get_thumbnail_async_overload_default_options(&self,mode:file_properties::ThumbnailMode,requested_size:u32,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),mode,requested_size, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn get_thumbnail_async(&self,mode:file_properties::ThumbnailMode,requested_size:u32,options:file_properties::ThumbnailOptions,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),mode,requested_size,options, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn display_name(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn display_type(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn folder_relative_id(&self) ->  ::winrt::Result<::winrt::HString>{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn properties(&self,) ->  ::winrt::Result<file_properties::StorageItemContentProperties>{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties>(self).unwrap();
        unsafe {
          let mut result__: <file_properties::StorageItemContentProperties as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__).from_abi::<file_properties::StorageItemContentProperties>(result__)
        }
      }pub fn get_scaled_image_as_thumbnail_async_overload_default_size_default_options(&self,mode:file_properties::ThumbnailMode,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties2>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),mode, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn get_scaled_image_as_thumbnail_async_overload_default_options(&self,mode:file_properties::ThumbnailMode,requested_size:u32,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties2>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),mode,requested_size, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn get_scaled_image_as_thumbnail_async(&self,mode:file_properties::ThumbnailMode,requested_size:u32,options:file_properties::ThumbnailOptions,) ->  ::winrt::Result<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail>, >{
        let this =  &::winrt::Interface::cast::<IStorageItemProperties2>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),mode,requested_size,options, &mut result__,).from_abi::<super::foundation::IAsyncOperation<file_properties::StorageItemThumbnail, >>(result__)
        }
      }pub fn provider(&self) ->  ::winrt::Result<StorageProvider>{
        let this =  &::winrt::Interface::cast::<IStorageItemPropertiesWithProvider>(self).unwrap();
        unsafe {
          let mut result__: <StorageProvider as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<StorageProvider>(result__)
        }
      }pub fn open_sequential_read_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<streams::IInputStream>>{
        let this =  &::winrt::Interface::cast::<streams::IInputStreamReference>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: <streams::IInputStream>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::foundation::IAsyncOperation:: <streams::IInputStream> >(result__)
        }
      }pub fn open_read_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<streams::IRandomAccessStreamWithContentType>, >{
        let this =  &::winrt::Interface::cast::<streams::IRandomAccessStreamReference>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<streams::IRandomAccessStreamWithContentType, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::foundation::IAsyncOperation:: <streams::IRandomAccessStreamWithContentType> >(result__)
        }
      }#[allow(non_snake_case)]fn IStorageFileStatics<R,F:FnOnce(&IStorageFileStatics) ->  ::winrt::Result<R>>(callback:F,) ->  ::winrt::Result<R>{
        static mut SHARED: ::winrt::FactoryCache<StorageFile,IStorageFileStatics>  =  ::winrt::FactoryCache::new();
        unsafe {
          SHARED.call(callback)
        }
      }#[allow(non_snake_case)]fn IStorageFileStatics2<R,F:FnOnce(&IStorageFileStatics2) ->  ::winrt::Result<R>>(callback:F,) ->  ::winrt::Result<R>{
        static mut SHARED: ::winrt::FactoryCache<StorageFile,IStorageFileStatics2>  =  ::winrt::FactoryCache::new();
        unsafe {
          SHARED.call(callback)
        }
      }
    }impl::std::clone::Clone for StorageFile {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for StorageFile {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for StorageFile{}
    impl::std::fmt::Debug for StorageFile {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::winrt::RuntimeName for StorageFile {
      const NAME: & 'static str = "Windows.Storage.StorageFile";
      
    }unsafe impl::winrt::Interface for StorageFile {
      type Vtable = IStorageFile_abi;
      const IID: ::winrt::Guid =  <IStorageFile as::winrt::Interface>::IID;
      
    }unsafe impl::winrt::RuntimeType for StorageFile {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.StorageFile;{fa3f6186-4214-428c-a64c-14c9ac7315ea})",);
      
    }impl::std::convert::From<StorageFile>for::winrt::Object {
      fn from(value:StorageFile) -> Self {
        value.0
      }
    }impl::std::convert::From<&StorageFile>for::winrt::Object {
      fn from(value: &StorageFile) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for StorageFile {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a StorageFile {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageFile>for IStorageFile {
      fn from(value:StorageFile) -> Self {
        unsafe {
          ::std::mem::transmute(value)
        }
      }
    }impl::std::convert::From<&StorageFile>for IStorageFile {
      fn from(value: &StorageFile) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFile>>for StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageFile>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageFile>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFile>>for& 'a StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageFile>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageFile>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageFile>for IStorageFile2 {
      fn from(value:StorageFile) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFile>for IStorageFile2 {
      fn from(value: &StorageFile) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFile2>>for StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageFile2>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageFile2>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFile2>>for& 'a StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageFile2>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageFile2>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageFile>for IStorageFilePropertiesWithAvailability {
      fn from(value:StorageFile) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFile>for IStorageFilePropertiesWithAvailability {
      fn from(value: &StorageFile) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFilePropertiesWithAvailability>>for StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageFilePropertiesWithAvailability>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageFilePropertiesWithAvailability>::into(self),)
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFilePropertiesWithAvailability>>for& 'a StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageFilePropertiesWithAvailability>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageFilePropertiesWithAvailability>::into(::std::clone::Clone::clone(self),),)
      }
    }impl::std::convert::From<StorageFile>for IStorageItem {
      fn from(value:StorageFile) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFile>for IStorageItem {
      fn from(value: &StorageFile) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItem>>for StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItem>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItem>>for& 'a StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItem>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItem>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageFile>for IStorageItem2 {
      fn from(value:StorageFile) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFile>for IStorageItem2 {
      fn from(value: &StorageFile) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItem2>>for StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItem2>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItem2>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItem2>>for& 'a StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItem2>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItem2>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageFile>for IStorageItemProperties {
      fn from(value:StorageFile) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFile>for IStorageItemProperties {
      fn from(value: &StorageFile) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemProperties>>for StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItemProperties>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemProperties>>for& 'a StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItemProperties>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageFile>for IStorageItemProperties2 {
      fn from(value:StorageFile) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFile>for IStorageItemProperties2 {
      fn from(value: &StorageFile) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemProperties2>>for StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItemProperties2>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties2>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemProperties2>>for& 'a StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItemProperties2>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItemProperties2>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<StorageFile>for IStorageItemPropertiesWithProvider {
      fn from(value:StorageFile) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFile>for IStorageItemPropertiesWithProvider {
      fn from(value: &StorageFile) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemPropertiesWithProvider>>for StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItemPropertiesWithProvider>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItemPropertiesWithProvider>::into(self),)
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemPropertiesWithProvider>>for& 'a StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,IStorageItemPropertiesWithProvider>{
        ::winrt::Param::Owned(::std::convert::Into::<IStorageItemPropertiesWithProvider>::into(::std::clone::Clone::clone(self),),)
      }
    }impl::std::convert::From<StorageFile>for streams::IInputStreamReference {
      fn from(value:StorageFile) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFile>for streams::IInputStreamReference {
      fn from(value: &StorageFile) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,streams::IInputStreamReference>>for StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,streams::IInputStreamReference>{
        ::winrt::Param::Owned(::std::convert::Into::<streams::IInputStreamReference>::into(self),)
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,streams::IInputStreamReference>>for& 'a StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,streams::IInputStreamReference>{
        ::winrt::Param::Owned(::std::convert::Into::<streams::IInputStreamReference>::into(::std::clone::Clone::clone(self),),)
      }
    }impl::std::convert::From<StorageFile>for streams::IRandomAccessStreamReference {
      fn from(value:StorageFile) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&StorageFile>for streams::IRandomAccessStreamReference {
      fn from(value: &StorageFile) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,streams::IRandomAccessStreamReference>>for StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,streams::IRandomAccessStreamReference>{
        ::winrt::Param::Owned(::std::convert::Into::<streams::IRandomAccessStreamReference>::into(self),)
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,streams::IRandomAccessStreamReference>>for& 'a StorageFile {
      fn into(self) ->  ::winrt::Param< 'a ,streams::IRandomAccessStreamReference>{
        ::winrt::Param::Owned(::std::convert::Into::<streams::IRandomAccessStreamReference>::into(::std::clone::Clone::clone(self),),)
      }
    }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod file_properties {
      #[repr(transparent)]pub struct IBasicProperties(::winrt::Object);
      impl::std::clone::Clone for IBasicProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IBasicProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IBasicProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IBasicProperties{}
      impl IBasicProperties {
        pub fn size(&self) ->  ::winrt::Result<u64>{
          let this = self;
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u64>(result__)
          }
        }pub fn date_modified(&self) ->  ::winrt::Result<super::super::foundation::DateTime>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::DateTime as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::DateTime>(result__)
          }
        }pub fn item_date(&self) ->  ::winrt::Result<super::super::foundation::DateTime>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::DateTime as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::DateTime>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IBasicProperties {
        type Vtable = IBasicProperties_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3495777755,30814,19046,[190,2,155,238,197,138,234,129],);
        
      }#[repr(C)]pub struct IBasicProperties_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::DateTime_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::DateTime_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IBasicProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{d05d55db-785e-4a66-be02-9beec58aea81}")
        };
        
      }impl::std::convert::From<IBasicProperties>for::winrt::Object {
        fn from(value:IBasicProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&IBasicProperties>for::winrt::Object {
        fn from(value: &IBasicProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IBasicProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IBasicProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IStorageItemExtraProperties(::winrt::Object);
      impl::std::clone::Clone for IStorageItemExtraProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IStorageItemExtraProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IStorageItemExtraProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IStorageItemExtraProperties{}
      impl IStorageItemExtraProperties {
        pub fn retrieve_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,properties_to_retrieve:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),properties_to_retrieve.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >>(result__)
          }
        }pub fn save_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString, ::winrt::Object, >, >, >, >, >(&self,properties_to_save:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),properties_to_save.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn save_properties_async_overload_default(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IStorageItemExtraProperties {
        type Vtable = IStorageItemExtraProperties_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3309527474,21709,17195,[189,188,75,25,196,180,112,215],);
        
      }#[repr(C)]pub struct IStorageItemExtraProperties_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,properties_to_retrieve: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,properties_to_save: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IStorageItemExtraProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c54361b2-54cd-432b-bdbc-4b19c4b470d7}")
        };
        
      }impl::std::convert::From<IStorageItemExtraProperties>for::winrt::Object {
        fn from(value:IStorageItemExtraProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&IStorageItemExtraProperties>for::winrt::Object {
        fn from(value: &IStorageItemExtraProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageItemExtraProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageItemExtraProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct BasicProperties(::winrt::Object);
      impl BasicProperties {
        pub fn size(&self) ->  ::winrt::Result<u64>{
          let this = self;
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u64>(result__)
          }
        }pub fn date_modified(&self) ->  ::winrt::Result<super::super::foundation::DateTime>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::DateTime as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::DateTime>(result__)
          }
        }pub fn item_date(&self) ->  ::winrt::Result<super::super::foundation::DateTime>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::DateTime as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::DateTime>(result__)
          }
        }pub fn retrieve_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,properties_to_retrieve:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >, >{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),properties_to_retrieve.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >>(result__)
          }
        }pub fn save_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString, ::winrt::Object, >, >, >, >, >(&self,properties_to_save:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),properties_to_save.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn save_properties_async_overload_default(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }impl::std::clone::Clone for BasicProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for BasicProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for BasicProperties{}
      impl::std::fmt::Debug for BasicProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for BasicProperties {
        const NAME: & 'static str = "Windows.Storage.FileProperties.BasicProperties";
        
      }unsafe impl::winrt::Interface for BasicProperties {
        type Vtable = IBasicProperties_abi;
        const IID: ::winrt::Guid =  <IBasicProperties as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for BasicProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.FileProperties.BasicProperties;{d05d55db-785e-4a66-be02-9beec58aea81})");
        
      }impl::std::convert::From<BasicProperties>for::winrt::Object {
        fn from(value:BasicProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&BasicProperties>for::winrt::Object {
        fn from(value: &BasicProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for BasicProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a BasicProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<BasicProperties>for IBasicProperties {
        fn from(value:BasicProperties) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&BasicProperties>for IBasicProperties {
        fn from(value: &BasicProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IBasicProperties>>for BasicProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IBasicProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IBasicProperties>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IBasicProperties>>for& 'a BasicProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IBasicProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IBasicProperties>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<BasicProperties>for IStorageItemExtraProperties {
        fn from(value:BasicProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&BasicProperties>for IStorageItemExtraProperties {
        fn from(value: &BasicProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for BasicProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for& 'a BasicProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(::std::clone::Clone::clone(self),),)
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct ThumbnailType(i32);
      impl::std::convert::From<i32>for ThumbnailType {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for ThumbnailType {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for ThumbnailType {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for ThumbnailType {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ThumbnailType {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ThumbnailType{}
      impl::std::marker::Copy for ThumbnailType{}
      impl ThumbnailType {
        #![allow(non_upper_case_globals)]pub const Image:Self = Self(0i32);
        pub const Icon:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for ThumbnailType {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for ThumbnailType {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.FileProperties.ThumbnailType;i4)",);
        
      }#[repr(transparent)]pub struct IThumbnailProperties(::winrt::Object);
      impl::std::clone::Clone for IThumbnailProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IThumbnailProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IThumbnailProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IThumbnailProperties{}
      impl IThumbnailProperties {
        pub fn original_width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn original_height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn returned_smaller_cached_size(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn r#type(&self) ->  ::winrt::Result<ThumbnailType>{
          let this = self;
          unsafe {
            let mut result__: <ThumbnailType as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<ThumbnailType>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IThumbnailProperties {
        type Vtable = IThumbnailProperties_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1765659695,56295,18869,[179,179,40,147,172,93,52,35],);
        
      }#[repr(C)]pub struct IThumbnailProperties_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut ThumbnailType,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IThumbnailProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{693dd42f-dbe7-49b5-b3b3-2893ac5d3423}")
        };
        
      }impl::std::convert::From<IThumbnailProperties>for::winrt::Object {
        fn from(value:IThumbnailProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&IThumbnailProperties>for::winrt::Object {
        fn from(value: &IThumbnailProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IThumbnailProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IThumbnailProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct StorageItemThumbnail(::winrt::Object);
      impl StorageItemThumbnail {
        pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn original_width(&self) ->  ::winrt::Result<u32>{
          let this =  &::winrt::Interface::cast::<IThumbnailProperties>(self).unwrap();
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn original_height(&self) ->  ::winrt::Result<u32>{
          let this =  &::winrt::Interface::cast::<IThumbnailProperties>(self).unwrap();
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn returned_smaller_cached_size(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IThumbnailProperties>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn r#type(&self) ->  ::winrt::Result<ThumbnailType>{
          let this =  &::winrt::Interface::cast::<IThumbnailProperties>(self).unwrap();
          unsafe {
            let mut result__: <ThumbnailType as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<ThumbnailType>(result__)
          }
        }pub fn content_type(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<super::streams::IContentTypeProvider>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn read_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::streams::IBuffer>>, >(&self,buffer:T0__,count:u32,options:super::streams::InputStreamOptions,) ->  ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<super::streams::IBuffer,u32, >, >{
          let this =  &::winrt::Interface::cast::<super::streams::IInputStream>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperationWithProgress<super::streams::IBuffer,u32, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),buffer.into().abi(),count,options, &mut result__,).from_abi::<super::super::foundation::IAsyncOperationWithProgress<super::streams::IBuffer,u32, >>(result__)
          }
        }pub fn write_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::streams::IBuffer>>, >(&self,buffer:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<u32,u32>>{
          let this =  &::winrt::Interface::cast::<super::streams::IOutputStream>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperationWithProgress<u32,u32, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),buffer.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperationWithProgress:: <u32,u32> >(result__)
          }
        }pub fn flush_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<bool>>{
          let this =  &::winrt::Interface::cast::<super::streams::IOutputStream>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <bool>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<bool>>(result__)
          }
        }pub fn size(&self) ->  ::winrt::Result<u64>{
          let this =  &::winrt::Interface::cast::<super::streams::IRandomAccessStream>(self).unwrap();
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u64>(result__)
          }
        }pub fn set_size(&self,value:u64) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::streams::IRandomAccessStream>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn get_input_stream_at(&self,position:u64,) ->  ::winrt::Result<super::streams::IInputStream>{
          let this =  &::winrt::Interface::cast::<super::streams::IRandomAccessStream>(self).unwrap();
          unsafe {
            let mut result__: <super::streams::IInputStream as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),position, &mut result__,).from_abi::<super::streams::IInputStream>(result__)
          }
        }pub fn get_output_stream_at(&self,position:u64,) ->  ::winrt::Result<super::streams::IOutputStream>{
          let this =  &::winrt::Interface::cast::<super::streams::IRandomAccessStream>(self).unwrap();
          unsafe {
            let mut result__: <super::streams::IOutputStream as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),position, &mut result__,).from_abi::<super::streams::IOutputStream>(result__)
          }
        }pub fn position(&self) ->  ::winrt::Result<u64>{
          let this =  &::winrt::Interface::cast::<super::streams::IRandomAccessStream>(self).unwrap();
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u64>(result__)
          }
        }pub fn seek(&self,position:u64) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::streams::IRandomAccessStream>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),position).ok()
          }
        }pub fn clone_stream(&self) ->  ::winrt::Result<super::streams::IRandomAccessStream>{
          let this =  &::winrt::Interface::cast::<super::streams::IRandomAccessStream>(self).unwrap();
          unsafe {
            let mut result__: <super::streams::IRandomAccessStream as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::streams::IRandomAccessStream>(result__)
          }
        }pub fn can_read(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<super::streams::IRandomAccessStream>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn can_write(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<super::streams::IRandomAccessStream>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }
      }impl::std::clone::Clone for StorageItemThumbnail {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for StorageItemThumbnail {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for StorageItemThumbnail{}
      impl::std::fmt::Debug for StorageItemThumbnail {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for StorageItemThumbnail {
        const NAME: & 'static str = "Windows.Storage.FileProperties.StorageItemThumbnail";
        
      }unsafe impl::winrt::Interface for StorageItemThumbnail {
        type Vtable = super::streams::IRandomAccessStreamWithContentType_abi;
        const IID: ::winrt::Guid =  <super::streams::IRandomAccessStreamWithContentType as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for StorageItemThumbnail {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.FileProperties.StorageItemThumbnail;{cc254827-4b3d-438f-9232-10c76bc7e038})");
        
      }impl::std::convert::From<StorageItemThumbnail>for::winrt::Object {
        fn from(value:StorageItemThumbnail) -> Self {
          value.0
        }
      }impl::std::convert::From<&StorageItemThumbnail>for::winrt::Object {
        fn from(value: &StorageItemThumbnail) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for StorageItemThumbnail {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a StorageItemThumbnail {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<StorageItemThumbnail>for super::super::foundation::IClosable {
        fn from(value:StorageItemThumbnail) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&StorageItemThumbnail>for super::super::foundation::IClosable {
        fn from(value: &StorageItemThumbnail) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for StorageItemThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a StorageItemThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<StorageItemThumbnail>for IThumbnailProperties {
        fn from(value:StorageItemThumbnail) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&StorageItemThumbnail>for IThumbnailProperties {
        fn from(value: &StorageItemThumbnail) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IThumbnailProperties>>for StorageItemThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,IThumbnailProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IThumbnailProperties>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IThumbnailProperties>>for& 'a StorageItemThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,IThumbnailProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IThumbnailProperties>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<StorageItemThumbnail>for super::streams::IContentTypeProvider {
        fn from(value:StorageItemThumbnail) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&StorageItemThumbnail>for super::streams::IContentTypeProvider {
        fn from(value: &StorageItemThumbnail) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::streams::IContentTypeProvider>>for StorageItemThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,super::streams::IContentTypeProvider>{
          ::winrt::Param::Owned(::std::convert::Into::<super::streams::IContentTypeProvider, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::streams::IContentTypeProvider>>for& 'a StorageItemThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,super::streams::IContentTypeProvider>{
          ::winrt::Param::Owned(::std::convert::Into::<super::streams::IContentTypeProvider, >::into(::std::clone::Clone::clone(self,)))
        }
      }impl::std::convert::From<StorageItemThumbnail>for super::streams::IInputStream {
        fn from(value:StorageItemThumbnail) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&StorageItemThumbnail>for super::streams::IInputStream {
        fn from(value: &StorageItemThumbnail) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::streams::IInputStream>>for StorageItemThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,super::streams::IInputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::streams::IInputStream>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::streams::IInputStream>>for& 'a StorageItemThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,super::streams::IInputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::streams::IInputStream>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<StorageItemThumbnail>for super::streams::IOutputStream {
        fn from(value:StorageItemThumbnail) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&StorageItemThumbnail>for super::streams::IOutputStream {
        fn from(value: &StorageItemThumbnail) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::streams::IOutputStream>>for StorageItemThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,super::streams::IOutputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::streams::IOutputStream>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::streams::IOutputStream>>for& 'a StorageItemThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,super::streams::IOutputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::streams::IOutputStream>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<StorageItemThumbnail>for super::streams::IRandomAccessStream {
        fn from(value:StorageItemThumbnail) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&StorageItemThumbnail>for super::streams::IRandomAccessStream {
        fn from(value: &StorageItemThumbnail) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::streams::IRandomAccessStream>>for StorageItemThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,super::streams::IRandomAccessStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::streams::IRandomAccessStream>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::streams::IRandomAccessStream>>for& 'a StorageItemThumbnail {
        fn into(self) ->  ::winrt::Param< 'a ,super::streams::IRandomAccessStream>{
          ::winrt::Param::Owned(::std::convert::Into::<super::streams::IRandomAccessStream>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<StorageItemThumbnail>for super::streams::IRandomAccessStreamWithContentType {
        fn from(value:StorageItemThumbnail) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&StorageItemThumbnail>for super::streams::IRandomAccessStreamWithContentType {
        fn from(value: &StorageItemThumbnail) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::streams::IRandomAccessStreamWithContentType>, >for StorageItemThumbnail {
        fn into(self,) ->  ::winrt::Param< 'a ,super::streams::IRandomAccessStreamWithContentType>{
          ::winrt::Param::Owned(::std::convert::Into::<super::streams::IRandomAccessStreamWithContentType, >::into(self))
        }
      }impl< 'a > ::std::convert::Into< ::winrt::Param< 'a ,super::streams::IRandomAccessStreamWithContentType>, >for& 'a StorageItemThumbnail {
        fn into(self,) ->  ::winrt::Param< 'a ,super::streams::IRandomAccessStreamWithContentType>{
          ::winrt::Param::Owned(::std::convert::Into::<super::streams::IRandomAccessStreamWithContentType, >::into(::std::clone::Clone::clone(self,)))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct ThumbnailMode(i32);
      impl::std::convert::From<i32>for ThumbnailMode {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for ThumbnailMode {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for ThumbnailMode {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for ThumbnailMode {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ThumbnailMode {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ThumbnailMode{}
      impl::std::marker::Copy for ThumbnailMode{}
      impl ThumbnailMode {
        #![allow(non_upper_case_globals)]pub const PicturesView:Self = Self(0i32);
        pub const VideosView:Self = Self(1i32);
        pub const MusicView:Self = Self(2i32);
        pub const DocumentsView:Self = Self(3i32);
        pub const ListView:Self = Self(4i32);
        pub const SingleItem:Self = Self(5i32);
        
      }unsafe impl::winrt::Abi for ThumbnailMode {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for ThumbnailMode {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.FileProperties.ThumbnailMode;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct ThumbnailOptions(u32);
      impl::std::convert::From<u32>for ThumbnailOptions {
        fn from(value:u32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for ThumbnailOptions {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for ThumbnailOptions {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for ThumbnailOptions {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for ThumbnailOptions {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ThumbnailOptions{}
      impl::std::marker::Copy for ThumbnailOptions{}
      impl ThumbnailOptions {
        #![allow(non_upper_case_globals)]pub const None:Self = Self(0u32);
        pub const ReturnOnlyIfCached:Self = Self(1u32);
        pub const ResizeThumbnail:Self = Self(2u32);
        pub const UseCurrentScale:Self = Self(4u32);
        
      }unsafe impl::winrt::Abi for ThumbnailOptions {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for ThumbnailOptions {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.FileProperties.ThumbnailOptions;u4)",);
        
      }impl::std::ops::BitOr for ThumbnailOptions {
        type Output = Self;
        fn bitor(self,rhs:Self) -> Self {
          Self(self.0|rhs.0)
        }
      }impl::std::ops::BitAnd for ThumbnailOptions {
        type Output = Self;
        fn bitand(self,rhs:Self) -> Self {
          Self(self.0&rhs.0)
        }
      }#[repr(transparent)]pub struct IMusicProperties(::winrt::Object);
      impl::std::clone::Clone for IMusicProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IMusicProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IMusicProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IMusicProperties{}
      impl IMusicProperties {
        pub fn album(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_album< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn artist(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_artist< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn genre(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn track_number(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_track_number(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn title(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_title< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn rating(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_rating(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn duration(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn album_artist(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_album_artist< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn composers(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn conductors(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn subtitle(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).23)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_subtitle< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).24)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn producers(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).25)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn publisher(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).26)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_publisher< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).27)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn writers(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).28)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn year(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).29)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_year(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).30)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn retrieve_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,properties_to_retrieve:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >, >{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),properties_to_retrieve.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >>(result__)
          }
        }pub fn save_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString, ::winrt::Object, >, >, >, >, >(&self,properties_to_save:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),properties_to_save.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn save_properties_async_overload_default(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IMusicProperties {
        type Vtable = IMusicProperties_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3163204450,26348,16794,[188,93,202,101,164,203,70,218],);
        
      }#[repr(C)]pub struct IMusicProperties_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IMusicProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{bc8aab62-66ec-419a-bc5d-ca65a4cb46da}")
        };
        
      }impl::std::convert::From<IMusicProperties>for::winrt::Object {
        fn from(value:IMusicProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&IMusicProperties>for::winrt::Object {
        fn from(value: &IMusicProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IMusicProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IMusicProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IMusicProperties>for IStorageItemExtraProperties {
        fn from(value:IMusicProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IMusicProperties>for IStorageItemExtraProperties {
        fn from(value: &IMusicProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for IMusicProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for& 'a IMusicProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct MusicProperties(::winrt::Object);
      impl MusicProperties {
        pub fn album(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_album< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn artist(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_artist< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn genre(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn track_number(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_track_number(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn title(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_title< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn rating(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_rating(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn duration(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn album_artist(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_album_artist< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn composers(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn conductors(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn subtitle(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).23)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_subtitle< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).24)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn producers(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).25)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn publisher(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).26)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_publisher< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).27)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn writers(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).28)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn year(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).29)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_year(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).30)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn retrieve_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,properties_to_retrieve:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >, >{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),properties_to_retrieve.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >>(result__)
          }
        }pub fn save_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString, ::winrt::Object, >, >, >, >, >(&self,properties_to_save:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),properties_to_save.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn save_properties_async_overload_default(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }impl::std::clone::Clone for MusicProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for MusicProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for MusicProperties{}
      impl::std::fmt::Debug for MusicProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for MusicProperties {
        const NAME: & 'static str = "Windows.Storage.FileProperties.MusicProperties";
        
      }unsafe impl::winrt::Interface for MusicProperties {
        type Vtable = IMusicProperties_abi;
        const IID: ::winrt::Guid =  <IMusicProperties as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for MusicProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.FileProperties.MusicProperties;{bc8aab62-66ec-419a-bc5d-ca65a4cb46da})");
        
      }impl::std::convert::From<MusicProperties>for::winrt::Object {
        fn from(value:MusicProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&MusicProperties>for::winrt::Object {
        fn from(value: &MusicProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for MusicProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a MusicProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MusicProperties>for IMusicProperties {
        fn from(value:MusicProperties) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&MusicProperties>for IMusicProperties {
        fn from(value: &MusicProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMusicProperties>>for MusicProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMusicProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMusicProperties>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IMusicProperties>>for& 'a MusicProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IMusicProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IMusicProperties>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<MusicProperties>for IStorageItemExtraProperties {
        fn from(value:MusicProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&MusicProperties>for IStorageItemExtraProperties {
        fn from(value: &MusicProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for MusicProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for& 'a MusicProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(::std::clone::Clone::clone(self),),)
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct VideoOrientation(i32);
      impl::std::convert::From<i32>for VideoOrientation {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for VideoOrientation {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for VideoOrientation {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for VideoOrientation {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for VideoOrientation {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for VideoOrientation{}
      impl::std::marker::Copy for VideoOrientation{}
      impl VideoOrientation {
        #![allow(non_upper_case_globals)]pub const Normal:Self = Self(0i32);
        pub const Rotate90:Self = Self(90i32);
        pub const Rotate180:Self = Self(180i32);
        pub const Rotate270:Self = Self(270i32);
        
      }unsafe impl::winrt::Abi for VideoOrientation {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for VideoOrientation {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.FileProperties.VideoOrientation;i4)",);
        
      }#[repr(transparent)]pub struct IVideoProperties(::winrt::Object);
      impl::std::clone::Clone for IVideoProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IVideoProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IVideoProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IVideoProperties{}
      impl IVideoProperties {
        pub fn retrieve_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,properties_to_retrieve:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >, >{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),properties_to_retrieve.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >>(result__)
          }
        }pub fn save_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString, ::winrt::Object, >, >, >, >, >(&self,properties_to_save:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),properties_to_save.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn save_properties_async_overload_default(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn rating(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_rating(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn keywords(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn duration(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn latitude(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f64>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f64>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<f64>>(result__)
          }
        }pub fn longitude(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f64>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f64>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<f64>>(result__)
          }
        }pub fn title(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_title< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn subtitle(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_subtitle< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn producers(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn publisher(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_publisher< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn writers(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn year(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_year(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).23)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).24)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn directors(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).25)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn orientation(&self) ->  ::winrt::Result<VideoOrientation>{
          let this = self;
          unsafe {
            let mut result__: <VideoOrientation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).26)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoOrientation>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IVideoProperties {
        type Vtable = IVideoProperties_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1905976583,26846,19896,[151,222,73,153,140,5,159,47],);
        
      }#[repr(C)]pub struct IVideoProperties_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::TimeSpan_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut VideoOrientation,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IVideoProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{719ae507-68de-4db8-97de-49998c059f2f}")
        };
        
      }impl::std::convert::From<IVideoProperties>for::winrt::Object {
        fn from(value:IVideoProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&IVideoProperties>for::winrt::Object {
        fn from(value: &IVideoProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IVideoProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IVideoProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IVideoProperties>for IStorageItemExtraProperties {
        fn from(value:IVideoProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IVideoProperties>for IStorageItemExtraProperties {
        fn from(value: &IVideoProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for IVideoProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for& 'a IVideoProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct VideoProperties(::winrt::Object);
      impl VideoProperties {
        pub fn retrieve_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,properties_to_retrieve:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >, >{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),properties_to_retrieve.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >>(result__)
          }
        }pub fn save_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString, ::winrt::Object, >, >, >, >, >(&self,properties_to_save:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),properties_to_save.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn save_properties_async_overload_default(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn rating(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_rating(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn keywords(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn duration(&self) ->  ::winrt::Result<super::super::foundation::TimeSpan>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::TimeSpan as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::TimeSpan>(result__)
          }
        }pub fn latitude(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f64>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f64>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<f64>>(result__)
          }
        }pub fn longitude(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f64>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f64>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<f64>>(result__)
          }
        }pub fn title(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_title< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn subtitle(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_subtitle< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn producers(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn publisher(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_publisher< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn writers(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn year(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn set_year(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).23)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn bitrate(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).24)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn directors(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).25)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn orientation(&self) ->  ::winrt::Result<VideoOrientation>{
          let this = self;
          unsafe {
            let mut result__: <VideoOrientation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).26)(::winrt::Abi::abi(this), &mut result__,).from_abi::<VideoOrientation>(result__)
          }
        }
      }impl::std::clone::Clone for VideoProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for VideoProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for VideoProperties{}
      impl::std::fmt::Debug for VideoProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for VideoProperties {
        const NAME: & 'static str = "Windows.Storage.FileProperties.VideoProperties";
        
      }unsafe impl::winrt::Interface for VideoProperties {
        type Vtable = IVideoProperties_abi;
        const IID: ::winrt::Guid =  <IVideoProperties as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for VideoProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.FileProperties.VideoProperties;{719ae507-68de-4db8-97de-49998c059f2f})");
        
      }impl::std::convert::From<VideoProperties>for::winrt::Object {
        fn from(value:VideoProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&VideoProperties>for::winrt::Object {
        fn from(value: &VideoProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for VideoProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a VideoProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<VideoProperties>for IStorageItemExtraProperties {
        fn from(value:VideoProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&VideoProperties>for IStorageItemExtraProperties {
        fn from(value: &VideoProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for VideoProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for& 'a VideoProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<VideoProperties>for IVideoProperties {
        fn from(value:VideoProperties) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&VideoProperties>for IVideoProperties {
        fn from(value: &VideoProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoProperties>>for VideoProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoProperties>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IVideoProperties>>for& 'a VideoProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IVideoProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IVideoProperties>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct PhotoOrientation(i32);
      impl::std::convert::From<i32>for PhotoOrientation {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for PhotoOrientation {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for PhotoOrientation {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for PhotoOrientation {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for PhotoOrientation {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for PhotoOrientation{}
      impl::std::marker::Copy for PhotoOrientation{}
      impl PhotoOrientation {
        #![allow(non_upper_case_globals)]pub const Unspecified:Self = Self(0i32);
        pub const Normal:Self = Self(1i32);
        pub const FlipHorizontal:Self = Self(2i32);
        pub const Rotate180:Self = Self(3i32);
        pub const FlipVertical:Self = Self(4i32);
        pub const Transpose:Self = Self(5i32);
        pub const Rotate270:Self = Self(6i32);
        pub const Transverse:Self = Self(7i32);
        pub const Rotate90:Self = Self(8i32);
        
      }unsafe impl::winrt::Abi for PhotoOrientation {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for PhotoOrientation {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.FileProperties.PhotoOrientation;i4)",);
        
      }#[repr(transparent)]pub struct IImageProperties(::winrt::Object);
      impl::std::clone::Clone for IImageProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IImageProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IImageProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IImageProperties{}
      impl IImageProperties {
        pub fn rating(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_rating(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn keywords(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn date_taken(&self) ->  ::winrt::Result<super::super::foundation::DateTime>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::DateTime as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::DateTime>(result__)
          }
        }pub fn set_date_taken< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::DateTime>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn title(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_title< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn latitude(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f64>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f64>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<f64>>(result__)
          }
        }pub fn longitude(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f64>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f64>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<f64>>(result__)
          }
        }pub fn camera_manufacturer(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_camera_manufacturer< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn camera_model(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_camera_model< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn orientation(&self) ->  ::winrt::Result<PhotoOrientation>{
          let this = self;
          unsafe {
            let mut result__: <PhotoOrientation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this), &mut result__,).from_abi::<PhotoOrientation>(result__)
          }
        }pub fn people_names(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<::winrt::HString>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: < ::winrt::HString> >(result__)
          }
        }pub fn retrieve_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,properties_to_retrieve:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >, >{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),properties_to_retrieve.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >>(result__)
          }
        }pub fn save_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString, ::winrt::Object, >, >, >, >, >(&self,properties_to_save:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),properties_to_save.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn save_properties_async_overload_default(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IImageProperties {
        type Vtable = IImageProperties_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1379701796,64767,17013,[175,238,236,219,154,180,121,115],);
        
      }#[repr(C)]pub struct IImageProperties_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::DateTime_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:super::super::foundation::DateTime_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut PhotoOrientation,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IImageProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{523c9424-fcff-4275-afee-ecdb9ab47973}")
        };
        
      }impl::std::convert::From<IImageProperties>for::winrt::Object {
        fn from(value:IImageProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&IImageProperties>for::winrt::Object {
        fn from(value: &IImageProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IImageProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IImageProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IImageProperties>for IStorageItemExtraProperties {
        fn from(value:IImageProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IImageProperties>for IStorageItemExtraProperties {
        fn from(value: &IImageProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for IImageProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for& 'a IImageProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct ImageProperties(::winrt::Object);
      impl ImageProperties {
        pub fn rating(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_rating(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn keywords(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn date_taken(&self) ->  ::winrt::Result<super::super::foundation::DateTime>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::DateTime as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::DateTime>(result__)
          }
        }pub fn set_date_taken< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::DateTime>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn width(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn height(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u32>(result__)
          }
        }pub fn title(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_title< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn latitude(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f64>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f64>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<f64>>(result__)
          }
        }pub fn longitude(&self,) ->  ::winrt::Result<super::super::foundation::IReference<f64>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IReference:: <f64>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::IReference<f64>>(result__)
          }
        }pub fn camera_manufacturer(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_camera_manufacturer< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn camera_model(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_camera_model< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn orientation(&self) ->  ::winrt::Result<PhotoOrientation>{
          let this = self;
          unsafe {
            let mut result__: <PhotoOrientation as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this), &mut result__,).from_abi::<PhotoOrientation>(result__)
          }
        }pub fn people_names(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<::winrt::HString>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: < ::winrt::HString> >(result__)
          }
        }pub fn retrieve_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,properties_to_retrieve:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >, >{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),properties_to_retrieve.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >>(result__)
          }
        }pub fn save_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString, ::winrt::Object, >, >, >, >, >(&self,properties_to_save:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),properties_to_save.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn save_properties_async_overload_default(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }impl::std::clone::Clone for ImageProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for ImageProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for ImageProperties{}
      impl::std::fmt::Debug for ImageProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for ImageProperties {
        const NAME: & 'static str = "Windows.Storage.FileProperties.ImageProperties";
        
      }unsafe impl::winrt::Interface for ImageProperties {
        type Vtable = IImageProperties_abi;
        const IID: ::winrt::Guid =  <IImageProperties as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for ImageProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.FileProperties.ImageProperties;{523c9424-fcff-4275-afee-ecdb9ab47973})");
        
      }impl::std::convert::From<ImageProperties>for::winrt::Object {
        fn from(value:ImageProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&ImageProperties>for::winrt::Object {
        fn from(value: &ImageProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for ImageProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a ImageProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<ImageProperties>for IImageProperties {
        fn from(value:ImageProperties) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&ImageProperties>for IImageProperties {
        fn from(value: &ImageProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IImageProperties>>for ImageProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IImageProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IImageProperties>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IImageProperties>>for& 'a ImageProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IImageProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IImageProperties>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<ImageProperties>for IStorageItemExtraProperties {
        fn from(value:ImageProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&ImageProperties>for IStorageItemExtraProperties {
        fn from(value: &ImageProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for ImageProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for& 'a ImageProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct IDocumentProperties(::winrt::Object);
      impl::std::clone::Clone for IDocumentProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDocumentProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDocumentProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDocumentProperties{}
      impl IDocumentProperties {
        pub fn author(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn title(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_title< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn keywords(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn comment(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_comment< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn retrieve_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,properties_to_retrieve:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >, >{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),properties_to_retrieve.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >>(result__)
          }
        }pub fn save_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString, ::winrt::Object, >, >, >, >, >(&self,properties_to_save:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),properties_to_save.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn save_properties_async_overload_default(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IDocumentProperties {
        type Vtable = IDocumentProperties_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2125142460,6177,18723,[180,169,10,234,64,77,0,112],);
        
      }#[repr(C)]pub struct IDocumentProperties_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDocumentProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{7eab19bc-1821-4923-b4a9-0aea404d0070}")
        };
        
      }impl::std::convert::From<IDocumentProperties>for::winrt::Object {
        fn from(value:IDocumentProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDocumentProperties>for::winrt::Object {
        fn from(value: &IDocumentProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDocumentProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDocumentProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IDocumentProperties>for IStorageItemExtraProperties {
        fn from(value:IDocumentProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IDocumentProperties>for IStorageItemExtraProperties {
        fn from(value: &IDocumentProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for IDocumentProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for& 'a IDocumentProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct DocumentProperties(::winrt::Object);
      impl DocumentProperties {
        pub fn author(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn title(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_title< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn keywords(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn comment(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_comment< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn retrieve_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,properties_to_retrieve:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >, >{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),properties_to_retrieve.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >>(result__)
          }
        }pub fn save_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString, ::winrt::Object, >, >, >, >, >(&self,properties_to_save:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),properties_to_save.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn save_properties_async_overload_default(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }impl::std::clone::Clone for DocumentProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DocumentProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DocumentProperties{}
      impl::std::fmt::Debug for DocumentProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DocumentProperties {
        const NAME: & 'static str = "Windows.Storage.FileProperties.DocumentProperties";
        
      }unsafe impl::winrt::Interface for DocumentProperties {
        type Vtable = IDocumentProperties_abi;
        const IID: ::winrt::Guid =  <IDocumentProperties as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DocumentProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.FileProperties.DocumentProperties;{7eab19bc-1821-4923-b4a9-0aea404d0070})");
        
      }impl::std::convert::From<DocumentProperties>for::winrt::Object {
        fn from(value:DocumentProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&DocumentProperties>for::winrt::Object {
        fn from(value: &DocumentProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DocumentProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DocumentProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DocumentProperties>for IDocumentProperties {
        fn from(value:DocumentProperties) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DocumentProperties>for IDocumentProperties {
        fn from(value: &DocumentProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDocumentProperties>>for DocumentProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IDocumentProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IDocumentProperties>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDocumentProperties>>for& 'a DocumentProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IDocumentProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IDocumentProperties>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DocumentProperties>for IStorageItemExtraProperties {
        fn from(value:DocumentProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&DocumentProperties>for IStorageItemExtraProperties {
        fn from(value: &DocumentProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for DocumentProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for& 'a DocumentProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct IStorageItemContentProperties(::winrt::Object);
      impl::std::clone::Clone for IStorageItemContentProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IStorageItemContentProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IStorageItemContentProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IStorageItemContentProperties{}
      impl IStorageItemContentProperties {
        pub fn get_music_properties_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<MusicProperties>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<MusicProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<MusicProperties>>(result__,)
          }
        }pub fn get_video_properties_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<VideoProperties>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<VideoProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<VideoProperties>>(result__,)
          }
        }pub fn get_image_properties_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<ImageProperties>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<ImageProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<ImageProperties>>(result__,)
          }
        }pub fn get_document_properties_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DocumentProperties>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DocumentProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <DocumentProperties> >(result__)
          }
        }pub fn retrieve_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,properties_to_retrieve:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >, >{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),properties_to_retrieve.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >>(result__)
          }
        }pub fn save_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString, ::winrt::Object, >, >, >, >, >(&self,properties_to_save:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),properties_to_save.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn save_properties_async_overload_default(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IStorageItemContentProperties {
        type Vtable = IStorageItemContentProperties_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(86592429,48184,18623,[133,215,119,14,14,42,224,186],);
        
      }#[repr(C)]pub struct IStorageItemContentProperties_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IStorageItemContentProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{05294bad-bc38-48bf-85d7-770e0e2ae0ba}")
        };
        
      }impl::std::convert::From<IStorageItemContentProperties>for::winrt::Object {
        fn from(value:IStorageItemContentProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&IStorageItemContentProperties>for::winrt::Object {
        fn from(value: &IStorageItemContentProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageItemContentProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageItemContentProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IStorageItemContentProperties>for IStorageItemExtraProperties {
        fn from(value:IStorageItemContentProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IStorageItemContentProperties>for IStorageItemExtraProperties {
        fn from(value: &IStorageItemContentProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for IStorageItemContentProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for& 'a IStorageItemContentProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct StorageItemContentProperties(::winrt::Object);
      impl StorageItemContentProperties {
        pub fn get_music_properties_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<MusicProperties>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<MusicProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<MusicProperties>>(result__,)
          }
        }pub fn get_video_properties_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<VideoProperties>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<VideoProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<VideoProperties>>(result__,)
          }
        }pub fn get_image_properties_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<ImageProperties>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<ImageProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<ImageProperties>>(result__,)
          }
        }pub fn get_document_properties_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<DocumentProperties>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<DocumentProperties, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::IAsyncOperation:: <DocumentProperties> >(result__)
          }
        }pub fn retrieve_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,properties_to_retrieve:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >, >{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),properties_to_retrieve.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IMap< ::winrt::HString, ::winrt::Object, >, >>(result__)
          }
        }pub fn save_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<super::super::foundation::collections::IKeyValuePair< ::winrt::HString, ::winrt::Object, >, >, >, >, >(&self,properties_to_save:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),properties_to_save.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }pub fn save_properties_async_overload_default(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncAction>{
          let this =  &::winrt::Interface::cast::<IStorageItemExtraProperties>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncAction as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncAction>(result__)
          }
        }
      }impl::std::clone::Clone for StorageItemContentProperties {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for StorageItemContentProperties {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for StorageItemContentProperties{}
      impl::std::fmt::Debug for StorageItemContentProperties {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for StorageItemContentProperties {
        const NAME: & 'static str = "Windows.Storage.FileProperties.StorageItemContentProperties";
        
      }unsafe impl::winrt::Interface for StorageItemContentProperties {
        type Vtable = IStorageItemContentProperties_abi;
        const IID: ::winrt::Guid =  <IStorageItemContentProperties as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for StorageItemContentProperties {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.FileProperties.StorageItemContentProperties;{05294bad-bc38-48bf-85d7-770e0e2ae0ba})");
        
      }impl::std::convert::From<StorageItemContentProperties>for::winrt::Object {
        fn from(value:StorageItemContentProperties) -> Self {
          value.0
        }
      }impl::std::convert::From<&StorageItemContentProperties>for::winrt::Object {
        fn from(value: &StorageItemContentProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for StorageItemContentProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a StorageItemContentProperties {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<StorageItemContentProperties>for IStorageItemContentProperties {
        fn from(value:StorageItemContentProperties) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&StorageItemContentProperties>for IStorageItemContentProperties {
        fn from(value: &StorageItemContentProperties) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemContentProperties>>for StorageItemContentProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemContentProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemContentProperties>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemContentProperties>>for& 'a StorageItemContentProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemContentProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemContentProperties>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<StorageItemContentProperties>for IStorageItemExtraProperties {
        fn from(value:StorageItemContentProperties) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&StorageItemContentProperties>for IStorageItemExtraProperties {
        fn from(value: &StorageItemContentProperties) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for StorageItemContentProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemExtraProperties>>for& 'a StorageItemContentProperties {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemExtraProperties>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemExtraProperties>::into(::std::clone::Clone::clone(self),),)
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct PropertyPrefetchOptions(u32);
      impl::std::convert::From<u32>for PropertyPrefetchOptions {
        fn from(value:u32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for PropertyPrefetchOptions {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for PropertyPrefetchOptions {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for PropertyPrefetchOptions {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for PropertyPrefetchOptions {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for PropertyPrefetchOptions{}
      impl::std::marker::Copy for PropertyPrefetchOptions{}
      impl PropertyPrefetchOptions {
        #![allow(non_upper_case_globals)]pub const None:Self = Self(0u32);
        pub const MusicProperties:Self = Self(1u32);
        pub const VideoProperties:Self = Self(2u32);
        pub const ImageProperties:Self = Self(4u32);
        pub const DocumentProperties:Self = Self(8u32);
        pub const BasicProperties:Self = Self(16u32);
        
      }unsafe impl::winrt::Abi for PropertyPrefetchOptions {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for PropertyPrefetchOptions {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.FileProperties.PropertyPrefetchOptions;u4)",);
        
      }impl::std::ops::BitOr for PropertyPrefetchOptions {
        type Output = Self;
        fn bitor(self,rhs:Self) -> Self {
          Self(self.0|rhs.0)
        }
      }impl::std::ops::BitAnd for PropertyPrefetchOptions {
        type Output = Self;
        fn bitand(self,rhs:Self) -> Self {
          Self(self.0&rhs.0)
        }
      }
    }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod search {
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct IndexedState(i32);
      impl::std::convert::From<i32>for IndexedState {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for IndexedState {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for IndexedState {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for IndexedState {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IndexedState {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IndexedState{}
      impl::std::marker::Copy for IndexedState{}
      impl IndexedState {
        #![allow(non_upper_case_globals)]pub const Unknown:Self = Self(0i32);
        pub const NotIndexed:Self = Self(1i32);
        pub const PartiallyIndexed:Self = Self(2i32);
        pub const FullyIndexed:Self = Self(3i32);
        
      }unsafe impl::winrt::Abi for IndexedState {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for IndexedState {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.Search.IndexedState;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct FolderDepth(i32);
      impl::std::convert::From<i32>for FolderDepth {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for FolderDepth {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for FolderDepth {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for FolderDepth {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for FolderDepth {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for FolderDepth{}
      impl::std::marker::Copy for FolderDepth{}
      impl FolderDepth {
        #![allow(non_upper_case_globals)]pub const Shallow:Self = Self(0i32);
        pub const Deep:Self = Self(1i32);
        
      }unsafe impl::winrt::Abi for FolderDepth {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for FolderDepth {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.Search.FolderDepth;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct IndexerOption(i32);
      impl::std::convert::From<i32>for IndexerOption {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for IndexerOption {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for IndexerOption {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for IndexerOption {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IndexerOption {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IndexerOption{}
      impl::std::marker::Copy for IndexerOption{}
      impl IndexerOption {
        #![allow(non_upper_case_globals)]pub const UseIndexerWhenAvailable:Self = Self(0i32);
        pub const OnlyUseIndexer:Self = Self(1i32);
        pub const DoNotUseIndexer:Self = Self(2i32);
        pub const OnlyUseIndexerAndOptimizeForIndexedProperties:Self = Self(3i32);
        
      }unsafe impl::winrt::Abi for IndexerOption {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for IndexerOption {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.Search.IndexerOption;i4)",);
        
      }#[repr(C)]#[allow(non_snake_case)]pub struct SortEntry {
        pub property_name: ::winrt::HString,pub ascending_order:bool,
      }#[repr(C)]pub struct SortEntry_abi(::winrt::RawPtr,bool);
      unsafe impl::winrt::Abi for SortEntry {
        type Abi = SortEntry_abi;
        
      }impl::std::default::Default for SortEntry {
        fn default() -> Self {
          Self {
            property_name: ::winrt::HString::new(),ascending_order:false,
          }
        }
      }impl::std::fmt::Debug for SortEntry {
        fn fmt(&self,fmt: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          fmt.debug_struct("SortEntry").field("property_name", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.property_name),std::fmt::Display::fmt),])).field("ascending_order", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.ascending_order),std::fmt::Display::fmt),]),).finish()
        }
      }impl::std::clone::Clone for SortEntry {
        fn clone(&self) -> Self {
          Self {
            property_name: <::winrt::HString as std::clone::Clone>::clone(&self.property_name,),ascending_order:self.ascending_order,
          }
        }
      }impl::std::cmp::PartialEq for SortEntry {
        fn eq(&self,other: &Self) -> bool {
          self.property_name==other.property_name&&self.ascending_order==other.ascending_order
        }
      }impl::std::cmp::Eq for SortEntry{}
      unsafe impl::winrt::RuntimeType for SortEntry {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"struct(Windows.Storage.Search.SortEntry;string;b1)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct DateStackOption(i32);
      impl::std::convert::From<i32>for DateStackOption {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for DateStackOption {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for DateStackOption {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for DateStackOption {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for DateStackOption {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DateStackOption{}
      impl::std::marker::Copy for DateStackOption{}
      impl DateStackOption {
        #![allow(non_upper_case_globals)]pub const None:Self = Self(0i32);
        pub const Year:Self = Self(1i32);
        pub const Month:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for DateStackOption {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for DateStackOption {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.Search.DateStackOption;i4)",);
        
      }#[repr(transparent)]pub struct IQueryOptions(::winrt::Object);
      impl::std::clone::Clone for IQueryOptions {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IQueryOptions {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IQueryOptions {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IQueryOptions{}
      impl IQueryOptions {
        pub fn file_type_filter(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn folder_depth(&self) ->  ::winrt::Result<FolderDepth>{
          let this = self;
          unsafe {
            let mut result__: <FolderDepth as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<FolderDepth>(result__)
          }
        }pub fn set_folder_depth(&self,value:FolderDepth) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn application_search_filter(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_application_search_filter< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn user_search_filter(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_user_search_filter< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn language(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_language< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn indexer_option(&self) ->  ::winrt::Result<IndexerOption>{
          let this = self;
          unsafe {
            let mut result__: <IndexerOption as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<IndexerOption>(result__)
          }
        }pub fn set_indexer_option(&self,value:IndexerOption) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn sort_order(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<SortEntry>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector<SortEntry, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::collections::IVector<SortEntry>>(result__,)
          }
        }pub fn group_property_name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn date_stack_option(&self) ->  ::winrt::Result<DateStackOption>{
          let this = self;
          unsafe {
            let mut result__: <DateStackOption as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<DateStackOption>(result__)
          }
        }pub fn save_to_string(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn load_from_string< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn set_thumbnail_prefetch(&self,mode:super::file_properties::ThumbnailMode,requested_size:u32,options:super::file_properties::ThumbnailOptions,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this),mode,requested_size,options,).ok()
          }
        }pub fn set_property_prefetch< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,options:super::file_properties::PropertyPrefetchOptions,properties_to_retrieve:T1__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).23)(::winrt::Abi::abi(this),options,properties_to_retrieve.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IQueryOptions {
        type Vtable = IQueryOptions_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(509495022,3909,18488,[168,233,208,71,157,68,108,48],);
        
      }#[repr(C)]pub struct IQueryOptions_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut FolderDepth,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:FolderDepth,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut IndexerOption,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:IndexerOption,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut DateStackOption,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,mode:super::file_properties::ThumbnailMode,requested_size:u32,options:super::file_properties::ThumbnailOptions,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,options:super::file_properties::PropertyPrefetchOptions,properties_to_retrieve: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IQueryOptions {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{1e5e46ee-0f45-4838-a8e9-d0479d446c30}")
        };
        
      }impl::std::convert::From<IQueryOptions>for::winrt::Object {
        fn from(value:IQueryOptions) -> Self {
          value.0
        }
      }impl::std::convert::From<&IQueryOptions>for::winrt::Object {
        fn from(value: &IQueryOptions) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IQueryOptions {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IQueryOptions {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct CommonFileQuery(i32);
      impl::std::convert::From<i32>for CommonFileQuery {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for CommonFileQuery {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for CommonFileQuery {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for CommonFileQuery {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for CommonFileQuery {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for CommonFileQuery{}
      impl::std::marker::Copy for CommonFileQuery{}
      impl CommonFileQuery {
        #![allow(non_upper_case_globals)]pub const DefaultQuery:Self = Self(0i32);
        pub const OrderByName:Self = Self(1i32);
        pub const OrderByTitle:Self = Self(2i32);
        pub const OrderByMusicProperties:Self = Self(3i32);
        pub const OrderBySearchRank:Self = Self(4i32);
        pub const OrderByDate:Self = Self(5i32);
        
      }unsafe impl::winrt::Abi for CommonFileQuery {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for CommonFileQuery {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.Search.CommonFileQuery;i4)",);
        
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct CommonFolderQuery(i32);
      impl::std::convert::From<i32>for CommonFolderQuery {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for CommonFolderQuery {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for CommonFolderQuery {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for CommonFolderQuery {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for CommonFolderQuery {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for CommonFolderQuery{}
      impl::std::marker::Copy for CommonFolderQuery{}
      impl CommonFolderQuery {
        #![allow(non_upper_case_globals)]pub const DefaultQuery:Self = Self(0i32);
        pub const GroupByYear:Self = Self(100i32);
        pub const GroupByMonth:Self = Self(101i32);
        pub const GroupByArtist:Self = Self(102i32);
        pub const GroupByAlbum:Self = Self(103i32);
        pub const GroupByAlbumArtist:Self = Self(104i32);
        pub const GroupByComposer:Self = Self(105i32);
        pub const GroupByGenre:Self = Self(106i32);
        pub const GroupByPublishedYear:Self = Self(107i32);
        pub const GroupByRating:Self = Self(108i32);
        pub const GroupByTag:Self = Self(109i32);
        pub const GroupByAuthor:Self = Self(110i32);
        pub const GroupByType:Self = Self(111i32);
        
      }unsafe impl::winrt::Abi for CommonFolderQuery {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for CommonFolderQuery {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.Search.CommonFolderQuery;i4)",);
        
      }#[repr(transparent)]pub struct IQueryOptionsFactory(::winrt::Object);
      impl::std::clone::Clone for IQueryOptionsFactory {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IQueryOptionsFactory {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IQueryOptionsFactory {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IQueryOptionsFactory{}
      impl IQueryOptionsFactory {
        pub fn create_common_file_query< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,query:CommonFileQuery,file_type_filter:T1__,) ->  ::winrt::Result<QueryOptions>{
          let this = self;
          unsafe {
            let mut result__: <QueryOptions as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),query,file_type_filter.into().abi(), &mut result__,).from_abi::<QueryOptions>(result__)
          }
        }pub fn create_common_folder_query(&self,query:CommonFolderQuery,) ->  ::winrt::Result<QueryOptions>{
          let this = self;
          unsafe {
            let mut result__: <QueryOptions as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),query, &mut result__,).from_abi::<QueryOptions>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IQueryOptionsFactory {
        type Vtable = IQueryOptionsFactory_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(53354380,43457,20081,[128,17,13,238,157,72,17,163],);
        
      }#[repr(C)]pub struct IQueryOptionsFactory_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,query:CommonFileQuery,file_type_filter: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,query:CommonFolderQuery,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IQueryOptionsFactory {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{032e1f8c-a9c1-4e71-8011-0dee9d4811a3}")
        };
        
      }impl::std::convert::From<IQueryOptionsFactory>for::winrt::Object {
        fn from(value:IQueryOptionsFactory) -> Self {
          value.0
        }
      }impl::std::convert::From<&IQueryOptionsFactory>for::winrt::Object {
        fn from(value: &IQueryOptionsFactory) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IQueryOptionsFactory {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IQueryOptionsFactory {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IQueryOptionsWithProviderFilter(::winrt::Object);
      impl::std::clone::Clone for IQueryOptionsWithProviderFilter {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IQueryOptionsWithProviderFilter {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IQueryOptionsWithProviderFilter {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IQueryOptionsWithProviderFilter{}
      impl IQueryOptionsWithProviderFilter {
        pub fn storage_provider_id_filter(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }
      }unsafe impl::winrt::Interface for IQueryOptionsWithProviderFilter {
        type Vtable = IQueryOptionsWithProviderFilter_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1537019942,5572,17629,[184,154,71,165,155,125,124,79],);
        
      }#[repr(C)]pub struct IQueryOptionsWithProviderFilter_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IQueryOptionsWithProviderFilter {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{5b9d1026-15c4-44dd-b89a-47a59b7d7c4f}")
        };
        
      }impl::std::convert::From<IQueryOptionsWithProviderFilter>for::winrt::Object {
        fn from(value:IQueryOptionsWithProviderFilter) -> Self {
          value.0
        }
      }impl::std::convert::From<&IQueryOptionsWithProviderFilter>for::winrt::Object {
        fn from(value: &IQueryOptionsWithProviderFilter) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IQueryOptionsWithProviderFilter {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IQueryOptionsWithProviderFilter {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct QueryOptions(::winrt::Object);
      impl QueryOptions {
        pub fn new() ->  ::winrt::Result<Self>{
          Self::IActivationFactory(|f|f.activate_instance::<Self>())
        }pub fn file_type_filter(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }pub fn folder_depth(&self) ->  ::winrt::Result<FolderDepth>{
          let this = self;
          unsafe {
            let mut result__: <FolderDepth as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<FolderDepth>(result__)
          }
        }pub fn set_folder_depth(&self,value:FolderDepth) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn application_search_filter(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_application_search_filter< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn user_search_filter(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_user_search_filter< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn language(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn set_language< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn indexer_option(&self) ->  ::winrt::Result<IndexerOption>{
          let this = self;
          unsafe {
            let mut result__: <IndexerOption as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this), &mut result__,).from_abi::<IndexerOption>(result__)
          }
        }pub fn set_indexer_option(&self,value:IndexerOption) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn sort_order(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<SortEntry>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector<SortEntry, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this), &mut result__,).from_abi::<super::super::foundation::collections::IVector<SortEntry>>(result__,)
          }
        }pub fn group_property_name(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn date_stack_option(&self) ->  ::winrt::Result<DateStackOption>{
          let this = self;
          unsafe {
            let mut result__: <DateStackOption as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this), &mut result__,).from_abi::<DateStackOption>(result__)
          }
        }pub fn save_to_string(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this), &mut result__,).from_abi::<::winrt::HString>(result__)
          }
        }pub fn load_from_string< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this),value.into().abi(),).ok()
          }
        }pub fn set_thumbnail_prefetch(&self,mode:super::file_properties::ThumbnailMode,requested_size:u32,options:super::file_properties::ThumbnailOptions,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this),mode,requested_size,options,).ok()
          }
        }pub fn set_property_prefetch< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(&self,options:super::file_properties::PropertyPrefetchOptions,properties_to_retrieve:T1__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).23)(::winrt::Abi::abi(this),options,properties_to_retrieve.into().abi(),).ok()
          }
        }pub fn create_common_file_query< 'a ,T1__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::collections::IIterable<::winrt::HString>, >, >, >(query:CommonFileQuery,file_type_filter:T1__,) ->  ::winrt::Result<QueryOptions>{
          Self::IQueryOptionsFactory(|this|unsafe {
            let mut result__: <QueryOptions as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),query,file_type_filter.into().abi(), &mut result__,).from_abi::<QueryOptions>(result__)
          })
        }pub fn create_common_folder_query(query:CommonFolderQuery,) ->  ::winrt::Result<QueryOptions>{
          Self::IQueryOptionsFactory(|this|unsafe {
            let mut result__: <QueryOptions as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),query, &mut result__,).from_abi::<QueryOptions>(result__)
          })
        }pub fn storage_provider_id_filter(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVector<::winrt::HString>>{
          let this =  &::winrt::Interface::cast::<IQueryOptionsWithProviderFilter>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IVector< ::winrt::HString, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVector:: < ::winrt::HString> >(result__)
          }
        }#[allow(non_snake_case)]fn IActivationFactory<R,F:FnOnce(&::winrt::IActivationFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<QueryOptions, ::winrt::IActivationFactory, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }#[allow(non_snake_case)]fn IQueryOptionsFactory<R,F:FnOnce(&IQueryOptionsFactory) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<QueryOptions,IQueryOptionsFactory>  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for QueryOptions {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for QueryOptions {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for QueryOptions{}
      impl::std::fmt::Debug for QueryOptions {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for QueryOptions {
        const NAME: & 'static str = "Windows.Storage.Search.QueryOptions";
        
      }unsafe impl::winrt::Interface for QueryOptions {
        type Vtable = IQueryOptions_abi;
        const IID: ::winrt::Guid =  <IQueryOptions as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for QueryOptions {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.Search.QueryOptions;{1e5e46ee-0f45-4838-a8e9-d0479d446c30})");
        
      }impl::std::convert::From<QueryOptions>for::winrt::Object {
        fn from(value:QueryOptions) -> Self {
          value.0
        }
      }impl::std::convert::From<&QueryOptions>for::winrt::Object {
        fn from(value: &QueryOptions) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for QueryOptions {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a QueryOptions {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<QueryOptions>for IQueryOptions {
        fn from(value:QueryOptions) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&QueryOptions>for IQueryOptions {
        fn from(value: &QueryOptions) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IQueryOptions>>for QueryOptions {
        fn into(self) ->  ::winrt::Param< 'a ,IQueryOptions>{
          ::winrt::Param::Owned(::std::convert::Into::<IQueryOptions>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IQueryOptions>>for& 'a QueryOptions {
        fn into(self) ->  ::winrt::Param< 'a ,IQueryOptions>{
          ::winrt::Param::Owned(::std::convert::Into::<IQueryOptions>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<QueryOptions>for IQueryOptionsWithProviderFilter {
        fn from(value:QueryOptions) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&QueryOptions>for IQueryOptionsWithProviderFilter {
        fn from(value: &QueryOptions) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IQueryOptionsWithProviderFilter>>for QueryOptions {
        fn into(self) ->  ::winrt::Param< 'a ,IQueryOptionsWithProviderFilter>{
          ::winrt::Param::Owned(::std::convert::Into::<IQueryOptionsWithProviderFilter>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IQueryOptionsWithProviderFilter>>for& 'a QueryOptions {
        fn into(self) ->  ::winrt::Param< 'a ,IQueryOptionsWithProviderFilter>{
          ::winrt::Param::Owned(::std::convert::Into::<IQueryOptionsWithProviderFilter>::into(::std::clone::Clone::clone(self),),)
        }
      }unsafe impl::std::marker::Send for QueryOptions{}
      unsafe impl::std::marker::Sync for QueryOptions{}
      #[repr(transparent)]pub struct IStorageQueryResultBase(::winrt::Object);
      impl::std::clone::Clone for IStorageQueryResultBase {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IStorageQueryResultBase {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IStorageQueryResultBase {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IStorageQueryResultBase{}
      impl IStorageQueryResultBase {
        pub fn get_item_count_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn folder(&self) ->  ::winrt::Result<super::StorageFolder>{
          let this = self;
          unsafe {
            let mut result__: <super::StorageFolder as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::StorageFolder>(result__)
          }
        }pub fn contents_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<IStorageQueryResultBase, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_contents_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn options_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<IStorageQueryResultBase, ::winrt::Object, >, >, >, >(&self,changed_handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),changed_handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_options_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn find_start_index_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn get_current_query_options(&self) ->  ::winrt::Result<QueryOptions>{
          let this = self;
          unsafe {
            let mut result__: <QueryOptions as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<QueryOptions>(result__)
          }
        }pub fn apply_new_query_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,QueryOptions>>, >(&self,new_query_options:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),new_query_options.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IStorageQueryResultBase {
        type Vtable = IStorageQueryResultBase_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3264730893,29523,18347,[186,88,140,97,66,93,197,75],);
        
      }#[repr(C)]pub struct IStorageQueryResultBase_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,event_cookie:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,changed_handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,event_cookie:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,new_query_options: ::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IStorageQueryResultBase {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{c297d70d-7353-47ab-ba58-8c61425dc54b}")
        };
        
      }impl::std::convert::From<IStorageQueryResultBase>for::winrt::Object {
        fn from(value:IStorageQueryResultBase) -> Self {
          value.0
        }
      }impl::std::convert::From<&IStorageQueryResultBase>for::winrt::Object {
        fn from(value: &IStorageQueryResultBase) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageQueryResultBase {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageQueryResultBase {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IStorageFileQueryResult(::winrt::Object);
      impl::std::clone::Clone for IStorageFileQueryResult {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IStorageFileQueryResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IStorageFileQueryResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IStorageFileQueryResult{}
      impl IStorageFileQueryResult {
        pub fn get_files_async(&self,start_index:u32,max_number_of_items:u32,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),start_index,max_number_of_items, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile>, >>(result__)
          }
        }pub fn get_files_async_default_start_and_count(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile, >, >>(result__)
          }
        }pub fn get_item_count_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn folder(&self) ->  ::winrt::Result<super::StorageFolder>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::StorageFolder as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::StorageFolder>(result__)
          }
        }pub fn contents_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<IStorageQueryResultBase, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_contents_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn options_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<IStorageQueryResultBase, ::winrt::Object, >, >, >, >(&self,changed_handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),changed_handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_options_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn find_start_index_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn get_current_query_options(&self) ->  ::winrt::Result<QueryOptions>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <QueryOptions as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<QueryOptions>(result__)
          }
        }pub fn apply_new_query_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,QueryOptions>>, >(&self,new_query_options:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),new_query_options.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IStorageFileQueryResult {
        type Vtable = IStorageFileQueryResult_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1392354375,11178,16684,[178,159,212,177,119,142,250,30],);
        
      }#[repr(C)]pub struct IStorageFileQueryResult_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,start_index:u32,max_number_of_items:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IStorageFileQueryResult {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{52fda447-2baa-412c-b29f-d4b1778efa1e}")
        };
        
      }impl::std::convert::From<IStorageFileQueryResult>for::winrt::Object {
        fn from(value:IStorageFileQueryResult) -> Self {
          value.0
        }
      }impl::std::convert::From<&IStorageFileQueryResult>for::winrt::Object {
        fn from(value: &IStorageFileQueryResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageFileQueryResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageFileQueryResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IStorageFileQueryResult>for IStorageQueryResultBase {
        fn from(value:IStorageFileQueryResult) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IStorageFileQueryResult>for IStorageQueryResultBase {
        fn from(value: &IStorageFileQueryResult) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageQueryResultBase>>for IStorageFileQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageQueryResultBase>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageQueryResultBase>>for& 'a IStorageFileQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageQueryResultBase>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IStorageFileQueryResult2(::winrt::Object);
      impl::std::clone::Clone for IStorageFileQueryResult2 {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IStorageFileQueryResult2 {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IStorageFileQueryResult2 {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IStorageFileQueryResult2{}
      impl IStorageFileQueryResult2 {
        pub fn get_matching_properties_with_ranges< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::StorageFile>>, >(&self,file:T0__,) ->  ::winrt::Result<super::super::foundation::collections::IMap< ::winrt::HString,super::super::foundation::collections::IVectorView<super::super::data::text::TextSegment, >, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IMap< ::winrt::HString,super::super::foundation::collections::IVectorView<super::super::data::text::TextSegment, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),file.into().abi(), &mut result__,).from_abi::<super::super::foundation::collections::IMap< ::winrt::HString,super::super::foundation::collections::IVectorView<super::super::data::text::TextSegment, >, >>(result__)
          }
        }pub fn get_item_count_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn folder(&self) ->  ::winrt::Result<super::StorageFolder>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::StorageFolder as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::StorageFolder>(result__)
          }
        }pub fn contents_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<IStorageQueryResultBase, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_contents_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn options_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<IStorageQueryResultBase, ::winrt::Object, >, >, >, >(&self,changed_handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),changed_handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_options_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn find_start_index_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn get_current_query_options(&self) ->  ::winrt::Result<QueryOptions>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <QueryOptions as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<QueryOptions>(result__)
          }
        }pub fn apply_new_query_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,QueryOptions>>, >(&self,new_query_options:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),new_query_options.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IStorageFileQueryResult2 {
        type Vtable = IStorageFileQueryResult2_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1314765277,28993,18116,[139,227,233,220,158,39,39,92],);
        
      }#[repr(C)]pub struct IStorageFileQueryResult2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,file: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IStorageFileQueryResult2 {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{4e5db9dd-7141-46c4-8be3-e9dc9e27275c}")
        };
        
      }impl::std::convert::From<IStorageFileQueryResult2>for::winrt::Object {
        fn from(value:IStorageFileQueryResult2) -> Self {
          value.0
        }
      }impl::std::convert::From<&IStorageFileQueryResult2>for::winrt::Object {
        fn from(value: &IStorageFileQueryResult2) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageFileQueryResult2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageFileQueryResult2 {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IStorageFileQueryResult2>for IStorageQueryResultBase {
        fn from(value:IStorageFileQueryResult2) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IStorageFileQueryResult2>for IStorageQueryResultBase {
        fn from(value: &IStorageFileQueryResult2) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageQueryResultBase>>for IStorageFileQueryResult2 {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageQueryResultBase>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageQueryResultBase>>for& 'a IStorageFileQueryResult2 {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageQueryResultBase>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct StorageFileQueryResult(::winrt::Object);
      impl StorageFileQueryResult {
        pub fn get_files_async(&self,start_index:u32,max_number_of_items:u32,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),start_index,max_number_of_items, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile>, >>(result__)
          }
        }pub fn get_files_async_default_start_and_count(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile, >, >>(result__)
          }
        }pub fn get_matching_properties_with_ranges< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::StorageFile>>, >(&self,file:T0__,) ->  ::winrt::Result<super::super::foundation::collections::IMap< ::winrt::HString,super::super::foundation::collections::IVectorView<super::super::data::text::TextSegment, >, >, >{
          let this =  &::winrt::Interface::cast::<IStorageFileQueryResult2>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::collections::IMap< ::winrt::HString,super::super::foundation::collections::IVectorView<super::super::data::text::TextSegment, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),file.into().abi(), &mut result__,).from_abi::<super::super::foundation::collections::IMap< ::winrt::HString,super::super::foundation::collections::IVectorView<super::super::data::text::TextSegment, >, >>(result__)
          }
        }pub fn get_item_count_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn folder(&self) ->  ::winrt::Result<super::StorageFolder>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::StorageFolder as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::StorageFolder>(result__)
          }
        }pub fn contents_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<IStorageQueryResultBase, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_contents_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn options_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<IStorageQueryResultBase, ::winrt::Object, >, >, >, >(&self,changed_handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),changed_handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_options_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn find_start_index_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn get_current_query_options(&self) ->  ::winrt::Result<QueryOptions>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <QueryOptions as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<QueryOptions>(result__)
          }
        }pub fn apply_new_query_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,QueryOptions>>, >(&self,new_query_options:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),new_query_options.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for StorageFileQueryResult {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for StorageFileQueryResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for StorageFileQueryResult{}
      impl::std::fmt::Debug for StorageFileQueryResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for StorageFileQueryResult {
        const NAME: & 'static str = "Windows.Storage.Search.StorageFileQueryResult";
        
      }unsafe impl::winrt::Interface for StorageFileQueryResult {
        type Vtable = IStorageFileQueryResult_abi;
        const IID: ::winrt::Guid =  <IStorageFileQueryResult as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for StorageFileQueryResult {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.Search.StorageFileQueryResult;{52fda447-2baa-412c-b29f-d4b1778efa1e})");
        
      }impl::std::convert::From<StorageFileQueryResult>for::winrt::Object {
        fn from(value:StorageFileQueryResult) -> Self {
          value.0
        }
      }impl::std::convert::From<&StorageFileQueryResult>for::winrt::Object {
        fn from(value: &StorageFileQueryResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for StorageFileQueryResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a StorageFileQueryResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<StorageFileQueryResult>for IStorageFileQueryResult {
        fn from(value:StorageFileQueryResult) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&StorageFileQueryResult>for IStorageFileQueryResult {
        fn from(value: &StorageFileQueryResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFileQueryResult>>for StorageFileQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageFileQueryResult>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageFileQueryResult>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFileQueryResult>>for& 'a StorageFileQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageFileQueryResult>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageFileQueryResult>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<StorageFileQueryResult>for IStorageFileQueryResult2 {
        fn from(value:StorageFileQueryResult) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&StorageFileQueryResult>for IStorageFileQueryResult2 {
        fn from(value: &StorageFileQueryResult) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFileQueryResult2>>for StorageFileQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageFileQueryResult2>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageFileQueryResult2>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFileQueryResult2>>for& 'a StorageFileQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageFileQueryResult2>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageFileQueryResult2>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<StorageFileQueryResult>for IStorageQueryResultBase {
        fn from(value:StorageFileQueryResult) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&StorageFileQueryResult>for IStorageQueryResultBase {
        fn from(value: &StorageFileQueryResult) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageQueryResultBase>>for StorageFileQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageQueryResultBase>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageQueryResultBase>>for& 'a StorageFileQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageQueryResultBase>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IStorageFolderQueryResult(::winrt::Object);
      impl::std::clone::Clone for IStorageFolderQueryResult {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IStorageFolderQueryResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IStorageFolderQueryResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IStorageFolderQueryResult{}
      impl IStorageFolderQueryResult {
        pub fn get_folders_async(&self,start_index:u32,max_number_of_items:u32,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),start_index,max_number_of_items, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder, >, >>(result__)
          }
        }pub fn get_folders_async_default_start_and_count(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder, >, >>(result__)
          }
        }pub fn get_item_count_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn folder(&self) ->  ::winrt::Result<super::StorageFolder>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::StorageFolder as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::StorageFolder>(result__)
          }
        }pub fn contents_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<IStorageQueryResultBase, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_contents_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn options_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<IStorageQueryResultBase, ::winrt::Object, >, >, >, >(&self,changed_handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),changed_handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_options_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn find_start_index_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn get_current_query_options(&self) ->  ::winrt::Result<QueryOptions>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <QueryOptions as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<QueryOptions>(result__)
          }
        }pub fn apply_new_query_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,QueryOptions>>, >(&self,new_query_options:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),new_query_options.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IStorageFolderQueryResult {
        type Vtable = IStorageFolderQueryResult_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1716832529,32102,18170,[174,207,228,164,186,169,58,184],);
        
      }#[repr(C)]pub struct IStorageFolderQueryResult_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,start_index:u32,max_number_of_items:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IStorageFolderQueryResult {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{6654c911-7d66-46fa-aecf-e4a4baa93ab8}")
        };
        
      }impl::std::convert::From<IStorageFolderQueryResult>for::winrt::Object {
        fn from(value:IStorageFolderQueryResult) -> Self {
          value.0
        }
      }impl::std::convert::From<&IStorageFolderQueryResult>for::winrt::Object {
        fn from(value: &IStorageFolderQueryResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageFolderQueryResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageFolderQueryResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IStorageFolderQueryResult>for IStorageQueryResultBase {
        fn from(value:IStorageFolderQueryResult) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IStorageFolderQueryResult>for IStorageQueryResultBase {
        fn from(value: &IStorageFolderQueryResult) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageQueryResultBase>>for IStorageFolderQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageQueryResultBase>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageQueryResultBase>>for& 'a IStorageFolderQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageQueryResultBase>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct StorageFolderQueryResult(::winrt::Object);
      impl StorageFolderQueryResult {
        pub fn get_folders_async(&self,start_index:u32,max_number_of_items:u32,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),start_index,max_number_of_items, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder, >, >>(result__)
          }
        }pub fn get_folders_async_default_start_and_count(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder, >, >>(result__)
          }
        }pub fn get_item_count_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn folder(&self) ->  ::winrt::Result<super::StorageFolder>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::StorageFolder as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::StorageFolder>(result__)
          }
        }pub fn contents_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<IStorageQueryResultBase, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_contents_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn options_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<IStorageQueryResultBase, ::winrt::Object, >, >, >, >(&self,changed_handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),changed_handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_options_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn find_start_index_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn get_current_query_options(&self) ->  ::winrt::Result<QueryOptions>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <QueryOptions as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<QueryOptions>(result__)
          }
        }pub fn apply_new_query_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,QueryOptions>>, >(&self,new_query_options:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),new_query_options.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for StorageFolderQueryResult {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for StorageFolderQueryResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for StorageFolderQueryResult{}
      impl::std::fmt::Debug for StorageFolderQueryResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for StorageFolderQueryResult {
        const NAME: & 'static str = "Windows.Storage.Search.StorageFolderQueryResult";
        
      }unsafe impl::winrt::Interface for StorageFolderQueryResult {
        type Vtable = IStorageFolderQueryResult_abi;
        const IID: ::winrt::Guid =  <IStorageFolderQueryResult as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for StorageFolderQueryResult {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.Search.StorageFolderQueryResult;{6654c911-7d66-46fa-aecf-e4a4baa93ab8})");
        
      }impl::std::convert::From<StorageFolderQueryResult>for::winrt::Object {
        fn from(value:StorageFolderQueryResult) -> Self {
          value.0
        }
      }impl::std::convert::From<&StorageFolderQueryResult>for::winrt::Object {
        fn from(value: &StorageFolderQueryResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for StorageFolderQueryResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a StorageFolderQueryResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<StorageFolderQueryResult>for IStorageFolderQueryResult {
        fn from(value:StorageFolderQueryResult) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&StorageFolderQueryResult>for IStorageFolderQueryResult {
        fn from(value: &StorageFolderQueryResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFolderQueryResult>>for StorageFolderQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageFolderQueryResult>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageFolderQueryResult>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageFolderQueryResult>>for& 'a StorageFolderQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageFolderQueryResult>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageFolderQueryResult>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<StorageFolderQueryResult>for IStorageQueryResultBase {
        fn from(value:StorageFolderQueryResult) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&StorageFolderQueryResult>for IStorageQueryResultBase {
        fn from(value: &StorageFolderQueryResult) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageQueryResultBase>>for StorageFolderQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageQueryResultBase>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageQueryResultBase>>for& 'a StorageFolderQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageQueryResultBase>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IStorageItemQueryResult(::winrt::Object);
      impl::std::clone::Clone for IStorageItemQueryResult {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IStorageItemQueryResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IStorageItemQueryResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IStorageItemQueryResult{}
      impl IStorageItemQueryResult {
        pub fn get_items_async(&self,start_index:u32,max_number_of_items:u32,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::IStorageItem>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::IStorageItem>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),start_index,max_number_of_items, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::IStorageItem>, >>(result__)
          }
        }pub fn get_items_async_default_start_and_count(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::IStorageItem>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::IStorageItem>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::IStorageItem, >, >>(result__)
          }
        }pub fn get_item_count_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn folder(&self) ->  ::winrt::Result<super::StorageFolder>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::StorageFolder as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::StorageFolder>(result__)
          }
        }pub fn contents_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<IStorageQueryResultBase, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_contents_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn options_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<IStorageQueryResultBase, ::winrt::Object, >, >, >, >(&self,changed_handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),changed_handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_options_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn find_start_index_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn get_current_query_options(&self) ->  ::winrt::Result<QueryOptions>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <QueryOptions as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<QueryOptions>(result__)
          }
        }pub fn apply_new_query_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,QueryOptions>>, >(&self,new_query_options:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),new_query_options.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IStorageItemQueryResult {
        type Vtable = IStorageItemQueryResult_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3902046329,40280,18360,[178,178,65,176,127,71,149,249],);
        
      }#[repr(C)]pub struct IStorageItemQueryResult_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,start_index:u32,max_number_of_items:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IStorageItemQueryResult {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{e8948079-9d58-47b8-b2b2-41b07f4795f9}")
        };
        
      }impl::std::convert::From<IStorageItemQueryResult>for::winrt::Object {
        fn from(value:IStorageItemQueryResult) -> Self {
          value.0
        }
      }impl::std::convert::From<&IStorageItemQueryResult>for::winrt::Object {
        fn from(value: &IStorageItemQueryResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageItemQueryResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageItemQueryResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IStorageItemQueryResult>for IStorageQueryResultBase {
        fn from(value:IStorageItemQueryResult) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IStorageItemQueryResult>for IStorageQueryResultBase {
        fn from(value: &IStorageItemQueryResult) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageQueryResultBase>>for IStorageItemQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageQueryResultBase>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageQueryResultBase>>for& 'a IStorageItemQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageQueryResultBase>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct StorageItemQueryResult(::winrt::Object);
      impl StorageItemQueryResult {
        pub fn get_items_async(&self,start_index:u32,max_number_of_items:u32,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::IStorageItem>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::IStorageItem>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),start_index,max_number_of_items, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::IStorageItem>, >>(result__)
          }
        }pub fn get_items_async_default_start_and_count(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::IStorageItem>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::IStorageItem>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::IStorageItem, >, >>(result__)
          }
        }pub fn get_item_count_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn folder(&self) ->  ::winrt::Result<super::StorageFolder>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::StorageFolder as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::StorageFolder>(result__)
          }
        }pub fn contents_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<IStorageQueryResultBase, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_contents_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn options_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<IStorageQueryResultBase, ::winrt::Object, >, >, >, >(&self,changed_handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),changed_handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_options_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,event_cookie:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),event_cookie.into().abi(),).ok()
          }
        }pub fn find_start_index_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>, >(&self,value:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<u32>>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <u32>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<u32>>(result__)
          }
        }pub fn get_current_query_options(&self) ->  ::winrt::Result<QueryOptions>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            let mut result__: <QueryOptions as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<QueryOptions>(result__)
          }
        }pub fn apply_new_query_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,QueryOptions>>, >(&self,new_query_options:T0__,) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IStorageQueryResultBase>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),new_query_options.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for StorageItemQueryResult {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for StorageItemQueryResult {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for StorageItemQueryResult{}
      impl::std::fmt::Debug for StorageItemQueryResult {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for StorageItemQueryResult {
        const NAME: & 'static str = "Windows.Storage.Search.StorageItemQueryResult";
        
      }unsafe impl::winrt::Interface for StorageItemQueryResult {
        type Vtable = IStorageItemQueryResult_abi;
        const IID: ::winrt::Guid =  <IStorageItemQueryResult as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for StorageItemQueryResult {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.Storage.Search.StorageItemQueryResult;{e8948079-9d58-47b8-b2b2-41b07f4795f9})");
        
      }impl::std::convert::From<StorageItemQueryResult>for::winrt::Object {
        fn from(value:StorageItemQueryResult) -> Self {
          value.0
        }
      }impl::std::convert::From<&StorageItemQueryResult>for::winrt::Object {
        fn from(value: &StorageItemQueryResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for StorageItemQueryResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a StorageItemQueryResult {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<StorageItemQueryResult>for IStorageItemQueryResult {
        fn from(value:StorageItemQueryResult) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&StorageItemQueryResult>for IStorageItemQueryResult {
        fn from(value: &StorageItemQueryResult) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemQueryResult>>for StorageItemQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemQueryResult>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemQueryResult>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageItemQueryResult>>for& 'a StorageItemQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageItemQueryResult>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageItemQueryResult>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<StorageItemQueryResult>for IStorageQueryResultBase {
        fn from(value:StorageItemQueryResult) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&StorageItemQueryResult>for IStorageQueryResultBase {
        fn from(value: &StorageItemQueryResult) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageQueryResultBase>>for StorageItemQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageQueryResultBase>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(self,))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IStorageQueryResultBase>>for& 'a StorageItemQueryResult {
        fn into(self) ->  ::winrt::Param< 'a ,IStorageQueryResultBase>{
          ::winrt::Param::Owned(::std::convert::Into::<IStorageQueryResultBase>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IStorageFolderQueryOperations(::winrt::Object);
      impl::std::clone::Clone for IStorageFolderQueryOperations {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IStorageFolderQueryOperations {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IStorageFolderQueryOperations {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IStorageFolderQueryOperations{}
      impl IStorageFolderQueryOperations {
        pub fn get_indexed_state_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<IndexedState>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <IndexedState>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<IndexedState>>(result__,)
          }
        }pub fn create_file_query_overload_default(&self,) ->  ::winrt::Result<StorageFileQueryResult>{
          let this = self;
          unsafe {
            let mut result__: <StorageFileQueryResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<StorageFileQueryResult>(result__)
          }
        }pub fn create_file_query(&self,query:CommonFileQuery,) ->  ::winrt::Result<StorageFileQueryResult>{
          let this = self;
          unsafe {
            let mut result__: <StorageFileQueryResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),query, &mut result__,).from_abi::<StorageFileQueryResult>(result__)
          }
        }pub fn create_file_query_with_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,QueryOptions>>, >(&self,query_options:T0__,) ->  ::winrt::Result<StorageFileQueryResult>{
          let this = self;
          unsafe {
            let mut result__: <StorageFileQueryResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),query_options.into().abi(), &mut result__,).from_abi::<StorageFileQueryResult>(result__)
          }
        }pub fn create_folder_query_overload_default(&self,) ->  ::winrt::Result<StorageFolderQueryResult>{
          let this = self;
          unsafe {
            let mut result__: <StorageFolderQueryResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<StorageFolderQueryResult>(result__)
          }
        }pub fn create_folder_query(&self,query:CommonFolderQuery,) ->  ::winrt::Result<StorageFolderQueryResult>{
          let this = self;
          unsafe {
            let mut result__: <StorageFolderQueryResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),query, &mut result__,).from_abi::<StorageFolderQueryResult>(result__)
          }
        }pub fn create_folder_query_with_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,QueryOptions>>, >(&self,query_options:T0__,) ->  ::winrt::Result<StorageFolderQueryResult>{
          let this = self;
          unsafe {
            let mut result__: <StorageFolderQueryResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),query_options.into().abi(), &mut result__,).from_abi::<StorageFolderQueryResult>(result__)
          }
        }pub fn create_item_query(&self) ->  ::winrt::Result<StorageItemQueryResult>{
          let this = self;
          unsafe {
            let mut result__: <StorageItemQueryResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<StorageItemQueryResult>(result__)
          }
        }pub fn create_item_query_with_options< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,QueryOptions>>, >(&self,query_options:T0__,) ->  ::winrt::Result<StorageItemQueryResult>{
          let this = self;
          unsafe {
            let mut result__: <StorageItemQueryResult as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),query_options.into().abi(), &mut result__,).from_abi::<StorageItemQueryResult>(result__)
          }
        }pub fn get_files_async(&self,query:CommonFileQuery,start_index:u32,max_items_to_retrieve:u32,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),query,start_index,max_items_to_retrieve, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile>, >>(result__)
          }
        }pub fn get_files_async_overload_default_start_and_count(&self,query:CommonFileQuery,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),query, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFile>, >>(result__)
          }
        }pub fn get_folders_async(&self,query:CommonFolderQuery,start_index:u32,max_items_to_retrieve:u32,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),query,start_index,max_items_to_retrieve, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder, >, >>(result__)
          }
        }pub fn get_folders_async_overload_default_start_and_count(&self,query:CommonFolderQuery,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder, >, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),query, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::StorageFolder, >, >>(result__)
          }
        }pub fn get_items_async(&self,start_index:u32,max_items_to_retrieve:u32,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::IStorageItem>, >, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::IStorageItem>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this),start_index,max_items_to_retrieve, &mut result__,).from_abi::<super::super::foundation::IAsyncOperation<super::super::foundation::collections::IVectorView<super::IStorageItem>, >>(result__)
          }
        }pub fn are_query_options_supported< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,QueryOptions>>, >(&self,query_options:T0__,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),query_options.into().abi(), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn is_common_folder_query_supported(&self,query:CommonFolderQuery,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this),query, &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn is_common_file_query_supported(&self,query:CommonFileQuery,) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this),query, &mut result__,).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IStorageFolderQueryOperations {
        type Vtable = IStorageFolderQueryOperations_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3410218185,17515,19023,[190,151,117,119,113,190,82,3],);
        
      }#[repr(C)]pub struct IStorageFolderQueryOperations_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,query:CommonFileQuery,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,query_options: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,query:CommonFolderQuery,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,query_options: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,query_options: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,query:CommonFileQuery,start_index:u32,max_items_to_retrieve:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,query:CommonFileQuery,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,query:CommonFolderQuery,start_index:u32,max_items_to_retrieve:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,query:CommonFolderQuery,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,start_index:u32,max_items_to_retrieve:u32,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,query_options: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,query:CommonFolderQuery,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,query:CommonFileQuery,result__: *mut bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IStorageFolderQueryOperations {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{cb43ccc9-446b-4a4f-be97-757771be5203}")
        };
        
      }impl::std::convert::From<IStorageFolderQueryOperations>for::winrt::Object {
        fn from(value:IStorageFolderQueryOperations) -> Self {
          value.0
        }
      }impl::std::convert::From<&IStorageFolderQueryOperations>for::winrt::Object {
        fn from(value: &IStorageFolderQueryOperations) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IStorageFolderQueryOperations {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IStorageFolderQueryOperations {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }
    }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod streams {
      #[repr(transparent)]pub struct IContentTypeProvider(::winrt::Object);
      impl::std::clone::Clone for IContentTypeProvider {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IContentTypeProvider {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IContentTypeProvider {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IContentTypeProvider{}
      impl IContentTypeProvider {
        pub fn content_type(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IContentTypeProvider {
        type Vtable = IContentTypeProvider_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2547030181,15257,19945,[136,165,225,29,47,80,199,149],);
        
      }#[repr(C)]pub struct IContentTypeProvider_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IContentTypeProvider {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{97d098a5-3b99-4de9-88a5-e11d2f50c795}")
        };
        
      }impl::std::convert::From<IContentTypeProvider>for::winrt::Object {
        fn from(value:IContentTypeProvider) -> Self {
          value.0
        }
      }impl::std::convert::From<&IContentTypeProvider>for::winrt::Object {
        fn from(value: &IContentTypeProvider) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IContentTypeProvider {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IContentTypeProvider {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IBuffer(::winrt::Object);
      impl::std::clone::Clone for IBuffer {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IBuffer {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IBuffer {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IBuffer{}
      impl IBuffer {
        pub fn capacity(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn length(&self) ->  ::winrt::Result<u32>{
          let this = self;
          unsafe {
            let mut result__: <u32 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<u32>(result__)
          }
        }pub fn set_length(&self,value:u32) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),value).ok()
          }
        }
      }unsafe impl::winrt::Interface for IBuffer {
        type Vtable = IBuffer_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2421821408,48211,4575,[140,73,0,30,79,198,134,218],);
        
      }#[repr(C)]pub struct IBuffer_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IBuffer {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{905a0fe0-bc53-11df-8c49-001e4fc686da}")
        };
        
      }impl::std::convert::From<IBuffer>for::winrt::Object {
        fn from(value:IBuffer) -> Self {
          value.0
        }
      }impl::std::convert::From<&IBuffer>for::winrt::Object {
        fn from(value: &IBuffer) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IBuffer {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IBuffer {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct InputStreamOptions(u32);
      impl::std::convert::From<u32>for InputStreamOptions {
        fn from(value:u32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for InputStreamOptions {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for InputStreamOptions {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for InputStreamOptions {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for InputStreamOptions {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for InputStreamOptions{}
      impl::std::marker::Copy for InputStreamOptions{}
      impl InputStreamOptions {
        #![allow(non_upper_case_globals)]pub const None:Self = Self(0u32);
        pub const Partial:Self = Self(1u32);
        pub const ReadAhead:Self = Self(2u32);
        
      }unsafe impl::winrt::Abi for InputStreamOptions {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for InputStreamOptions {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.Storage.Streams.InputStreamOptions;u4)",);
        
      }impl::std::ops::BitOr for InputStreamOptions {
        type Output = Self;
        fn bitor(self,rhs:Self) -> Self {
          Self(self.0|rhs.0)
        }
      }impl::std::ops::BitAnd for InputStreamOptions {
        type Output = Self;
        fn bitand(self,rhs:Self) -> Self {
          Self(self.0&rhs.0)
        }
      }#[repr(transparent)]pub struct IInputStream(::winrt::Object);
      impl::std::clone::Clone for IInputStream {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IInputStream {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IInputStream {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IInputStream{}
      impl IInputStream {
        pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn read_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IBuffer>>>(&self,buffer:T0__,count:u32,options:InputStreamOptions,) ->  ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<IBuffer,u32>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperationWithProgress<IBuffer,u32, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),buffer.into().abi(),count,options, &mut result__).from_abi:: <super::super::foundation::IAsyncOperationWithProgress:: <IBuffer,u32> >(result__)
          }
        }
      }unsafe impl::winrt::Interface for IInputStream {
        type Vtable = IInputStream_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2421821410,48211,4575,[140,73,0,30,79,198,134,218],);
        
      }#[repr(C)]pub struct IInputStream_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,buffer: ::winrt::RawPtr,count:u32,options:InputStreamOptions,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IInputStream {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{905a0fe2-bc53-11df-8c49-001e4fc686da}")
        };
        
      }impl::std::convert::From<IInputStream>for::winrt::Object {
        fn from(value:IInputStream) -> Self {
          value.0
        }
      }impl::std::convert::From<&IInputStream>for::winrt::Object {
        fn from(value: &IInputStream) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IInputStream {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IInputStream {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IInputStream>for super::super::foundation::IClosable {
        fn from(value:IInputStream) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IInputStream>for super::super::foundation::IClosable {
        fn from(value: &IInputStream) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for IInputStream {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a IInputStream {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct IOutputStream(::winrt::Object);
      impl::std::clone::Clone for IOutputStream {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IOutputStream {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IOutputStream {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IOutputStream{}
      impl IOutputStream {
        pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn write_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IBuffer>>>(&self,buffer:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<u32,u32>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperationWithProgress<u32,u32, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),buffer.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperationWithProgress:: <u32,u32> >(result__)
          }
        }pub fn flush_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<bool>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <bool>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<bool>>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IOutputStream {
        type Vtable = IOutputStream_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2421821414,48211,4575,[140,73,0,30,79,198,134,218],);
        
      }#[repr(C)]pub struct IOutputStream_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,buffer: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IOutputStream {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{905a0fe6-bc53-11df-8c49-001e4fc686da}")
        };
        
      }impl::std::convert::From<IOutputStream>for::winrt::Object {
        fn from(value:IOutputStream) -> Self {
          value.0
        }
      }impl::std::convert::From<&IOutputStream>for::winrt::Object {
        fn from(value: &IOutputStream) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IOutputStream {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IOutputStream {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IOutputStream>for super::super::foundation::IClosable {
        fn from(value:IOutputStream) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IOutputStream>for super::super::foundation::IClosable {
        fn from(value: &IOutputStream) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for IOutputStream {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a IOutputStream {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }#[repr(transparent)]pub struct IRandomAccessStream(::winrt::Object);
      impl::std::clone::Clone for IRandomAccessStream {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IRandomAccessStream {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IRandomAccessStream {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IRandomAccessStream{}
      impl IRandomAccessStream {
        pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn read_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IBuffer>>>(&self,buffer:T0__,count:u32,options:InputStreamOptions,) ->  ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<IBuffer,u32>, >{
          let this =  &::winrt::Interface::cast::<IInputStream>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperationWithProgress<IBuffer,u32, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),buffer.into().abi(),count,options, &mut result__).from_abi:: <super::super::foundation::IAsyncOperationWithProgress:: <IBuffer,u32> >(result__)
          }
        }pub fn write_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IBuffer>>>(&self,buffer:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<u32,u32>>{
          let this =  &::winrt::Interface::cast::<IOutputStream>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperationWithProgress<u32,u32, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),buffer.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperationWithProgress:: <u32,u32> >(result__)
          }
        }pub fn flush_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<bool>>{
          let this =  &::winrt::Interface::cast::<IOutputStream>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <bool>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<bool>>(result__)
          }
        }pub fn size(&self) ->  ::winrt::Result<u64>{
          let this = self;
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u64>(result__)
          }
        }pub fn set_size(&self,value:u64) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn get_input_stream_at(&self,position:u64) ->  ::winrt::Result<IInputStream>{
          let this = self;
          unsafe {
            let mut result__: <IInputStream as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),position, &mut result__,).from_abi::<IInputStream>(result__)
          }
        }pub fn get_output_stream_at(&self,position:u64,) ->  ::winrt::Result<IOutputStream>{
          let this = self;
          unsafe {
            let mut result__: <IOutputStream as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),position, &mut result__,).from_abi::<IOutputStream>(result__)
          }
        }pub fn position(&self) ->  ::winrt::Result<u64>{
          let this = self;
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u64>(result__)
          }
        }pub fn seek(&self,position:u64) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),position).ok()
          }
        }pub fn clone_stream(&self) ->  ::winrt::Result<IRandomAccessStream>{
          let this = self;
          unsafe {
            let mut result__: <IRandomAccessStream as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<IRandomAccessStream>(result__)
          }
        }pub fn can_read(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn can_write(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IRandomAccessStream {
        type Vtable = IRandomAccessStream_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2421821409,48211,4575,[140,73,0,30,79,198,134,218],);
        
      }#[repr(C)]pub struct IRandomAccessStream_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value:u64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,position:u64,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,position:u64,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut u64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,position:u64,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IRandomAccessStream {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{905a0fe1-bc53-11df-8c49-001e4fc686da}")
        };
        
      }impl::std::convert::From<IRandomAccessStream>for::winrt::Object {
        fn from(value:IRandomAccessStream) -> Self {
          value.0
        }
      }impl::std::convert::From<&IRandomAccessStream>for::winrt::Object {
        fn from(value: &IRandomAccessStream) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IRandomAccessStream {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IRandomAccessStream {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IRandomAccessStream>for super::super::foundation::IClosable {
        fn from(value:IRandomAccessStream) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IRandomAccessStream>for super::super::foundation::IClosable {
        fn from(value: &IRandomAccessStream) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for IRandomAccessStream {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a IRandomAccessStream {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<IRandomAccessStream>for IInputStream {
        fn from(value:IRandomAccessStream) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IRandomAccessStream>for IInputStream {
        fn from(value: &IRandomAccessStream) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IInputStream>>for IRandomAccessStream {
        fn into(self) ->  ::winrt::Param< 'a ,IInputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<IInputStream>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IInputStream>>for& 'a IRandomAccessStream {
        fn into(self) ->  ::winrt::Param< 'a ,IInputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<IInputStream>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IRandomAccessStream>for IOutputStream {
        fn from(value:IRandomAccessStream) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IRandomAccessStream>for IOutputStream {
        fn from(value: &IRandomAccessStream) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IOutputStream>>for IRandomAccessStream {
        fn into(self) ->  ::winrt::Param< 'a ,IOutputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<IOutputStream>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IOutputStream>>for& 'a IRandomAccessStream {
        fn into(self) ->  ::winrt::Param< 'a ,IOutputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<IOutputStream>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IRandomAccessStreamWithContentType(::winrt::Object);
      impl::std::clone::Clone for IRandomAccessStreamWithContentType {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IRandomAccessStreamWithContentType {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IRandomAccessStreamWithContentType {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IRandomAccessStreamWithContentType{}
      impl IRandomAccessStreamWithContentType {
        pub fn close(&self) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<super::super::foundation::IClosable>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
          }
        }pub fn content_type(&self) ->  ::winrt::Result<::winrt::HString>{
          let this =  &::winrt::Interface::cast::<IContentTypeProvider>(self).unwrap();
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn read_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IBuffer>>>(&self,buffer:T0__,count:u32,options:InputStreamOptions,) ->  ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<IBuffer,u32>, >{
          let this =  &::winrt::Interface::cast::<IInputStream>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperationWithProgress<IBuffer,u32, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),buffer.into().abi(),count,options, &mut result__).from_abi:: <super::super::foundation::IAsyncOperationWithProgress:: <IBuffer,u32> >(result__)
          }
        }pub fn write_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,IBuffer>>>(&self,buffer:T0__,) ->  ::winrt::Result<super::super::foundation::IAsyncOperationWithProgress<u32,u32>>{
          let this =  &::winrt::Interface::cast::<IOutputStream>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperationWithProgress<u32,u32, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this),buffer.into().abi(), &mut result__).from_abi:: <super::super::foundation::IAsyncOperationWithProgress:: <u32,u32> >(result__)
          }
        }pub fn flush_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<bool>>{
          let this =  &::winrt::Interface::cast::<IOutputStream>(self).unwrap();
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <bool>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<bool>>(result__)
          }
        }pub fn size(&self) ->  ::winrt::Result<u64>{
          let this =  &::winrt::Interface::cast::<IRandomAccessStream>(self).unwrap();
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<u64>(result__)
          }
        }pub fn set_size(&self,value:u64) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IRandomAccessStream>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),value).ok()
          }
        }pub fn get_input_stream_at(&self,position:u64) ->  ::winrt::Result<IInputStream>{
          let this =  &::winrt::Interface::cast::<IRandomAccessStream>(self).unwrap();
          unsafe {
            let mut result__: <IInputStream as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),position, &mut result__,).from_abi::<IInputStream>(result__)
          }
        }pub fn get_output_stream_at(&self,position:u64,) ->  ::winrt::Result<IOutputStream>{
          let this =  &::winrt::Interface::cast::<IRandomAccessStream>(self).unwrap();
          unsafe {
            let mut result__: <IOutputStream as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),position, &mut result__,).from_abi::<IOutputStream>(result__)
          }
        }pub fn position(&self) ->  ::winrt::Result<u64>{
          let this =  &::winrt::Interface::cast::<IRandomAccessStream>(self).unwrap();
          unsafe {
            let mut result__: <u64 as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<u64>(result__)
          }
        }pub fn seek(&self,position:u64) ->  ::winrt::Result<()>{
          let this =  &::winrt::Interface::cast::<IRandomAccessStream>(self).unwrap();
          unsafe {
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),position).ok()
          }
        }pub fn clone_stream(&self) ->  ::winrt::Result<IRandomAccessStream>{
          let this =  &::winrt::Interface::cast::<IRandomAccessStream>(self).unwrap();
          unsafe {
            let mut result__: <IRandomAccessStream as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this), &mut result__,).from_abi::<IRandomAccessStream>(result__)
          }
        }pub fn can_read(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IRandomAccessStream>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }pub fn can_write(&self) ->  ::winrt::Result<bool>{
          let this =  &::winrt::Interface::cast::<IRandomAccessStream>(self).unwrap();
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this), &mut result__,).from_abi::<bool>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IRandomAccessStreamWithContentType {
        type Vtable = IRandomAccessStreamWithContentType_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3424995367,19261,17295,[146,50,16,199,107,199,224,56],);
        
      }#[repr(C)]pub struct IRandomAccessStreamWithContentType_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IRandomAccessStreamWithContentType {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{cc254827-4b3d-438f-9232-10c76bc7e038}")
        };
        
      }impl::std::convert::From<IRandomAccessStreamWithContentType>for::winrt::Object {
        fn from(value:IRandomAccessStreamWithContentType) -> Self {
          value.0
        }
      }impl::std::convert::From<&IRandomAccessStreamWithContentType>for::winrt::Object {
        fn from(value: &IRandomAccessStreamWithContentType) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IRandomAccessStreamWithContentType {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IRandomAccessStreamWithContentType {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IRandomAccessStreamWithContentType>for super::super::foundation::IClosable {
        fn from(value:IRandomAccessStreamWithContentType) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IRandomAccessStreamWithContentType>for super::super::foundation::IClosable {
        fn from(value: &IRandomAccessStreamWithContentType) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for IRandomAccessStreamWithContentType {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(self),)
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,super::super::foundation::IClosable>>for& 'a IRandomAccessStreamWithContentType {
        fn into(self) ->  ::winrt::Param< 'a ,super::super::foundation::IClosable>{
          ::winrt::Param::Owned(::std::convert::Into::<super::super::foundation::IClosable>::into(::std::clone::Clone::clone(self),),)
        }
      }impl::std::convert::From<IRandomAccessStreamWithContentType>for IContentTypeProvider {
        fn from(value:IRandomAccessStreamWithContentType) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IRandomAccessStreamWithContentType>for IContentTypeProvider {
        fn from(value: &IRandomAccessStreamWithContentType) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IContentTypeProvider>>for IRandomAccessStreamWithContentType {
        fn into(self) ->  ::winrt::Param< 'a ,IContentTypeProvider>{
          ::winrt::Param::Owned(::std::convert::Into::<IContentTypeProvider>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IContentTypeProvider>>for& 'a IRandomAccessStreamWithContentType {
        fn into(self) ->  ::winrt::Param< 'a ,IContentTypeProvider>{
          ::winrt::Param::Owned(::std::convert::Into::<IContentTypeProvider>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IRandomAccessStreamWithContentType>for IInputStream {
        fn from(value:IRandomAccessStreamWithContentType) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IRandomAccessStreamWithContentType>for IInputStream {
        fn from(value: &IRandomAccessStreamWithContentType) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IInputStream>>for IRandomAccessStreamWithContentType {
        fn into(self) ->  ::winrt::Param< 'a ,IInputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<IInputStream>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IInputStream>>for& 'a IRandomAccessStreamWithContentType {
        fn into(self) ->  ::winrt::Param< 'a ,IInputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<IInputStream>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IRandomAccessStreamWithContentType>for IOutputStream {
        fn from(value:IRandomAccessStreamWithContentType) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IRandomAccessStreamWithContentType>for IOutputStream {
        fn from(value: &IRandomAccessStreamWithContentType) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IOutputStream>>for IRandomAccessStreamWithContentType {
        fn into(self) ->  ::winrt::Param< 'a ,IOutputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<IOutputStream>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IOutputStream>>for& 'a IRandomAccessStreamWithContentType {
        fn into(self) ->  ::winrt::Param< 'a ,IOutputStream>{
          ::winrt::Param::Owned(::std::convert::Into::<IOutputStream>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<IRandomAccessStreamWithContentType>for IRandomAccessStream {
        fn from(value:IRandomAccessStreamWithContentType) -> Self {
          ::std::convert::From::from(&value)
        }
      }impl::std::convert::From<&IRandomAccessStreamWithContentType>for IRandomAccessStream {
        fn from(value: &IRandomAccessStreamWithContentType) -> Self {
          ::winrt::Interface::cast(value).unwrap()
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IRandomAccessStream>>for IRandomAccessStreamWithContentType {
        fn into(self) ->  ::winrt::Param< 'a ,IRandomAccessStream>{
          ::winrt::Param::Owned(::std::convert::Into::<IRandomAccessStream>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IRandomAccessStream>>for& 'a IRandomAccessStreamWithContentType {
        fn into(self) ->  ::winrt::Param< 'a ,IRandomAccessStream>{
          ::winrt::Param::Owned(::std::convert::Into::<IRandomAccessStream>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IRandomAccessStreamReference(::winrt::Object);
      impl::std::clone::Clone for IRandomAccessStreamReference {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IRandomAccessStreamReference {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IRandomAccessStreamReference {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IRandomAccessStreamReference{}
      impl IRandomAccessStreamReference {
        pub fn open_read_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<IRandomAccessStreamWithContentType>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation<IRandomAccessStreamWithContentType, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<IRandomAccessStreamWithContentType, >>(result__)
          }
        }
      }unsafe impl::winrt::Interface for IRandomAccessStreamReference {
        type Vtable = IRandomAccessStreamReference_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(871248180,7638,20026,[128,103,209,193,98,232,100,43],);
        
      }#[repr(C)]pub struct IRandomAccessStreamReference_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IRandomAccessStreamReference {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{33ee3134-1dd6-4e3a-8067-d1c162e8642b}")
        };
        
      }impl::std::convert::From<IRandomAccessStreamReference>for::winrt::Object {
        fn from(value:IRandomAccessStreamReference) -> Self {
          value.0
        }
      }impl::std::convert::From<&IRandomAccessStreamReference>for::winrt::Object {
        fn from(value: &IRandomAccessStreamReference) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IRandomAccessStreamReference {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IRandomAccessStreamReference {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IInputStreamReference(::winrt::Object);
      impl::std::clone::Clone for IInputStreamReference {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IInputStreamReference {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IInputStreamReference {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IInputStreamReference{}
      impl IInputStreamReference {
        pub fn open_sequential_read_async(&self,) ->  ::winrt::Result<super::super::foundation::IAsyncOperation<IInputStream>>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::IAsyncOperation:: <IInputStream>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::IAsyncOperation<IInputStream>>(result__,)
          }
        }
      }unsafe impl::winrt::Interface for IInputStreamReference {
        type Vtable = IInputStreamReference_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1133681944,24265,19290,[145,156,66,5,176,200,4,182],);
        
      }#[repr(C)]pub struct IInputStreamReference_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IInputStreamReference {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{43929d18-5ec9-4b5a-919c-4205b0c804b6}")
        };
        
      }impl::std::convert::From<IInputStreamReference>for::winrt::Object {
        fn from(value:IInputStreamReference) -> Self {
          value.0
        }
      }impl::std::convert::From<&IInputStreamReference>for::winrt::Object {
        fn from(value: &IInputStreamReference) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IInputStreamReference {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IInputStreamReference {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }
    }
  }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod system {
    #[allow(non_camel_case_types)]#[repr(transparent)]pub struct UserAuthenticationStatus(i32);
    impl::std::convert::From<i32>for UserAuthenticationStatus {
      fn from(value:i32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for UserAuthenticationStatus {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for UserAuthenticationStatus {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for UserAuthenticationStatus {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for UserAuthenticationStatus {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for UserAuthenticationStatus{}
    impl::std::marker::Copy for UserAuthenticationStatus{}
    impl UserAuthenticationStatus {
      #![allow(non_upper_case_globals)]pub const Unauthenticated:Self = Self(0i32);
      pub const LocallyAuthenticated:Self = Self(1i32);
      pub const RemotelyAuthenticated:Self = Self(2i32);
      
    }unsafe impl::winrt::Abi for UserAuthenticationStatus {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for UserAuthenticationStatus {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.System.UserAuthenticationStatus;i4)",);
      
    }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct UserType(i32);
    impl::std::convert::From<i32>for UserType {
      fn from(value:i32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for UserType {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for UserType {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for UserType {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for UserType {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for UserType{}
    impl::std::marker::Copy for UserType{}
    impl UserType {
      #![allow(non_upper_case_globals)]pub const LocalUser:Self = Self(0i32);
      pub const RemoteUser:Self = Self(1i32);
      pub const LocalGuest:Self = Self(2i32);
      pub const RemoteGuest:Self = Self(3i32);
      
    }unsafe impl::winrt::Abi for UserType {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for UserType {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.System.UserType;i4)");
      
    }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct UserPictureSize(i32);
    impl::std::convert::From<i32>for UserPictureSize {
      fn from(value:i32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for UserPictureSize {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for UserPictureSize {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for UserPictureSize {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for UserPictureSize {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for UserPictureSize{}
    impl::std::marker::Copy for UserPictureSize{}
    impl UserPictureSize {
      #![allow(non_upper_case_globals)]pub const Size64x64:Self = Self(0i32);
      pub const Size208x208:Self = Self(1i32);
      pub const Size424x424:Self = Self(2i32);
      pub const Size1080x1080:Self = Self(3i32);
      
    }unsafe impl::winrt::Abi for UserPictureSize {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for UserPictureSize {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.System.UserPictureSize;i4)");
      
    }#[repr(transparent)]pub struct IUser(::winrt::Object);
    impl::std::clone::Clone for IUser {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IUser {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IUser {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IUser{}
    impl IUser {
      pub fn non_roamable_id(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn authentication_status(&self) ->  ::winrt::Result<UserAuthenticationStatus>{
        let this = self;
        unsafe {
          let mut result__: <UserAuthenticationStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<UserAuthenticationStatus>(result__)
        }
      }pub fn r#type(&self) ->  ::winrt::Result<UserType>{
        let this = self;
        unsafe {
          let mut result__: <UserType as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<UserType>(result__)
        }
      }pub fn get_property_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<::winrt::Object>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: < ::winrt::Object>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<::winrt::Object>>(result__)
        }
      }pub fn get_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::collections::IVectorView<::winrt::HString>, >, >, >(&self,values:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IPropertySet>, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IPropertySet, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),values.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IPropertySet, >>(result__)
        }
      }pub fn get_picture_async(&self,desired_size:UserPictureSize,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::storage::streams::IRandomAccessStreamReference, >, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::storage::streams::IRandomAccessStreamReference, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),desired_size, &mut result__,).from_abi::<super::foundation::IAsyncOperation<super::storage::streams::IRandomAccessStreamReference, >>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IUser {
      type Vtable = IUser_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3751421638,59206,19405,[181,212,18,1,3,196,32,155],);
      
    }#[repr(C)]pub struct IUser_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut UserAuthenticationStatus,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut UserType,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,values: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,desired_size:UserPictureSize,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IUser {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{df9a26c6-e746-4bcd-b5d4-120103c4209b}")
      };
      
    }impl::std::convert::From<IUser>for::winrt::Object {
      fn from(value:IUser) -> Self {
        value.0
      }
    }impl::std::convert::From<&IUser>for::winrt::Object {
      fn from(value: &IUser) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IUser {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IUser {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct UserWatcherStatus(i32);
    impl::std::convert::From<i32>for UserWatcherStatus {
      fn from(value:i32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for UserWatcherStatus {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for UserWatcherStatus {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for UserWatcherStatus {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for UserWatcherStatus {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for UserWatcherStatus{}
    impl::std::marker::Copy for UserWatcherStatus{}
    impl UserWatcherStatus {
      #![allow(non_upper_case_globals)]pub const Created:Self = Self(0i32);
      pub const Started:Self = Self(1i32);
      pub const EnumerationCompleted:Self = Self(2i32);
      pub const Stopping:Self = Self(3i32);
      pub const Stopped:Self = Self(4i32);
      pub const Aborted:Self = Self(5i32);
      
    }unsafe impl::winrt::Abi for UserWatcherStatus {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for UserWatcherStatus {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.System.UserWatcherStatus;i4)");
      
    }#[repr(transparent)]pub struct IUserChangedEventArgs(::winrt::Object);
    impl::std::clone::Clone for IUserChangedEventArgs {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IUserChangedEventArgs {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IUserChangedEventArgs {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IUserChangedEventArgs{}
    impl IUserChangedEventArgs {
      pub fn user(&self) ->  ::winrt::Result<User>{
        let this = self;
        unsafe {
          let mut result__: <User as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<User>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IUserChangedEventArgs {
      type Vtable = IUserChangedEventArgs_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(140794332,6342,18651,[188,153,114,79,185,32,60,204],);
      
    }#[repr(C)]pub struct IUserChangedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IUserChangedEventArgs {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{086459dc-18c6-48db-bc99-724fb9203ccc}")
      };
      
    }impl::std::convert::From<IUserChangedEventArgs>for::winrt::Object {
      fn from(value:IUserChangedEventArgs) -> Self {
        value.0
      }
    }impl::std::convert::From<&IUserChangedEventArgs>for::winrt::Object {
      fn from(value: &IUserChangedEventArgs) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IUserChangedEventArgs {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IUserChangedEventArgs {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct UserWatcherUpdateKind(i32);
    impl::std::convert::From<i32>for UserWatcherUpdateKind {
      fn from(value:i32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for UserWatcherUpdateKind {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for UserWatcherUpdateKind {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for UserWatcherUpdateKind {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for UserWatcherUpdateKind {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for UserWatcherUpdateKind{}
    impl::std::marker::Copy for UserWatcherUpdateKind{}
    impl UserWatcherUpdateKind {
      #![allow(non_upper_case_globals)]pub const Properties:Self = Self(0i32);
      pub const Picture:Self = Self(1i32);
      
    }unsafe impl::winrt::Abi for UserWatcherUpdateKind {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for UserWatcherUpdateKind {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.System.UserWatcherUpdateKind;i4)");
      
    }#[repr(transparent)]pub struct IUserChangedEventArgs2(::winrt::Object);
    impl::std::clone::Clone for IUserChangedEventArgs2 {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IUserChangedEventArgs2 {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IUserChangedEventArgs2 {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IUserChangedEventArgs2{}
    impl IUserChangedEventArgs2 {
      pub fn changed_property_kinds(&self,) ->  ::winrt::Result<super::foundation::collections::IVectorView<UserWatcherUpdateKind>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::collections::IVectorView<UserWatcherUpdateKind, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::foundation::collections::IVectorView:: <UserWatcherUpdateKind> >(result__)
        }
      }
    }unsafe impl::winrt::Interface for IUserChangedEventArgs2 {
      type Vtable = IUserChangedEventArgs2_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1798097732,28417,22028,[151,173,252,127,50,236,88,31],);
      
    }#[repr(C)]pub struct IUserChangedEventArgs2_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IUserChangedEventArgs2 {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{6b2ccb44-6f01-560c-97ad-fc7f32ec581f}")
      };
      
    }impl::std::convert::From<IUserChangedEventArgs2>for::winrt::Object {
      fn from(value:IUserChangedEventArgs2) -> Self {
        value.0
      }
    }impl::std::convert::From<&IUserChangedEventArgs2>for::winrt::Object {
      fn from(value: &IUserChangedEventArgs2) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IUserChangedEventArgs2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IUserChangedEventArgs2 {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct UserChangedEventArgs(::winrt::Object);
    impl UserChangedEventArgs {
      pub fn user(&self) ->  ::winrt::Result<User>{
        let this = self;
        unsafe {
          let mut result__: <User as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<User>(result__)
        }
      }pub fn changed_property_kinds(&self,) ->  ::winrt::Result<super::foundation::collections::IVectorView<UserWatcherUpdateKind>>{
        let this =  &::winrt::Interface::cast::<IUserChangedEventArgs2>(self).unwrap();
        unsafe {
          let mut result__: <super::foundation::collections::IVectorView<UserWatcherUpdateKind, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::foundation::collections::IVectorView:: <UserWatcherUpdateKind> >(result__)
        }
      }
    }impl::std::clone::Clone for UserChangedEventArgs {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for UserChangedEventArgs {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for UserChangedEventArgs{}
    impl::std::fmt::Debug for UserChangedEventArgs {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::winrt::RuntimeName for UserChangedEventArgs {
      const NAME: & 'static str = "Windows.System.UserChangedEventArgs";
      
    }unsafe impl::winrt::Interface for UserChangedEventArgs {
      type Vtable = IUserChangedEventArgs_abi;
      const IID: ::winrt::Guid =  <IUserChangedEventArgs as::winrt::Interface>::IID;
      
    }unsafe impl::winrt::RuntimeType for UserChangedEventArgs {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.System.UserChangedEventArgs;{086459dc-18c6-48db-bc99-724fb9203ccc})",);
      
    }impl::std::convert::From<UserChangedEventArgs>for::winrt::Object {
      fn from(value:UserChangedEventArgs) -> Self {
        value.0
      }
    }impl::std::convert::From<&UserChangedEventArgs>for::winrt::Object {
      fn from(value: &UserChangedEventArgs) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for UserChangedEventArgs {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a UserChangedEventArgs {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<UserChangedEventArgs>for IUserChangedEventArgs {
      fn from(value:UserChangedEventArgs) -> Self {
        unsafe {
          ::std::mem::transmute(value)
        }
      }
    }impl::std::convert::From<&UserChangedEventArgs>for IUserChangedEventArgs {
      fn from(value: &UserChangedEventArgs) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IUserChangedEventArgs>>for UserChangedEventArgs {
      fn into(self) ->  ::winrt::Param< 'a ,IUserChangedEventArgs>{
        ::winrt::Param::Owned(::std::convert::Into::<IUserChangedEventArgs>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IUserChangedEventArgs>>for& 'a UserChangedEventArgs {
      fn into(self) ->  ::winrt::Param< 'a ,IUserChangedEventArgs>{
        ::winrt::Param::Owned(::std::convert::Into::<IUserChangedEventArgs>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<UserChangedEventArgs>for IUserChangedEventArgs2 {
      fn from(value:UserChangedEventArgs) -> Self {
        ::std::convert::From::from(&value)
      }
    }impl::std::convert::From<&UserChangedEventArgs>for IUserChangedEventArgs2 {
      fn from(value: &UserChangedEventArgs) -> Self {
        ::winrt::Interface::cast(value).unwrap()
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IUserChangedEventArgs2>>for UserChangedEventArgs {
      fn into(self) ->  ::winrt::Param< 'a ,IUserChangedEventArgs2>{
        ::winrt::Param::Owned(::std::convert::Into::<IUserChangedEventArgs2>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IUserChangedEventArgs2>>for& 'a UserChangedEventArgs {
      fn into(self) ->  ::winrt::Param< 'a ,IUserChangedEventArgs2>{
        ::winrt::Param::Owned(::std::convert::Into::<IUserChangedEventArgs2>::into(::std::clone::Clone::clone(self),))
      }
    }unsafe impl::std::marker::Send for UserChangedEventArgs{}
    unsafe impl::std::marker::Sync for UserChangedEventArgs{}
    #[repr(transparent)]pub struct IUserAuthenticationStatusChangeDeferral(::winrt::Object);
    impl::std::clone::Clone for IUserAuthenticationStatusChangeDeferral {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IUserAuthenticationStatusChangeDeferral {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IUserAuthenticationStatusChangeDeferral {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IUserAuthenticationStatusChangeDeferral{}
    impl IUserAuthenticationStatusChangeDeferral {
      pub fn complete(&self) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
        }
      }
    }unsafe impl::winrt::Interface for IUserAuthenticationStatusChangeDeferral {
      type Vtable = IUserAuthenticationStatusChangeDeferral_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2293601640,47920,17147,[162,112,233,144,46,64,239,167],);
      
    }#[repr(C)]pub struct IUserAuthenticationStatusChangeDeferral_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IUserAuthenticationStatusChangeDeferral {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{88b59568-bb30-42fb-a270-e9902e40efa7}")
      };
      
    }impl::std::convert::From<IUserAuthenticationStatusChangeDeferral>for::winrt::Object {
      fn from(value:IUserAuthenticationStatusChangeDeferral) -> Self {
        value.0
      }
    }impl::std::convert::From<&IUserAuthenticationStatusChangeDeferral>for::winrt::Object {
      fn from(value: &IUserAuthenticationStatusChangeDeferral) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IUserAuthenticationStatusChangeDeferral {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IUserAuthenticationStatusChangeDeferral {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct UserAuthenticationStatusChangeDeferral(::winrt::Object);
    impl UserAuthenticationStatusChangeDeferral {
      pub fn complete(&self) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this)).ok()
        }
      }
    }impl::std::clone::Clone for UserAuthenticationStatusChangeDeferral {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for UserAuthenticationStatusChangeDeferral {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for UserAuthenticationStatusChangeDeferral{}
    impl::std::fmt::Debug for UserAuthenticationStatusChangeDeferral {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::winrt::RuntimeName for UserAuthenticationStatusChangeDeferral {
      const NAME: & 'static str = "Windows.System.UserAuthenticationStatusChangeDeferral";
      
    }unsafe impl::winrt::Interface for UserAuthenticationStatusChangeDeferral {
      type Vtable = IUserAuthenticationStatusChangeDeferral_abi;
      const IID: ::winrt::Guid =  <IUserAuthenticationStatusChangeDeferral as::winrt::Interface>::IID;
      
    }unsafe impl::winrt::RuntimeType for UserAuthenticationStatusChangeDeferral {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.System.UserAuthenticationStatusChangeDeferral;{88b59568-bb30-42fb-a270-e9902e40efa7})");
      
    }impl::std::convert::From<UserAuthenticationStatusChangeDeferral>for::winrt::Object {
      fn from(value:UserAuthenticationStatusChangeDeferral) -> Self {
        value.0
      }
    }impl::std::convert::From<&UserAuthenticationStatusChangeDeferral>for::winrt::Object {
      fn from(value: &UserAuthenticationStatusChangeDeferral) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for UserAuthenticationStatusChangeDeferral {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a UserAuthenticationStatusChangeDeferral {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<UserAuthenticationStatusChangeDeferral>for IUserAuthenticationStatusChangeDeferral {
      fn from(value:UserAuthenticationStatusChangeDeferral) -> Self {
        unsafe {
          ::std::mem::transmute(value)
        }
      }
    }impl::std::convert::From<&UserAuthenticationStatusChangeDeferral>for IUserAuthenticationStatusChangeDeferral {
      fn from(value: &UserAuthenticationStatusChangeDeferral) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IUserAuthenticationStatusChangeDeferral>>for UserAuthenticationStatusChangeDeferral {
      fn into(self) ->  ::winrt::Param< 'a ,IUserAuthenticationStatusChangeDeferral>{
        ::winrt::Param::Owned(::std::convert::Into::<IUserAuthenticationStatusChangeDeferral, >::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IUserAuthenticationStatusChangeDeferral>>for& 'a UserAuthenticationStatusChangeDeferral {
      fn into(self) ->  ::winrt::Param< 'a ,IUserAuthenticationStatusChangeDeferral>{
        ::winrt::Param::Owned(::std::convert::Into::<IUserAuthenticationStatusChangeDeferral, >::into(::std::clone::Clone::clone(self)))
      }
    }unsafe impl::std::marker::Send for UserAuthenticationStatusChangeDeferral{}
    unsafe impl::std::marker::Sync for UserAuthenticationStatusChangeDeferral{}
    #[repr(transparent)]pub struct IUserAuthenticationStatusChangingEventArgs(::winrt::Object);
    impl::std::clone::Clone for IUserAuthenticationStatusChangingEventArgs {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IUserAuthenticationStatusChangingEventArgs {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IUserAuthenticationStatusChangingEventArgs {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IUserAuthenticationStatusChangingEventArgs{}
    impl IUserAuthenticationStatusChangingEventArgs {
      pub fn get_deferral(&self) ->  ::winrt::Result<UserAuthenticationStatusChangeDeferral>{
        let this = self;
        unsafe {
          let mut result__: <UserAuthenticationStatusChangeDeferral as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<UserAuthenticationStatusChangeDeferral>(result__)
        }
      }pub fn user(&self) ->  ::winrt::Result<User>{
        let this = self;
        unsafe {
          let mut result__: <User as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<User>(result__)
        }
      }pub fn new_status(&self) ->  ::winrt::Result<UserAuthenticationStatus>{
        let this = self;
        unsafe {
          let mut result__: <UserAuthenticationStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<UserAuthenticationStatus>(result__)
        }
      }pub fn current_status(&self) ->  ::winrt::Result<UserAuthenticationStatus>{
        let this = self;
        unsafe {
          let mut result__: <UserAuthenticationStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<UserAuthenticationStatus>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IUserAuthenticationStatusChangingEventArgs {
      type Vtable = IUserAuthenticationStatusChangingEventArgs_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2349010728,42769,19486,[171,72,4,23,156,21,147,143],);
      
    }#[repr(C)]pub struct IUserAuthenticationStatusChangingEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut UserAuthenticationStatus,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut UserAuthenticationStatus,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IUserAuthenticationStatusChangingEventArgs {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{8c030f28-a711-4c1e-ab48-04179c15938f}")
      };
      
    }impl::std::convert::From<IUserAuthenticationStatusChangingEventArgs>for::winrt::Object {
      fn from(value:IUserAuthenticationStatusChangingEventArgs) -> Self {
        value.0
      }
    }impl::std::convert::From<&IUserAuthenticationStatusChangingEventArgs>for::winrt::Object {
      fn from(value: &IUserAuthenticationStatusChangingEventArgs) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IUserAuthenticationStatusChangingEventArgs {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IUserAuthenticationStatusChangingEventArgs {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct UserAuthenticationStatusChangingEventArgs(::winrt::Object);
    impl UserAuthenticationStatusChangingEventArgs {
      pub fn get_deferral(&self) ->  ::winrt::Result<UserAuthenticationStatusChangeDeferral>{
        let this = self;
        unsafe {
          let mut result__: <UserAuthenticationStatusChangeDeferral as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<UserAuthenticationStatusChangeDeferral>(result__)
        }
      }pub fn user(&self) ->  ::winrt::Result<User>{
        let this = self;
        unsafe {
          let mut result__: <User as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<User>(result__)
        }
      }pub fn new_status(&self) ->  ::winrt::Result<UserAuthenticationStatus>{
        let this = self;
        unsafe {
          let mut result__: <UserAuthenticationStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<UserAuthenticationStatus>(result__)
        }
      }pub fn current_status(&self) ->  ::winrt::Result<UserAuthenticationStatus>{
        let this = self;
        unsafe {
          let mut result__: <UserAuthenticationStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<UserAuthenticationStatus>(result__)
        }
      }
    }impl::std::clone::Clone for UserAuthenticationStatusChangingEventArgs {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for UserAuthenticationStatusChangingEventArgs {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for UserAuthenticationStatusChangingEventArgs{}
    impl::std::fmt::Debug for UserAuthenticationStatusChangingEventArgs {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::winrt::RuntimeName for UserAuthenticationStatusChangingEventArgs {
      const NAME: & 'static str = "Windows.System.UserAuthenticationStatusChangingEventArgs";
      
    }unsafe impl::winrt::Interface for UserAuthenticationStatusChangingEventArgs {
      type Vtable = IUserAuthenticationStatusChangingEventArgs_abi;
      const IID: ::winrt::Guid =  <IUserAuthenticationStatusChangingEventArgs as::winrt::Interface>::IID;
      
    }unsafe impl::winrt::RuntimeType for UserAuthenticationStatusChangingEventArgs {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.System.UserAuthenticationStatusChangingEventArgs;{8c030f28-a711-4c1e-ab48-04179c15938f})");
      
    }impl::std::convert::From<UserAuthenticationStatusChangingEventArgs>for::winrt::Object {
      fn from(value:UserAuthenticationStatusChangingEventArgs) -> Self {
        value.0
      }
    }impl::std::convert::From<&UserAuthenticationStatusChangingEventArgs>for::winrt::Object {
      fn from(value: &UserAuthenticationStatusChangingEventArgs) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for UserAuthenticationStatusChangingEventArgs {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a UserAuthenticationStatusChangingEventArgs {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<UserAuthenticationStatusChangingEventArgs>for IUserAuthenticationStatusChangingEventArgs {
      fn from(value:UserAuthenticationStatusChangingEventArgs) -> Self {
        unsafe {
          ::std::mem::transmute(value)
        }
      }
    }impl::std::convert::From<&UserAuthenticationStatusChangingEventArgs>for IUserAuthenticationStatusChangingEventArgs {
      fn from(value: &UserAuthenticationStatusChangingEventArgs) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IUserAuthenticationStatusChangingEventArgs>>for UserAuthenticationStatusChangingEventArgs {
      fn into(self) ->  ::winrt::Param< 'a ,IUserAuthenticationStatusChangingEventArgs>{
        ::winrt::Param::Owned(::std::convert::Into::<IUserAuthenticationStatusChangingEventArgs, >::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IUserAuthenticationStatusChangingEventArgs>>for& 'a UserAuthenticationStatusChangingEventArgs {
      fn into(self) ->  ::winrt::Param< 'a ,IUserAuthenticationStatusChangingEventArgs>{
        ::winrt::Param::Owned(::std::convert::Into::<IUserAuthenticationStatusChangingEventArgs, >::into(::std::clone::Clone::clone(self)))
      }
    }unsafe impl::std::marker::Send for UserAuthenticationStatusChangingEventArgs{}
    unsafe impl::std::marker::Sync for UserAuthenticationStatusChangingEventArgs{}
    #[repr(transparent)]pub struct IUserWatcher(::winrt::Object);
    impl::std::clone::Clone for IUserWatcher {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IUserWatcher {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IUserWatcher {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IUserWatcher{}
    impl IUserWatcher {
      pub fn status(&self) ->  ::winrt::Result<UserWatcherStatus>{
        let this = self;
        unsafe {
          let mut result__: <UserWatcherStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<UserWatcherStatus>(result__)
        }
      }pub fn start(&self) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this)).ok()
        }
      }pub fn stop(&self) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this)).ok()
        }
      }pub fn added< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::TypedEventHandler<UserWatcher,UserChangedEventArgs>, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::foundation::EventRegistrationToken>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::foundation::EventRegistrationToken>(result__)
        }
      }pub fn remove_added< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::EventRegistrationToken>>, >(&self,token:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),token.into().abi(),).ok()
        }
      }pub fn removed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::TypedEventHandler<UserWatcher,UserChangedEventArgs>, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::foundation::EventRegistrationToken>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::foundation::EventRegistrationToken>(result__)
        }
      }pub fn remove_removed< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::EventRegistrationToken>>, >(&self,token:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),token.into().abi(),).ok()
        }
      }pub fn updated< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::TypedEventHandler<UserWatcher,UserChangedEventArgs>, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::foundation::EventRegistrationToken>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::foundation::EventRegistrationToken>(result__)
        }
      }pub fn remove_updated< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::EventRegistrationToken>>, >(&self,token:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),token.into().abi(),).ok()
        }
      }pub fn authentication_status_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::TypedEventHandler<UserWatcher,UserChangedEventArgs>, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::foundation::EventRegistrationToken>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::foundation::EventRegistrationToken>(result__)
        }
      }pub fn remove_authentication_status_changed< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::EventRegistrationToken>>, >(&self,token:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),token.into().abi(),).ok()
        }
      }pub fn authentication_status_changing< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::TypedEventHandler<UserWatcher,UserAuthenticationStatusChangingEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::foundation::EventRegistrationToken>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::foundation::EventRegistrationToken>(result__)
        }
      }pub fn remove_authentication_status_changing< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::EventRegistrationToken>>, >(&self,token:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),token.into().abi(),).ok()
        }
      }pub fn enumeration_completed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::TypedEventHandler<UserWatcher, ::winrt::Object>, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::foundation::EventRegistrationToken>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::foundation::EventRegistrationToken>(result__)
        }
      }pub fn remove_enumeration_completed< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::EventRegistrationToken>>, >(&self,token:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),token.into().abi(),).ok()
        }
      }pub fn stopped< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::TypedEventHandler<UserWatcher, ::winrt::Object>, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::foundation::EventRegistrationToken>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::foundation::EventRegistrationToken>(result__)
        }
      }pub fn remove_stopped< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::EventRegistrationToken>>, >(&self,token:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this),token.into().abi(),).ok()
        }
      }
    }unsafe impl::winrt::Interface for IUserWatcher {
      type Vtable = IUserWatcher_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(358527547,9258,17888,[162,233,49,113,252,106,127,187],);
      
    }#[repr(C)]pub struct IUserWatcher_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut UserWatcherStatus,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IUserWatcher {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{155eb23b-242a-45e0-a2e9-3171fc6a7fbb}")
      };
      
    }impl::std::convert::From<IUserWatcher>for::winrt::Object {
      fn from(value:IUserWatcher) -> Self {
        value.0
      }
    }impl::std::convert::From<&IUserWatcher>for::winrt::Object {
      fn from(value: &IUserWatcher) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IUserWatcher {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IUserWatcher {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct UserWatcher(::winrt::Object);
    impl UserWatcher {
      pub fn status(&self) ->  ::winrt::Result<UserWatcherStatus>{
        let this = self;
        unsafe {
          let mut result__: <UserWatcherStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<UserWatcherStatus>(result__)
        }
      }pub fn start(&self) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this)).ok()
        }
      }pub fn stop(&self) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this)).ok()
        }
      }pub fn added< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::TypedEventHandler<UserWatcher,UserChangedEventArgs>, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::foundation::EventRegistrationToken>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::foundation::EventRegistrationToken>(result__)
        }
      }pub fn remove_added< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::EventRegistrationToken>>, >(&self,token:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),token.into().abi(),).ok()
        }
      }pub fn removed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::TypedEventHandler<UserWatcher,UserChangedEventArgs>, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::foundation::EventRegistrationToken>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::foundation::EventRegistrationToken>(result__)
        }
      }pub fn remove_removed< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::EventRegistrationToken>>, >(&self,token:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),token.into().abi(),).ok()
        }
      }pub fn updated< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::TypedEventHandler<UserWatcher,UserChangedEventArgs>, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::foundation::EventRegistrationToken>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).13)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::foundation::EventRegistrationToken>(result__)
        }
      }pub fn remove_updated< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::EventRegistrationToken>>, >(&self,token:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).14)(::winrt::Abi::abi(this),token.into().abi(),).ok()
        }
      }pub fn authentication_status_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::TypedEventHandler<UserWatcher,UserChangedEventArgs>, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::foundation::EventRegistrationToken>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).15)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::foundation::EventRegistrationToken>(result__)
        }
      }pub fn remove_authentication_status_changed< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::EventRegistrationToken>>, >(&self,token:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).16)(::winrt::Abi::abi(this),token.into().abi(),).ok()
        }
      }pub fn authentication_status_changing< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::TypedEventHandler<UserWatcher,UserAuthenticationStatusChangingEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::foundation::EventRegistrationToken>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).17)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::foundation::EventRegistrationToken>(result__)
        }
      }pub fn remove_authentication_status_changing< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::EventRegistrationToken>>, >(&self,token:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).18)(::winrt::Abi::abi(this),token.into().abi(),).ok()
        }
      }pub fn enumeration_completed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::TypedEventHandler<UserWatcher, ::winrt::Object>, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::foundation::EventRegistrationToken>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).19)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::foundation::EventRegistrationToken>(result__)
        }
      }pub fn remove_enumeration_completed< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::EventRegistrationToken>>, >(&self,token:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).20)(::winrt::Abi::abi(this),token.into().abi(),).ok()
        }
      }pub fn stopped< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::TypedEventHandler<UserWatcher, ::winrt::Object>, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::foundation::EventRegistrationToken>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).21)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::foundation::EventRegistrationToken>(result__)
        }
      }pub fn remove_stopped< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a ,super::foundation::EventRegistrationToken>>, >(&self,token:T0__,) ->  ::winrt::Result<()>{
        let this = self;
        unsafe {
          (::winrt::Interface::vtable(this).22)(::winrt::Abi::abi(this),token.into().abi(),).ok()
        }
      }
    }impl::std::clone::Clone for UserWatcher {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for UserWatcher {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for UserWatcher{}
    impl::std::fmt::Debug for UserWatcher {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::winrt::RuntimeName for UserWatcher {
      const NAME: & 'static str = "Windows.System.UserWatcher";
      
    }unsafe impl::winrt::Interface for UserWatcher {
      type Vtable = IUserWatcher_abi;
      const IID: ::winrt::Guid =  <IUserWatcher as::winrt::Interface>::IID;
      
    }unsafe impl::winrt::RuntimeType for UserWatcher {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.System.UserWatcher;{155eb23b-242a-45e0-a2e9-3171fc6a7fbb})",);
      
    }impl::std::convert::From<UserWatcher>for::winrt::Object {
      fn from(value:UserWatcher) -> Self {
        value.0
      }
    }impl::std::convert::From<&UserWatcher>for::winrt::Object {
      fn from(value: &UserWatcher) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for UserWatcher {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a UserWatcher {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<UserWatcher>for IUserWatcher {
      fn from(value:UserWatcher) -> Self {
        unsafe {
          ::std::mem::transmute(value)
        }
      }
    }impl::std::convert::From<&UserWatcher>for IUserWatcher {
      fn from(value: &UserWatcher) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IUserWatcher>>for UserWatcher {
      fn into(self) ->  ::winrt::Param< 'a ,IUserWatcher>{
        ::winrt::Param::Owned(::std::convert::Into::<IUserWatcher>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IUserWatcher>>for& 'a UserWatcher {
      fn into(self) ->  ::winrt::Param< 'a ,IUserWatcher>{
        ::winrt::Param::Owned(::std::convert::Into::<IUserWatcher>::into(::std::clone::Clone::clone(self),))
      }
    }unsafe impl::std::marker::Send for UserWatcher{}
    unsafe impl::std::marker::Sync for UserWatcher{}
    #[repr(transparent)]pub struct IUserStatics(::winrt::Object);
    impl::std::clone::Clone for IUserStatics {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::fmt::Debug for IUserStatics {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for IUserStatics {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for IUserStatics{}
    impl IUserStatics {
      pub fn create_watcher(&self) ->  ::winrt::Result<UserWatcher>{
        let this = self;
        unsafe {
          let mut result__: <UserWatcher as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<UserWatcher>(result__)
        }
      }pub fn find_all_async(&self,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >>(result__)
        }
      }pub fn find_all_async_by_type(&self,r#type:UserType,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),r#type, &mut result__,).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >>(result__)
        }
      }pub fn find_all_async_by_type_and_status(&self,r#type:UserType,status:UserAuthenticationStatus,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),r#type,status, &mut result__,).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >>(result__)
        }
      }pub fn get_from_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,non_roamable_id:T0__,) ->  ::winrt::Result<User>{
        let this = self;
        unsafe {
          let mut result__: <User as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),non_roamable_id.into().abi(), &mut result__,).from_abi::<User>(result__)
        }
      }
    }unsafe impl::winrt::Interface for IUserStatics {
      type Vtable = IUserStatics_abi;
      const IID: ::winrt::Guid =  ::winrt::Guid::from_values(358527547,9258,17888,[162,233,49,113,252,106,127,221],);
      
    }#[repr(C)]pub struct IUserStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,r#type:UserType,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,r#type:UserType,status:UserAuthenticationStatus,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,non_roamable_id: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
    unsafe impl::winrt::RuntimeType for IUserStatics {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer = {
        ::winrt::ConstBuffer::from_slice(b"{155eb23b-242a-45e0-a2e9-3171fc6a7fdd}")
      };
      
    }impl::std::convert::From<IUserStatics>for::winrt::Object {
      fn from(value:IUserStatics) -> Self {
        value.0
      }
    }impl::std::convert::From<&IUserStatics>for::winrt::Object {
      fn from(value: &IUserStatics) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IUserStatics {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IUserStatics {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }#[repr(transparent)]pub struct User(::winrt::Object);
    impl User {
      pub fn non_roamable_id(&self) ->  ::winrt::Result<::winrt::HString>{
        let this = self;
        unsafe {
          let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
        }
      }pub fn authentication_status(&self) ->  ::winrt::Result<UserAuthenticationStatus>{
        let this = self;
        unsafe {
          let mut result__: <UserAuthenticationStatus as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<UserAuthenticationStatus>(result__)
        }
      }pub fn r#type(&self) ->  ::winrt::Result<UserType>{
        let this = self;
        unsafe {
          let mut result__: <UserType as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<UserType>(result__)
        }
      }pub fn get_property_async< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(&self,value:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<::winrt::Object>>{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation:: < ::winrt::Object>as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),value.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<::winrt::Object>>(result__)
        }
      }pub fn get_properties_async< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::foundation::collections::IVectorView<::winrt::HString>, >, >, >(&self,values:T0__,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IPropertySet>, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IPropertySet, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),values.into().abi(), &mut result__,).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IPropertySet, >>(result__)
        }
      }pub fn get_picture_async(&self,desired_size:UserPictureSize,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::storage::streams::IRandomAccessStreamReference, >, >{
        let this = self;
        unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::storage::streams::IRandomAccessStreamReference, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),desired_size, &mut result__,).from_abi::<super::foundation::IAsyncOperation<super::storage::streams::IRandomAccessStreamReference, >>(result__)
        }
      }pub fn create_watcher() ->  ::winrt::Result<UserWatcher>{
        Self::IUserStatics(|this|unsafe {
          let mut result__: <UserWatcher as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<UserWatcher>(result__)
        })
      }pub fn find_all_async() ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >, >{
        Self::IUserStatics(|this|unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >>(result__)
        })
      }pub fn find_all_async_by_type(r#type:UserType,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >, >{
        Self::IUserStatics(|this|unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this),r#type, &mut result__,).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >>(result__)
        })
      }pub fn find_all_async_by_type_and_status(r#type:UserType,status:UserAuthenticationStatus,) ->  ::winrt::Result<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >, >{
        Self::IUserStatics(|this|unsafe {
          let mut result__: <super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),r#type,status, &mut result__,).from_abi::<super::foundation::IAsyncOperation<super::foundation::collections::IVectorView<User>, >>(result__)
        })
      }pub fn get_from_id< 'a ,T0__: ::std::convert::Into<::winrt::Param< 'a , ::winrt::HString>>, >(non_roamable_id:T0__,) ->  ::winrt::Result<User>{
        Self::IUserStatics(|this|unsafe {
          let mut result__: <User as::winrt::Abi>::Abi =  ::std::mem::zeroed();
          (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),non_roamable_id.into().abi(), &mut result__,).from_abi::<User>(result__)
        })
      }#[allow(non_snake_case)]fn IUserStatics<R,F:FnOnce(&IUserStatics) ->  ::winrt::Result<R>>(callback:F,) ->  ::winrt::Result<R>{
        static mut SHARED: ::winrt::FactoryCache<User,IUserStatics>  =  ::winrt::FactoryCache::new();
        unsafe {
          SHARED.call(callback)
        }
      }
    }impl::std::clone::Clone for User {
      fn clone(&self) -> Self {
        Self(self.0.clone())
      }
    }impl::std::cmp::PartialEq for User {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for User{}
    impl::std::fmt::Debug for User {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::winrt::RuntimeName for User {
      const NAME: & 'static str = "Windows.System.User";
      
    }unsafe impl::winrt::Interface for User {
      type Vtable = IUser_abi;
      const IID: ::winrt::Guid =  <IUser as::winrt::Interface>::IID;
      
    }unsafe impl::winrt::RuntimeType for User {
      type DefaultType =  ::std::option::Option<Self>;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.System.User;{df9a26c6-e746-4bcd-b5d4-120103c4209b})",);
      
    }impl::std::convert::From<User>for::winrt::Object {
      fn from(value:User) -> Self {
        value.0
      }
    }impl::std::convert::From<&User>for::winrt::Object {
      fn from(value: &User) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for User {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a User {
      fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
        ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
      }
    }impl::std::convert::From<User>for IUser {
      fn from(value:User) -> Self {
        unsafe {
          ::std::mem::transmute(value)
        }
      }
    }impl::std::convert::From<&User>for IUser {
      fn from(value: &User) -> Self {
        ::std::convert::From::from(::std::clone::Clone::clone(value))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IUser>>for User {
      fn into(self) ->  ::winrt::Param< 'a ,IUser>{
        ::winrt::Param::Owned(::std::convert::Into::<IUser>::into(self))
      }
    }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IUser>>for& 'a User {
      fn into(self) ->  ::winrt::Param< 'a ,IUser>{
        ::winrt::Param::Owned(::std::convert::Into::<IUser>::into(::std::clone::Clone::clone(self),))
      }
    }unsafe impl::std::marker::Send for User{}
    unsafe impl::std::marker::Sync for User{}
    #[allow(non_camel_case_types)]#[repr(transparent)]pub struct VirtualKey(i32);
    impl::std::convert::From<i32>for VirtualKey {
      fn from(value:i32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for VirtualKey {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for VirtualKey {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for VirtualKey {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for VirtualKey {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for VirtualKey{}
    impl::std::marker::Copy for VirtualKey{}
    impl VirtualKey {
      #![allow(non_upper_case_globals)]pub const None:Self = Self(0i32);
      pub const LeftButton:Self = Self(1i32);
      pub const RightButton:Self = Self(2i32);
      pub const Cancel:Self = Self(3i32);
      pub const MiddleButton:Self = Self(4i32);
      pub const XButton1:Self = Self(5i32);
      pub const XButton2:Self = Self(6i32);
      pub const Back:Self = Self(8i32);
      pub const Tab:Self = Self(9i32);
      pub const Clear:Self = Self(12i32);
      pub const Enter:Self = Self(13i32);
      pub const Shift:Self = Self(16i32);
      pub const Control:Self = Self(17i32);
      pub const Menu:Self = Self(18i32);
      pub const Pause:Self = Self(19i32);
      pub const CapitalLock:Self = Self(20i32);
      pub const Kana:Self = Self(21i32);
      pub const Hangul:Self = Self(21i32);
      pub const ImeOn:Self = Self(22i32);
      pub const Junja:Self = Self(23i32);
      pub const Final:Self = Self(24i32);
      pub const Hanja:Self = Self(25i32);
      pub const Kanji:Self = Self(25i32);
      pub const ImeOff:Self = Self(26i32);
      pub const Escape:Self = Self(27i32);
      pub const Convert:Self = Self(28i32);
      pub const NonConvert:Self = Self(29i32);
      pub const Accept:Self = Self(30i32);
      pub const ModeChange:Self = Self(31i32);
      pub const Space:Self = Self(32i32);
      pub const PageUp:Self = Self(33i32);
      pub const PageDown:Self = Self(34i32);
      pub const End:Self = Self(35i32);
      pub const Home:Self = Self(36i32);
      pub const Left:Self = Self(37i32);
      pub const Up:Self = Self(38i32);
      pub const Right:Self = Self(39i32);
      pub const Down:Self = Self(40i32);
      pub const Select:Self = Self(41i32);
      pub const Print:Self = Self(42i32);
      pub const Execute:Self = Self(43i32);
      pub const Snapshot:Self = Self(44i32);
      pub const Insert:Self = Self(45i32);
      pub const Delete:Self = Self(46i32);
      pub const Help:Self = Self(47i32);
      pub const Number0:Self = Self(48i32);
      pub const Number1:Self = Self(49i32);
      pub const Number2:Self = Self(50i32);
      pub const Number3:Self = Self(51i32);
      pub const Number4:Self = Self(52i32);
      pub const Number5:Self = Self(53i32);
      pub const Number6:Self = Self(54i32);
      pub const Number7:Self = Self(55i32);
      pub const Number8:Self = Self(56i32);
      pub const Number9:Self = Self(57i32);
      pub const A:Self = Self(65i32);
      pub const B:Self = Self(66i32);
      pub const C:Self = Self(67i32);
      pub const D:Self = Self(68i32);
      pub const E:Self = Self(69i32);
      pub const F:Self = Self(70i32);
      pub const G:Self = Self(71i32);
      pub const H:Self = Self(72i32);
      pub const I:Self = Self(73i32);
      pub const J:Self = Self(74i32);
      pub const K:Self = Self(75i32);
      pub const L:Self = Self(76i32);
      pub const M:Self = Self(77i32);
      pub const N:Self = Self(78i32);
      pub const O:Self = Self(79i32);
      pub const P:Self = Self(80i32);
      pub const Q:Self = Self(81i32);
      pub const R:Self = Self(82i32);
      pub const S:Self = Self(83i32);
      pub const T:Self = Self(84i32);
      pub const U:Self = Self(85i32);
      pub const V:Self = Self(86i32);
      pub const W:Self = Self(87i32);
      pub const X:Self = Self(88i32);
      pub const Y:Self = Self(89i32);
      pub const Z:Self = Self(90i32);
      pub const LeftWindows:Self = Self(91i32);
      pub const RightWindows:Self = Self(92i32);
      pub const Application:Self = Self(93i32);
      pub const Sleep:Self = Self(95i32);
      pub const NumberPad0:Self = Self(96i32);
      pub const NumberPad1:Self = Self(97i32);
      pub const NumberPad2:Self = Self(98i32);
      pub const NumberPad3:Self = Self(99i32);
      pub const NumberPad4:Self = Self(100i32);
      pub const NumberPad5:Self = Self(101i32);
      pub const NumberPad6:Self = Self(102i32);
      pub const NumberPad7:Self = Self(103i32);
      pub const NumberPad8:Self = Self(104i32);
      pub const NumberPad9:Self = Self(105i32);
      pub const Multiply:Self = Self(106i32);
      pub const Add:Self = Self(107i32);
      pub const Separator:Self = Self(108i32);
      pub const Subtract:Self = Self(109i32);
      pub const Decimal:Self = Self(110i32);
      pub const Divide:Self = Self(111i32);
      pub const F1:Self = Self(112i32);
      pub const F2:Self = Self(113i32);
      pub const F3:Self = Self(114i32);
      pub const F4:Self = Self(115i32);
      pub const F5:Self = Self(116i32);
      pub const F6:Self = Self(117i32);
      pub const F7:Self = Self(118i32);
      pub const F8:Self = Self(119i32);
      pub const F9:Self = Self(120i32);
      pub const F10:Self = Self(121i32);
      pub const F11:Self = Self(122i32);
      pub const F12:Self = Self(123i32);
      pub const F13:Self = Self(124i32);
      pub const F14:Self = Self(125i32);
      pub const F15:Self = Self(126i32);
      pub const F16:Self = Self(127i32);
      pub const F17:Self = Self(128i32);
      pub const F18:Self = Self(129i32);
      pub const F19:Self = Self(130i32);
      pub const F20:Self = Self(131i32);
      pub const F21:Self = Self(132i32);
      pub const F22:Self = Self(133i32);
      pub const F23:Self = Self(134i32);
      pub const F24:Self = Self(135i32);
      pub const NavigationView:Self = Self(136i32);
      pub const NavigationMenu:Self = Self(137i32);
      pub const NavigationUp:Self = Self(138i32);
      pub const NavigationDown:Self = Self(139i32);
      pub const NavigationLeft:Self = Self(140i32);
      pub const NavigationRight:Self = Self(141i32);
      pub const NavigationAccept:Self = Self(142i32);
      pub const NavigationCancel:Self = Self(143i32);
      pub const NumberKeyLock:Self = Self(144i32);
      pub const Scroll:Self = Self(145i32);
      pub const LeftShift:Self = Self(160i32);
      pub const RightShift:Self = Self(161i32);
      pub const LeftControl:Self = Self(162i32);
      pub const RightControl:Self = Self(163i32);
      pub const LeftMenu:Self = Self(164i32);
      pub const RightMenu:Self = Self(165i32);
      pub const GoBack:Self = Self(166i32);
      pub const GoForward:Self = Self(167i32);
      pub const Refresh:Self = Self(168i32);
      pub const Stop:Self = Self(169i32);
      pub const Search:Self = Self(170i32);
      pub const Favorites:Self = Self(171i32);
      pub const GoHome:Self = Self(172i32);
      pub const GamepadA:Self = Self(195i32);
      pub const GamepadB:Self = Self(196i32);
      pub const GamepadX:Self = Self(197i32);
      pub const GamepadY:Self = Self(198i32);
      pub const GamepadRightShoulder:Self = Self(199i32);
      pub const GamepadLeftShoulder:Self = Self(200i32);
      pub const GamepadLeftTrigger:Self = Self(201i32);
      pub const GamepadRightTrigger:Self = Self(202i32);
      pub const GamepadDPadUp:Self = Self(203i32);
      pub const GamepadDPadDown:Self = Self(204i32);
      pub const GamepadDPadLeft:Self = Self(205i32);
      pub const GamepadDPadRight:Self = Self(206i32);
      pub const GamepadMenu:Self = Self(207i32);
      pub const GamepadView:Self = Self(208i32);
      pub const GamepadLeftThumbstickButton:Self = Self(209i32);
      pub const GamepadRightThumbstickButton:Self = Self(210i32);
      pub const GamepadLeftThumbstickUp:Self = Self(211i32);
      pub const GamepadLeftThumbstickDown:Self = Self(212i32);
      pub const GamepadLeftThumbstickRight:Self = Self(213i32);
      pub const GamepadLeftThumbstickLeft:Self = Self(214i32);
      pub const GamepadRightThumbstickUp:Self = Self(215i32);
      pub const GamepadRightThumbstickDown:Self = Self(216i32);
      pub const GamepadRightThumbstickRight:Self = Self(217i32);
      pub const GamepadRightThumbstickLeft:Self = Self(218i32);
      
    }unsafe impl::winrt::Abi for VirtualKey {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for VirtualKey {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.System.VirtualKey;i4)");
      
    }#[allow(non_camel_case_types)]#[repr(transparent)]pub struct VirtualKeyModifiers(u32);
    impl::std::convert::From<u32>for VirtualKeyModifiers {
      fn from(value:u32) -> Self {
        Self(value)
      }
    }impl::std::clone::Clone for VirtualKeyModifiers {
      fn clone(&self) -> Self {
        Self(self.0)
      }
    }impl::std::default::Default for VirtualKeyModifiers {
      fn default() -> Self {
        Self(0)
      }
    }impl::std::fmt::Debug for VirtualKeyModifiers {
      fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        f.write_fmt(format_args!("{:?}", self.0))
      }
    }impl::std::cmp::PartialEq for VirtualKeyModifiers {
      fn eq(&self,other: &Self) -> bool {
        self.0==other.0
      }
    }impl::std::cmp::Eq for VirtualKeyModifiers{}
    impl::std::marker::Copy for VirtualKeyModifiers{}
    impl VirtualKeyModifiers {
      #![allow(non_upper_case_globals)]pub const None:Self = Self(0u32);
      pub const Control:Self = Self(1u32);
      pub const Menu:Self = Self(2u32);
      pub const Shift:Self = Self(4u32);
      pub const Windows:Self = Self(8u32);
      
    }unsafe impl::winrt::Abi for VirtualKeyModifiers {
      type Abi = Self;
      
    }unsafe impl::winrt::RuntimeType for VirtualKeyModifiers {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.System.VirtualKeyModifiers;u4)");
      
    }impl::std::ops::BitOr for VirtualKeyModifiers {
      type Output = Self;
      fn bitor(self,rhs:Self) -> Self {
        Self(self.0|rhs.0)
      }
    }impl::std::ops::BitAnd for VirtualKeyModifiers {
      type Output = Self;
      fn bitand(self,rhs:Self) -> Self {
        Self(self.0&rhs.0)
      }
    }
  }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod ui {
    #[repr(C)]#[allow(non_snake_case)]pub struct Color {
      pub a:u8,pub r:u8,pub g:u8,pub b:u8,
    }#[repr(C)]pub struct Color_abi(u8,u8,u8,u8);
    unsafe impl::winrt::Abi for Color {
      type Abi = Color_abi;
      
    }impl::std::default::Default for Color {
      fn default() -> Self {
        Self {
          a:0,r:0,g:0,b:0,
        }
      }
    }impl::std::fmt::Debug for Color {
      fn fmt(&self,fmt: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
        fmt.debug_struct("Color").field("a", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.a),std::fmt::Display::fmt),])).field("r", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.r),std::fmt::Display::fmt),])).field("g", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.g),std::fmt::Display::fmt),])).field("b", &std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(self.b),std::fmt::Display::fmt),])).finish()
      }
    }impl::std::clone::Clone for Color {
      fn clone(&self) -> Self {
        Self {
          a:self.a,r:self.r,g:self.g,b:self.b,
        }
      }
    }impl::std::cmp::PartialEq for Color {
      fn eq(&self,other: &Self) -> bool {
        self.a==other.a&&self.r==other.r&&self.g==other.g&&self.b==other.b
      }
    }impl::std::cmp::Eq for Color{}
    unsafe impl::winrt::RuntimeType for Color {
      type DefaultType = Self;
      const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"struct(Windows.UI.Color;u1;u1;u1;u1)");
      
    }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod popups {
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct Placement(i32);
      impl::std::convert::From<i32>for Placement {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for Placement {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for Placement {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for Placement {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for Placement {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for Placement{}
      impl::std::marker::Copy for Placement{}
      impl Placement {
        #![allow(non_upper_case_globals)]pub const Default:Self = Self(0i32);
        pub const Above:Self = Self(1i32);
        pub const Below:Self = Self(2i32);
        pub const Left:Self = Self(3i32);
        pub const Right:Self = Self(4i32);
        
      }unsafe impl::winrt::Abi for Placement {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for Placement {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.UI.Popups.Placement;i4)");
        
      }
    }#[allow(unused_variables)]#[allow(non_upper_case_globals)]pub mod window_management {
      #[allow(non_camel_case_types)]#[repr(transparent)]pub struct WindowingEnvironmentKind(i32);
      impl::std::convert::From<i32>for WindowingEnvironmentKind {
        fn from(value:i32) -> Self {
          Self(value)
        }
      }impl::std::clone::Clone for WindowingEnvironmentKind {
        fn clone(&self) -> Self {
          Self(self.0)
        }
      }impl::std::default::Default for WindowingEnvironmentKind {
        fn default() -> Self {
          Self(0)
        }
      }impl::std::fmt::Debug for WindowingEnvironmentKind {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for WindowingEnvironmentKind {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for WindowingEnvironmentKind{}
      impl::std::marker::Copy for WindowingEnvironmentKind{}
      impl WindowingEnvironmentKind {
        #![allow(non_upper_case_globals)]pub const Unknown:Self = Self(0i32);
        pub const Overlapped:Self = Self(1i32);
        pub const Tiled:Self = Self(2i32);
        
      }unsafe impl::winrt::Abi for WindowingEnvironmentKind {
        type Abi = Self;
        
      }unsafe impl::winrt::RuntimeType for WindowingEnvironmentKind {
        type DefaultType = Self;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"enum(Windows.UI.WindowManagement.WindowingEnvironmentKind;i4)",);
        
      }#[repr(transparent)]pub struct IWindowingEnvironmentChangedEventArgs(::winrt::Object);
      impl::std::clone::Clone for IWindowingEnvironmentChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IWindowingEnvironmentChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IWindowingEnvironmentChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IWindowingEnvironmentChangedEventArgs{}
      impl IWindowingEnvironmentChangedEventArgs{}
      unsafe impl::winrt::Interface for IWindowingEnvironmentChangedEventArgs {
        type Vtable = IWindowingEnvironmentChangedEventArgs_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(1096863686,573,24218,[180,49,53,14,103,220,151,138],);
        
      }#[repr(C)]pub struct IWindowingEnvironmentChangedEventArgs_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IWindowingEnvironmentChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{4160cfc6-023d-5e9a-b431-350e67dc978a}")
        };
        
      }impl::std::convert::From<IWindowingEnvironmentChangedEventArgs>for::winrt::Object {
        fn from(value:IWindowingEnvironmentChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&IWindowingEnvironmentChangedEventArgs>for::winrt::Object {
        fn from(value: &IWindowingEnvironmentChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IWindowingEnvironmentChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IWindowingEnvironmentChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct WindowingEnvironmentChangedEventArgs(::winrt::Object);
      impl WindowingEnvironmentChangedEventArgs{}
      impl::std::clone::Clone for WindowingEnvironmentChangedEventArgs {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for WindowingEnvironmentChangedEventArgs {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for WindowingEnvironmentChangedEventArgs{}
      impl::std::fmt::Debug for WindowingEnvironmentChangedEventArgs {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for WindowingEnvironmentChangedEventArgs {
        const NAME: & 'static str = "Windows.UI.WindowManagement.WindowingEnvironmentChangedEventArgs";
        
      }unsafe impl::winrt::Interface for WindowingEnvironmentChangedEventArgs {
        type Vtable = IWindowingEnvironmentChangedEventArgs_abi;
        const IID: ::winrt::Guid =  <IWindowingEnvironmentChangedEventArgs as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for WindowingEnvironmentChangedEventArgs {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.UI.WindowManagement.WindowingEnvironmentChangedEventArgs;{4160cfc6-023d-5e9a-b431-350e67dc978a})");
        
      }impl::std::convert::From<WindowingEnvironmentChangedEventArgs>for::winrt::Object {
        fn from(value:WindowingEnvironmentChangedEventArgs) -> Self {
          value.0
        }
      }impl::std::convert::From<&WindowingEnvironmentChangedEventArgs>for::winrt::Object {
        fn from(value: &WindowingEnvironmentChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for WindowingEnvironmentChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a WindowingEnvironmentChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<WindowingEnvironmentChangedEventArgs>for IWindowingEnvironmentChangedEventArgs {
        fn from(value:WindowingEnvironmentChangedEventArgs) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&WindowingEnvironmentChangedEventArgs>for IWindowingEnvironmentChangedEventArgs {
        fn from(value: &WindowingEnvironmentChangedEventArgs) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IWindowingEnvironmentChangedEventArgs>>for WindowingEnvironmentChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IWindowingEnvironmentChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IWindowingEnvironmentChangedEventArgs, >::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IWindowingEnvironmentChangedEventArgs>>for& 'a WindowingEnvironmentChangedEventArgs {
        fn into(self) ->  ::winrt::Param< 'a ,IWindowingEnvironmentChangedEventArgs>{
          ::winrt::Param::Owned(::std::convert::Into::<IWindowingEnvironmentChangedEventArgs, >::into(::std::clone::Clone::clone(self,)))
        }
      }unsafe impl::std::marker::Send for WindowingEnvironmentChangedEventArgs{}
      unsafe impl::std::marker::Sync for WindowingEnvironmentChangedEventArgs{}
      #[repr(transparent)]pub struct IWindowingEnvironment(::winrt::Object);
      impl::std::clone::Clone for IWindowingEnvironment {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IWindowingEnvironment {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IWindowingEnvironment {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IWindowingEnvironment{}
      impl IWindowingEnvironment {
        pub fn is_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn kind(&self) ->  ::winrt::Result<WindowingEnvironmentKind>{
          let this = self;
          unsafe {
            let mut result__: <WindowingEnvironmentKind as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<WindowingEnvironmentKind>(result__)
          }
        }pub fn get_display_regions(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<DisplayRegion>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<DisplayRegion, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <DisplayRegion> >(result__)
          }
        }pub fn changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<WindowingEnvironment,WindowingEnvironmentChangedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IWindowingEnvironment {
        type Vtable = IWindowingEnvironment_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(641950656,10825,21527,[179,174,72,167,28,99,163,189],);
        
      }#[repr(C)]pub struct IWindowingEnvironment_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut WindowingEnvironmentKind,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IWindowingEnvironment {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{264363c0-2a49-5417-b3ae-48a71c63a3bd}")
        };
        
      }impl::std::convert::From<IWindowingEnvironment>for::winrt::Object {
        fn from(value:IWindowingEnvironment) -> Self {
          value.0
        }
      }impl::std::convert::From<&IWindowingEnvironment>for::winrt::Object {
        fn from(value: &IWindowingEnvironment) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IWindowingEnvironment {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IWindowingEnvironment {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct IWindowingEnvironmentStatics(::winrt::Object);
      impl::std::clone::Clone for IWindowingEnvironmentStatics {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IWindowingEnvironmentStatics {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IWindowingEnvironmentStatics {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IWindowingEnvironmentStatics{}
      impl IWindowingEnvironmentStatics {
        pub fn find_all(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<WindowingEnvironment>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<WindowingEnvironment, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <WindowingEnvironment> >(result__)
          }
        }pub fn find_all_with_kind(&self,kind:WindowingEnvironmentKind,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<WindowingEnvironment>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<WindowingEnvironment, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),kind, &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <WindowingEnvironment> >(result__)
          }
        }
      }unsafe impl::winrt::Interface for IWindowingEnvironmentStatics {
        type Vtable = IWindowingEnvironmentStatics_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(2270076855,50754,21931,[138,162,22,47,115,74,154,114],);
        
      }#[repr(C)]pub struct IWindowingEnvironmentStatics_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,kind:WindowingEnvironmentKind,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IWindowingEnvironmentStatics {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{874e9fb7-c642-55ab-8aa2-162f734a9a72}")
        };
        
      }impl::std::convert::From<IWindowingEnvironmentStatics>for::winrt::Object {
        fn from(value:IWindowingEnvironmentStatics) -> Self {
          value.0
        }
      }impl::std::convert::From<&IWindowingEnvironmentStatics>for::winrt::Object {
        fn from(value: &IWindowingEnvironmentStatics) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IWindowingEnvironmentStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IWindowingEnvironmentStatics {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct WindowingEnvironment(::winrt::Object);
      impl WindowingEnvironment {
        pub fn is_enabled(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn kind(&self) ->  ::winrt::Result<WindowingEnvironmentKind>{
          let this = self;
          unsafe {
            let mut result__: <WindowingEnvironmentKind as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<WindowingEnvironmentKind>(result__)
          }
        }pub fn get_display_regions(&self,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<DisplayRegion>, >{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<DisplayRegion, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <DisplayRegion> >(result__)
          }
        }pub fn changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<WindowingEnvironment,WindowingEnvironmentChangedEventArgs, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }pub fn find_all() ->  ::winrt::Result<super::super::foundation::collections::IVectorView<WindowingEnvironment>, >{
          Self::IWindowingEnvironmentStatics(|this|unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<WindowingEnvironment, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <WindowingEnvironment> >(result__)
          })
        }pub fn find_all_with_kind(kind:WindowingEnvironmentKind,) ->  ::winrt::Result<super::super::foundation::collections::IVectorView<WindowingEnvironment>, >{
          Self::IWindowingEnvironmentStatics(|this|unsafe {
            let mut result__: <super::super::foundation::collections::IVectorView<WindowingEnvironment, >as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this),kind, &mut result__).from_abi:: <super::super::foundation::collections::IVectorView:: <WindowingEnvironment> >(result__)
          })
        }#[allow(non_snake_case)]fn IWindowingEnvironmentStatics<R,F:FnOnce(&IWindowingEnvironmentStatics) ->  ::winrt::Result<R>, >(callback:F,) ->  ::winrt::Result<R>{
          static mut SHARED: ::winrt::FactoryCache<WindowingEnvironment,IWindowingEnvironmentStatics, >  =  ::winrt::FactoryCache::new();
          unsafe {
            SHARED.call(callback)
          }
        }
      }impl::std::clone::Clone for WindowingEnvironment {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for WindowingEnvironment {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for WindowingEnvironment{}
      impl::std::fmt::Debug for WindowingEnvironment {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for WindowingEnvironment {
        const NAME: & 'static str = "Windows.UI.WindowManagement.WindowingEnvironment";
        
      }unsafe impl::winrt::Interface for WindowingEnvironment {
        type Vtable = IWindowingEnvironment_abi;
        const IID: ::winrt::Guid =  <IWindowingEnvironment as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for WindowingEnvironment {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.UI.WindowManagement.WindowingEnvironment;{264363c0-2a49-5417-b3ae-48a71c63a3bd})");
        
      }impl::std::convert::From<WindowingEnvironment>for::winrt::Object {
        fn from(value:WindowingEnvironment) -> Self {
          value.0
        }
      }impl::std::convert::From<&WindowingEnvironment>for::winrt::Object {
        fn from(value: &WindowingEnvironment) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for WindowingEnvironment {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a WindowingEnvironment {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<WindowingEnvironment>for IWindowingEnvironment {
        fn from(value:WindowingEnvironment) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&WindowingEnvironment>for IWindowingEnvironment {
        fn from(value: &WindowingEnvironment) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IWindowingEnvironment>>for WindowingEnvironment {
        fn into(self) ->  ::winrt::Param< 'a ,IWindowingEnvironment>{
          ::winrt::Param::Owned(::std::convert::Into::<IWindowingEnvironment>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IWindowingEnvironment>>for& 'a WindowingEnvironment {
        fn into(self) ->  ::winrt::Param< 'a ,IWindowingEnvironment>{
          ::winrt::Param::Owned(::std::convert::Into::<IWindowingEnvironment>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for WindowingEnvironment{}
      unsafe impl::std::marker::Sync for WindowingEnvironment{}
      #[repr(transparent)]pub struct IDisplayRegion(::winrt::Object);
      impl::std::clone::Clone for IDisplayRegion {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::fmt::Debug for IDisplayRegion {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::std::cmp::PartialEq for IDisplayRegion {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for IDisplayRegion{}
      impl IDisplayRegion {
        pub fn display_monitor_device_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn is_visible(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn work_area_offset(&self) ->  ::winrt::Result<super::super::foundation::Point>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Point as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::Point>(result__)
          }
        }pub fn work_area_size(&self) ->  ::winrt::Result<super::super::foundation::Size>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Size as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::Size>(result__)
          }
        }pub fn windowing_environment(&self) ->  ::winrt::Result<WindowingEnvironment>{
          let this = self;
          unsafe {
            let mut result__: <WindowingEnvironment as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<WindowingEnvironment>(result__)
          }
        }pub fn changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DisplayRegion, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }unsafe impl::winrt::Interface for IDisplayRegion {
        type Vtable = IDisplayRegion_abi;
        const IID: ::winrt::Guid =  ::winrt::Guid::from_values(3679503266,16532,24391,[140,177,234,1,221,175,170,148],);
        
      }#[repr(C)]pub struct IDisplayRegion_abi(pub unsafe extern "system" fn(this: ::winrt::RawPtr,iid: &::winrt::Guid,interface: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr) -> u32,pub unsafe extern "system" fn(this: ::winrt::RawPtr,count: *mut u32,values: *mut*mut::winrt::Guid,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,value: *mut i32,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut bool,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::Point_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut super::super::foundation::Size_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,result__: *mut::winrt::RawPtr,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,handler: ::winrt::RawPtr,result__: *mut super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,pub unsafe extern "system" fn(this: ::winrt::RawPtr,token:super::super::foundation::EventRegistrationToken_abi,) ->  ::winrt::ErrorCode,);
      unsafe impl::winrt::RuntimeType for IDisplayRegion {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer = {
          ::winrt::ConstBuffer::from_slice(b"{db50c3a2-4094-5f47-8cb1-ea01ddafaa94}")
        };
        
      }impl::std::convert::From<IDisplayRegion>for::winrt::Object {
        fn from(value:IDisplayRegion) -> Self {
          value.0
        }
      }impl::std::convert::From<&IDisplayRegion>for::winrt::Object {
        fn from(value: &IDisplayRegion) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for IDisplayRegion {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a IDisplayRegion {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }#[repr(transparent)]pub struct DisplayRegion(::winrt::Object);
      impl DisplayRegion {
        pub fn display_monitor_device_id(&self) ->  ::winrt::Result<::winrt::HString>{
          let this = self;
          unsafe {
            let mut result__: <::winrt::HString as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).6)(::winrt::Abi::abi(this), &mut result__).from_abi::<::winrt::HString>(result__)
          }
        }pub fn is_visible(&self) ->  ::winrt::Result<bool>{
          let this = self;
          unsafe {
            let mut result__: <bool as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).7)(::winrt::Abi::abi(this), &mut result__).from_abi::<bool>(result__)
          }
        }pub fn work_area_offset(&self) ->  ::winrt::Result<super::super::foundation::Point>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Point as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).8)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::Point>(result__)
          }
        }pub fn work_area_size(&self) ->  ::winrt::Result<super::super::foundation::Size>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::Size as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).9)(::winrt::Abi::abi(this), &mut result__).from_abi::<super::super::foundation::Size>(result__)
          }
        }pub fn windowing_environment(&self) ->  ::winrt::Result<WindowingEnvironment>{
          let this = self;
          unsafe {
            let mut result__: <WindowingEnvironment as::winrt::Abi>::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).10)(::winrt::Abi::abi(this), &mut result__,).from_abi::<WindowingEnvironment>(result__)
          }
        }pub fn changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::TypedEventHandler<DisplayRegion, ::winrt::Object, >, >, >, >(&self,handler:T0__,) ->  ::winrt::Result<super::super::foundation::EventRegistrationToken>{
          let this = self;
          unsafe {
            let mut result__: <super::super::foundation::EventRegistrationToken as::winrt::Abi> ::Abi =  ::std::mem::zeroed();
            (::winrt::Interface::vtable(this).11)(::winrt::Abi::abi(this),handler.into().abi(), &mut result__,).from_abi::<super::super::foundation::EventRegistrationToken>(result__)
          }
        }pub fn remove_changed< 'a ,T0__: ::std::convert::Into< ::winrt::Param< 'a ,super::super::foundation::EventRegistrationToken>, >, >(&self,token:T0__,) ->  ::winrt::Result<()>{
          let this = self;
          unsafe {
            (::winrt::Interface::vtable(this).12)(::winrt::Abi::abi(this),token.into().abi(),).ok()
          }
        }
      }impl::std::clone::Clone for DisplayRegion {
        fn clone(&self) -> Self {
          Self(self.0.clone())
        }
      }impl::std::cmp::PartialEq for DisplayRegion {
        fn eq(&self,other: &Self) -> bool {
          self.0==other.0
        }
      }impl::std::cmp::Eq for DisplayRegion{}
      impl::std::fmt::Debug for DisplayRegion {
        fn fmt(&self,f: &mut::std::fmt::Formatter< '_>) ->  ::std::fmt::Result {
          f.write_fmt(format_args!("{:?}", self.0))
        }
      }impl::winrt::RuntimeName for DisplayRegion {
        const NAME: & 'static str = "Windows.UI.WindowManagement.DisplayRegion";
        
      }unsafe impl::winrt::Interface for DisplayRegion {
        type Vtable = IDisplayRegion_abi;
        const IID: ::winrt::Guid =  <IDisplayRegion as::winrt::Interface>::IID;
        
      }unsafe impl::winrt::RuntimeType for DisplayRegion {
        type DefaultType =  ::std::option::Option<Self>;
        const SIGNATURE: ::winrt::ConstBuffer =  ::winrt::ConstBuffer::from_slice(b"rc(Windows.UI.WindowManagement.DisplayRegion;{db50c3a2-4094-5f47-8cb1-ea01ddafaa94})");
        
      }impl::std::convert::From<DisplayRegion>for::winrt::Object {
        fn from(value:DisplayRegion) -> Self {
          value.0
        }
      }impl::std::convert::From<&DisplayRegion>for::winrt::Object {
        fn from(value: &DisplayRegion) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for DisplayRegion {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a , ::winrt::Object>>for& 'a DisplayRegion {
        fn into(self) ->  ::winrt::Param< 'a , ::winrt::Object>{
          ::winrt::Param::Owned(::std::convert::Into::<::winrt::Object>::into(::std::clone::Clone::clone(self),))
        }
      }impl::std::convert::From<DisplayRegion>for IDisplayRegion {
        fn from(value:DisplayRegion) -> Self {
          unsafe {
            ::std::mem::transmute(value)
          }
        }
      }impl::std::convert::From<&DisplayRegion>for IDisplayRegion {
        fn from(value: &DisplayRegion) -> Self {
          ::std::convert::From::from(::std::clone::Clone::clone(value))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDisplayRegion>>for DisplayRegion {
        fn into(self) ->  ::winrt::Param< 'a ,IDisplayRegion>{
          ::winrt::Param::Owned(::std::convert::Into::<IDisplayRegion>::into(self))
        }
      }impl< 'a > ::std::convert::Into<::winrt::Param< 'a ,IDisplayRegion>>for& 'a DisplayRegion {
        fn into(self) ->  ::winrt::Param< 'a ,IDisplayRegion>{
          ::winrt::Param::Owned(::std::convert::Into::<IDisplayRegion>::into(::std::clone::Clone::clone(self),))
        }
      }unsafe impl::std::marker::Send for DisplayRegion{}
      unsafe impl::std::marker::Sync for DisplayRegion{}
      
    }
  }pub use winrt::foundation;
  
}
